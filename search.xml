<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue中Watch和Computed的差异</title>
    <url>/2020/05/Vue%E4%B8%ADWatch%E5%92%8CComputed%E7%9A%84%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<p>计算属性 vs 监听器</p>
<a id="more"></a>

<h1 id="语境上的差异"><a href="#语境上的差异" class="headerlink" title="语境上的差异"></a>语境上的差异</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个值变化了，我要做些事情，适合一个值影响多个值的情形</span></span><br><span class="line">watch:&#123;</span><br><span class="line">    firstname(newval,oldval)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fullname = <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;,</span><br><span class="line">    lastname(newval,oldval)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fullname = <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个值由其他值得来，这些值变化了我也要变，适合多个值影响一个值的情形</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    fullname()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计算属性有缓存性"><a href="#计算属性有缓存性" class="headerlink" title="计算属性有缓存性"></a>计算属性有缓存性</h1><p>计算所得的值如果没有变化不会重复执行</p>
<h1 id="监听器选项"><a href="#监听器选项" class="headerlink" title="监听器选项"></a>监听器选项</h1><p>监听器选项提供了更通用的方法，适合执行异步操作或者较大开销操作的情况</p>
<p><a href="https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8" target="_blank" rel="noopener">点击查看范例</a></p>
<p>我们可以在范例中看到，在created的时候将我们要发送的请求做了一次防抖处理的封装，输入停止500毫秒后才会触发，这样就可以很有效的控制请求的频率</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>日常工作中的git高频命令</p>
<a id="more"></a>
<h2 id="日常工作中常用的几条git命令"><a href="#日常工作中常用的几条git命令" class="headerlink" title="日常工作中常用的几条git命令"></a>日常工作中常用的几条git命令</h2><ol>
<li><p>查看所有本地分支和远程分支</p>
<p> <code>git branch -a</code></p>
</li>
<li><p>下载一个项目和它的整个代码历史</p>
<p> <code>git clone [url]</code></p>
</li>
<li><p>列出所有远程分支</p>
<p> <code>git branch -r</code></p>
</li>
<li><p>切换到指定分支</p>
<p> <code>git checkout [branch-name]</code></p>
</li>
<li><p>合并指定分支到当前分支</p>
<p> <code>git merge [branch]</code></p>
</li>
<li><p>新建一个分支，但依然停留在当前分支</p>
<p> <code>git branch [branch-name]</code></p>
</li>
<li><p>新建一个分支，并切换到该分支</p>
<p> <code>git checkout -b [branch]</code></p>
</li>
<li><p>显示所有远程仓库</p>
<p> <code>git remote -v</code></p>
</li>
<li><p>取回远程仓库的变化</p>
<p> <code>git pull</code></p>
</li>
<li><p>添加当前目录的所有文件到暂存区</p>
<p><code>git add .</code></p>
</li>
<li><p>提交暂存区到仓库区</p>
<p><code>git commit -m [message]</code></p>
</li>
<li><p>上传本地代码到远程仓库</p>
<p><code>git push</code></p>
</li>
<li><p>提交本地分支到远程仓库</p>
<p><code>git push origin 本地分支名</code></p>
</li>
<li><p>删除远程分支</p>
<p><code>git push --delete origin 分支名</code></p>
</li>
<li><p>更新远程分支列表</p>
<p><code>git remote update origin -p</code></p>
</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo简单使用说明</title>
    <url>/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="一些使用hexo常用的命令"><a href="#一些使用hexo常用的命令" class="headerlink" title="一些使用hexo常用的命令"></a>一些使用hexo常用的命令</h1><a id="more"></a>


<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">"博客名称"</span>  =&gt; hexo new <span class="string">"博客名称"</span>   <span class="comment">#这两个都是创建新文章，前者是简写模式</span></span><br><span class="line">hexo p  =&gt; hexo publish</span><br><span class="line">hexo g  =&gt; hexo generate  <span class="comment">#生成</span></span><br><span class="line">hexo s  =&gt; hexo server  <span class="comment">#启动服务预览</span></span><br><span class="line">hexo clean  //清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo d  =&gt; hexo deploy  <span class="comment">#部署</span></span><br><span class="line">hexo publish [layout] &lt;title&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 引入图片</span></span><br><span class="line">``` bash</span><br><span class="line">![图片alt](图片地址 <span class="string">''</span>图片title<span class="string">''</span>)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line">例如</span><br><span class="line">![百度](https://www.baidu.com/img/flexible/logo/pc/result@2.png)</span><br><span class="line">或者</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_img result@2.png [title] %&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://www.baidu.com/img/flexible/logo/pc/result@2.png" alt="第一种"></p>
<img src="/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/result@2.png" class="" title="[第二种]">




<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">"超链接title"</span>)</span><br><span class="line">例如</span><br><span class="line">[简书](http://jianshu.com)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用符号<code>-</code></p>
<ul>
<li>第一个</li>
<li>第二个<br>。。。。。。</li>
</ul>
<h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**需要加粗的内容**</span><br></pre></td></tr></table></figure>
<p><strong>需要加粗的内容</strong></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; 内容</span><br><span class="line">&gt;&gt; 内容</span><br><span class="line">&gt;&gt;&gt; 内容</span><br></pre></td></tr></table></figure>
<blockquote>
<p>内容</p>
<blockquote>
<p>内容</p>
<blockquote>
<p>内容</p>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>不好好工作会怎么样呢</title>
    <url>/2020/05/%E4%B8%8D%E5%A5%BD%E5%A5%BD%E5%B7%A5%E4%BD%9C%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%E5%91%A2/</url>
    <content><![CDATA[<p>经常看到有人抱怨工作辛苦</p>
<p>那么当你看完这个，还会继续抱怨吗</p>
<a id="more"></a>




<video src='1.mp4 ' type='video/mp4' controls='controls'  width='100%' height='100%'>
</video>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始手撸vue源码</title>
    <url>/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>本文用于记录学习vue源码的过程</p>
<a id="more"></a>
<p>简介<br>本文主要为学习B站 <a href="https://www.bilibili.com/video/BV1HE411L7fM" target="_blank" rel="noopener">前端铁蛋-手写vue框架</a> 的学习笔记</p>
<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>首先，利用webpack构建项目</p>
<ol>
<li><p>初始化项目</p>
<p> <code>npm init -y</code></p>
</li>
<li><p>安装webpack</p>
<p> <code>npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save</code></p>
</li>
<li><p>配置webpack</p>
<p> 根目录创建webpack.config.js文件</p>
<p> 配置代码如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">"source-map"</span>, <span class="comment">//调试的时候可以快速找到源码</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">//更改模块的查找方式</span></span><br><span class="line">        modules: [path.resolve(__dirname, <span class="string">'source'</span>), path.resolve(<span class="string">'node_modules'</span>)]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'public/index.html'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li><p>新建source文件夹用于后期存放资源</p>
</li>
<li><p>新建public文件夹</p>
<p> 创建index.html文件并生成h5代码</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改packjson.json配置</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "webpack-dev-server",</span><br><span class="line">    "build": "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>命令行输入</p>
<p> <code>npm start //启动</code> </p>
</li>
</ol>
<h1 id="二、数据代理"><a href="#二、数据代理" class="headerlink" title="二、数据代理"></a>二、数据代理</h1><ol>
<li><p>创建构造函数并初始化用户传入的参数(我们先假设用户传入的只有el、data)</p>
<p> 在source文件夹新建vue文件夹并添加index.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;initstate&#125; <span class="keyword">from</span> <span class="string">'./Observe'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123; <span class="comment">//vue中传入参数</span></span><br><span class="line">    <span class="comment">//初始化用户传入的选项</span></span><br><span class="line">    <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span></span><br><span class="line">    vm.$options = options</span><br><span class="line">    <span class="comment">//重新初始化状态 data computed watch</span></span><br><span class="line">    initstate(vm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure></li>
<li><p>vue文件夹中新建Observe并添加index.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Observe <span class="keyword">from</span> <span class="string">'./observe'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initstate</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做不同的初始化工作</span></span><br><span class="line">    <span class="keyword">let</span> opts = vm.$options</span><br><span class="line">    <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">        initData(vm)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断data是不是对象 不是就return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> data!==<span class="string">'object'</span>||data==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是对象则new一个Observe对象来使这个data 实现数据监听</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observe(data) <span class="comment">//观察数据的业务逻辑放在这里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户传入的data</span></span><br><span class="line">    <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">    <span class="comment">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class="line">    data=vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class="line">    <span class="comment">//观察数据</span></span><br><span class="line">    observe(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Observe文件夹下新建observe.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"."</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123; <span class="comment">//data就是vue中我们定义的data vm._data</span></span><br><span class="line">        <span class="comment">//将用户的数据使用defineProperty定义</span></span><br><span class="line">        <span class="keyword">this</span>.walk(data)</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> key = keys[i] <span class="comment">//获取所有的key</span></span><br><span class="line">            <span class="keyword">let</span> value = data[keys[i]] <span class="comment">//所有的value</span></span><br><span class="line">            defineReactive(data, key, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//观察value是不是对象 然后监听  如果是一个对象 递归监听</span></span><br><span class="line">    observe(value)</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="keyword">if</span>(newval===value) <span class="keyword">return</span></span><br><span class="line">            <span class="comment">//有可能设置的时候也是一个对象</span></span><br><span class="line">            observe(newval)</span><br><span class="line">            value = newval</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Observe</span><br></pre></td></tr></table></figure></li>
<li><p>这时我们回到src/index.js 引入vue并初始化vue对象</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认  source/vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>  </span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            msg:<span class="string">'hello'</span>,</span><br><span class="line">            haha:&#123;</span><br><span class="line">                a:<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>修改一下data中某个属性的值，看一下效果</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm._data.msg=<span class="string">'Joker 666'</span></span><br><span class="line"><span class="built_in">console</span>.log(vm)</span><br></pre></td></tr></table></figure>
 <img src="/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/2-1.png" class="" title="[这边我们可以看到msg已经发生了变化]">
</li>
<li><p>实现数据代理</p>
<p> 我们在使用vue的时候，获取data属性时一般都是通过this.xxx获取，而我们上面只实现了通过this._data.xxx,所以我们要编写一个proxy方法，将传入的数据直接挂载到vm上</p>
<p> 在 source/Observe/index.js 文件中新增proxy方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">vm, source, key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> vm[source][key]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="keyword">return</span> vm[source][key]=newval</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 修改initData()</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户传入的data</span></span><br><span class="line">    <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">    <span class="comment">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class="line">    data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class="line">    <span class="comment">//其实是vm._data代理了vm的操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        proxy(vm, <span class="string">"_data"</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//观察数据</span></span><br><span class="line">    observe(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 实现的原理其实非常简单，实际上就是在我们想要获取this.data时，其实去获取this._data</p>
</li>
</ol>
<pre><code>至此，我们已经实现了数据监听，但是还有个问题，Object.defineProperty是无法监听数组的变化的(面试需要注意)</code></pre><h1 id="三、重写数组方法"><a href="#三、重写数组方法" class="headerlink" title="三、重写数组方法"></a>三、重写数组方法</h1><p> 我们常用的改变数组的方法有以下几种<br>    <code>[&#39;push&#39;,&#39;shift&#39;,&#39;unshift&#39;,&#39;pop&#39;,&#39;reverse&#39;,&#39;sort&#39;,&#39;splice&#39;]</code></p>
<pre><code>我们企图往数组arr中添加值，结果发现新添加进去的值是没办法被监听到的，因此，我们需要改写push等方法    

基本思路就是之前我们调用push方法时，是从Aarray.prototype寻找这个方法，我们改成用一个空对象{}继承Array.prototype，然后再给空对象添加push方法
我们在source/vue/Observe下新增array.js文件
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数组原型上的方法</span></span><br><span class="line"><span class="keyword">let</span> oldArrayProtoMethods = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">//复制一份  然后改新的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> arrayMethods = <span class="built_in">Object</span>.create(oldArrayProtoMethods)</span><br><span class="line"><span class="comment">//修改的方法</span></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">'push'</span>, <span class="string">'shift'</span>, <span class="string">'unshift'</span>, <span class="string">'pop'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>, <span class="string">'splice'</span>]</span><br><span class="line">methods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    arrayMethods[method] = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//不光要返回新的数组方法  还要执行监听</span></span><br><span class="line">        <span class="keyword">let</span> res = oldArrayProtoMethods[method].apply(<span class="keyword">this</span>, arg)</span><br><span class="line">        <span class="comment">//实现新增属性的监听</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'实现了监听数组属性的变化'</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
我们在用户数据传入Observe中接收监听的时候需要区分data是数组还是对象，如果是数组，则改变数组的原型链
修改source/vue/Observe/observe.js中的代码
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123; <span class="comment">//data就是vue中我们定义的data vm._data</span></span><br><span class="line">        <span class="comment">//将用户的数据使用defineProperty定义</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">            data.__proto__ = arrayMethods</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.walk(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> key = keys[i] <span class="comment">//获取所有的key</span></span><br><span class="line">            <span class="keyword">let</span> value = data[keys[i]] <span class="comment">//所有的value</span></span><br><span class="line">            defineReactive(data, key, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
执行以下代码

`vm.arr.push(4)`

然后在控制台可以看到我们成功修改了数组
{% asset_img 3-1.png [这边我们可以看到arr已经发生了变化] %}</code></pre><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>未完待续。。。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue中使用graphql</title>
    <url>/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/</url>
    <content><![CDATA[<p>记录在vue中使用graphql踩过的坑</p>
<a id="more"></a>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>首先我们保证已经有了一个vue项目，输入以下命令</p>
<p><code>npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag</code></p>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>创建apollo.js并输入以下代码</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApolloClient &#125; <span class="keyword">from</span> <span class="string">'apollo-client'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createHttpLink &#125; <span class="keyword">from</span> <span class="string">'apollo-link-http'</span></span><br><span class="line"><span class="keyword">import</span> &#123; InMemoryCache &#125; <span class="keyword">from</span> <span class="string">'apollo-cache-inmemory'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ApolloLink&#125; <span class="keyword">from</span> <span class="string">'apollo-link'</span></span><br><span class="line"><span class="comment">// 与 API 的 HTTP 连接</span></span><br><span class="line"><span class="keyword">const</span> httpLink = createHttpLink(&#123;</span><br><span class="line">  <span class="comment">// 你需要在这里使用绝对路径</span></span><br><span class="line">  uri: process.env.VUE_APP_BASEURL + <span class="string">'graphql'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> middlewareLink = <span class="keyword">new</span> ApolloLink(<span class="function">(<span class="params">operation, forward</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="string">''</span>;</span><br><span class="line">  <span class="comment">//配置token验证</span></span><br><span class="line">  <span class="keyword">let</span> api_token = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'api_token'</span>)!)</span><br><span class="line">  <span class="keyword">if</span> (api_token) &#123;</span><br><span class="line">      token = api_token</span><br><span class="line">  &#125;</span><br><span class="line">  operation.setContext(&#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">          Authorization: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span> || <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> forward(operation)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 缓存实现</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> InMemoryCache()</span><br><span class="line"><span class="comment">// 创建 apollo 客户端</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apolloClient = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  link: middlewareLink.concat(httpLink),</span><br><span class="line">  cache,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后在main.js中引入</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> apollo <span class="keyword">from</span> <span class="string">'./plugins/apollo'</span></span><br><span class="line"><span class="keyword">import</span> VueApollo <span class="keyword">from</span> <span class="string">'vue-apollo'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueApollo)</span><br><span class="line"><span class="keyword">const</span> apolloProvider = <span class="keyword">new</span> VueApollo(&#123;</span><br><span class="line">  defaultClient: apollo.apolloClient,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用 apolloProvider 选项将它添加到你的应用程序</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  vuetify,</span><br><span class="line">  i18n,</span><br><span class="line">  store,</span><br><span class="line">  apolloProvider,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在我们需要使用graphql的页面引入<code>gql</code></p>
<p><code>import gql from &#39;graphql-tag&#39;</code></p>
<p>然后创建一个js文件<code>query.js</code>用来编写查询语句，并在我们使用graphql的页面引入</p>
<p><code>import * as sql from &#39;./query&#39;</code></p>
<p>在<code>query.js</code>中添加查询代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span> <span class="string">'graphql-tag'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> report1 = gql <span class="string">`query($id: ID!)&#123;</span></span><br><span class="line"><span class="string">     contracts(first:10,id:$id)&#123;</span></span><br><span class="line"><span class="string">        data&#123;</span></span><br><span class="line"><span class="string">            id</span></span><br><span class="line"><span class="string">            address</span></span><br><span class="line"><span class="string">            contract_no</span></span><br><span class="line"><span class="string">            order&#123;</span></span><br><span class="line"><span class="string">                contract_id</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure>

<p>然后回到我们需要使用apollo的页面，使用如下方法进行查询</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$apollo.query(&#123;</span><br><span class="line">          query: sql.report1,</span><br><span class="line">          variables: &#123;</span><br><span class="line">            id: <span class="number">195</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          fetchPolicy:<span class="string">"no-cache"</span>,<span class="comment">//禁止缓存</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<img src="/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/1.png" class="" title="[如图，我们便得到了查询结果]">

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>graphql</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取豆瓣电影top250</title>
    <url>/2020/05/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top250/</url>
    <content><![CDATA[<p>记录使用python爬取豆瓣</p>
<a id="more"></a>



<h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import xlwt</span><br><span class="line"></span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>, style_compression=0)</span><br><span class="line">sheet = book.add_sheet(<span class="string">'豆瓣电影Top250'</span>)</span><br><span class="line">sheet.write(0, 0, <span class="string">'名称'</span>)</span><br><span class="line">sheet.write(0, 1, <span class="string">'图片'</span>)</span><br><span class="line">sheet.write(0, 2, <span class="string">'排名'</span>)</span><br><span class="line">sheet.write(0, 3, <span class="string">'评分'</span>)</span><br><span class="line">sheet.write(0, 4, <span class="string">'作者'</span>)</span><br><span class="line">sheet.write(0, 5, <span class="string">'简介'</span>)</span><br><span class="line"></span><br><span class="line">n = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(page):</span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start='</span> + str(page * 25) + <span class="string">'&amp;filter='</span></span><br><span class="line">    html = request_douban(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    list = soup.find(class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        item_name = item.find(class_=<span class="string">'title'</span>).string</span><br><span class="line">        item_img = item.find(<span class="string">'a'</span>).find(<span class="string">'img'</span>).get(<span class="string">'src'</span>)</span><br><span class="line">        item_index = item.find(class_=<span class="string">''</span>).string</span><br><span class="line">        item_score = item.find(class_=<span class="string">'rating_num'</span>).string</span><br><span class="line">        item_author = item.find(<span class="string">'p'</span>).text</span><br><span class="line">        <span class="keyword">if</span> item.find(class_=<span class="string">'inq'</span>) is not None:</span><br><span class="line">            item_intr = item.find(class_=<span class="string">'inq'</span>).string</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'爬取电影：'</span> + item_index + <span class="string">' | '</span> + item_name + <span class="string">' | '</span> + item_score + <span class="string">' | '</span> + item_intr)</span><br><span class="line"></span><br><span class="line">        global n</span><br><span class="line">        sheet.write(n, 0, item_name)</span><br><span class="line">        sheet.write(n, 1, item_img)</span><br><span class="line">        sheet.write(n, 2, item_index)</span><br><span class="line">        sheet.write(n, 3, item_score)</span><br><span class="line">        sheet.write(n, 4, item_author)</span><br><span class="line">        sheet.write(n, 5, item_intr)</span><br><span class="line">        n = n + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def request_douban(url):</span><br><span class="line">    maxTryNum = 20</span><br><span class="line">    <span class="keyword">for</span> tries <span class="keyword">in</span> range(maxTryNum):</span><br><span class="line">        try:</span><br><span class="line">            kv = &#123;<span class="string">"user-agent"</span>: <span class="string">"Mizilla/5.0"</span>&#125;</span><br><span class="line">            response = requests.get(url, headers=kv, timeout=60)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">                <span class="built_in">return</span> response.text</span><br><span class="line">        except requests.RequestException:</span><br><span class="line">            <span class="keyword">if</span> tries &lt; (maxTryNum - 1):</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Has tried %d times to access url %s, all failed!"</span> % (maxTryNum, url))</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0, 10):</span><br><span class="line">        main(i)</span><br><span class="line"></span><br><span class="line">    book.save(<span class="string">'豆瓣最受欢迎的250部电影.xls'</span>)</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中路由守卫</title>
    <url>/2020/06/Vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/</url>
    <content><![CDATA[<p>Vue中路由守卫的详细用法</p>
<a id="more"></a>

<h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p><code>vue-router</code> 提供的导航守卫主要是用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局，单个路由独享，或者组件级</p>
<h2 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//to:Route:即将要进入的目标，路由对象</span></span><br><span class="line">    <span class="comment">//from:Route:当前导航正要离开的路由</span></span><br><span class="line">    <span class="comment">//next:Function:一定要调用该方法来 resolve 这个钩子 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home.vue'</span>),</span><br><span class="line">        meta: &#123;</span><br><span class="line">            auth: <span class="literal">true</span><span class="comment">//限制home要登录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/login.vue'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判断路由是否需要守卫</span></span><br><span class="line">    <span class="comment">//meta数据</span></span><br><span class="line">    <span class="keyword">if</span>(to.meta.auth)&#123;</span><br><span class="line">        <span class="comment">//是否登录</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">            next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="单个路由守卫"><a href="#单个路由守卫" class="headerlink" title="单个路由守卫"></a>单个路由守卫</h2><p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home.vue'</span>),</span><br><span class="line">        meta: &#123;</span><br><span class="line">            auth: <span class="literal">true</span><span class="comment">//限制home要登录</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeEnter(to,<span class="keyword">from</span>,next)&#123;</span><br><span class="line">            <span class="comment">//是否登录</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">                next()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">                next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h2><p>可以在路由组件内直接定义以下导航守卫</p>
<ul>
<li>beforeRouteEnter</li>
<li>beforeRouteUpdate</li>
<li>beforeRouteLeave</li>
</ul>
<p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//About.vue</span></span><br><span class="line">mounted()&#123;...&#125;,</span><br><span class="line">methods:&#123;...&#125;,</span><br><span class="line">beforeRouteEnter(to,<span class="keyword">from</span>,next)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">            next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">        next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>通过router.addRoutes(routes)方式动态添加路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局守卫修改为：要求用户必须登录，否则只能去登录页</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.isLogin) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next(<span class="string">'/'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next(<span class="string">'/login?redirect='</span> + to.fullPath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Login.vue用户登录成功后动态添加/about</span></span><br><span class="line">login() &#123;</span><br><span class="line">    <span class="built_in">window</span>.isLogin = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.$router.addRoutes([</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">"/about"</span>, <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="keyword">this</span>.$route.query.redirect || <span class="string">"/"</span>;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(redirect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件化</title>
    <url>/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
    <content><![CDATA[<p>Vue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用程序界面都可以抽象为一个组件树。组件化可以提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。</p>
<a id="more"></a>

<h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>父给子传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child</span></span><br><span class="line">props:&#123; <span class="attr">msg</span>: <span class="built_in">String</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;HelloWorld msg=<span class="string">"hello world"</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>子给父传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'add'</span>, good)</span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line">&lt;Cart @add=<span class="string">"cartAdd($event)"</span>&gt;&lt;<span class="regexp">/Cart&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>任意两个组件之间传值常用事件总线或vuex的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bus:事件触发、监听和回调管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks=&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $on(name,fn)&#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks[name]=<span class="keyword">this</span>.callbacks[name]||[]</span><br><span class="line">        <span class="keyword">this</span>.callbacks[name].push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    $emit(name,args)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.callbacks[name])&#123;</span><br><span class="line">            <span class="keyword">this</span>.callbacks[name].forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(args))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Bus()</span><br><span class="line"></span><br><span class="line"><span class="comment">//child1</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//child2</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>

<p>实践中通常用Vue代替Bus,因为Vue已经实现了相应的接口</p>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>创建唯一的全局数据管理者store，通过他管理数据并通知组件状态变更</p>
<p>详细见<a href="https://qytayh.github.io/2020/06/10/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/">Vue统一状态管理——Vuex</a></p>
<h2 id="parent-root"><a href="#parent-root" class="headerlink" title="$parent/$root"></a>$parent/$root</h2><p>兄弟组件之间通信可以通过共同的祖辈搭桥，$parent或$root,与Bus总线类似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//brother1</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$on(<span class="string">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//brother2</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$emit(<span class="string">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>

<h2 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h2><p>父组件可以通过$children访问子组件，实现父子通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="keyword">this</span>.$children[<span class="number">0</span>].xx = <span class="string">'xxx'</span></span><br></pre></td></tr></table></figure>
<p>  注意：$children不能保证子元素顺序 (异步组件)</p>
<h2 id="attr-listener"><a href="#attr-listener" class="headerlink" title="$attr/$listener"></a>$attr/$listener</h2><p>包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外)。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定(class和style除外)，并且可以通过 vbind=”$attrs”传入内部组件——在创建高级别的组件时非常有用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child:并未在props内声明foo</span></span><br><span class="line">&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/parent</span></span><br><span class="line"><span class="regexp">&lt;Helloworld foo = 'foo'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>获取子节点引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;Helloworld ref=<span class="string">'hw'</span>&gt;</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.hw.xx = <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><p>能够实现祖先和后代之间传值(依赖注入)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ancestor </span></span><br><span class="line">provide()&#123;<span class="comment">//与data、mounted平级</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo:<span class="string">'foooooo'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//descendant</span></span><br><span class="line">&lt;p&gt;&#123;&#123;foo&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">inject:['foo']</span></span><br></pre></td></tr></table></figure>
<p>也可以使用别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件中</span></span><br><span class="line">&lt;p&gt;&#123;&#123;bar&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">inject:&#123;bar:&#123;from:'foo'&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>  provide和inject主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p>
<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p>
<h2 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span>content...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Comp1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>将内容分发到子组件指定位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认插槽使用default做参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:default</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽使用插槽名做参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:content</span>&gt;</span>内容。。<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>分发内容要用到子组件中的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span> <span class="attr">:foo</span>=<span class="string">"foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 把v-slot的值指定为作用域上下文对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:default</span>=<span class="string">"soltProps"</span>&gt;</span></span><br><span class="line">        来自子组件数据：&#123;&#123;soltProps.foo&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Comp3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 作用域插槽 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对象解构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>=<span class="string">"&#123;fc&#125;"</span>&gt;</span>&#123;&#123;fc&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- children --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">:fc</span>=<span class="string">"footerContent"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/slots/Layout.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Layout</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// children </span></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        remark: [</span><br><span class="line">          <span class="string">'好好学习，天天向上'</span>,</span><br><span class="line">          <span class="string">'学习永远不晚'</span>,</span><br><span class="line">          <span class="string">'学习知识要善于思考,思考,再思考'</span>,</span><br><span class="line">          <span class="string">'学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始'</span>,</span><br><span class="line">          <span class="string">'构成我们学习最大障碍的是已知的东西,而不是未知的东西'</span>,</span><br><span class="line">          <span class="string">'在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事'</span>,</span><br><span class="line">          <span class="string">'三人行必有我师焉；择其善者而从之，其不善者而改之'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    footerContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.remark[<span class="keyword">new</span> <span class="built_in">Date</span>().getDay() - <span class="number">1</span>] </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue统一状态管理——Vuex</title>
    <url>/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/</url>
    <content><![CDATA[<p>Vuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状<br>态，并以相应的规则保证状态以可预测的方式发生变化。</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>vue add vuex</code></p>
<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>将应用全局状态定义在state中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line"> isLogin: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>修改State只能通过Mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    login(state) &#123;</span><br><span class="line">        state.isLogin = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    logout(state) &#123;</span><br><span class="line">        state.isLogin = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="获取和修改状态"><a href="#获取和修改状态" class="headerlink" title="获取和修改状态"></a>获取和修改状态</h2><p>使用store.state获取状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!$store.state.isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"logout"</span> <span class="attr">v-else</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改状态只能通过store.dispatch(mutation)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'login'</span>)</span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'logout'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数1是vuex传递的上下文context:&#123;commit,dispatch,state&#125;</span></span><br><span class="line">login(&#123;commit&#125;, username) &#123;</span><br><span class="line">    <span class="comment">//模拟登陆api调用，1s后如果登录名是admin则登陆成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (username === <span class="string">'admin'</span>) &#123;</span><br><span class="line">                commit(<span class="string">'login'</span>)</span><br><span class="line">                resolve()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>派发动作，触发actions</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'login'</span>, <span class="string">'admin'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$router.push(<span class="keyword">this</span>.$route.query.redirect)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'用户名或密码错误'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>使用modules定义多个子模块有利于组件复杂状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        user,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>移动先前登陆状态相关代码到store文件夹下新建的user.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,<span class="comment">//避免命名冲突</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问方式相应变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Login.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!$store.state.user.isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'user/login'</span>, <span class="string">'admin'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="keyword">this</span>.$route.query.redirect || <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">this</span>.$router.push(redirect)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'用户名或密码错误'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line">store.state.user.isLogin</span><br></pre></td></tr></table></figure>

<h2 id="mapState-mapMutation-mapAction"><a href="#mapState-mapMutation-mapAction" class="headerlink" title="mapState()/mapMutation()/mapAction()"></a>mapState()/mapMutation()/mapAction()</h2><p>通过这些映射方法可以让大家少敲几个字，而起避免对store的直接访问</p>
<p>state相关修改,<code>Login.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(<span class="string">'user'</span>, [<span class="string">'isLogin'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>action相关修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">'user/login'</span>](<span class="string">"admin"</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapActions([<span class="string">'user/login'</span>,<span class="string">'user/logout'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><p>可以使用getters从store的state中派生出一些状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state:&#123;</span><br><span class="line">        isLogin:<span class="literal">false</span>,</span><br><span class="line">        username:<span class="string">''</span><span class="comment">//用户名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        login(state,username)&#123;</span><br><span class="line">            state.isLogin = <span class="literal">true</span></span><br><span class="line">            state.username = username</span><br><span class="line">        &#125;,</span><br><span class="line">        logout()&#123;</span><br><span class="line">            state.isLogin = <span class="literal">false</span></span><br><span class="line">            state.username = <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        welcome: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.username + <span class="string">',欢迎回来'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        login(&#123;commit&#125;,username)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(username===<span class="string">'admin'</span>)&#123;</span><br><span class="line">                        commit(<span class="string">'login'</span>,username)</span><br><span class="line">                        resolve()</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        reject()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">1000</span>)</span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在需要渲染的页面中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isLogin"</span>&gt;</span></span><br><span class="line">    &#123;&#123;welcome&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState,mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState(<span class="string">'user'</span>,[<span class="string">'isLogin'</span>])</span><br><span class="line">        ...mapGetters(<span class="string">'user'</span>,[<span class="string">'welcome'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。开启严格模式<code>strict: true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    strict: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Vuex的store接受plugins选项，这个选项暴露出每次mutation的钩子。Vuex插件就是一个函数，它接收 store 作为唯一参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 当 store 初始化后调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在store文件夹下新建plugins文件夹并新建persist.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store =&gt;&#123;</span><br><span class="line">    <span class="comment">//store初始化的时候，将存储在localStoreage的状态还原</span></span><br><span class="line">    <span class="keyword">if</span>(localStoreage)&#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'user'</span>))</span><br><span class="line">        <span class="keyword">if</span>(user)&#123;</span><br><span class="line">            store.commit(<span class="string">'login'</span>,user.username)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果用户相关状态发生变化，自动存入localStoreage</span></span><br><span class="line">    store.subscribe(<span class="function">(<span class="params">mutation,state</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//&#123;type:'user/login'&#125;</span></span><br><span class="line">        <span class="comment">//&#123;type:'user/logout'&#125;</span></span><br><span class="line">        <span class="comment">//&#123;type:'cart/addcart'&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(mutation.type===<span class="string">'user/login'</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> user = <span class="built_in">JSON</span>.stringify(state.user)</span><br><span class="line">            localStoreage.setItem(<span class="string">'user'</span>,user)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mutation.type===<span class="string">'user/logout'</span>)&#123;</span><br><span class="line">            localStoreage.removeItem(<span class="string">'user'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册插件：</p>
<p>在store的index.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">'./plugins/persist'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [persist]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue项目中动态加载js</title>
    <url>/2020/06/%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDjs/</url>
    <content><![CDATA[<p>通常情况下，如果网页加载的js文件较多并且文件较大的时候，一次性加载完毕的话，会非常的影响网页加载的速度，当然将会严重影响用户体验，最终会影响的站点的人气，所以我们要想办法解决这个问题。</p>
<a id="more"></a>

<p>很多时候，加载的js代码在当前页面功能中并不需要，所以如果能够根据需要动态的加载js文件，那么将会极大的提高网页的加载速度，下面就通过代码实例介绍一下如何动态加载js。</p>
<p>vue中常用的引入js文件的方式一般有三种</p>
<ul>
<li><p>在html文件中<code>&lt;script src=&quot;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>引入</p>
</li>
<li><p>在<code>main.js</code>或需要引用的<code>.vue</code>文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'../a'</span><span class="comment">//要用到export导出之后 才能用import导入.</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../a'</span><span class="comment">//和直接引入script标签是一样的</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>假设我们有这样一个比较极限的应用场景：</p>
<p>我们在登录页需要支持facebook，google，微信等十多个平台的第三方登录，并且每个第三方登录所需要的js文件特别大，用我们常规的用法去加载的话在用户第一次使用的时候就需要加载特别多的js文件，势必会造成用户体验不好的情况</p>
<p>那么我们应该怎么去优化呢</p>
<h1 id="vue-plugin-load-script"><a href="#vue-plugin-load-script" class="headerlink" title="vue-plugin-load-script"></a>vue-plugin-load-script</h1><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save vue-plugin-load-script</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In main.js</span></span><br><span class="line"><span class="keyword">import</span> LoadScript <span class="keyword">from</span> <span class="string">'vue-plugin-load-script'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(LoadScript);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//login.vue</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    wxLogin()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$loadScript(<span class="string">"https://wx登录需要的js"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Script is loaded, do something</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Failed to fetch script</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    googleLogin()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$loadScript(<span class="string">"https://谷歌登录需要的js"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Script is loaded, do something</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Failed to fetch script</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样用户点击什么登录方式就会去加载对应的第三方登录需要的js，从而避免了加载过多不需要的js造成页面性能浪费</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>必备知识之Vue-Cli</title>
    <url>/2020/06/%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%E4%B9%8BVue-Cli/</url>
    <content><![CDATA[<p>更快速构建vue项目</p>
<a id="more"></a>

<h1 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h1><p>你可以使用<code>vue serve</code>和<code>vue build</code>命令对单个vue文件快速进行原型开发</p>
<h2 id="安装-vue-cli-service-global扩展"><a href="#安装-vue-cli-service-global扩展" class="headerlink" title="安装@vue/cli-service-global扩展"></a>安装<code>@vue/cli-service-global</code>扩展</h2><p><code>npm install  -g @vue/cli-service-global</code></p>
<p>准备一个内容原型</p>
<h2 id="vue-serve"><a href="#vue-serve" class="headerlink" title="vue serve"></a>vue serve</h2><p>启动一个服务并运行原型</p>
<p><code>vue serve Hello.vue</code></p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="vue-create"><a href="#vue-create" class="headerlink" title="vue create"></a>vue create</h2><p>创建一个vue项目</p>
<p><code>vue create projectname</code></p>
<h2 id="vue-ui"><a href="#vue-ui" class="headerlink" title="vue ui"></a>vue ui</h2><p>图形化项目管理</p>
<p><code>vue ui</code></p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>Vue Cli使用了一套基于插件的架构。插件可以修改webpack的内部配置，也可以向vue-cli-serve注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的</p>
<h2 id="在现有的项目中安装插件"><a href="#在现有的项目中安装插件" class="headerlink" title="在现有的项目中安装插件"></a>在现有的项目中安装插件</h2><p>如果你想在一个已经被创建好的项目中安装一个插件，可以使用 <code>vue add</code> 命令</p>
<p><code>vue add router</code></p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="处理资源路径"><a href="#处理资源路径" class="headerlink" title="处理资源路径"></a>处理资源路径</h2><p>当你在JavaScript、css或vue文件中使用相对路径(必须以<code>.</code>开头)引用一个静态资源时，该资源将被webpack处理。(public中文件webpack不会处理)</p>
<h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>如果URL是一个绝对路径(例如<code>/images/foo.png</code>),他将会保留不变。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"/assets/logo.png"</span>&gt;</span>//当前服务器静态路径下 public会作为服务器静态路径</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"http://image.xx.com/logo.png"</span>&gt;</span>//某图片服务器线上地址</span><br></pre></td></tr></table></figure>

<p>如果URL以<code>.</code>开头会作为一个相对模块请求被解释并基于文件系统相对路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果URL以<code>~</code>开头会作为一个模块请求被解析，这意味着你甚至可以引用Node模块中的资源</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"~some-npm-package/foo.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果URL以<code>@</code>开头会作为一个模块请求被解析，Vue Cli默认会设置一个指向<code>src</code>的别名<code>@</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/Hello.vue'</span></span><br></pre></td></tr></table></figure>

<h3 id="何时使用public文件夹"><a href="#何时使用public文件夹" class="headerlink" title="何时使用public文件夹"></a>何时使用<code>public</code>文件夹</h3><p>通过webpack的处理并获得如下好处：</p>
<ul>
<li><p>脚本和样式表会被压缩并且打包在一起，从而避免额外的网络请求</p>
</li>
<li><p>文件丢失会直接在编译时报错，而不是到了用户端才会产生404错误</p>
</li>
<li><p>最终生成的文件名包含了内容哈希，因此不用担心浏览器缓存他们的老版本</p>
</li>
</ul>
<p>以下的几种情况可以考虑使用public文件夹</p>
<ul>
<li><p>你需要在构建输出中指定一个固定的文件名字</p>
</li>
<li><p>你有上千个图片，需要动态引用他们的路径</p>
</li>
<li><p>有些库可能会和webpack不兼容，除了将其用一个独立的<code>&lt;script&gt;</code>标签引入没有别的办法</p>
</li>
</ul>
<h3 id="使用public文件夹的注意事项"><a href="#使用public文件夹的注意事项" class="headerlink" title="使用public文件夹的注意事项"></a>使用public文件夹的注意事项</h3><p>如果你的应用没有部署在域名的根部，那么你需要为你的URL配置<code>publicPath</code>前缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">    publicPath: precess.env.NODE_ENV === <span class="string">'production'</span>?<span class="string">'线上所在目录'</span>:<span class="string">'本地所在目录 正常为 / '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>public/index.html</code> 等通过<code>html-webpack-plugin</code>用作模板的HTML文件中，你需要用过<code>&lt;% =BASE_URL %&gt;</code> 设置链接前缀：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;% =BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在模板中，先向组件传入BASE_URL：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        publicPath: process.env.BASE_URL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用的时候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img :src=<span class="string">"`$&#123;publicPath&#125;my-image.png`"</span>&gt;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手封装一个Vue表单组件</title>
    <url>/2020/06/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAVue%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>仿element-ui封装一个通用的表单组件</p>
<a id="more"></a>

<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ul>
<li><p>实现JForm</p>
<ul>
<li>指定数据，校验规则</li>
</ul>
</li>
<li><p>JFormItem</p>
<ul>
<li>执行校验</li>
<li>显示错误信息</li>
</ul>
</li>
<li><p>JInput</p>
<ul>
<li>维护数据</li>
</ul>
</li>
</ul>
<p>最终理想效果：<a href="https://element.eleme.cn/#/zh-CN/component/form" target="_blank" rel="noopener">element Form 表单</a></p>
<h1 id="JInput"><a href="#JInput" class="headerlink" title="JInput"></a>JInput</h1><p>创建components/form/JInput.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 自定义组件双向绑定：:value  @input --&gt;</span><br><span class="line">    &lt;!-- v-bind&#x3D;&quot;$attrs&quot;展开$attrs 每一个项都可以单独设置上去 --&gt;</span><br><span class="line">    &lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">  export default &#123;</span><br><span class="line">    inheritAttrs: false, &#x2F;&#x2F; 设置为false避免attrs设置到根元素上</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      type: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;text&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onInput(e) &#123;</span><br><span class="line">        &#x2F;&#x2F; 派发一个input事件即可</span><br><span class="line">        this.$emit(&#39;input&#39;, e.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JInput"><a href="#使用JInput" class="headerlink" title="使用JInput"></a>使用JInput</h1><p>创建components/form/index.vue，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class="line">        &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实现JFormItem"><a href="#实现JFormItem" class="headerlink" title="实现JFormItem"></a>实现JFormItem</h1><p>创建components/form/JFormItem.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class="line">            type:String,</span><br><span class="line">            default:&#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JFormItem"><a href="#使用JFormItem" class="headerlink" title="使用JFormItem"></a>使用JFormItem</h1><p>在components/form/index.vue中添加基础代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class="line">        &lt;j-form-item label&#x3D;&quot;用户名&quot;&gt;</span><br><span class="line">            &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;&#x2F;j-form-item&gt;</span><br><span class="line">        &lt;j-form-item label&#x3D;&quot;密码&quot;&gt;</span><br><span class="line">            &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;&#x2F;j-form-item&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput,JFormItem</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实现JForm"><a href="#实现JForm" class="headerlink" title="实现JForm"></a>实现JForm</h1><p>创建components/form/JForm.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    provide() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            form: this &#x2F;&#x2F; 将组件实例作为提供者，子代组件可方便获取</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        model: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">            type: Object</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JForm"><a href="#使用JForm" class="headerlink" title="使用JForm"></a>使用JForm</h1><p>在components/form/index.vue中添加基础代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; </span><br><span class="line">    &lt;!-- JForm --&gt;</span><br><span class="line">    &lt;JForm :model&#x3D;&quot;userInfo&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;!-- 用户名 --&gt;</span><br><span class="line">      &lt;JFormItem label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;JInput v-model&#x3D;&quot;userInfo.username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">      &lt;!-- 密码 --&gt;</span><br><span class="line">      &lt;JFormItem label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;JInput type&#x3D;&quot;password&quot; v-model&#x3D;&quot;userInfo.password&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">      &lt;!-- 提交按钮 --&gt;</span><br><span class="line">      &lt;JFormItem&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">    &lt;&#x2F;JForm&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class="line">import JForm from &quot;.&#x2F;JForm&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput,JFormItem,JForm</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            rules: &#123;</span><br><span class="line">                username: [&#123; required: true, message: &quot;请输入用户名&quot; &#125;],</span><br><span class="line">                password: [&#123; required: true, message: &quot;请输入密码&quot; &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        login()&#123;</span><br><span class="line">            this.$refs[&#39;loginForm&#39;].validate(valid &#x3D;&gt; &#123;</span><br><span class="line">                if(valid)&#123;</span><br><span class="line">                    alert(&quot;请求登录&quot;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&quot;请求失败&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h1><p>JInput中通知校验，修改components/form/JInput.vue中代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- dom --&gt;</span><br><span class="line">&lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- methods --&gt;</span><br><span class="line">onInput(e) &#123;</span><br><span class="line">    &#x2F;&#x2F; 派发一个input事件即可</span><br><span class="line">    this.$emit(&#39;input&#39;, e.target.value)</span><br><span class="line">    &#x2F;&#x2F; 通知父级执行校验</span><br><span class="line">    this.$parent.$emit(&#39;validate&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JFormItem监听校验通知，获取规则并执行校验，修改components/form/JFormItem.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    inject:[&#39;form&#39;],&#x2F;&#x2F;注入</span><br><span class="line">    mounted()&#123;&#x2F;&#x2F;监听校验事件</span><br><span class="line">        this.$on(&#39;validate&#39;,()&#x3D;&gt;&#123;this.validate()&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        validate()&#123;</span><br><span class="line">            &#x2F;&#x2F;获取对应JFormItem的校验规则</span><br><span class="line">            console.log(this.form.rules[this.prop]);</span><br><span class="line">            &#x2F;&#x2F;获取对应JFormItem的值</span><br><span class="line">            console.log(this.form.model[this.prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class="line">            type:String,</span><br><span class="line">            default:&#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        prop: &#123;</span><br><span class="line">            type: String</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>安装校验库async-validator： <code>npm i async-validator -S</code></p>
<p>在components/form/JFormItem.vue中引入，并添加校验代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">"async-validator"</span>;</span><br><span class="line">...</span><br><span class="line">validate()&#123;</span><br><span class="line">    <span class="comment">//获取对应校验规则</span></span><br><span class="line">    <span class="keyword">const</span> rules = <span class="keyword">this</span>.form.rules[<span class="keyword">this</span>.prop];</span><br><span class="line">    <span class="comment">//获取校验值</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.form.model[<span class="keyword">this</span>.prop];</span><br><span class="line">    <span class="comment">//获取描述对象</span></span><br><span class="line">    <span class="keyword">const</span> desc = &#123;[<span class="keyword">this</span>.prop]:rules&#125;;</span><br><span class="line">    <span class="comment">//创建Schema实例</span></span><br><span class="line">    <span class="keyword">const</span> schema = <span class="keyword">new</span> Schema(desc)</span><br><span class="line">    <span class="keyword">return</span> schema.validate(&#123;[<span class="keyword">this</span>.prop]:value&#125;,errors =&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(errors)&#123;</span><br><span class="line">            <span class="keyword">this</span>.error=errors[<span class="number">0</span>].message</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//校验通过</span></span><br><span class="line">            <span class="keyword">this</span>.error=<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="表单全局校验"><a href="#表单全局校验" class="headerlink" title="表单全局校验"></a>表单全局校验</h1><p>为JForm提供validate方法，修改components/form/JForm.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validate(cb)&#123;</span><br><span class="line">    <span class="comment">// 获取所有孩子KFormItem</span></span><br><span class="line">    <span class="comment">// [resultPromise]</span></span><br><span class="line">    <span class="keyword">const</span> task = <span class="keyword">this</span>.$children</span><br><span class="line">    .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.prop) <span class="comment">// 过滤掉没有prop属性的Item</span></span><br><span class="line">    .map(<span class="function"><span class="params">item</span> =&gt;</span> item.validate())</span><br><span class="line">    <span class="comment">//统一处理所有的Promise结果</span></span><br><span class="line">    <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> cb(<span class="literal">true</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span>=&gt;</span> cb(<span class="literal">false</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中key的作用和工作原理</title>
    <url>/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>一般我们会回答：可以唯一的确定一个dom元素，从而执行diff算法的时候更高效。</p>
<p>但是到底为什么是这样呢，我们来从源码中找一下答案。</p>
<a id="more"></a>

<p>准备测试代码,在页面加载两秒后执行一个插入操作，在c的前面插入一个f</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#demo"</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    items:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted()&#123;</span><br><span class="line"><span class="javascript">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.items.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'f'</span>)</span></span><br><span class="line">                &#125;,2000)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不使用key，其实并不知道要更新谁，只能做一个操作，就是逐步更新：</p>
<p>首先更新a，其次更新b，第三步的时候覆盖更新，将f更新到原来的c上，c更新到原来的d，d更新到e，然后再创建一个新的e追加在最后。执行了五次更新一次创建追加。</p>
<p>如果使用了key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前两次更新与不使用key一样</span><br><span class="line">&#x2F;&#x2F;首次循环patch a</span><br><span class="line">a b c d e</span><br><span class="line">a b f c d e </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第2次循环patch b</span><br><span class="line">b c d e</span><br><span class="line">b f c d e</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第3次循环patch e</span><br><span class="line">c d e</span><br><span class="line">f c d e</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第4次循环patch d</span><br><span class="line">c d </span><br><span class="line">f c d </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第5次循环patch c</span><br><span class="line">c</span><br><span class="line">f c </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;oldch全部处理结束，newch中剩下f，创建f并插入到c前面</span><br></pre></td></tr></table></figure>

<p>这边虽然看上去是执行了五次更新，但是这五次并没有发生任何操作，因为是在更新五个完全相同的节点。因为数据没有发生变化，所以在执行patch是不会做任何事情，也不会发生任何dom操作。</p>
<p>因此准确的来讲，如果不使用key我们执行了三次更新同时一次创建插入操作；而使用了key只做了一次创建插入操作，在数据量比较大的时候运行效率会大大提高。</p>
<p>打开控制台，在vue.js的第6182行加上一个断点，并将oldStartVnode的标签指定在p标签上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//断点所在行</span></span><br><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;......&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右键编辑断点，加上以下条件 这样以后在update children时只观察p标签的变化</span></span><br><span class="line">oldStartVnode.tag===<span class="string">'p'</span></span><br></pre></td></tr></table></figure>
<p>然后刷新页面，我们可以看到，每次都会进入以下逻辑</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/1.png" class="" title="[sameVnode]">

<p>我们进到sameVnode()中看一下</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/2.png" class="" title="[sameVnode]">

<p>判断的条件第一条就是判断key的值是否相等，两个undefined会让等式成立，标签相同，都不是注释，data也没有发生变化，也不是input，因此判断条件已经成立了。如果没有设置key的情况下，只要两个标签相同，就会被认为是同一节点，就开始进行patch操作。</p>
<p>我们将key加上，再看一下结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前两次直接跳过，因为a、b都是相同的节点，到第三次的时候，就会进入到patch e中</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/3.png" class="" title="[sameVnode]">

<p>到第五次循环时，老的已经循环结束了，新的只剩下了f</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/4.png" class="" title="[sameVnode]">

<p>并且在debug的过程中我们也不难看出，设置了key的只会在最后一步更新，而未设置key的会从第三次开始，每次在视图上做出更新。</p>
<p><strong>结论</strong></p>
<ol>
<li><p>key的作用主要是为了更高效的更新虚拟dom，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同的元素，使得整个patch过程更加的高效，减少dom操作量，提高性能。</p>
</li>
<li><p>另外，如果不设置key还可能在列表更新时引发一些隐蔽的bug(例如：更新了某一不需要更新的行)</p>
</li>
<li><p>vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果 </p>
</li>
</ol>
<blockquote>
<p>2.2.0+ 的版本里，当在组件中使用v-for时，key现在是必须的，key的取值需要是number或者string，而且需要在同级唯一。</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中v-if和v-for的优先级</title>
    <url>/2020/07/Vue%E4%B8%ADv-if%E5%92%8Cv-for%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化才能得到更好的性能？</p>
<a id="more"></a>

<p>当v-if和v-for同级的时候，我们写一个例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"child in children"</span> <span class="attr">v-if</span>=<span class="string">"isFolder"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#demo"</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    children:[</span><br><span class="line"><span class="actionscript">                        &#123;title:<span class="string">'foo'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;title:<span class="string">'bar'</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line">                isFolder()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.children&amp;&amp;<span class="keyword">this</span>.children.length&gt;<span class="number">0</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(app.$options.render)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>生成的渲染函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'div'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"demo"</span>&#125;&#125;,_l((children),<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;<span class="keyword">return</span> (isFolder)?_c(<span class="string">'p'</span>,[_v(_s(child.title))]):_e()&#125;),<span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样我们可以看出来是循环先执行，isFolder判断后执行</p>
</blockquote>
<p>当v-if和v-for不同级的时候，我们先调整下dom区域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">'isFolder'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"child in children"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两者不同级时，渲染函数入下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'div'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"demo"</span>&#125;&#125;,[(isFolder)?_l((children),<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'p'</span>,[_v(_s(child.title))])&#125;):_e()],<span class="number">2</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先判断了isFolder再看是否执行-l</p>
</blockquote>
<p><strong>结论</strong></p>
<ol>
<li>显然v-for优先于v-if被解析</li>
<li>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何，循环都不可避免，浪费了性能</li>
<li>要避免出现这种情况，可以在外层嵌套template,然后在这一层进行v-if判断，然后在内部进行v-for循环</li>
<li>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件data为何要函数形式</title>
    <url>/2020/07/Vue%E7%BB%84%E4%BB%B6data%E4%B8%BA%E4%BD%95%E8%A6%81%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<p>Vue组件中data为什么必须是个函数，而Vue的根实例则没有此限制</p>
<a id="more"></a>

<blockquote>
<p>函数每次执行都会返回全新的data对象实例</p>
</blockquote>
<p>测试代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'comp'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123;counter&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">            data:&#123;counter:0&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#demo"</span>,</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们查看源码研究一下数据是如何初始化的,源码位置<code>src\core\instance\state.js-initData()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果data是函数，则执行之并将其结果作为data选项的值否则则会执行用户设置的data</span></span><br><span class="line">data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果每一个组件都是使用的对象来设置data,那么将会作为将来组件实例里的data选项，Vue.component组件的时候其实只执行了一次，每一次初始化的时候对于两个comp的data指向的将会是同一个地方，一个组件的不同实例直接的数据就共享了，会产生数据污染。</p>
</blockquote>
<p>我们看一下控制台的报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue.js:<span class="number">634</span> [Vue warn]: The <span class="string">"data"</span> option should be a <span class="function"><span class="keyword">function</span> <span class="title">that</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">per</span>-<span class="title">instance</span> <span class="title">value</span> <span class="title">in</span> <span class="title">component</span> <span class="title">definitions</span>.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程序甚至无法通过vue检测</p>
</blockquote>
<p>我们接下来再看一下为什么根实例中data可以直接用对象,测试代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'comp'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123;counter&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">            data()&#123;<span class="keyword">return</span> &#123;counter:<span class="number">1</span>&#125;&#125;</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#demo"</span>,</span></span><br><span class="line">            data:&#123;counter:1&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从逻辑上来讲，在全局范围内根实例是单例的，不会存在多实例的问题，我们再看一下源码中是怎么处理的<br><code>src/core/instance/init.js-initMinx()-Vue-_init</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// merge options 合并选项</span></span><br><span class="line"><span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;<span class="comment">//自定义组件</span></span><br><span class="line">    <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">    <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">    <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">    initInternalComponent(vm, options)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//根实例</span></span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再看一下<code>src/core/util/options.js</code>中对data的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">strats.data = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!vm) &#123;<span class="comment">//只有当根实例创建的时候vm才会存在，普通组件VM不存在，所以进入方法</span></span><br><span class="line">    <span class="keyword">if</span> (childVal &amp;&amp; <span class="keyword">typeof</span> childVal !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">'The "data" option should be a function '</span> +</span><br><span class="line">        <span class="string">'that returns a per-instance value in component '</span> +</span><br><span class="line">        <span class="string">'definitions.'</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> parentVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<p>Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态<br>变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返<br>回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也<br>是因为根实例只能有一个，不需要担心这种情况。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router源码实现</title>
    <url>/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>从零开始，实现vue-router</p>
<a id="more"></a>

<h1 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h1><ul>
<li>实现<code>VueRouter</code>类和<code>install</code>方法，使之作为一个插件存在</li>
<li>实现两个全局组件:<code>router-view</code>用于显示匹配组件内容，<code>router-link</code>用于跳转</li>
<li>监控<code>url</code>变化:监听<code>hashchange</code>或<code>popstate</code>事件</li>
<li>响应最新<code>url</code>:创建一个响应式的属性<code>current</code>，当它改变时获取对应的组件并显示</li>
</ul>
<h1 id="实现一个插件：创建VueRouter类和install方法"><a href="#实现一个插件：创建VueRouter类和install方法" class="headerlink" title="实现一个插件：创建VueRouter类和install方法"></a>实现一个插件：创建VueRouter类和install方法</h1><p>在<code>src</code>目录下创<code>jrouter</code>文件夹用于存放我们手写的路由的相关代码，在<code>jrouter</code>下新建<code>index.js</code>和<code>jvue-router.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jvue-router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Vue;<span class="comment">//引用构造函数，在JVueRouter里面使用</span></span><br><span class="line"><span class="comment">//1、实现一个插件：挂载$router</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="comment">//获取用户配置并保存</span></span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插件：实现install方法，注册$router</span></span><br><span class="line">JVueRouter.install = <span class="function"><span class="keyword">function</span>(<span class="params">_Vue</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//保存构造函数，在JVueRouter里面使用</span></span><br><span class="line">    Vue=_Vue;</span><br><span class="line">    <span class="comment">// 挂载$router</span></span><br><span class="line">    Vue.mixin(&#123;<span class="comment">//混入</span></span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line">            <span class="comment">//确保根实例的时候才执行,只有根组件拥有router选项</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.$options.router)&#123;</span><br><span class="line">                Vue.prototype.$router = <span class="keyword">this</span>.$options.router</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> JVueRouter;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么要采用混入的方式：主要原因是use代码在前，Router实例创建在后，而install逻辑又需要用到该实例</p>
</blockquote>
<p>修改<code>jrouter</code>中<code>index.js</code>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./jvue-router'</span><span class="comment">//引入我们写好的插件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.应用插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>最后我们只需要修改<code>main.js</code>中对路由的引用就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./jrouter'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,<span class="comment">//挂载router实例</span></span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实现router-link和router-view"><a href="#实现router-link和router-view" class="headerlink" title="实现router-link和router-view"></a>实现router-link和router-view</h1><p>修改<code>jrouter</code>中<code>index.js</code>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">KVueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Vue.component(<span class="string">'router-link'</span>, &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            to: &#123;</span><br><span class="line">                type: <span class="built_in">String</span>,</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        render(h) &#123;</span><br><span class="line">            <span class="comment">// &lt;a href="#/about"&gt;abc&lt;/a&gt;</span></span><br><span class="line">            <span class="comment">// &lt;router-link to="/about"&gt;xxx&lt;/router-link&gt;</span></span><br><span class="line">            <span class="comment">// h(tag, data, children)</span></span><br><span class="line">            <span class="keyword">return</span> h(<span class="string">'a'</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">'#'</span> + <span class="keyword">this</span>.to &#125; &#125;, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">            <span class="comment">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">        render(h)&#123;</span><br><span class="line">            <span class="keyword">return</span> h(<span class="string">'div'</span>,<span class="string">'router-view'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="监控url的变化"><a href="#监控url的变化" class="headerlink" title="监控url的变化"></a>监控url的变化</h1><p>定义响应式的current，监听hashchange事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">        <span class="comment">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>,<span class="string">'current'</span>,<span class="string">'/'</span>)</span><br><span class="line">        <span class="comment">//监控url变化</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//避免onHashChange中this变成window</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//页面加载 避免onHashChange中this变成window</span></span><br><span class="line">    &#125;</span><br><span class="line">    onHashChange()&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态获取对应的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">        render(h)&#123;</span><br><span class="line">            <span class="comment">//获取path对应的component</span></span><br><span class="line">            <span class="keyword">let</span> component=<span class="literal">null</span></span><br><span class="line">            <span class="keyword">this</span>.$router.$options.routes.forEach(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(route.path===<span class="keyword">this</span>.$router.current)&#123;</span><br><span class="line">                    component=route.component</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> h(component)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="提前处理路由表"><a href="#提前处理路由表" class="headerlink" title="提前处理路由表"></a>提前处理路由表</h1><p>提前处理路由表可以避免每次都循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">//创建一个路由映射表</span></span><br><span class="line">        <span class="keyword">this</span>.routeMap=&#123;&#125;</span><br><span class="line">        options.routes.forEach(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.routeMap[route.path]=route</span><br><span class="line">        &#125;)</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>router-view</code>根据path获取component的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">    render(h)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;routeMap,current&#125;=<span class="keyword">this</span>.$router</span><br><span class="line">        <span class="keyword">const</span> component=routeMap[current].component || <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> h(component)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="代码结构优化"><a href="#代码结构优化" class="headerlink" title="代码结构优化"></a>代码结构优化</h1><p>我们在<code>jrouter</code>文件夹下新建<code>jrouter-link.js</code>和<code>jrouter-view.js</code>,调整<code>jvue-router.js</code>中代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先进行引入</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'./jrouter-link'</span></span><br><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">'./jrouter-view'</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"> <span class="comment">// </span></span><br><span class="line">JVueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    Vue.component(<span class="string">'router-link'</span>, Link)</span><br><span class="line">    Vue.component(<span class="string">'router-view'</span>, View)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们将原先写在<code>jvue-router.js</code>中组件部分的代码分别写到对应的js文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jrouter-link.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">// &lt;a href="#/about"&gt;abc&lt;/a&gt;</span></span><br><span class="line">    <span class="comment">// &lt;router-link to="/about"&gt;xxx&lt;/router-link&gt;</span></span><br><span class="line">    <span class="comment">// h(tag, data, children)</span></span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'a'</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">'#'</span> + <span class="keyword">this</span>.to &#125; &#125;, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">    <span class="comment">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// jrouter-view.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">//获取path对应的component</span></span><br><span class="line">    <span class="keyword">const</span> &#123;routeMap, current&#125; = <span class="keyword">this</span>.$router;</span><br><span class="line">    <span class="keyword">const</span> component = routeMap[current].component || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果我们不用<code>Vue.util.defineReactive(this,&#39;current&#39;,&#39;/&#39;)</code>来实现监听，其实也可以用这种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   data()&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">           current:<span class="string">'/'</span></span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取current的方式就变为</span></span><br><span class="line"><span class="keyword">this</span>.app.current</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>当用户的路由为类似如下的嵌套路由时，我们应该如何兼容呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    ......</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/About.vue'</span>),</span><br><span class="line">    children:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about/info'</span>,</span><br><span class="line">            component:<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/AboutInfo.vue'</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">    ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>打开<code>jrouter-view.js</code>文件，并修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">//标记当前router-view深度</span></span><br><span class="line">    <span class="keyword">this</span>.$vnode.data.routerView = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> parent = <span class="keyword">this</span>.$parent</span><br><span class="line">    <span class="keyword">while</span>(parent)&#123;</span><br><span class="line">        <span class="keyword">const</span> vnodeData = parent.$vnode&amp;&amp;parent.$vnode.data</span><br><span class="line">        <span class="keyword">if</span>(vnodeData&amp;&amp;vnodeData.routerView)&#123;</span><br><span class="line">            <span class="comment">//说明当前的parent是一个router-view</span></span><br><span class="line">            depth++</span><br><span class="line">        &#125;</span><br><span class="line">        parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取path对应的component</span></span><br><span class="line">    <span class="keyword">let</span> component = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.$router.matched[depth];</span><br><span class="line">    <span class="keyword">if</span>(route)&#123;</span><br><span class="line">        component = route.component</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>jvue-router.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">        <span class="comment">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class="line">        <span class="comment">// Vue.util.defineReactive(this,'current','/')通过matched数组获取component，不需要current响应式了</span></span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)||<span class="string">'/'</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>,<span class="string">'matched'</span>,[])</span><br><span class="line">        <span class="comment">//match方法可以递归遍历路由表，获得匹配关系的数组</span></span><br><span class="line">        <span class="keyword">this</span>.match()</span><br><span class="line">        <span class="comment">//监控url变化</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//避免onHashChange中this变成window</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//页面加载 避免onHashChange中this变成window</span></span><br><span class="line">    &#125;</span><br><span class="line">    onHashChange()&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">this</span>.matched = []</span><br><span class="line">        <span class="keyword">this</span>.match()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    match(routes)&#123;</span><br><span class="line">        routes = routes||<span class="keyword">this</span>.$options.routes</span><br><span class="line">        <span class="comment">//递归遍历路由表</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> route <span class="keyword">of</span> routes)&#123;</span><br><span class="line">            <span class="keyword">if</span>(route.path === <span class="string">'/'</span>&amp;&amp;<span class="keyword">this</span>.current===<span class="string">'/'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.matched.push(route)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(route.path!==<span class="string">'/'</span>&amp;&amp;<span class="keyword">this</span>.current.indexOf(route.path)!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.matched.push(route)</span><br><span class="line">                <span class="keyword">if</span>(route.children)&#123;<span class="comment">//如果有嵌套 </span></span><br><span class="line">                    <span class="keyword">this</span>.match(route.children)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue弹窗组件(一)</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/</url>
    <content><![CDATA[<p>本文讲述如何使用<code>render()</code>，构造一个弹窗组件</p>
<p><a href="https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/">点击这里查看</a>,使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>
<a id="more"></a>

<p>弹窗这类组件的特点是他们<strong>在当前vue实例之外独立存在</strong>，通常挂载于body；他们是通过JS动态创建的，不需要在任何组件中声明。常见的使用姿势：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$create(Notice, &#123;</span><br><span class="line">    title: <span class="string">"标题"</span>,</span><br><span class="line">    message: <span class="string">"提示信息"</span>,</span><br><span class="line">    duration: <span class="number">2000</span><span class="comment">//延时时间</span></span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure>

<h2 id="create函数"><a href="#create函数" class="headerlink" title="create函数"></a>create函数</h2><p>创建utils/create.js,并添加以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">Component,props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 组件构造函数如何获取？</span></span><br><span class="line">    <span class="comment">// 1.Vue.extend()</span></span><br><span class="line">    <span class="comment">// 2.render</span></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="comment">// h是createElement, 返回VNode，是虚拟dom</span></span><br><span class="line">        <span class="comment">// 需要挂载才能变成真实dom</span></span><br><span class="line">        render: <span class="function"><span class="params">h</span> =&gt;</span> h(Component, &#123;props&#125;),</span><br><span class="line">    &#125;).$mount() <span class="comment">// 不指定宿主元素，则会创建真实dom，但是不会追加操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取真实dom————vm.$el,并挂载到body上</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(vm.$el)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> comp = vm.$children[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    comp.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(vm.$el)</span><br><span class="line">        vm.$destroy()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> comp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> create</span><br></pre></td></tr></table></figure>

<h2 id="弹窗组件"><a href="#弹窗组件" class="headerlink" title="弹窗组件"></a>弹窗组件</h2><p>新建弹窗组件，<code>Notice.vue</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;box&quot; v-if&#x3D;&quot;isShow&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;box-content&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    message: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    duration: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 1000</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">      this.isShow &#x3D; true;</span><br><span class="line">      setTimeout(this.hide, this.duration);</span><br><span class="line">    &#125;,</span><br><span class="line">    hide() &#123;</span><br><span class="line">      this.isShow &#x3D; false;</span><br><span class="line">      &#x2F;&#x2F; 清除自己</span><br><span class="line">      this.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  top: 16px;</span><br><span class="line">  left: 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  border: grey 3px solid;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.box-content &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">  font-size: 14px;  </span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  margin-bottom: 8px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="使用弹窗组件"><a href="#使用弹窗组件" class="headerlink" title="使用弹窗组件"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Notice <span class="keyword">from</span> <span class="string">"@/components/Notice.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> create <span class="keyword">from</span> <span class="string">'./utils/create'</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    showNotice() &#123;</span><br><span class="line">        create(Notice, &#123;</span><br><span class="line">            title: <span class="string">"标题"</span>,</span><br><span class="line">            message: <span class="string">"提示信息"</span>,</span><br><span class="line">            duration: <span class="number">2000</span><span class="comment">//延时时间</span></span><br><span class="line">        &#125;).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue弹窗组件(二)</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/</url>
    <content><![CDATA[<p>本文讲述如何使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>
<p><a href="https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/">点击这里查看</a>，查看如何使用<code>render()</code>,构造一个弹窗组件</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在<code>components</code>文件夹下新建<code>Tools</code>文件夹用于存放所有的全局组件，<code>Tools</code>文件夹下新增<code>Notice</code>文件夹，并在其中新建<code>Notice.vue</code>和<code>Notice.js</code></p>
<h2 id="修改Notice-js"><a href="#修改Notice-js" class="headerlink" title="修改Notice.js"></a>修改<code>Notice.js</code></h2><p>在<code>Notice.js</code>中添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Notice <span class="keyword">from</span> <span class="string">'./Notice.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取组件构造器</span></span><br><span class="line"><span class="keyword">const</span> notice = Vue.extend(Notice);</span><br><span class="line"><span class="keyword">let</span> VM = <span class="string">''</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!props.text) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!VM) &#123;</span><br><span class="line">      <span class="keyword">const</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      <span class="comment">// 创建notice实例</span></span><br><span class="line">      VM = <span class="keyword">new</span> notice(&#123; <span class="attr">el</span>: oDiv &#125;);</span><br><span class="line">      <span class="comment">// 并把实例化的模板插入body</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(VM.$el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置属性</span></span><br><span class="line">    VM.type = type;</span><br><span class="line">    VM.text = props.text;</span><br><span class="line">    VM.timeout = !props.timeout&amp;&amp;props.timeout!=<span class="number">0</span>?<span class="number">3000</span>:props.timeout;</span><br><span class="line">    VM.show = <span class="literal">true</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      VM.show = <span class="literal">false</span>;</span><br><span class="line">    &#125;, VM.timeout);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> SHOW = AModal();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warning</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'warning'</span>, props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'info'</span>, props);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'success'</span>,props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'error'</span>, props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  warning,</span><br><span class="line">  success,</span><br><span class="line">  info,</span><br><span class="line">  error</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="编写弹窗组件"><a href="#编写弹窗组件" class="headerlink" title="编写弹窗组件"></a>编写弹窗组件</h2><p>在<code>Notice.vue</code>中，添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if&#x3D;&quot;show&quot; class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">      &lt;div :class&#x3D;&quot;type&quot;&gt;</span><br><span class="line">        &lt;strong&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;strong&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&quot;show&quot;, &quot;text&quot;, &quot;type&quot;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  top: 16px;</span><br><span class="line">  left: 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  border: grey 3px solid;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.success &#123;</span><br><span class="line">  background: #4caf50 !important;</span><br><span class="line">&#125;</span><br><span class="line">.info &#123;</span><br><span class="line">  background: #2196f3 !important;</span><br><span class="line">&#125;</span><br><span class="line">.warning &#123;</span><br><span class="line">  background: #ffc107 !important;</span><br><span class="line">&#125;</span><br><span class="line">.error &#123;</span><br><span class="line">  background: #ff1744 !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h2><p>在<code>main.js</code>中，添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> notice <span class="keyword">from</span> <span class="string">'./components/Tools/Notice/Notice'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$notice = notice</span><br></pre></td></tr></table></figure>

<h2 id="使用弹窗组件"><a href="#使用弹窗组件" class="headerlink" title="使用弹窗组件"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$notice.info(&#123;<span class="attr">text</span>:<span class="string">"Joker真帅"</span>,<span class="attr">timeout</span>:<span class="number">9999</span>&#125;)</span><br><span class="line"><span class="keyword">this</span>.$notice.success(&#123;<span class="attr">text</span>:<span class="string">"Joker真帅"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>就可以尽情使用了</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简易Vuex</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/</url>
    <content><![CDATA[<p>在阅读本篇之前，希望你已经对vuex的用法有了一定了解。可以参考一下<a href="https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/">Vue统一状态管理——Vuex</a>。</p>
<a id="more"></a>

<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex<strong>集中式</strong>存储管理应用的所有组件的状态，并以相应的规则保证状态以<strong>可预测</strong>的方式发生改变</p>
<img src="/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/1.png" class="" title="[第一步]">

<h2 id="整合vuex"><a href="#整合vuex" class="headerlink" title="整合vuex"></a>整合vuex</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add vuex</span><br></pre></td></tr></table></figure>

<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li>state 状态、数据</li>
<li>mutations 更改状态的函数</li>
<li>actions 异步操作</li>
<li>store 包含以上概念的容器</li>
</ul>
<h2 id="状态-state"><a href="#状态-state" class="headerlink" title="状态 - state"></a>状态 - state</h2><p>state保存应用状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123; <span class="attr">counter</span>:<span class="number">0</span> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="状态变更-mutations"><a href="#状态变更-mutations" class="headerlink" title="状态变更 - mutations"></a>状态变更 - mutations</h2><p>mutations用于修改状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add(state) &#123;</span><br><span class="line">            state.counter++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="派生状态-getters"><a href="#派生状态-getters" class="headerlink" title="派生状态 - getters"></a>派生状态 - getters</h2><p>从state派生出新状态，类似计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doubleCounter(state) &#123; <span class="comment">// 计算剩余数量</span></span><br><span class="line">            <span class="keyword">return</span> state.counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="动作-actions"><a href="#动作-actions" class="headerlink" title="动作 - actions"></a>动作 - actions</h2><p>添加业务逻辑，类似于controller</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        add(&#123; commit &#125;) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; commit(<span class="string">'add'</span>)&#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add')"</span>&gt;</span>counter: &#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('add')"</span>&gt;</span>async counter: &#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>double：&#123;&#123;$store.getters.doubleCounter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vuex原理解析"><a href="#Vuex原理解析" class="headerlink" title="Vuex原理解析"></a>Vuex原理解析</h1><h2 id="目标分析："><a href="#目标分析：" class="headerlink" title="目标分析："></a>目标分析：</h2><ul>
<li>实现一个插件：声明store类，挂载$store</li>
<li>Store具体实现：<ul>
<li>创建响应式的state，保存mutations、actions和getters</li>
<li>实现commit根据用户传入的type，执行对应的mutation</li>
<li>实现dispatch根据用户传入的type执行对应的action，同时传递上下文</li>
<li>实现getters，按照getters定义对state做派生</li>
</ul>
</li>
</ul>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Store声明、install实现，jvuex.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jvuex</span></span><br><span class="line"><span class="keyword">let</span> Vue <span class="comment">//保存构造函数的引用，避免import</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="comment">//响应化处理state</span></span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: options.state</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>)</span>&#123;</span><br><span class="line">    Vue = _Vue</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.$options.store)&#123;</span><br><span class="line">                Vue.prototype.$store = <span class="keyword">this</span>.$options.store</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    Store,</span><br><span class="line">    install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-commit"><a href="#实现-commit" class="headerlink" title="实现 commit"></a>实现 commit</h2><p>根据用户传入type获取并执行对应的mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改 Store类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>._mutations = options.mutations</span><br><span class="line">        <span class="comment">//响应化处理state</span></span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: options.state</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// store.commit('add',1)</span></span><br><span class="line">    <span class="comment">//type:mutation的类型</span></span><br><span class="line">    <span class="comment">//payload：载荷，参数</span></span><br><span class="line">    commit(type,payload)&#123;</span><br><span class="line">        <span class="keyword">const</span> entry = <span class="keyword">this</span>._mutations[type]</span><br><span class="line">        <span class="keyword">if</span>(entry)&#123;</span><br><span class="line">            entry(<span class="keyword">this</span>.state,payload)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-actions"><a href="#实现-actions" class="headerlink" title="实现 actions"></a>实现 actions</h2><p>根据用户传入的type获取并执行对应的mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继续修改Store类</span></span><br><span class="line">dispatch(type,payload)&#123;</span><br><span class="line">    <span class="keyword">const</span> entry = <span class="keyword">this</span>._actions[type]</span><br><span class="line">    <span class="keyword">if</span> (entry) &#123;</span><br><span class="line">        entry(<span class="keyword">this</span>, payload)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们运行一下会发现报以下错误</p>
<img src="/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/2.png" class="" title="[报错信息]">

<blockquote>
<p>错误原因：因为class的影响，this指向出了问题</p>
</blockquote>
<p>参考了一下官方的解决方案，我们修改Store：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//绑定 commit、dispatch的上下文</span></span><br><span class="line">    <span class="keyword">this</span>.commit = <span class="keyword">this</span>.commit.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.dispatch = <span class="keyword">this</span>.dispatch.bind(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化state"><a href="#优化state" class="headerlink" title="优化state"></a>优化state</h2><p>目前的代码还没有对state做一个很好的保护，会存在将来用户直接去改state中的值得行为，继续修改Store的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//响应化处理state</span></span><br><span class="line">    <span class="comment">// this.state = new Vue(&#123;</span></span><br><span class="line">    <span class="comment">//     data: options.state</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="keyword">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            <span class="comment">//加两个$，Vue不做代理 对外部是隐藏的</span></span><br><span class="line">            $$state:options.state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存取器 store.state</span></span><br><span class="line"><span class="keyword">get</span> state()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>._vm)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._vm._data.$$state</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> state(v)&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'禁止这样修改'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-getters"><a href="#实现-getters" class="headerlink" title="实现 getters"></a>实现 getters</h2><p>继续修改Store类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">this</span>._wrapperGetters = options.getters</span><br><span class="line">        <span class="comment">//定义computed选项</span></span><br><span class="line">        <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">        <span class="keyword">this</span>.getters = &#123;&#125;</span><br><span class="line">        <span class="keyword">const</span> store=<span class="keyword">this</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(<span class="keyword">this</span>._wrapperGetters).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//获取用户定义的getter</span></span><br><span class="line">            <span class="keyword">const</span> fn = store._wrapperGetters[key]</span><br><span class="line">            <span class="comment">//转化为computed可以使用的无参数形式</span></span><br><span class="line">            computed[key]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fn(store.state)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//为getters定义只读属性</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(store.getters,key,&#123;</span><br><span class="line">                <span class="keyword">get</span>:()=&gt; store._vm[key]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果手机自定义siri回答</title>
    <url>/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/</url>
    <content><![CDATA[<p>前几天抖音上看到一个在苹果店让siri叫老公的视频，相信不少小伙伴看完都偷偷对自己的siri试过吧。而且肯定也有不少小伙伴没有试出视频中的效果，这个是怎么做到的呢？看完这篇你就明白了。</p>
<a id="more"></a>

<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>首先我们肯定要有一步苹果手机，然后打开<strong>快捷指令</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/1.jpg" class="" title="[第一步]">

<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>点击创建快捷指令</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/2.jpg" class="" title="[第二步]">

<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>添加操作，并搜索<strong>显示提醒</strong>，选中最下方的<strong>显示提醒</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/3.jpg" class="" title="[第三步]">

<h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>修改图中<strong>信息</strong>部分为你希望siri回应的内容，然后点击下一步</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/4.jpg" class="" title="[设置回复内容]">

<p>例如我可以设置成这样</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/5.jpg" class="" title="[肯定是我最帅了]">

<blockquote>
<p>记得将下方的显示取消按钮设置成图中状态</p>
</blockquote>
<h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h1><p>设置触发我们设置好的回复内容的关键词语，然后点击完成</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/6.jpg" class="" title="[第五步]">

<p>例如我设置的<strong>谁是世界上最帅的男人</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/7.jpg" class="" title="[别问，问就是我最帅]">

<h1 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h1><p>接下来我们就可以和siri一起愉快的玩耍啦<del>~</del></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/8.jpg" class="" title="[我帅吧]">












<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
</search>
