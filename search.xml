<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue中Watch和Computed的差异</title>
    <url>/2020/05/Vue%E4%B8%ADWatch%E5%92%8CComputed%E7%9A%84%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<p>计算属性 vs 监听器</p>
<a id="more"></a>

<h1 id="语境上的差异"><a href="#语境上的差异" class="headerlink" title="语境上的差异"></a>语境上的差异</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个值变化了，我要做些事情，适合一个值影响多个值的情形</span></span><br><span class="line">watch:&#123;</span><br><span class="line">    firstname(newval,oldval)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fullname = <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;,</span><br><span class="line">    lastname(newval,oldval)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fullname = <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个值由其他值得来，这些值变化了我也要变，适合多个值影响一个值的情形</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    fullname()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计算属性有缓存性"><a href="#计算属性有缓存性" class="headerlink" title="计算属性有缓存性"></a>计算属性有缓存性</h1><p>计算所得的值如果没有变化不会重复执行</p>
<h1 id="监听器选项"><a href="#监听器选项" class="headerlink" title="监听器选项"></a>监听器选项</h1><p>监听器选项提供了更通用的方法，适合执行异步操作或者较大开销操作的情况</p>
<p><a href="https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8" target="_blank" rel="noopener">点击查看范例</a></p>
<p>我们可以在范例中看到，在created的时候将我们要发送的请求做了一次防抖处理的封装，输入停止500毫秒后才会触发，这样就可以很有效的控制请求的频率</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>日常工作中的git高频命令</p>
<a id="more"></a>
<h2 id="日常工作中常用的几条git命令"><a href="#日常工作中常用的几条git命令" class="headerlink" title="日常工作中常用的几条git命令"></a>日常工作中常用的几条git命令</h2><ol>
<li><p>查看所有本地分支和远程分支</p>
<p> <code>git branch -a</code></p>
</li>
<li><p>下载一个项目和它的整个代码历史</p>
<p> <code>git clone [url]</code></p>
</li>
<li><p>列出所有远程分支</p>
<p> <code>git branch -r</code></p>
</li>
<li><p>切换到指定分支</p>
<p> <code>git checkout [branch-name]</code></p>
</li>
<li><p>合并指定分支到当前分支</p>
<p> <code>git merge [branch]</code></p>
</li>
<li><p>新建一个分支，但依然停留在当前分支</p>
<p> <code>git branch [branch-name]</code></p>
</li>
<li><p>新建一个分支，并切换到该分支</p>
<p> <code>git checkout -b [branch]</code></p>
</li>
<li><p>显示所有远程仓库</p>
<p> <code>git remote -v</code></p>
</li>
<li><p>取回远程仓库的变化</p>
<p> <code>git pull</code></p>
</li>
<li><p>添加当前目录的所有文件到暂存区</p>
<p><code>git add .</code></p>
</li>
<li><p>提交暂存区到仓库区</p>
<p><code>git commit -m [message]</code></p>
</li>
<li><p>上传本地代码到远程仓库</p>
<p><code>git push</code></p>
</li>
<li><p>提交本地分支到远程仓库</p>
<p><code>git push origin 本地分支名</code></p>
</li>
<li><p>删除远程分支</p>
<p><code>git push --delete origin 分支名</code></p>
</li>
<li><p>更新远程分支列表</p>
<p><code>git remote update origin -p</code></p>
</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue中使用graphql</title>
    <url>/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/</url>
    <content><![CDATA[<p>记录在vue中使用graphql踩过的坑</p>
<a id="more"></a>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>首先我们保证已经有了一个vue项目，输入以下命令</p>
<p><code>npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag</code></p>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>创建apollo.js并输入以下代码</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApolloClient &#125; <span class="keyword">from</span> <span class="string">'apollo-client'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createHttpLink &#125; <span class="keyword">from</span> <span class="string">'apollo-link-http'</span></span><br><span class="line"><span class="keyword">import</span> &#123; InMemoryCache &#125; <span class="keyword">from</span> <span class="string">'apollo-cache-inmemory'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ApolloLink&#125; <span class="keyword">from</span> <span class="string">'apollo-link'</span></span><br><span class="line"><span class="comment">// 与 API 的 HTTP 连接</span></span><br><span class="line"><span class="keyword">const</span> httpLink = createHttpLink(&#123;</span><br><span class="line">  <span class="comment">// 你需要在这里使用绝对路径</span></span><br><span class="line">  uri: process.env.VUE_APP_BASEURL + <span class="string">'graphql'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> middlewareLink = <span class="keyword">new</span> ApolloLink(<span class="function">(<span class="params">operation, forward</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="string">''</span>;</span><br><span class="line">  <span class="comment">//配置token验证</span></span><br><span class="line">  <span class="keyword">let</span> api_token = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'api_token'</span>)!)</span><br><span class="line">  <span class="keyword">if</span> (api_token) &#123;</span><br><span class="line">      token = api_token</span><br><span class="line">  &#125;</span><br><span class="line">  operation.setContext(&#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">          Authorization: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span> || <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> forward(operation)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 缓存实现</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> InMemoryCache()</span><br><span class="line"><span class="comment">// 创建 apollo 客户端</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apolloClient = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  link: middlewareLink.concat(httpLink),</span><br><span class="line">  cache,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后在main.js中引入</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> apollo <span class="keyword">from</span> <span class="string">'./plugins/apollo'</span></span><br><span class="line"><span class="keyword">import</span> VueApollo <span class="keyword">from</span> <span class="string">'vue-apollo'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueApollo)</span><br><span class="line"><span class="keyword">const</span> apolloProvider = <span class="keyword">new</span> VueApollo(&#123;</span><br><span class="line">  defaultClient: apollo.apolloClient,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用 apolloProvider 选项将它添加到你的应用程序</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  vuetify,</span><br><span class="line">  i18n,</span><br><span class="line">  store,</span><br><span class="line">  apolloProvider,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在我们需要使用graphql的页面引入<code>gql</code></p>
<p><code>import gql from &#39;graphql-tag&#39;</code></p>
<p>然后创建一个js文件<code>query.js</code>用来编写查询语句，并在我们使用graphql的页面引入</p>
<p><code>import * as sql from &#39;./query&#39;</code></p>
<p>在<code>query.js</code>中添加查询代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span> <span class="string">'graphql-tag'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> report1 = gql <span class="string">`query($id: ID!)&#123;</span></span><br><span class="line"><span class="string">     contracts(first:10,id:$id)&#123;</span></span><br><span class="line"><span class="string">        data&#123;</span></span><br><span class="line"><span class="string">            id</span></span><br><span class="line"><span class="string">            address</span></span><br><span class="line"><span class="string">            contract_no</span></span><br><span class="line"><span class="string">            order&#123;</span></span><br><span class="line"><span class="string">                contract_id</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure>

<p>然后回到我们需要使用apollo的页面，使用如下方法进行查询</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$apollo.query(&#123;</span><br><span class="line">          query: sql.report1,</span><br><span class="line">          variables: &#123;</span><br><span class="line">            id: <span class="number">195</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          fetchPolicy:<span class="string">"no-cache"</span>,<span class="comment">//禁止缓存</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<img src="/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/1.png" class="" title="[如图，我们便得到了查询结果]">

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>graphql</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>graphql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo简单使用说明</title>
    <url>/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="一些使用hexo常用的命令"><a href="#一些使用hexo常用的命令" class="headerlink" title="一些使用hexo常用的命令"></a>一些使用hexo常用的命令</h1><a id="more"></a>


<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">"博客名称"</span>  =&gt; hexo new <span class="string">"博客名称"</span>   <span class="comment">#这两个都是创建新文章，前者是简写模式</span></span><br><span class="line">hexo p  =&gt; hexo publish</span><br><span class="line">hexo g  =&gt; hexo generate  <span class="comment">#生成</span></span><br><span class="line">hexo s  =&gt; hexo server  <span class="comment">#启动服务预览</span></span><br><span class="line">hexo clean  //清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo d  =&gt; hexo deploy  <span class="comment">#部署</span></span><br><span class="line">hexo publish [layout] &lt;title&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 引入图片</span></span><br><span class="line">``` bash</span><br><span class="line">![图片alt](图片地址 <span class="string">''</span>图片title<span class="string">''</span>)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line">例如</span><br><span class="line">![百度](https://www.baidu.com/img/flexible/logo/pc/result@2.png)</span><br><span class="line">或者</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_img result@2.png [title] %&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://www.baidu.com/img/flexible/logo/pc/result@2.png" alt="第一种"></p>
<img src="/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/result@2.png" class="" title="[第二种]">




<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">"超链接title"</span>)</span><br><span class="line">例如</span><br><span class="line">[简书](http://jianshu.com)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用符号<code>-</code></p>
<ul>
<li>第一个</li>
<li>第二个<br>。。。。。。</li>
</ul>
<h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**需要加粗的内容**</span><br></pre></td></tr></table></figure>
<p><strong>需要加粗的内容</strong></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; 内容</span><br><span class="line">&gt;&gt; 内容</span><br><span class="line">&gt;&gt;&gt; 内容</span><br></pre></td></tr></table></figure>
<blockquote>
<p>内容</p>
<blockquote>
<p>内容</p>
<blockquote>
<p>内容</p>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取豆瓣电影top250</title>
    <url>/2020/05/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top250/</url>
    <content><![CDATA[<p>记录使用python爬取豆瓣</p>
<a id="more"></a>



<h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import xlwt</span><br><span class="line"></span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>, style_compression=0)</span><br><span class="line">sheet = book.add_sheet(<span class="string">'豆瓣电影Top250'</span>)</span><br><span class="line">sheet.write(0, 0, <span class="string">'名称'</span>)</span><br><span class="line">sheet.write(0, 1, <span class="string">'图片'</span>)</span><br><span class="line">sheet.write(0, 2, <span class="string">'排名'</span>)</span><br><span class="line">sheet.write(0, 3, <span class="string">'评分'</span>)</span><br><span class="line">sheet.write(0, 4, <span class="string">'作者'</span>)</span><br><span class="line">sheet.write(0, 5, <span class="string">'简介'</span>)</span><br><span class="line"></span><br><span class="line">n = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(page):</span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start='</span> + str(page * 25) + <span class="string">'&amp;filter='</span></span><br><span class="line">    html = request_douban(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    list = soup.find(class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        item_name = item.find(class_=<span class="string">'title'</span>).string</span><br><span class="line">        item_img = item.find(<span class="string">'a'</span>).find(<span class="string">'img'</span>).get(<span class="string">'src'</span>)</span><br><span class="line">        item_index = item.find(class_=<span class="string">''</span>).string</span><br><span class="line">        item_score = item.find(class_=<span class="string">'rating_num'</span>).string</span><br><span class="line">        item_author = item.find(<span class="string">'p'</span>).text</span><br><span class="line">        <span class="keyword">if</span> item.find(class_=<span class="string">'inq'</span>) is not None:</span><br><span class="line">            item_intr = item.find(class_=<span class="string">'inq'</span>).string</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'爬取电影：'</span> + item_index + <span class="string">' | '</span> + item_name + <span class="string">' | '</span> + item_score + <span class="string">' | '</span> + item_intr)</span><br><span class="line"></span><br><span class="line">        global n</span><br><span class="line">        sheet.write(n, 0, item_name)</span><br><span class="line">        sheet.write(n, 1, item_img)</span><br><span class="line">        sheet.write(n, 2, item_index)</span><br><span class="line">        sheet.write(n, 3, item_score)</span><br><span class="line">        sheet.write(n, 4, item_author)</span><br><span class="line">        sheet.write(n, 5, item_intr)</span><br><span class="line">        n = n + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def request_douban(url):</span><br><span class="line">    maxTryNum = 20</span><br><span class="line">    <span class="keyword">for</span> tries <span class="keyword">in</span> range(maxTryNum):</span><br><span class="line">        try:</span><br><span class="line">            kv = &#123;<span class="string">"user-agent"</span>: <span class="string">"Mizilla/5.0"</span>&#125;</span><br><span class="line">            response = requests.get(url, headers=kv, timeout=60)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">                <span class="built_in">return</span> response.text</span><br><span class="line">        except requests.RequestException:</span><br><span class="line">            <span class="keyword">if</span> tries &lt; (maxTryNum - 1):</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Has tried %d times to access url %s, all failed!"</span> % (maxTryNum, url))</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0, 10):</span><br><span class="line">        main(i)</span><br><span class="line"></span><br><span class="line">    book.save(<span class="string">'豆瓣最受欢迎的250部电影.xls'</span>)</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中路由守卫</title>
    <url>/2020/06/Vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/</url>
    <content><![CDATA[<p>Vue中路由守卫的详细用法</p>
<a id="more"></a>

<h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p><code>vue-router</code> 提供的导航守卫主要是用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局，单个路由独享，或者组件级</p>
<h2 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//to:Route:即将要进入的目标，路由对象</span></span><br><span class="line">    <span class="comment">//from:Route:当前导航正要离开的路由</span></span><br><span class="line">    <span class="comment">//next:Function:一定要调用该方法来 resolve 这个钩子 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home.vue'</span>),</span><br><span class="line">        meta: &#123;</span><br><span class="line">            auth: <span class="literal">true</span><span class="comment">//限制home要登录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/login.vue'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判断路由是否需要守卫</span></span><br><span class="line">    <span class="comment">//meta数据</span></span><br><span class="line">    <span class="keyword">if</span>(to.meta.auth)&#123;</span><br><span class="line">        <span class="comment">//是否登录</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">            next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="单个路由守卫"><a href="#单个路由守卫" class="headerlink" title="单个路由守卫"></a>单个路由守卫</h2><p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home.vue'</span>),</span><br><span class="line">        meta: &#123;</span><br><span class="line">            auth: <span class="literal">true</span><span class="comment">//限制home要登录</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeEnter(to,<span class="keyword">from</span>,next)&#123;</span><br><span class="line">            <span class="comment">//是否登录</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">                next()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">                next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h2><p>可以在路由组件内直接定义以下导航守卫</p>
<ul>
<li>beforeRouteEnter</li>
<li>beforeRouteUpdate</li>
<li>beforeRouteLeave</li>
</ul>
<p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//About.vue</span></span><br><span class="line">mounted()&#123;...&#125;,</span><br><span class="line">methods:&#123;...&#125;,</span><br><span class="line">beforeRouteEnter(to,<span class="keyword">from</span>,next)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">            next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">        next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>通过router.addRoutes(routes)方式动态添加路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局守卫修改为：要求用户必须登录，否则只能去登录页</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.isLogin) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next(<span class="string">'/'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next(<span class="string">'/login?redirect='</span> + to.fullPath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Login.vue用户登录成功后动态添加/about</span></span><br><span class="line">login() &#123;</span><br><span class="line">    <span class="built_in">window</span>.isLogin = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.$router.addRoutes([</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">"/about"</span>, <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="keyword">this</span>.$route.query.redirect || <span class="string">"/"</span>;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(redirect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>不好好工作会怎么样呢</title>
    <url>/2020/05/%E4%B8%8D%E5%A5%BD%E5%A5%BD%E5%B7%A5%E4%BD%9C%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%E5%91%A2/</url>
    <content><![CDATA[<p>经常看到有人抱怨工作辛苦</p>
<p>那么当你看完这个，还会继续抱怨吗</p>
<a id="more"></a>




<video src='1.mp4 ' type='video/mp4' controls='controls'  width='100%' height='100%'>
</video>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件化</title>
    <url>/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
    <content><![CDATA[<p>Vue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用程序界面都可以抽象为一个组件树。组件化可以提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。</p>
<a id="more"></a>

<h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>父给子传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child</span></span><br><span class="line">props:&#123; <span class="attr">msg</span>: <span class="built_in">String</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;HelloWorld msg=<span class="string">"hello world"</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>子给父传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'add'</span>, good)</span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line">&lt;Cart @add=<span class="string">"cartAdd($event)"</span>&gt;&lt;<span class="regexp">/Cart&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>任意两个组件之间传值常用事件总线或vuex的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bus:事件触发、监听和回调管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks=&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $on(name,fn)&#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks[name]=<span class="keyword">this</span>.callbacks[name]||[]</span><br><span class="line">        <span class="keyword">this</span>.callbacks[name].push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    $emit(name,args)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.callbacks[name])&#123;</span><br><span class="line">            <span class="keyword">this</span>.callbacks[name].forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(args))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Bus()</span><br><span class="line"></span><br><span class="line"><span class="comment">//child1</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//child2</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>

<p>实践中通常用Vue代替Bus,因为Vue已经实现了相应的接口</p>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>创建唯一的全局数据管理者store，通过他管理数据并通知组件状态变更</p>
<p>详细见<a href="https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/">Vue统一状态管理——Vuex</a></p>
<h2 id="parent-root"><a href="#parent-root" class="headerlink" title="$parent/$root"></a>$parent/$root</h2><p>兄弟组件之间通信可以通过共同的祖辈搭桥，$parent或$root,与Bus总线类似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//brother1</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$on(<span class="string">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//brother2</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$emit(<span class="string">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>

<h2 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h2><p>父组件可以通过$children访问子组件，实现父子通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="keyword">this</span>.$children[<span class="number">0</span>].xx = <span class="string">'xxx'</span></span><br></pre></td></tr></table></figure>
<p>  注意：$children不能保证子元素顺序 (异步组件)</p>
<h2 id="attr-listener"><a href="#attr-listener" class="headerlink" title="$attr/$listener"></a>$attr/$listener</h2><p>包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外)。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定(class和style除外)，并且可以通过 vbind=”$attrs”传入内部组件——在创建高级别的组件时非常有用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child:并未在props内声明foo</span></span><br><span class="line">&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/parent</span></span><br><span class="line"><span class="regexp">&lt;Helloworld foo = 'foo'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>获取子节点引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;Helloworld ref=<span class="string">'hw'</span>&gt;</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.hw.xx = <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><p>能够实现祖先和后代之间传值(依赖注入)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ancestor </span></span><br><span class="line">provide()&#123;<span class="comment">//与data、mounted平级</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo:<span class="string">'foooooo'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//descendant</span></span><br><span class="line">&lt;p&gt;&#123;&#123;foo&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">inject:['foo']</span></span><br></pre></td></tr></table></figure>
<p>也可以使用别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件中</span></span><br><span class="line">&lt;p&gt;&#123;&#123;bar&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">inject:&#123;bar:&#123;from:'foo'&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>  provide和inject主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p>
<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p>
<h2 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span>content...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Comp1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>将内容分发到子组件指定位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认插槽使用default做参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:default</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽使用插槽名做参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:content</span>&gt;</span>内容。。<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>分发内容要用到子组件中的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span> <span class="attr">:foo</span>=<span class="string">"foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 把v-slot的值指定为作用域上下文对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:default</span>=<span class="string">"soltProps"</span>&gt;</span></span><br><span class="line">        来自子组件数据：&#123;&#123;soltProps.foo&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Comp3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 作用域插槽 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对象解构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>=<span class="string">"&#123;fc&#125;"</span>&gt;</span>&#123;&#123;fc&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- children --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">:fc</span>=<span class="string">"footerContent"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/slots/Layout.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Layout</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// children </span></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        remark: [</span><br><span class="line">          <span class="string">'好好学习，天天向上'</span>,</span><br><span class="line">          <span class="string">'学习永远不晚'</span>,</span><br><span class="line">          <span class="string">'学习知识要善于思考,思考,再思考'</span>,</span><br><span class="line">          <span class="string">'学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始'</span>,</span><br><span class="line">          <span class="string">'构成我们学习最大障碍的是已知的东西,而不是未知的东西'</span>,</span><br><span class="line">          <span class="string">'在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事'</span>,</span><br><span class="line">          <span class="string">'三人行必有我师焉；择其善者而从之，其不善者而改之'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    footerContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.remark[<span class="keyword">new</span> <span class="built_in">Date</span>().getDay() - <span class="number">1</span>] </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue统一状态管理——Vuex</title>
    <url>/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/</url>
    <content><![CDATA[<p>Vuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状<br>态，并以相应的规则保证状态以可预测的方式发生变化。</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>vue add vuex</code></p>
<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>将应用全局状态定义在state中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line"> isLogin: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>修改State只能通过Mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    login(state) &#123;</span><br><span class="line">        state.isLogin = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    logout(state) &#123;</span><br><span class="line">        state.isLogin = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="获取和修改状态"><a href="#获取和修改状态" class="headerlink" title="获取和修改状态"></a>获取和修改状态</h2><p>使用store.state获取状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!$store.state.isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"logout"</span> <span class="attr">v-else</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改状态只能通过store.dispatch(mutation)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'login'</span>)</span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'logout'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数1是vuex传递的上下文context:&#123;commit,dispatch,state&#125;</span></span><br><span class="line">login(&#123;commit&#125;, username) &#123;</span><br><span class="line">    <span class="comment">//模拟登陆api调用，1s后如果登录名是admin则登陆成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (username === <span class="string">'admin'</span>) &#123;</span><br><span class="line">                commit(<span class="string">'login'</span>)</span><br><span class="line">                resolve()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>派发动作，触发actions</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'login'</span>, <span class="string">'admin'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$router.push(<span class="keyword">this</span>.$route.query.redirect)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'用户名或密码错误'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>使用modules定义多个子模块有利于组件复杂状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        user,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>移动先前登陆状态相关代码到store文件夹下新建的user.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,<span class="comment">//避免命名冲突</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问方式相应变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Login.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!$store.state.user.isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'user/login'</span>, <span class="string">'admin'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="keyword">this</span>.$route.query.redirect || <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">this</span>.$router.push(redirect)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'用户名或密码错误'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line">store.state.user.isLogin</span><br></pre></td></tr></table></figure>

<h2 id="mapState-mapMutation-mapAction"><a href="#mapState-mapMutation-mapAction" class="headerlink" title="mapState()/mapMutation()/mapAction()"></a>mapState()/mapMutation()/mapAction()</h2><p>通过这些映射方法可以让大家少敲几个字，而起避免对store的直接访问</p>
<p>state相关修改,<code>Login.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(<span class="string">'user'</span>, [<span class="string">'isLogin'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>action相关修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">'user/login'</span>](<span class="string">"admin"</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapActions([<span class="string">'user/login'</span>,<span class="string">'user/logout'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><p>可以使用getters从store的state中派生出一些状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state:&#123;</span><br><span class="line">        isLogin:<span class="literal">false</span>,</span><br><span class="line">        username:<span class="string">''</span><span class="comment">//用户名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        login(state,username)&#123;</span><br><span class="line">            state.isLogin = <span class="literal">true</span></span><br><span class="line">            state.username = username</span><br><span class="line">        &#125;,</span><br><span class="line">        logout()&#123;</span><br><span class="line">            state.isLogin = <span class="literal">false</span></span><br><span class="line">            state.username = <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        welcome: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.username + <span class="string">',欢迎回来'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        login(&#123;commit&#125;,username)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(username===<span class="string">'admin'</span>)&#123;</span><br><span class="line">                        commit(<span class="string">'login'</span>,username)</span><br><span class="line">                        resolve()</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        reject()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">1000</span>)</span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在需要渲染的页面中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isLogin"</span>&gt;</span></span><br><span class="line">    &#123;&#123;welcome&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState,mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState(<span class="string">'user'</span>,[<span class="string">'isLogin'</span>])</span><br><span class="line">        ...mapGetters(<span class="string">'user'</span>,[<span class="string">'welcome'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。开启严格模式<code>strict: true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    strict: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Vuex的store接受plugins选项，这个选项暴露出每次mutation的钩子。Vuex插件就是一个函数，它接收 store 作为唯一参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 当 store 初始化后调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在store文件夹下新建plugins文件夹并新建persist.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store =&gt;&#123;</span><br><span class="line">    <span class="comment">//store初始化的时候，将存储在localStoreage的状态还原</span></span><br><span class="line">    <span class="keyword">if</span>(localStoreage)&#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'user'</span>))</span><br><span class="line">        <span class="keyword">if</span>(user)&#123;</span><br><span class="line">            store.commit(<span class="string">'login'</span>,user.username)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果用户相关状态发生变化，自动存入localStoreage</span></span><br><span class="line">    store.subscribe(<span class="function">(<span class="params">mutation,state</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//&#123;type:'user/login'&#125;</span></span><br><span class="line">        <span class="comment">//&#123;type:'user/logout'&#125;</span></span><br><span class="line">        <span class="comment">//&#123;type:'cart/addcart'&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(mutation.type===<span class="string">'user/login'</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> user = <span class="built_in">JSON</span>.stringify(state.user)</span><br><span class="line">            localStoreage.setItem(<span class="string">'user'</span>,user)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mutation.type===<span class="string">'user/logout'</span>)&#123;</span><br><span class="line">            localStoreage.removeItem(<span class="string">'user'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册插件：</p>
<p>在store的index.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">'./plugins/persist'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [persist]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手封装一个Vue表单组件</title>
    <url>/2020/06/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAVue%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>仿element-ui封装一个通用的表单组件</p>
<a id="more"></a>

<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ul>
<li><p>实现JForm</p>
<ul>
<li>指定数据，校验规则</li>
</ul>
</li>
<li><p>JFormItem</p>
<ul>
<li>执行校验</li>
<li>显示错误信息</li>
</ul>
</li>
<li><p>JInput</p>
<ul>
<li>维护数据</li>
</ul>
</li>
</ul>
<p>最终理想效果：<a href="https://element.eleme.cn/#/zh-CN/component/form" target="_blank" rel="noopener">element Form 表单</a></p>
<h1 id="JInput"><a href="#JInput" class="headerlink" title="JInput"></a>JInput</h1><p>创建components/form/JInput.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 自定义组件双向绑定：:value  @input --&gt;</span><br><span class="line">    &lt;!-- v-bind&#x3D;&quot;$attrs&quot;展开$attrs 每一个项都可以单独设置上去 --&gt;</span><br><span class="line">    &lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">  export default &#123;</span><br><span class="line">    inheritAttrs: false, &#x2F;&#x2F; 设置为false避免attrs设置到根元素上</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      type: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;text&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onInput(e) &#123;</span><br><span class="line">        &#x2F;&#x2F; 派发一个input事件即可</span><br><span class="line">        this.$emit(&#39;input&#39;, e.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JInput"><a href="#使用JInput" class="headerlink" title="使用JInput"></a>使用JInput</h1><p>创建components/form/index.vue，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class="line">        &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实现JFormItem"><a href="#实现JFormItem" class="headerlink" title="实现JFormItem"></a>实现JFormItem</h1><p>创建components/form/JFormItem.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class="line">            type:String,</span><br><span class="line">            default:&#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JFormItem"><a href="#使用JFormItem" class="headerlink" title="使用JFormItem"></a>使用JFormItem</h1><p>在components/form/index.vue中添加基础代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class="line">        &lt;j-form-item label&#x3D;&quot;用户名&quot;&gt;</span><br><span class="line">            &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;&#x2F;j-form-item&gt;</span><br><span class="line">        &lt;j-form-item label&#x3D;&quot;密码&quot;&gt;</span><br><span class="line">            &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;&#x2F;j-form-item&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput,JFormItem</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实现JForm"><a href="#实现JForm" class="headerlink" title="实现JForm"></a>实现JForm</h1><p>创建components/form/JForm.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    provide() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            form: this &#x2F;&#x2F; 将组件实例作为提供者，子代组件可方便获取</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        model: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">            type: Object</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JForm"><a href="#使用JForm" class="headerlink" title="使用JForm"></a>使用JForm</h1><p>在components/form/index.vue中添加基础代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; </span><br><span class="line">    &lt;!-- JForm --&gt;</span><br><span class="line">    &lt;JForm :model&#x3D;&quot;userInfo&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;!-- 用户名 --&gt;</span><br><span class="line">      &lt;JFormItem label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;JInput v-model&#x3D;&quot;userInfo.username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">      &lt;!-- 密码 --&gt;</span><br><span class="line">      &lt;JFormItem label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;JInput type&#x3D;&quot;password&quot; v-model&#x3D;&quot;userInfo.password&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">      &lt;!-- 提交按钮 --&gt;</span><br><span class="line">      &lt;JFormItem&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">    &lt;&#x2F;JForm&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class="line">import JForm from &quot;.&#x2F;JForm&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput,JFormItem,JForm</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            rules: &#123;</span><br><span class="line">                username: [&#123; required: true, message: &quot;请输入用户名&quot; &#125;],</span><br><span class="line">                password: [&#123; required: true, message: &quot;请输入密码&quot; &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        login()&#123;</span><br><span class="line">            this.$refs[&#39;loginForm&#39;].validate(valid &#x3D;&gt; &#123;</span><br><span class="line">                if(valid)&#123;</span><br><span class="line">                    alert(&quot;请求登录&quot;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&quot;请求失败&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h1><p>JInput中通知校验，修改components/form/JInput.vue中代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- dom --&gt;</span><br><span class="line">&lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- methods --&gt;</span><br><span class="line">onInput(e) &#123;</span><br><span class="line">    &#x2F;&#x2F; 派发一个input事件即可</span><br><span class="line">    this.$emit(&#39;input&#39;, e.target.value)</span><br><span class="line">    &#x2F;&#x2F; 通知父级执行校验</span><br><span class="line">    this.$parent.$emit(&#39;validate&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JFormItem监听校验通知，获取规则并执行校验，修改components/form/JFormItem.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    inject:[&#39;form&#39;],&#x2F;&#x2F;注入</span><br><span class="line">    mounted()&#123;&#x2F;&#x2F;监听校验事件</span><br><span class="line">        this.$on(&#39;validate&#39;,()&#x3D;&gt;&#123;this.validate()&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        validate()&#123;</span><br><span class="line">            &#x2F;&#x2F;获取对应JFormItem的校验规则</span><br><span class="line">            console.log(this.form.rules[this.prop]);</span><br><span class="line">            &#x2F;&#x2F;获取对应JFormItem的值</span><br><span class="line">            console.log(this.form.model[this.prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class="line">            type:String,</span><br><span class="line">            default:&#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        prop: &#123;</span><br><span class="line">            type: String</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>安装校验库async-validator： <code>npm i async-validator -S</code></p>
<p>在components/form/JFormItem.vue中引入，并添加校验代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">"async-validator"</span>;</span><br><span class="line">...</span><br><span class="line">validate()&#123;</span><br><span class="line">    <span class="comment">//获取对应校验规则</span></span><br><span class="line">    <span class="keyword">const</span> rules = <span class="keyword">this</span>.form.rules[<span class="keyword">this</span>.prop];</span><br><span class="line">    <span class="comment">//获取校验值</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.form.model[<span class="keyword">this</span>.prop];</span><br><span class="line">    <span class="comment">//获取描述对象</span></span><br><span class="line">    <span class="keyword">const</span> desc = &#123;[<span class="keyword">this</span>.prop]:rules&#125;;</span><br><span class="line">    <span class="comment">//创建Schema实例</span></span><br><span class="line">    <span class="keyword">const</span> schema = <span class="keyword">new</span> Schema(desc)</span><br><span class="line">    <span class="keyword">return</span> schema.validate(&#123;[<span class="keyword">this</span>.prop]:value&#125;,errors =&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(errors)&#123;</span><br><span class="line">            <span class="keyword">this</span>.error=errors[<span class="number">0</span>].message</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//校验通过</span></span><br><span class="line">            <span class="keyword">this</span>.error=<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="表单全局校验"><a href="#表单全局校验" class="headerlink" title="表单全局校验"></a>表单全局校验</h1><p>为JForm提供validate方法，修改components/form/JForm.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validate(cb)&#123;</span><br><span class="line">    <span class="comment">// 获取所有孩子KFormItem</span></span><br><span class="line">    <span class="comment">// [resultPromise]</span></span><br><span class="line">    <span class="keyword">const</span> task = <span class="keyword">this</span>.$children</span><br><span class="line">    .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.prop) <span class="comment">// 过滤掉没有prop属性的Item</span></span><br><span class="line">    .map(<span class="function"><span class="params">item</span> =&gt;</span> item.validate())</span><br><span class="line">    <span class="comment">//统一处理所有的Promise结果</span></span><br><span class="line">    <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> cb(<span class="literal">true</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span>=&gt;</span> cb(<span class="literal">false</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue项目中动态加载js</title>
    <url>/2020/06/%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDjs/</url>
    <content><![CDATA[<p>通常情况下，如果网页加载的js文件较多并且文件较大的时候，一次性加载完毕的话，会非常的影响网页加载的速度，当然将会严重影响用户体验，最终会影响的站点的人气，所以我们要想办法解决这个问题。</p>
<a id="more"></a>

<p>很多时候，加载的js代码在当前页面功能中并不需要，所以如果能够根据需要动态的加载js文件，那么将会极大的提高网页的加载速度，下面就通过代码实例介绍一下如何动态加载js。</p>
<p>vue中常用的引入js文件的方式一般有三种</p>
<ul>
<li><p>在html文件中<code>&lt;script src=&quot;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>引入</p>
</li>
<li><p>在<code>main.js</code>或需要引用的<code>.vue</code>文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'../a'</span><span class="comment">//要用到export导出之后 才能用import导入.</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../a'</span><span class="comment">//和直接引入script标签是一样的</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>假设我们有这样一个比较极限的应用场景：</p>
<p>我们在登录页需要支持facebook，google，微信等十多个平台的第三方登录，并且每个第三方登录所需要的js文件特别大，用我们常规的用法去加载的话在用户第一次使用的时候就需要加载特别多的js文件，势必会造成用户体验不好的情况</p>
<p>那么我们应该怎么去优化呢</p>
<h1 id="vue-plugin-load-script"><a href="#vue-plugin-load-script" class="headerlink" title="vue-plugin-load-script"></a>vue-plugin-load-script</h1><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save vue-plugin-load-script</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In main.js</span></span><br><span class="line"><span class="keyword">import</span> LoadScript <span class="keyword">from</span> <span class="string">'vue-plugin-load-script'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(LoadScript);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//login.vue</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    wxLogin()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$loadScript(<span class="string">"https://wx登录需要的js"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Script is loaded, do something</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Failed to fetch script</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    googleLogin()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$loadScript(<span class="string">"https://谷歌登录需要的js"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Script is loaded, do something</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Failed to fetch script</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样用户点击什么登录方式就会去加载对应的第三方登录需要的js，从而避免了加载过多不需要的js造成页面性能浪费</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>必备知识之Vue-Cli</title>
    <url>/2020/06/%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%E4%B9%8BVue-Cli/</url>
    <content><![CDATA[<p>更快速构建vue项目</p>
<a id="more"></a>

<h1 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h1><p>你可以使用<code>vue serve</code>和<code>vue build</code>命令对单个vue文件快速进行原型开发</p>
<h2 id="安装-vue-cli-service-global扩展"><a href="#安装-vue-cli-service-global扩展" class="headerlink" title="安装@vue/cli-service-global扩展"></a>安装<code>@vue/cli-service-global</code>扩展</h2><p><code>npm install  -g @vue/cli-service-global</code></p>
<p>准备一个内容原型</p>
<h2 id="vue-serve"><a href="#vue-serve" class="headerlink" title="vue serve"></a>vue serve</h2><p>启动一个服务并运行原型</p>
<p><code>vue serve Hello.vue</code></p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="vue-create"><a href="#vue-create" class="headerlink" title="vue create"></a>vue create</h2><p>创建一个vue项目</p>
<p><code>vue create projectname</code></p>
<h2 id="vue-ui"><a href="#vue-ui" class="headerlink" title="vue ui"></a>vue ui</h2><p>图形化项目管理</p>
<p><code>vue ui</code></p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>Vue Cli使用了一套基于插件的架构。插件可以修改webpack的内部配置，也可以向vue-cli-serve注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的</p>
<h2 id="在现有的项目中安装插件"><a href="#在现有的项目中安装插件" class="headerlink" title="在现有的项目中安装插件"></a>在现有的项目中安装插件</h2><p>如果你想在一个已经被创建好的项目中安装一个插件，可以使用 <code>vue add</code> 命令</p>
<p><code>vue add router</code></p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="处理资源路径"><a href="#处理资源路径" class="headerlink" title="处理资源路径"></a>处理资源路径</h2><p>当你在JavaScript、css或vue文件中使用相对路径(必须以<code>.</code>开头)引用一个静态资源时，该资源将被webpack处理。(public中文件webpack不会处理)</p>
<h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>如果URL是一个绝对路径(例如<code>/images/foo.png</code>),他将会保留不变。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"/assets/logo.png"</span>&gt;</span>//当前服务器静态路径下 public会作为服务器静态路径</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"http://image.xx.com/logo.png"</span>&gt;</span>//某图片服务器线上地址</span><br></pre></td></tr></table></figure>

<p>如果URL以<code>.</code>开头会作为一个相对模块请求被解释并基于文件系统相对路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果URL以<code>~</code>开头会作为一个模块请求被解析，这意味着你甚至可以引用Node模块中的资源</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"~some-npm-package/foo.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果URL以<code>@</code>开头会作为一个模块请求被解析，Vue Cli默认会设置一个指向<code>src</code>的别名<code>@</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/Hello.vue'</span></span><br></pre></td></tr></table></figure>

<h3 id="何时使用public文件夹"><a href="#何时使用public文件夹" class="headerlink" title="何时使用public文件夹"></a>何时使用<code>public</code>文件夹</h3><p>通过webpack的处理并获得如下好处：</p>
<ul>
<li><p>脚本和样式表会被压缩并且打包在一起，从而避免额外的网络请求</p>
</li>
<li><p>文件丢失会直接在编译时报错，而不是到了用户端才会产生404错误</p>
</li>
<li><p>最终生成的文件名包含了内容哈希，因此不用担心浏览器缓存他们的老版本</p>
</li>
</ul>
<p>以下的几种情况可以考虑使用public文件夹</p>
<ul>
<li><p>你需要在构建输出中指定一个固定的文件名字</p>
</li>
<li><p>你有上千个图片，需要动态引用他们的路径</p>
</li>
<li><p>有些库可能会和webpack不兼容，除了将其用一个独立的<code>&lt;script&gt;</code>标签引入没有别的办法</p>
</li>
</ul>
<h3 id="使用public文件夹的注意事项"><a href="#使用public文件夹的注意事项" class="headerlink" title="使用public文件夹的注意事项"></a>使用public文件夹的注意事项</h3><p>如果你的应用没有部署在域名的根部，那么你需要为你的URL配置<code>publicPath</code>前缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">    publicPath: precess.env.NODE_ENV === <span class="string">'production'</span>?<span class="string">'线上所在目录'</span>:<span class="string">'本地所在目录 正常为 / '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>public/index.html</code> 等通过<code>html-webpack-plugin</code>用作模板的HTML文件中，你需要用过<code>&lt;% =BASE_URL %&gt;</code> 设置链接前缀：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;% =BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在模板中，先向组件传入BASE_URL：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        publicPath: process.env.BASE_URL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用的时候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img :src=<span class="string">"`$&#123;publicPath&#125;my-image.png`"</span>&gt;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中key的作用和工作原理</title>
    <url>/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>一般我们会回答：可以唯一的确定一个dom元素，从而执行diff算法的时候更高效。</p>
<p>但是到底为什么是这样呢，我们来从源码中找一下答案。</p>
<a id="more"></a>

<p>准备测试代码,在页面加载两秒后执行一个插入操作，在c的前面插入一个f</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#demo"</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    items:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted()&#123;</span><br><span class="line"><span class="javascript">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.items.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'f'</span>)</span></span><br><span class="line">                &#125;,2000)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不使用key，其实并不知道要更新谁，只能做一个操作，就是逐步更新：</p>
<p>首先更新a，其次更新b，第三步的时候覆盖更新，将f更新到原来的c上，c更新到原来的d，d更新到e，然后再创建一个新的e追加在最后。执行了五次更新一次创建追加。</p>
<p>如果使用了key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前两次更新与不使用key一样</span><br><span class="line">&#x2F;&#x2F;首次循环patch a</span><br><span class="line">a b c d e</span><br><span class="line">a b f c d e </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第2次循环patch b</span><br><span class="line">b c d e</span><br><span class="line">b f c d e</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第3次循环patch e</span><br><span class="line">c d e</span><br><span class="line">f c d e</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第4次循环patch d</span><br><span class="line">c d </span><br><span class="line">f c d </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第5次循环patch c</span><br><span class="line">c</span><br><span class="line">f c </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;oldch全部处理结束，newch中剩下f，创建f并插入到c前面</span><br></pre></td></tr></table></figure>

<p>这边虽然看上去是执行了五次更新，但是这五次并没有发生任何操作，因为是在更新五个完全相同的节点。因为数据没有发生变化，所以在执行patch是不会做任何事情，也不会发生任何dom操作。</p>
<p>因此准确的来讲，如果不使用key我们执行了三次更新同时一次创建插入操作；而使用了key只做了一次创建插入操作，在数据量比较大的时候运行效率会大大提高。</p>
<p>打开控制台，在vue.js的第6182行加上一个断点，并将oldStartVnode的标签指定在p标签上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//断点所在行</span></span><br><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;......&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右键编辑断点，加上以下条件 这样以后在update children时只观察p标签的变化</span></span><br><span class="line">oldStartVnode.tag===<span class="string">'p'</span></span><br></pre></td></tr></table></figure>
<p>然后刷新页面，我们可以看到，每次都会进入以下逻辑</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/1.png" class="" title="[sameVnode]">

<p>我们进到sameVnode()中看一下</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/2.png" class="" title="[sameVnode]">

<p>判断的条件第一条就是判断key的值是否相等，两个undefined会让等式成立，标签相同，都不是注释，data也没有发生变化，也不是input，因此判断条件已经成立了。如果没有设置key的情况下，只要两个标签相同，就会被认为是同一节点，就开始进行patch操作。</p>
<p>我们将key加上，再看一下结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前两次直接跳过，因为a、b都是相同的节点，到第三次的时候，就会进入到patch e中</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/3.png" class="" title="[sameVnode]">

<p>到第五次循环时，老的已经循环结束了，新的只剩下了f</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/4.png" class="" title="[sameVnode]">

<p>并且在debug的过程中我们也不难看出，设置了key的只会在最后一步更新，而未设置key的会从第三次开始，每次在视图上做出更新。</p>
<p><strong>结论</strong></p>
<ol>
<li><p>key的作用主要是为了更高效的更新虚拟dom，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同的元素，使得整个patch过程更加的高效，减少dom操作量，提高性能。</p>
</li>
<li><p>另外，如果不设置key还可能在列表更新时引发一些隐蔽的bug(例如：更新了某一不需要更新的行)</p>
</li>
<li><p>vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果 </p>
</li>
</ol>
<blockquote>
<p>2.2.0+ 的版本里，当在组件中使用v-for时，key现在是必须的，key的取值需要是number或者string，而且需要在同级唯一。</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML中常用的meta便签</title>
    <url>/2020/07/HTML%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84meta%E4%BE%BF%E7%AD%BE/</url>
    <content><![CDATA[<p><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</p>
<p><code>&lt;meta&gt;</code>标签位于文档的头部，不包含任何内容。<code>&lt;meta&gt;</code>标签的属性定义了与文档相关联的名称/值对。</p>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>标签提供关于HTML文档的元数据。它不会显示在页面上，但是对于机器是可读的。可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>meta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的http头部内容，例如我们为页面中添加如下meta标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"charset"</span> <span class="attr">content</span>=<span class="string">"iso-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"31 Dec 2008"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器的头部就会包括这些:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">charset:iso-8859-1</span><br><span class="line">expires:31 Dec 2008</span><br></pre></td></tr></table></figure>
<p>只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
  </entry>
  <entry>
    <title>Vue组件data为何要函数形式</title>
    <url>/2020/07/Vue%E7%BB%84%E4%BB%B6data%E4%B8%BA%E4%BD%95%E8%A6%81%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<p>Vue组件中data为什么必须是个函数，而Vue的根实例则没有此限制</p>
<a id="more"></a>

<blockquote>
<p>函数每次执行都会返回全新的data对象实例</p>
</blockquote>
<p>测试代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'comp'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123;counter&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">            data:&#123;counter:0&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#demo"</span>,</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们查看源码研究一下数据是如何初始化的,源码位置<code>src\core\instance\state.js-initData()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果data是函数，则执行之并将其结果作为data选项的值否则则会执行用户设置的data</span></span><br><span class="line">data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果每一个组件都是使用的对象来设置data,那么将会作为将来组件实例里的data选项，Vue.component组件的时候其实只执行了一次，每一次初始化的时候对于两个comp的data指向的将会是同一个地方，一个组件的不同实例直接的数据就共享了，会产生数据污染。</p>
</blockquote>
<p>我们看一下控制台的报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue.js:<span class="number">634</span> [Vue warn]: The <span class="string">"data"</span> option should be a <span class="function"><span class="keyword">function</span> <span class="title">that</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">per</span>-<span class="title">instance</span> <span class="title">value</span> <span class="title">in</span> <span class="title">component</span> <span class="title">definitions</span>.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程序甚至无法通过vue检测</p>
</blockquote>
<p>我们接下来再看一下为什么根实例中data可以直接用对象,测试代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'comp'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123;counter&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">            data()&#123;<span class="keyword">return</span> &#123;counter:<span class="number">1</span>&#125;&#125;</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#demo"</span>,</span></span><br><span class="line">            data:&#123;counter:1&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从逻辑上来讲，在全局范围内根实例是单例的，不会存在多实例的问题，我们再看一下源码中是怎么处理的<br><code>src/core/instance/init.js-initMinx()-Vue-_init</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// merge options 合并选项</span></span><br><span class="line"><span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;<span class="comment">//自定义组件</span></span><br><span class="line">    <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">    <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">    <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">    initInternalComponent(vm, options)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//根实例</span></span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再看一下<code>src/core/util/options.js</code>中对data的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">strats.data = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!vm) &#123;<span class="comment">//只有当根实例创建的时候vm才会存在，普通组件VM不存在，所以进入方法</span></span><br><span class="line">    <span class="keyword">if</span> (childVal &amp;&amp; <span class="keyword">typeof</span> childVal !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">'The "data" option should be a function '</span> +</span><br><span class="line">        <span class="string">'that returns a per-instance value in component '</span> +</span><br><span class="line">        <span class="string">'definitions.'</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> parentVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<p>Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态<br>变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返<br>回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也<br>是因为根实例只能有一个，不需要担心这种情况。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中v-if和v-for的优先级</title>
    <url>/2020/07/Vue%E4%B8%ADv-if%E5%92%8Cv-for%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化才能得到更好的性能？</p>
<a id="more"></a>

<p>当v-if和v-for同级的时候，我们写一个例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"child in children"</span> <span class="attr">v-if</span>=<span class="string">"isFolder"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#demo"</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    children:[</span><br><span class="line"><span class="actionscript">                        &#123;title:<span class="string">'foo'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;title:<span class="string">'bar'</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line">                isFolder()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.children&amp;&amp;<span class="keyword">this</span>.children.length&gt;<span class="number">0</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(app.$options.render)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>生成的渲染函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'div'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"demo"</span>&#125;&#125;,_l((children),<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;<span class="keyword">return</span> (isFolder)?_c(<span class="string">'p'</span>,[_v(_s(child.title))]):_e()&#125;),<span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样我们可以看出来是循环先执行，isFolder判断后执行</p>
</blockquote>
<p>当v-if和v-for不同级的时候，我们先调整下dom区域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">'isFolder'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"child in children"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两者不同级时，渲染函数入下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'div'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"demo"</span>&#125;&#125;,[(isFolder)?_l((children),<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'p'</span>,[_v(_s(child.title))])&#125;):_e()],<span class="number">2</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先判断了isFolder再看是否执行-l</p>
</blockquote>
<p><strong>结论</strong></p>
<ol>
<li>显然v-for优先于v-if被解析</li>
<li>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何，循环都不可避免，浪费了性能</li>
<li>要避免出现这种情况，可以在外层嵌套template,然后在这一层进行v-if判断，然后在内部进行v-for循环</li>
<li>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题(一)</title>
    <url>/2020/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%80)/</url>
    <content><![CDATA[<p>整理了一些之前面试遇到的题</p>
<a id="more"></a>


<h2 id="NAN-NAN-是否成立，为什么？"><a href="#NAN-NAN-是否成立，为什么？" class="headerlink" title="NAN === NAN 是否成立，为什么？"></a><code>NAN === NAN</code> 是否成立，为什么？</h2><p>不成立。因为JavaScript规定，NaN表示的是非数字，但是这个非数字也是不同的，因此 NaN 不等于 NaN，两个NaN永远不可能相等。</p>
<h2 id="0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？"><a href="#0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？" class="headerlink" title="0.1+0.2 == 0.3和 0.1+0.2 === 0.3 哪个成立，为什么？"></a><code>0.1+0.2 == 0.3</code>和 <code>0.1+0.2 === 0.3</code> 哪个成立，为什么？</h2><p>都不成立.在正常的数学逻辑思维中，0.1+0.2=0.3这个逻辑是正确的，但是在JavaScript中0.1+0.2！==0.3，这是为什么呢？在JavaScript中的二进制的浮点数0.1和0.2并不是十分精确，在他们相加的结果并非正好等于0.3，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为false。</p>
<blockquote>
<p>可以通过 <code>(0.1 + 0.2).toFixed(2) // &quot;0.30&quot;</code> 和 <code>parseFloat((0.1 + 0.2).toFixed(2)) //0.3</code> 的方法使<code>0.1+0.2==0.3</code></p>
</blockquote>
<h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p><strong>如果一个函数用到了它作用域外面的变量，那么这个变量和这个函数之间的环境就叫闭包。</strong></p>
<p>举一个简单的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Joker = <span class="string">"帅"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Joker</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fun()();<span class="comment">//输出：'帅'</span></span><br><span class="line"><span class="comment">//当然我们也可以这样，等同于fun()()</span></span><br><span class="line"><span class="keyword">var</span> temfun = fun();</span><br><span class="line"><span class="built_in">console</span>.log(temfun())</span><br></pre></td></tr></table></figure>

<p><strong>闭包的使用场景</strong></p>
<p>封装局部变量</p>
<p>例如：一个游戏，主人公有10条命，我们如果把<code>var live=10</code>写在全局作用域的话，全局中任何地方都能调用修改，就会出现安全性，容易出bug。</p>
<p>但如果写在局部作用域，会有如下问题：</p>
<ul>
<li><p>在全局环境中调用不了</p>
</li>
<li><p>局部环境执行完毕后，会被清出环境栈，局部环境中的变量和函数都会垃圾回收机制回收。</p>
</li>
</ul>
<p>因此我们用闭包去将<code>var live=10</code>变量封装起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">liveFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> live = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//以下是闭包函数代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">condition</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(condition==<span class="string">'add'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> live+=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(condition==<span class="string">'reduce'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> live-=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> live=liveFun()</span><br><span class="line"><span class="built_in">console</span>.log(live(<span class="string">'add'</span>)); <span class="comment">//执行闭包函数 ，10+1=11，输出：11</span></span><br><span class="line"><span class="built_in">console</span>.log(live(<span class="string">'reduce'</span>)); <span class="comment">//执行闭包函数 ，11-1=10，输出：10</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数与普通函数的区别？"><a href="#箭头函数与普通函数的区别？" class="headerlink" title="箭头函数与普通函数的区别？"></a>箭头函数与普通函数的区别？</h2><p>区别：</p>
<ul>
<li>箭头函数没有自己的<code>this</code>属性，<code>arguments</code>属性、而普通函数有，箭头函数的<code>this</code>指向当前函数作用域的<code>this</code>。</li>
<li>箭头函数没有不能使用<code>new</code>命令，因为没有自己的<code>this</code>，无法调用<code>call</code>，<code>apply</code>，没有prototype显示原型，所以不能作为构造函数。</li>
<li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数。</li>
</ul>
<p>箭头函数的好处：</p>
<ul>
<li>没有箭头函数的时候，函数闭包<code>var that = this</code>的事没少干，有了箭头函数，就不需要这么写了</li>
<li>极简语法，函数式风格</li>
</ul>
<h2 id="js原型原型链"><a href="#js原型原型链" class="headerlink" title="js原型原型链"></a>js原型原型链</h2><p><strong>首先我们要清除明白两个概念</strong></p>
<ul>
<li><p>js分为函数对象和普通对象，每个对象都有<code>__proto__</code>属性，但是只有函数对象才有<code>prototype</code>属性</p>
</li>
<li><p>Object、Function都是js的内置函数，类似的还有我们常用的Array,RegExp、Date、Boolean、Number、String</p>
</li>
<li><p>属性<code>prototype</code>是一个对象，他有两个属性，<code>constructor</code>和<code>__proto__</code>;</p>
</li>
<li><p>原型对象<code>prototype</code>有一个默认的<code>constructor</code>属性，用于记录实例是由哪个构造函数创建；</p>
</li>
</ul>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有以下构造函数Person，他的原型上有所属国属性motherland='china'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.motherland = <span class="string">'china'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过new Person()创建的persson01实例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> persion01 = <span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>js在设计原型、原型链的时候遵从以下两个准则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Person.prototype.constructor == Person <span class="comment">// **准则1：原型对象（即Person.prototype）的constructor指向构造函数本身**</span></span><br><span class="line"><span class="number">2.</span> person01.__proto__ == Person.prototype <span class="comment">// **准则2：实例（即person01）的__proto__和原型对象指向同一个地方**</span></span><br></pre></td></tr></table></figure>
<p>举个例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">f1</span> = <span class="title">new</span> <span class="title">Foo</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">f2</span> = <span class="title">new</span> <span class="title">Foo</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">f1</span>.<span class="title">__proto__</span> = <span class="title">Foo</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"><span class="title">f2</span>.<span class="title">__proto__</span> = <span class="title">Foo</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Foo</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">Object</span>.<span class="title">prototype</span>; //准则2 （<span class="title">Foo</span>.<span class="title">prototype</span>本身也是普通对象，适用于准则2）</span></span><br><span class="line"><span class="function"><span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">null</span>;//原型链到此停止</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Foo</span>.<span class="title">prototype</span>.<span class="title">constructor</span> = <span class="title">Foo</span>; // 准则1</span></span><br><span class="line"><span class="function"><span class="title">Foo</span>.<span class="title">__proto__</span> = <span class="title">Function</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"><span class="title">Function</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">Object</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"><span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">null</span>;//原型链到此停止</span></span><br><span class="line"><span class="function">// **此处注意<span class="title">Foo</span> 和 <span class="title">Function</span>的区别， <span class="title">Foo</span>是 <span class="title">Function</span>的实例**</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了Object的原型对象（Object.prototype）的<strong>proto</strong>指向null，其他内置函数对象的原型对象（例如：Array.prototype）和自定义构造函数的<strong>proto</strong>都指向Object.prototype, 因为原型对象本身是普通对象。即：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.__proto__ = <span class="built_in">Object</span>.prototype;</span><br><span class="line">Foo.prototype.__proto__  = <span class="built_in">Object</span>.prototype;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原型对象的作用，是用来存放实例中共有的那部份属性、方法，可以大大减少内存消耗。</p>
</blockquote>
<h2 id="em、rem-是什么？"><a href="#em、rem-是什么？" class="headerlink" title="em、rem 是什么？"></a>em、rem 是什么？</h2><ul>
<li><p>em：em是相对于⽗元素的尺⼨单位</p>
</li>
<li><p>rem：相对于html元素的尺⼨单位（html默认font-size:16px）</p>
</li>
</ul>
<h2 id="Vue为什么使用虚拟dom？"><a href="#Vue为什么使用虚拟dom？" class="headerlink" title="Vue为什么使用虚拟dom？"></a>Vue为什么使用虚拟dom？</h2><h2 id="promise和callback的区别"><a href="#promise和callback的区别" class="headerlink" title="promise和callback的区别"></a>promise和callback的区别</h2><!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简易Vuex</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/</url>
    <content><![CDATA[<p>在阅读本篇之前，希望你已经对vuex的用法有了一定了解。可以参考一下<a href="https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/">Vue统一状态管理——Vuex</a>。</p>
<a id="more"></a>

<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex<strong>集中式</strong>存储管理应用的所有组件的状态，并以相应的规则保证状态以<strong>可预测</strong>的方式发生改变</p>
<img src="/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/1.png" class="" title="[第一步]">

<h2 id="整合vuex"><a href="#整合vuex" class="headerlink" title="整合vuex"></a>整合vuex</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add vuex</span><br></pre></td></tr></table></figure>

<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li>state 状态、数据</li>
<li>mutations 更改状态的函数</li>
<li>actions 异步操作</li>
<li>store 包含以上概念的容器</li>
</ul>
<h2 id="状态-state"><a href="#状态-state" class="headerlink" title="状态 - state"></a>状态 - state</h2><p>state保存应用状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123; <span class="attr">counter</span>:<span class="number">0</span> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="状态变更-mutations"><a href="#状态变更-mutations" class="headerlink" title="状态变更 - mutations"></a>状态变更 - mutations</h2><p>mutations用于修改状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add(state) &#123;</span><br><span class="line">            state.counter++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="派生状态-getters"><a href="#派生状态-getters" class="headerlink" title="派生状态 - getters"></a>派生状态 - getters</h2><p>从state派生出新状态，类似计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doubleCounter(state) &#123; <span class="comment">// 计算剩余数量</span></span><br><span class="line">            <span class="keyword">return</span> state.counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="动作-actions"><a href="#动作-actions" class="headerlink" title="动作 - actions"></a>动作 - actions</h2><p>添加业务逻辑，类似于controller</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        add(&#123; commit &#125;) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; commit(<span class="string">'add'</span>)&#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add')"</span>&gt;</span>counter: &#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('add')"</span>&gt;</span>async counter: &#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>double：&#123;&#123;$store.getters.doubleCounter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vuex原理解析"><a href="#Vuex原理解析" class="headerlink" title="Vuex原理解析"></a>Vuex原理解析</h1><h2 id="目标分析："><a href="#目标分析：" class="headerlink" title="目标分析："></a>目标分析：</h2><ul>
<li>实现一个插件：声明store类，挂载$store</li>
<li>Store具体实现：<ul>
<li>创建响应式的state，保存mutations、actions和getters</li>
<li>实现commit根据用户传入的type，执行对应的mutation</li>
<li>实现dispatch根据用户传入的type执行对应的action，同时传递上下文</li>
<li>实现getters，按照getters定义对state做派生</li>
</ul>
</li>
</ul>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Store声明、install实现，jvuex.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jvuex</span></span><br><span class="line"><span class="keyword">let</span> Vue <span class="comment">//保存构造函数的引用，避免import</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="comment">//响应化处理state</span></span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: options.state</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>)</span>&#123;</span><br><span class="line">    Vue = _Vue</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.$options.store)&#123;</span><br><span class="line">                Vue.prototype.$store = <span class="keyword">this</span>.$options.store</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    Store,</span><br><span class="line">    install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-commit"><a href="#实现-commit" class="headerlink" title="实现 commit"></a>实现 commit</h2><p>根据用户传入type获取并执行对应的mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改 Store类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>._mutations = options.mutations</span><br><span class="line">        <span class="comment">//响应化处理state</span></span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: options.state</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// store.commit('add',1)</span></span><br><span class="line">    <span class="comment">//type:mutation的类型</span></span><br><span class="line">    <span class="comment">//payload：载荷，参数</span></span><br><span class="line">    commit(type,payload)&#123;</span><br><span class="line">        <span class="keyword">const</span> entry = <span class="keyword">this</span>._mutations[type]</span><br><span class="line">        <span class="keyword">if</span>(entry)&#123;</span><br><span class="line">            entry(<span class="keyword">this</span>.state,payload)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-actions"><a href="#实现-actions" class="headerlink" title="实现 actions"></a>实现 actions</h2><p>根据用户传入的type获取并执行对应的mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继续修改Store类</span></span><br><span class="line">dispatch(type,payload)&#123;</span><br><span class="line">    <span class="keyword">const</span> entry = <span class="keyword">this</span>._actions[type]</span><br><span class="line">    <span class="keyword">if</span> (entry) &#123;</span><br><span class="line">        entry(<span class="keyword">this</span>, payload)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们运行一下会发现报以下错误</p>
<img src="/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/2.png" class="" title="[报错信息]">

<blockquote>
<p>错误原因：因为class的影响，this指向出了问题</p>
</blockquote>
<p>参考了一下官方的解决方案，我们修改Store：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//绑定 commit、dispatch的上下文</span></span><br><span class="line">    <span class="keyword">this</span>.commit = <span class="keyword">this</span>.commit.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.dispatch = <span class="keyword">this</span>.dispatch.bind(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化state"><a href="#优化state" class="headerlink" title="优化state"></a>优化state</h2><p>目前的代码还没有对state做一个很好的保护，会存在将来用户直接去改state中的值得行为，继续修改Store的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//响应化处理state</span></span><br><span class="line">    <span class="comment">// this.state = new Vue(&#123;</span></span><br><span class="line">    <span class="comment">//     data: options.state</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="keyword">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            <span class="comment">//加两个$，Vue不做代理 对外部是隐藏的</span></span><br><span class="line">            $$state:options.state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存取器 store.state</span></span><br><span class="line"><span class="keyword">get</span> state()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>._vm)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._vm._data.$$state</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> state(v)&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'禁止这样修改'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-getters"><a href="#实现-getters" class="headerlink" title="实现 getters"></a>实现 getters</h2><p>继续修改Store类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">this</span>._wrapperGetters = options.getters</span><br><span class="line">        <span class="comment">//定义computed选项</span></span><br><span class="line">        <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">        <span class="keyword">this</span>.getters = &#123;&#125;</span><br><span class="line">        <span class="keyword">const</span> store=<span class="keyword">this</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(<span class="keyword">this</span>._wrapperGetters).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//获取用户定义的getter</span></span><br><span class="line">            <span class="keyword">const</span> fn = store._wrapperGetters[key]</span><br><span class="line">            <span class="comment">//转化为computed可以使用的无参数形式</span></span><br><span class="line">            computed[key]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fn(store.state)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//为getters定义只读属性</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(store.getters,key,&#123;</span><br><span class="line">                <span class="keyword">get</span>:()=&gt; store._vm[key]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue弹窗组件(一)</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/</url>
    <content><![CDATA[<p>本文讲述如何使用<code>render()</code>，构造一个弹窗组件</p>
<p><a href="https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/">点击这里查看</a>,使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>
<a id="more"></a>

<p>弹窗这类组件的特点是他们<strong>在当前vue实例之外独立存在</strong>，通常挂载于body；他们是通过JS动态创建的，不需要在任何组件中声明。常见的使用姿势：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$create(Notice, &#123;</span><br><span class="line">    title: <span class="string">"标题"</span>,</span><br><span class="line">    message: <span class="string">"提示信息"</span>,</span><br><span class="line">    duration: <span class="number">2000</span><span class="comment">//延时时间</span></span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure>

<h2 id="create函数"><a href="#create函数" class="headerlink" title="create函数"></a>create函数</h2><p>创建utils/create.js,并添加以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">Component,props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 组件构造函数如何获取？</span></span><br><span class="line">    <span class="comment">// 1.Vue.extend()</span></span><br><span class="line">    <span class="comment">// 2.render</span></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="comment">// h是createElement, 返回VNode，是虚拟dom</span></span><br><span class="line">        <span class="comment">// 需要挂载才能变成真实dom</span></span><br><span class="line">        render: <span class="function"><span class="params">h</span> =&gt;</span> h(Component, &#123;props&#125;),</span><br><span class="line">    &#125;).$mount() <span class="comment">// 不指定宿主元素，则会创建真实dom，但是不会追加操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取真实dom————vm.$el,并挂载到body上</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(vm.$el)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> comp = vm.$children[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    comp.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(vm.$el)</span><br><span class="line">        vm.$destroy()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> comp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> create</span><br></pre></td></tr></table></figure>

<h2 id="弹窗组件"><a href="#弹窗组件" class="headerlink" title="弹窗组件"></a>弹窗组件</h2><p>新建弹窗组件，<code>Notice.vue</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;box&quot; v-if&#x3D;&quot;isShow&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;box-content&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    message: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    duration: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 1000</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">      this.isShow &#x3D; true;</span><br><span class="line">      setTimeout(this.hide, this.duration);</span><br><span class="line">    &#125;,</span><br><span class="line">    hide() &#123;</span><br><span class="line">      this.isShow &#x3D; false;</span><br><span class="line">      &#x2F;&#x2F; 清除自己</span><br><span class="line">      this.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  top: 16px;</span><br><span class="line">  left: 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  border: grey 3px solid;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.box-content &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">  font-size: 14px;  </span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  margin-bottom: 8px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="使用弹窗组件"><a href="#使用弹窗组件" class="headerlink" title="使用弹窗组件"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Notice <span class="keyword">from</span> <span class="string">"@/components/Notice.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> create <span class="keyword">from</span> <span class="string">'./utils/create'</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    showNotice() &#123;</span><br><span class="line">        create(Notice, &#123;</span><br><span class="line">            title: <span class="string">"标题"</span>,</span><br><span class="line">            message: <span class="string">"提示信息"</span>,</span><br><span class="line">            duration: <span class="number">2000</span><span class="comment">//延时时间</span></span><br><span class="line">        &#125;).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果手机自定义siri回答</title>
    <url>/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/</url>
    <content><![CDATA[<p>前几天抖音上看到一个在苹果店让siri叫老公的视频，相信不少小伙伴看完都偷偷对自己的siri试过吧。而且肯定也有不少小伙伴没有试出视频中的效果，这个是怎么做到的呢？看完这篇你就明白了。</p>
<a id="more"></a>

<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>首先我们肯定要有一步苹果手机，然后打开<strong>快捷指令</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/1.jpg" class="" title="[第一步]">

<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>点击创建快捷指令</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/2.jpg" class="" title="[第二步]">

<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>添加操作，并搜索<strong>显示提醒</strong>，选中最下方的<strong>显示提醒</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/3.jpg" class="" title="[第三步]">

<h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>修改图中<strong>信息</strong>部分为你希望siri回应的内容，然后点击下一步</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/4.jpg" class="" title="[设置回复内容]">

<p>例如我可以设置成这样</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/5.jpg" class="" title="[肯定是我最帅了]">

<blockquote>
<p>记得将下方的显示取消按钮设置成图中状态</p>
</blockquote>
<h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h1><p>设置触发我们设置好的回复内容的关键词语，然后点击完成</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/6.jpg" class="" title="[第五步]">

<p>例如我设置的<strong>谁是世界上最帅的男人</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/7.jpg" class="" title="[别问，问就是我最帅]">

<h1 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h1><p>接下来我们就可以和siri一起愉快的玩耍啦<del>~</del></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/8.jpg" class="" title="[我帅吧]">












<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter中验证码倒计时</title>
    <url>/2020/08/flutter%E4%B8%AD%E9%AA%8C%E8%AF%81%E7%A0%81%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    <content><![CDATA[<p>flutter中更换手机号，验证码倒计时的一种写法。</p>
<a id="more"></a>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> userinfo;</span><br><span class="line">  PhoneNumber(<span class="keyword">this</span>.userinfo, &#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PhoneNumberState createState() =&gt; _PhoneNumberState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PhoneNumberState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PhoneNumber</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _codeController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  Timer _countdownTimer;</span><br><span class="line">  <span class="built_in">String</span> _codeCountdownStr = <span class="string">'获取验证码'</span>;</span><br><span class="line">  <span class="built_in">int</span> _countdownNum = <span class="number">59</span>;</span><br><span class="line"></span><br><span class="line">  _getcode() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> Net().<span class="keyword">get</span>(<span class="string">'verification-code'</span>, &#123;</span><br><span class="line">      <span class="string">'phone_number'</span>: widget.userinfo[<span class="string">'phone_number'</span>],</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">"change_phone"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    reGetCountdown();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> reGetCountdown() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">if</span> (_countdownTimer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Timer的第一秒倒计时是有一点延迟的，为了立刻显示效果可以添加下一行</span></span><br><span class="line">      _codeCountdownStr = <span class="string">'<span class="subst">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class="line">      _countdownTimer = <span class="keyword">new</span> Timer.periodic(<span class="keyword">new</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>), (timer) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (_countdownNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            _codeCountdownStr = <span class="string">'<span class="subst">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _codeCountdownStr = <span class="string">'获取验证码'</span>;</span><br><span class="line">            _countdownNum = <span class="number">59</span>;</span><br><span class="line">            _countdownTimer.cancel();</span><br><span class="line">            _countdownTimer = <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要忘记在这里释放掉Timer</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _countdownTimer?.cancel();</span><br><span class="line">    _countdownTimer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'绑定手机号'</span>)),</span><br><span class="line">      body: Container(</span><br><span class="line">        padding: EdgeInsets.only(left: <span class="number">10</span>, right: <span class="number">10</span>, top: <span class="number">10</span>),</span><br><span class="line">        child: ListView(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            ListTile(</span><br><span class="line">              leading: Text(<span class="string">'当前手机号'</span>),</span><br><span class="line">              title: Text(widget.userinfo[<span class="string">'phone_number'</span>]),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              title: TextField(</span><br><span class="line">                controller: _codeController,</span><br><span class="line">                decoration: InputDecoration(hintText: <span class="string">'请输入验证码'</span>),</span><br><span class="line">              ),</span><br><span class="line">              trailing: RaisedButton(</span><br><span class="line">                onPressed: _countdownNum &gt;= <span class="number">59</span> ? _getcode : <span class="keyword">null</span>,</span><br><span class="line">                child: Text(_codeCountdownStr),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue弹窗组件(二)</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/</url>
    <content><![CDATA[<p>本文讲述如何使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>
<p><a href="https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/">点击这里查看</a>，查看如何使用<code>render()</code>,构造一个弹窗组件</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在<code>components</code>文件夹下新建<code>Tools</code>文件夹用于存放所有的全局组件，<code>Tools</code>文件夹下新增<code>Notice</code>文件夹，并在其中新建<code>Notice.vue</code>和<code>Notice.js</code></p>
<h2 id="修改Notice-js"><a href="#修改Notice-js" class="headerlink" title="修改Notice.js"></a>修改<code>Notice.js</code></h2><p>在<code>Notice.js</code>中添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Notice <span class="keyword">from</span> <span class="string">'./Notice.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取组件构造器</span></span><br><span class="line"><span class="keyword">const</span> notice = Vue.extend(Notice);</span><br><span class="line"><span class="keyword">let</span> VM = <span class="string">''</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!props.text) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!VM) &#123;</span><br><span class="line">      <span class="keyword">const</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      <span class="comment">// 创建notice实例</span></span><br><span class="line">      VM = <span class="keyword">new</span> notice(&#123; <span class="attr">el</span>: oDiv &#125;);</span><br><span class="line">      <span class="comment">// 并把实例化的模板插入body</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(VM.$el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置属性</span></span><br><span class="line">    VM.type = type;</span><br><span class="line">    VM.text = props.text;</span><br><span class="line">    VM.timeout = !props.timeout&amp;&amp;props.timeout!=<span class="number">0</span>?<span class="number">3000</span>:props.timeout;</span><br><span class="line">    VM.show = <span class="literal">true</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      VM.show = <span class="literal">false</span>;</span><br><span class="line">    &#125;, VM.timeout);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> SHOW = AModal();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warning</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'warning'</span>, props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'info'</span>, props);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'success'</span>,props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'error'</span>, props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  warning,</span><br><span class="line">  success,</span><br><span class="line">  info,</span><br><span class="line">  error</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="编写弹窗组件"><a href="#编写弹窗组件" class="headerlink" title="编写弹窗组件"></a>编写弹窗组件</h2><p>在<code>Notice.vue</code>中，添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if&#x3D;&quot;show&quot; class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">      &lt;div :class&#x3D;&quot;type&quot;&gt;</span><br><span class="line">        &lt;strong&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;strong&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&quot;show&quot;, &quot;text&quot;, &quot;type&quot;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  top: 16px;</span><br><span class="line">  left: 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  border: grey 3px solid;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.success &#123;</span><br><span class="line">  background: #4caf50 !important;</span><br><span class="line">&#125;</span><br><span class="line">.info &#123;</span><br><span class="line">  background: #2196f3 !important;</span><br><span class="line">&#125;</span><br><span class="line">.warning &#123;</span><br><span class="line">  background: #ffc107 !important;</span><br><span class="line">&#125;</span><br><span class="line">.error &#123;</span><br><span class="line">  background: #ff1744 !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h2><p>在<code>main.js</code>中，添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> notice <span class="keyword">from</span> <span class="string">'./components/Tools/Notice/Notice'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$notice = notice</span><br></pre></td></tr></table></figure>

<h2 id="使用弹窗组件"><a href="#使用弹窗组件" class="headerlink" title="使用弹窗组件"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$notice.info(&#123;<span class="attr">text</span>:<span class="string">"Joker真帅"</span>,<span class="attr">timeout</span>:<span class="number">9999</span>&#125;)</span><br><span class="line"><span class="keyword">this</span>.$notice.success(&#123;<span class="attr">text</span>:<span class="string">"Joker真帅"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>就可以尽情使用了</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>将uni-request进行axios化封装</title>
    <url>/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>本文介绍如何将uni-app提供的网络请求方式uni-request进行封装。</p>
<a id="more"></a>
<h1 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h1><p>首先我们使用hubuilderX创建一个uni-app项目，并在根目录下创建目录<code>common</code>，用于统一存放我们的的工具类。</p>
<h1 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h1><p>在<code>common</code>下新建<code>axios/axios.js</code>,并贴上如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> url_config =<span class="string">"你的接口地址"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">axios</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">const</span> &#123;url, method, data&#125;=options</span><br><span class="line">	<span class="keyword">const</span> api_token =uni.getStorageSync(<span class="string">'api_token'</span>);</span><br><span class="line">	<span class="keyword">let</span> headers=&#123;</span><br><span class="line">		Authorization:<span class="string">'Bearer '</span> + api_token,</span><br><span class="line">		TargetLanguage:<span class="string">"zh-CN"</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> uni.request(&#123;</span><br><span class="line">		url: url_config + url,</span><br><span class="line">		method,</span><br><span class="line">		data,</span><br><span class="line">		dataType: <span class="string">'json'</span>,</span><br><span class="line">		header: headers</span><br><span class="line">	&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> result=res[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">return</span> checkStatus(result)</span><br><span class="line">	&#125;).catch(<span class="function"><span class="params">parmas</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(parmas,<span class="string">'parmas'</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(response.statusCode===<span class="number">200</span>|| </span><br><span class="line">			response.statusCode === <span class="number">304</span> ||</span><br><span class="line">			response.statusCode === <span class="number">400</span>)&#123;</span><br><span class="line">			resolve(response.data);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			reject(&#123;</span><br><span class="line">				status: response.statusCode,</span><br><span class="line">				message: response.data.message,</span><br><span class="line">				error: response.data.errors[<span class="built_in">Object</span>.keys(response.data.errors)[<span class="number">0</span>]][<span class="number">0</span>]</span><br><span class="line">			 &#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	post(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"post"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">get</span>(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"get"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">delete</span>(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"delete"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	put(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"put"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h1><p>将我们封装好的axios挂载到全局，编辑<code>main.js</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;common&#x2F;axios&#x2F;axios.js&#39;</span><br><span class="line">Vue.prototype.$axios &#x3D; axios;</span><br></pre></td></tr></table></figure>
<p>到这边是不是已经开始熟悉起来了</p>
<h1 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h1><p>接下来我们就可以在需要发送网络请求的地方快乐的使用axios了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios.get(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br><span class="line"><span class="keyword">this</span>.$axios.post(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br><span class="line"><span class="keyword">this</span>.$axios.delete(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br><span class="line"><span class="keyword">this</span>.$axios.put(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br></pre></td></tr></table></figure>


<blockquote>
<p> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/">在flutter中优雅的封装网络请求</a><br> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/">在vue中对axios进行二次封装</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>uni-app</category>
        <category>网络请求</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title>JS从入门到放弃——数据类型</title>
    <url>/2020/08/JS%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p>
<p>引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p>
<blockquote>
<p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>
</blockquote>
<a id="more"></a>

<h2 id="JavaScript拥有动态类型"><a href="#JavaScript拥有动态类型" class="headerlink" title="JavaScript拥有动态类型"></a><strong>JavaScript拥有动态类型</strong></h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;              <span class="comment">//x为undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;          <span class="comment">//x为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"Joker"</span>;    <span class="comment">//x为字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h2><p>字符串是存储字符（比如 “Joker 真帅”）的变量。<br>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Joker"</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Joker'</span>;</span><br></pre></td></tr></table></figure>
<p>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> area = <span class="string">"Joker's Blog"</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"He is called 'Joker'"</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'He is called "Joker"'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h2><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x1=<span class="number">34.00</span>;      <span class="comment">//使用小数点来写</span></span><br><span class="line"><span class="keyword">var</span> x2=<span class="number">34</span>;         <span class="comment">//不使用小数点来写</span></span><br></pre></td></tr></table></figure>
<p>极大或极小的数字可以通过科学（指数）计数法来书写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a><strong>布尔</strong></h2><p>布尔（逻辑）只能有两个值：true 或 false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> y=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p>下面的代码创建名为 cars 的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">"Saab"</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">"Volvo"</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">"BMW"</span>;</span><br></pre></td></tr></table></figure>
<p>或者 (condensed array):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Saab"</span>,<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>);</span><br></pre></td></tr></table></figure>
<p>或者 (literal array):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=[<span class="string">"Saab"</span>,<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>];</span><br></pre></td></tr></table></figure>
<p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><strong>对象</strong></h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">"John"</span>, <span class="attr">lastname</span>:<span class="string">"Doe"</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p>
<p>对象属性有两种寻址方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name=person.lastname;</span><br><span class="line">name=person[<span class="string">"lastname"</span>];</span><br></pre></td></tr></table></figure>

<h2 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a><strong>Undefined 和 Null</strong></h2><p>undefined 的字面意思就是：未定义的值 。这个值的语义是，希望<strong>表示一个变量最原始的状态，而非人为操作的结果</strong>。</p>
<p>null 的字面意思是：空值。这个值的语义是，希望<strong>表示一个对象被人为的重置为空对象，而非一个变量最原始的状态</strong>。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter中区分开发环境与正式环境</title>
    <url>/2020/08/flutter%E4%B8%AD%E5%8C%BA%E5%88%86%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E6%AD%A3%E5%BC%8F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本文讲述如何在flutter中区分开开发环境以及正式环境中接口地址等相关信息。</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们已经有了一个flutter项目，创建一个新文件用来保存所有环境特定配置信息<code>lib/app_config.dart</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:meta/meta.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ENV</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> appName; <span class="comment">// 系统名称</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> envName; <span class="comment">// 运行环境</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> baseUrl; <span class="comment">// 基础api url</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> webViewUrl; <span class="comment">// 基础webviewurl</span></span><br><span class="line"> ENV(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> appName,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> envName,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> baseUrl,</span><br><span class="line">    <span class="meta">@required</span> Widget child,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> webViewUrl</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(child: child)&#123;</span><br><span class="line">    ENV.appName = appName;</span><br><span class="line">    ENV.envName = envName;</span><br><span class="line">    ENV.baseUrl = baseUrl;</span><br><span class="line">    ENV.webViewUrl = webViewUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ENV of(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> context.dependOnInheritedWidgetOfExactType(aspect: ENV);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(InheritedWidget oldWidget) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区分环境配置"><a href="#区分环境配置" class="headerlink" title="区分环境配置"></a>区分环境配置</h2><p>新建<code>main_dev.dart</code>,并编写开发环境的配置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'app_config.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'main.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> configuredApp = <span class="keyword">new</span> ENV(</span><br><span class="line">    appName: <span class="string">'项目名dev'</span>,</span><br><span class="line">    envName: <span class="string">'development'</span>,</span><br><span class="line">    baseUrl: <span class="string">'开发环境接口地址'</span>,</span><br><span class="line">    child: <span class="keyword">new</span> App(),</span><br><span class="line">    webViewUrl:<span class="string">'开发环境webview地址'</span></span><br><span class="line">  );</span><br><span class="line">  runApp(configuredApp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于此同时，创建<code>main_pro.dart</code>,编写对应的正式环境配置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'app_config.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'main.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> configuredApp = <span class="keyword">new</span> ENV(</span><br><span class="line">    appName: <span class="string">'项目名'</span>,</span><br><span class="line">    envName: <span class="string">'product'</span>,</span><br><span class="line">    baseUrl: <span class="string">'正式环境接口地址'</span>,</span><br><span class="line">    child: <span class="keyword">new</span> App(),</span><br><span class="line">    webViewUrl:<span class="string">'正式环境webview地址'</span></span><br><span class="line">  );</span><br><span class="line">  runApp(configuredApp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>修改<code>dio.dart</code>中baseurl的获取方式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:zzc_app/app_config.dart'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">String</span> BASE_URL = ENV.baseUrl + url;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>dio的封装可以看这篇-&gt;<a href="https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/">在flutter中优雅的封装网络请求</a></p>
</blockquote>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li><p>运行开发版本，采用<code>flutter run -t lib/main_dev.dart</code></p>
</li>
<li><p>运行生产版本，采用<code>flutter run -t lib/main_pro.dart</code></p>
</li>
<li><p>Android上创建一个release版本,采用<code>flutter build apk -t lib/main_&lt;environment&gt;.dart</code></p>
</li>
</ul>
<blockquote>
<p>我们将为不同的环境生成对应的APK。 要在iOS上构建版本，只需将apk替换为ios。</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>BFC布局</title>
    <url>/2020/12/BFC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>这篇文章主要介绍的是关于块格式化上下文（Block Formatting Context），也就是大家俗称的BFC。你可能从未听说过这个术语，但只要你曾经使用过CSS布局，你就可能知道它是什么。理解BFC是什么，它有什么功能，以及如何创建一个BFC是非常有用的，这些能帮助你更好的理解CSS布局。</p>
<a id="more"></a>

<h1 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h1><p>通过一个简单的float布局示例就能很好的理解BFC的行为。在下面的示例中，我们创建了一个盒子（其实在CSS中，每个元素都是一个盒子），这个盒子中包含了一个设置了浮动的图片和一段文本。如果有足够多的文本内容的时候，文本会围绕着图片（把整个图片包裹起来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated element.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    I am text inside the</span><br><span class="line">        <span class="comment">&lt;!-- outer box.If there is enough text </span></span><br><span class="line"><span class="comment">    then the text will wrap around the floated element.</span></span><br><span class="line"><span class="comment">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> dotted red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid teal;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:skyblue;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/12/BFC%E5%B8%83%E5%B1%80/1.png" class="">

<p>如果在上面的基础上删除一些文本，就没有足够的文本去围绕图片，同时由于浮动元素脱离文档流，盒子元素的边框高度就会随着文本的减少而降低（常被理解为元素浮动之后使得其父元素坍塌）。</p>
<img src="/2020/12/BFC%E5%B8%83%E5%B1%80/2.png" class="">

<p>之所以会这样，是因为当一个元素浮动时，盒子依然保持原来的宽度，使文本所占的空间缩短了,才给浮动的元素腾出位置，这就是为什么背景和边框都能够看起来包裹住了浮动的元素。</p>
<p>有两种方案可以解决这个布局问题。</p>
<ul>
<li>一种是使用<code>clearfix</code>黑魔法，就是在文本和浮动元素的下面加一个元素，比如<code>div</code>，并将<code>clear</code>属性设置为<code>both</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated element.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    I am text inside the</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- outer box.If there is enough text </span></span><br><span class="line"><span class="comment">    then the text will wrap around the floated element.</span></span><br><span class="line"><span class="comment">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>另一种方法就是使用<code>overflow</code>属性，把它设置为非<code>visible</code>的值。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated element.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    I am text inside the</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="selector-tag">overflow</span><span class="selector-pseudo">:auto</span>;<span class="comment">/* 补上这个属性 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>overflow:auto</code>后盒子就能包裹浮动元素。</p>
<img src="/2020/12/BFC%E5%B8%83%E5%B1%80/3.png" class="">

<p><code>overflow</code>之所以能够有效是因为它的值是非<code>visible</code>时会创建一个BFC，而BFC的特性就是包裹浮动元素</p>
<blockquote>
<p>使用Clearfix黑魔法时，除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after。其实也就是大家常说的清除浮动.</p>
</blockquote>
<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after</p>
<h2 id="使用伪元素-after"><a href="#使用伪元素-after" class="headerlink" title="使用伪元素 ::after"></a>使用伪元素 ::after</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用伪类-after"><a href="#使用伪类-after" class="headerlink" title="使用伪类 :after"></a>使用伪类 :after</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该方法在 ie6、7 中无效，需要对 .outer 设置 zoom:1</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>在flutter中优雅的封装网络请求</title>
    <url>/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>本文讲述如何封装dio网络请求，并在实际中使用。</p>
<a id="more"></a>

<h2 id="Dio-http库"><a href="#Dio-http库" class="headerlink" title="Dio http库"></a>Dio http库</h2><p>dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时等。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>引入dio:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">dio:</span> <span class="string">^x.x.x</span>   <span class="comment">#请使用pub上的最新版本</span></span><br></pre></td></tr></table></figure>

<h2 id="开始封装"><a href="#开始封装" class="headerlink" title="开始封装"></a>开始封装</h2><p>在lib文件夹下创建<code>utils/dio/dio.dart</code>,用于编写我们封装的代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:shared_preferences/shared_preferences.dart'</span>;</span><br><span class="line"><span class="comment">/// <span class="markdown">自定义枚举</span></span></span><br><span class="line"><span class="keyword">enum</span> Method &#123; <span class="keyword">get</span>, post, put, delete &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 工厂模式</span></span><br><span class="line">  <span class="keyword">factory</span> Net() =&gt; _getInstance();</span><br><span class="line">  <span class="keyword">static</span> Net <span class="keyword">get</span> instance =&gt; _getInstance();</span><br><span class="line">  <span class="keyword">static</span> Net _instance;</span><br><span class="line"></span><br><span class="line">  Dio dio;</span><br><span class="line">  Net._internal() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    dio = Dio(BaseOptions(</span><br><span class="line">      connectTimeout: <span class="number">60000</span>, <span class="comment">// 连接服务器超时时间，单位是毫秒.</span></span><br><span class="line">      receiveTimeout: <span class="number">10000</span>, <span class="comment">// 响应流上前后两次接受到数据的间隔，单位为毫秒, 这并不是接收数据的总时限.</span></span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 单列模式</span></span><br><span class="line">  <span class="keyword">static</span> Net _getInstance() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      _instance = Net._internal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span>(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.<span class="keyword">get</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  post(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.post);</span><br><span class="line">  &#125;</span><br><span class="line">  put(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.put);</span><br><span class="line">  &#125;</span><br><span class="line">  delete(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.delete);</span><br><span class="line">  &#125;</span><br><span class="line">   _doRequest(</span><br><span class="line">    <span class="built_in">String</span> url,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params,</span><br><span class="line">    Method method,</span><br><span class="line">  ) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> _prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">      <span class="keyword">var</span> token = _prefs.getString(<span class="string">'token'</span>)??<span class="string">''</span>;</span><br><span class="line">      <span class="comment">/// <span class="markdown">可以添加header 设置token</span></span></span><br><span class="line">      dio.options.headers.addAll(&#123;<span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + token&#125;);</span><br><span class="line">      <span class="built_in">String</span> BASE_URL = <span class="string">'你的接口地址'</span> + url;</span><br><span class="line">      Response response;</span><br><span class="line">      <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">        <span class="keyword">case</span> Method.<span class="keyword">get</span>:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Method.post:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.post(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.post(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Method.put:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.put(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.put(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Method.delete:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.delete(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.delete(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> json.decode(response.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'错误：<span class="subst">$&#123;exception.toString()&#125;</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> code;</span><br><span class="line">  <span class="built_in">dynamic</span> data;</span><br><span class="line">  <span class="built_in">String</span> error;</span><br><span class="line">  BaseModel(&#123;<span class="keyword">this</span>.code, <span class="keyword">this</span>.data, <span class="keyword">this</span>.error&#125;);</span><br><span class="line">  BaseModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    code = json[<span class="string">'code'</span>];</span><br><span class="line">    data = json[<span class="string">'data'</span>];</span><br><span class="line">    error = json[<span class="string">'error'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们以一个登陆的demo来看dio的用法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  LoginForm(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _LoginFormState createState() =&gt; _LoginFormState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LoginFormState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LoginForm</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _userNameController = TextEditingController();</span><br><span class="line">  <span class="keyword">final</span> _pwdController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  _onsubmit() <span class="keyword">async</span> &#123;<span class="comment">//进行登陆操作</span></span><br><span class="line">    <span class="keyword">var</span> params=&#123;</span><br><span class="line">      <span class="string">'username'</span>:_userNameController.text,</span><br><span class="line">      <span class="string">'password'</span>:_pwdController.text</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> Net().post(<span class="string">'login'</span>, params);</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="string">'code'</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">//登陆成功的操作</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//登陆失败的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">      padding: EdgeInsetsDirectional.fromSTEB(<span class="number">30</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">10</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          TextField(</span><br><span class="line">            controller: _userNameController,</span><br><span class="line">            decoration: InputDecoration(</span><br><span class="line">              labelText: <span class="string">'用户名'</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          TextField(</span><br><span class="line">            controller: _pwdController,</span><br><span class="line">            decoration: InputDecoration(</span><br><span class="line">              labelText: <span class="string">'密码'</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          MaterialButton(onPressed: _onsubmit,<span class="comment">//等同于我们常见的click事件</span></span><br><span class="line">           child: Text(<span class="string">'登陆'</span>))</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p> <a href="https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/">将uni-request进行axios化封装</a><br> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/">在vue中对axios进行二次封装</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>flutter</category>
        <category>网络请求</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue中对axios进行二次封装</title>
    <url>/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>为aixos配置统一请求地址，统一请求头等。</p>
<a id="more"></a>

<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>在<code>src</code>下新建<code>axios/axios.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"../router"</span></span><br><span class="line"><span class="keyword">import</span> Tools <span class="keyword">from</span> <span class="string">'@/components/Tools/index'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> token = <span class="string">''</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span> + token;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> api_token = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'api_token'</span>)!)</span><br><span class="line">    <span class="keyword">if</span> (api_token) &#123;</span><br><span class="line">      token = api_token</span><br><span class="line">    &#125;</span><br><span class="line">    config.headers.common[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span> + token;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error.response);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">axios.defaults.baseURL = process.env.VUE_APP_BASEURL</span><br><span class="line"></span><br><span class="line">axios.defaults.headers.post[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">axios.defaults.headers.post[<span class="string">"X-Requested-With"</span>] = <span class="string">"XMLHttpRequest"</span>;</span><br><span class="line">axios.defaults.headers.put[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">axios.defaults.headers.put[<span class="string">"X-Requested-With"</span>] = <span class="string">"XMLHttpRequest"</span>;</span><br><span class="line">axios.defaults.headers.delete[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">axios.defaults.headers.delete[<span class="string">"X-Requested-With"</span>] = <span class="string">"XMLHttpRequest"</span>;</span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      response &amp;&amp;</span><br><span class="line">      (response.status === <span class="number">200</span> ||</span><br><span class="line">        response.status === <span class="number">304</span> ||</span><br><span class="line">        response.status === <span class="number">400</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        resolve(response.data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(&#123;</span><br><span class="line">        status: response.status,</span><br><span class="line">        message: response.data.message,</span><br><span class="line">        error: response.data.errors[<span class="built_in">Object</span>.keys(response.data.errors)[<span class="number">0</span>]][<span class="number">0</span>]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  post(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"post"</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span>(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"get"</span>,</span><br><span class="line">      url,</span><br><span class="line">      params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  put(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"put"</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">delete</span>(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"delete"</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先在<code>main.js</code>中进行引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'./axios/axios'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure>
<p>然后在我们要使用的地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios.post(<span class="string">'接口地址'</span>,&#123;&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<blockquote>
<p> <a href="https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/">将uni-request进行axios化封装</a><br> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/">在flutter中优雅的封装网络请求</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>网络请求</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title>Browserslist</title>
    <url>/2021/08/Browserslist/</url>
    <content><![CDATA[<p><code>browserslist</code>实际上就是声明了⼀段浏览器的集合，我们的⼯具可以根据这段集合描述，针对性的输出兼容性代码。</p>
<a id="more"></a>

<p><a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">Browserslist</a>就是帮助我们来设置⽬标浏览器的⼯具。<code>Browserslist</code> 被⼴泛的应⽤到 <code>Babel</code>、<code>postcsspreset-env</code>、<code>autoprefixer</code> 等开发⼯具上。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>Browserslist</code>的配置可以放在<code>package.json</code>中，也可以单独放在配置⽂件<code>.browserslistrc</code>中。所有的⼯具都会主动查找<code>browserslist</code>的配置⽂件，根据 <code>browserslist</code>配置找出对应的⽬标浏览器集合。</p>
<p>Browserslist 的数据都是来⾃Can I Use:<a href="https://browserl.ist/" target="_blank" rel="noopener">https://browserl.ist/</a></p>
<p>可惜⽹站关闭了，现在需要⼿动检测：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx browserslist "last 1 version, &gt;1%"</span><br></pre></td></tr></table></figure>

<p>在<code>package.json</code>中的配置是增加⼀个<code>browserslist</code>数组属性：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"browserslist"</span>: [<span class="string">"last 2 version"</span>, <span class="string">"&gt; 1%"</span>, <span class="string">"maintained node versions"</span>, <span class="string">"not</span></span><br><span class="line"><span class="string">ie &lt; 11"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者在项⽬的根⽬录下创建⼀个<code>.browserslistrc</code>⽂件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注释是这样写的，以#号开头</span><br><span class="line"># 每⾏⼀个浏览器集合描述</span><br><span class="line">last 2 version</span><br><span class="line">&gt; 1%</span><br><span class="line">maintained node versions</span><br><span class="line">not ie &lt; 11</span><br></pre></td></tr></table></figure>

<h1 id="常⻅集合范围说明"><a href="#常⻅集合范围说明" class="headerlink" title="常⻅集合范围说明"></a>常⻅集合范围说明</h1><table>
<thead>
<tr>
<th>范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>last 2 versions</td>
<td>caniuse.com⽹站跟踪的最新两个版本，假如 iOS 12 是最新版本，那么向后兼容两个版本就是 iOS 11 和 iOS 12</td>
</tr>
<tr>
<td>&gt; 1%</td>
<td>全球超过 1%⼈使⽤的浏览器，类似&gt; 5% in US 则指代美国 5%以上⽤户</td>
</tr>
<tr>
<td>cover 99.5%</td>
<td>覆盖 99.5%主流浏览器</td>
</tr>
<tr>
<td>chrome &gt; 50   ie 6-8</td>
<td>指定某个浏览器版本范围</td>
</tr>
<tr>
<td>unreleased versions</td>
<td>所有浏览器的 beta 版本</td>
</tr>
<tr>
<td>not ie &lt; 11</td>
<td>排除 ie11 以下版本不兼容</td>
</tr>
<tr>
<td>since 2013  last 2 years</td>
<td>某时间范围发布的所有浏览器版本</td>
</tr>
<tr>
<td>maintained node versions</td>
<td>所有被 node 基⾦会维护的 node 版本</td>
</tr>
<tr>
<td>current node</td>
<td>当前环境的 node 版本</td>
</tr>
<tr>
<td>dead</td>
<td>通过last 2 versions 筛选的浏览器中，全球使⽤率低于0.5% 且官⽅声明不再维护或者事实上已经两年没有再更新的版本</td>
</tr>
<tr>
<td>defaults</td>
<td>默认配置， &gt; 0.5% last 2 versions Firefox ESR not dead</td>
</tr>
</tbody></table>
<h1 id="常见浏览器名称"><a href="#常见浏览器名称" class="headerlink" title="常见浏览器名称"></a>常见浏览器名称</h1><table>
<thead>
<tr>
<th>名称</th>
<th>中文对照</th>
</tr>
</thead>
<tbody><tr>
<td>Android</td>
<td>安卓 webview 浏览器</td>
</tr>
<tr>
<td>Baidu</td>
<td>百度浏览器</td>
</tr>
<tr>
<td>BlackBerry / bb</td>
<td>⿊莓浏览器</td>
</tr>
<tr>
<td>Chrome</td>
<td>chrome 浏览器</td>
</tr>
<tr>
<td>ChromeAndroid / and_chr</td>
<td>chrome 安卓移动浏览器</td>
</tr>
<tr>
<td>Edge</td>
<td>微软 Edge 浏览器</td>
</tr>
<tr>
<td>Electron</td>
<td>Electron</td>
</tr>
<tr>
<td>Explorer / ie</td>
<td>ie 浏览器</td>
</tr>
<tr>
<td>ExplorerMobile / ie_mob</td>
<td>ie 移动浏览器</td>
</tr>
<tr>
<td>Firefox / ff</td>
<td>⽕狐浏览器</td>
</tr>
<tr>
<td>FirefoxAndroid / and_ff</td>
<td>⽕狐安卓浏览器</td>
</tr>
<tr>
<td>iOS / ios_saf</td>
<td>iOS Safari 浏览器</td>
</tr>
<tr>
<td>Node</td>
<td>nodejs</td>
</tr>
<tr>
<td>Opera</td>
<td>Opera浏览器</td>
</tr>
<tr>
<td>OperaMini / op_mini</td>
<td>operaMini 浏览器</td>
</tr>
<tr>
<td>OperaMobile / op_mob</td>
<td>opera 移动浏览器</td>
</tr>
<tr>
<td>QQAndroid / and_qq</td>
<td>QQ安卓浏览器</td>
</tr>
<tr>
<td>Samsung</td>
<td>三星浏览器</td>
</tr>
<tr>
<td>Safari</td>
<td>桌⾯版本 Safari</td>
</tr>
<tr>
<td>UCAndroid / and_uc</td>
<td>UC 安卓浏览器</td>
</tr>
</tbody></table>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs文件操作</title>
    <url>/2021/03/nodejs%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>使用nodejs进行文件以及目录的创建，删除，修改，复制。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>) <span class="comment">//文件操作</span></span><br><span class="line"><span class="comment">// 增删改查;</span></span><br><span class="line"><span class="comment">// 1.文件操作   2.目录操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件操作</span></span><br><span class="line">fs.writeFile(<span class="string">'1.txt'</span>,<span class="string">"我是写入的文字"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a:追加写入;w:写入;r:读取</span></span><br><span class="line">fs.writeFile(<span class="string">'1.txt'</span>,<span class="string">"我是zhuijia的文字"</span>,&#123;<span class="attr">flag</span>:<span class="string">"a"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line">fs.readFile(<span class="string">'1.txt'</span>,<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(<span class="string">'1.txt'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data,toString())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的文件操作  没有加Sync都是异步  否则是同步</span></span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(<span class="string">'1.txt'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(data.toString())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改文件名</span></span><br><span class="line">fs.rename(<span class="string">"1.txt"</span>,<span class="string">"2.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">fs.unlink(<span class="string">'2.txt'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line">fs.copyFile(<span class="string">'1.js'</span>,<span class="string">"2.js"</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCopy</span>(<span class="params">src,dest</span>)</span>&#123;</span><br><span class="line">    fs.writeFileSync(dest,fs.readFileSync(src))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目录操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line">fs.mkdir(<span class="string">'test'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改目录名称</span></span><br><span class="line">fs.rename(<span class="string">'test'</span>,<span class="string">"test1"</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取目录</span></span><br><span class="line">fs.readdir(<span class="string">'test1'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除目录(空文件夹/目录)</span></span><br><span class="line">fs.rmdir(<span class="string">'test1'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断文件/目录是否存在  true/false</span></span><br><span class="line">fs.exists(<span class="string">"test"</span>,exists=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(exists)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件活目录的详细信息</span></span><br><span class="line">fs.stat(<span class="string">'1.js'</span>,(err,stat)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(stat)</span></span><br><span class="line">    <span class="comment">// let res =stat.isFile()//判断是否是文件</span></span><br><span class="line">    <span class="keyword">let</span> res =stat.isDirectory()<span class="comment">//判断是否是文件夹</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除非空文件夹</span></span><br><span class="line"><span class="comment">// 先把目录里文件删除-&gt;删除空目录</span></span><br><span class="line">removeDir(<span class="string">'test1'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeDir</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data=fs.readdirSync(path)</span><br><span class="line">    data.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//是文件直接删除    目录继续查找</span></span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">`<span class="subst">$&#123;path&#125;</span>/<span class="subst">$&#123;v&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> stat=fs.statSync(url)</span><br><span class="line">        <span class="keyword">if</span>(stat.isFile())&#123;</span><br><span class="line">            <span class="comment">// 文件 删除</span></span><br><span class="line">            fs.unlinkSync(url)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//目录 继续查找</span></span><br><span class="line">            removeDir(url)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    fs.rmdirSync(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局&amp;&amp;双飞翼布局</title>
    <url>/2020/12/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。</p>
<a id="more"></a>

<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>圣杯布局和双飞翼布局解决的问题是相同的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul>
<li><p>圣杯布局：为了让中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</p>
</li>
<li><p>双飞翼布局：为了让中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该div里用margin-left和margin-right为左右两栏div留出位置。</p>
</li>
</ul>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><a href="https://github.com/qytayh/common-css-layout" target="_blank" rel="noopener">详细代码点击这里去github查看</a></p>
<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><ul>
<li><p>优点：不需要添加dom节点</p>
</li>
<li><p>缺点：圣杯布局的缺点：正常情况下是没有问题的，但是部分情况下会出现页面变形的问题</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span>: 0 100<span class="selector-tag">px</span> 0 200<span class="selector-tag">px</span>;<span class="comment">/* 此段代码是为了摆正中间栏的位置 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* min-width: 600px; 不设置最小宽度  页面容易变形 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background: red;</span><br><span class="line"><span class="css">        <span class="comment">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        left: -200px;</span><br><span class="line"><span class="css">        <span class="comment">/* 中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        background: blue;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">        right: -100px;</span><br><span class="line"><span class="css">        <span class="comment">/* 中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,<span class="selector-class">.main</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        min-height: 200px;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>圣杯布局总结：用父盒子的padding将中间栏挤到中间，并腾出地方给两边栏</p>
</blockquote>
<h2 id="双飞翼"><a href="#双飞翼" class="headerlink" title="双飞翼"></a>双飞翼</h2><ul>
<li><p>优点：不会像圣杯布局那样变形</p>
</li>
<li><p>缺点是：多加了一层dom节点</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,<span class="selector-class">.main</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        min-height: 300px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 关键点：用margin把div挤到中间正常展示*/</span></span></span><br><span class="line">        margin: 0 100px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background: green;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        background: blue;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>双飞翼总结：中间的div外层用另一个div包裹了一下，然后利用 margin来把嵌套的div“挤”到中间</p>
</blockquote>
<h2 id="使用其他方法实现中间栏div内容不被遮挡"><a href="#使用其他方法实现中间栏div内容不被遮挡" class="headerlink" title="使用其他方法实现中间栏div内容不被遮挡"></a>使用其他方法实现中间栏div内容不被遮挡</h2><p>除了圣杯布局和双飞翼布局，我们还可以用别的方式实现同样的效果</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>使用<code>box-sizing:boder-box</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>其他方法实现中间栏div内容不被遮挡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">        padding: 0 100px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,<span class="selector-class">.main</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        min-height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        background: lightgreen;</span><br><span class="line">        width: 200px;</span><br><span class="line"><span class="css">        <span class="comment">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        left: -200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        background: lightpink;</span><br><span class="line">        width: 100%;</span><br><span class="line"><span class="css">        <span class="comment">/* 关键点！！！ */</span></span></span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        padding: 0 100px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        background: lightseagreen;</span><br><span class="line">        width: 100px;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">        right: -100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>利用flex</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        min-height: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        flex-grow: 1;</span><br><span class="line">        background-color: mediumaquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        flex-basis: 200px;</span><br><span class="line"><span class="css">        <span class="comment">/* 固定宽度 */</span></span></span><br><span class="line">        background-color: mediumpurple;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        flex-basis: 300px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack基础</title>
    <url>/2021/08/webpack%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h1><a id="more"></a>


<p><code>Webpack</code> 是⼀个现代 <code>JavaScript</code> 应⽤程序的静态模块打包器（<code>module bundler</code>），当 <code>webpack</code> 处理应⽤程序时，它会递归地构建⼀个依赖关系图(d<code>ependency graph</code>)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 <code>bundle</code>。</p>
<p><code>Webpack</code>是⼀个打包模块化<code>JavaScript</code>的⼯具，它会从⼊⼝模块出发，识别出源码中的模块化导⼊语句，递归地找出⼊⼝⽂件的所有依赖，将⼊⼝和其所有的依赖打包到⼀个单独的⽂件中是⼯程化、⾃动化思想在前端开发中的体现。</p>
<h1 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h1><p>环境准备<br>  nodejs:：<code>https://nodejs.org/en/</code><br>  版本参考官⽹发布的最新版本，可以提升webpack的打包速度</p>
<p>安装⽅式</p>
<p>  局部安装（推荐）</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y # 初始化npm配置⽂件</span><br><span class="line">npm install --save-dev webpack # 安装核⼼库</span><br><span class="line">npm install --save-dev webpack-cli # 安装命令⾏⼯具</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装4.x稳定版本</span></span><br><span class="line">npm i -D webpack@4.44.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line">npm i -D webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>  全局安装（不推荐）<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装webpack V4+版本时，需要额外安装webpack-cli</span></span><br><span class="line">npm install webpack webpack-cli -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查版本</span></span><br><span class="line">webpack -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">npm uninstall webpack webpack-cli -g</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>全局安装webpack，这会将你项⽬中的webpack锁定到指定版本，造成不同的项⽬中因为webpack依赖不同版本⽽导致冲突，构建失败</p>
</blockquote>
<h1 id="启动webpack"><a href="#启动webpack" class="headerlink" title="启动webpack"></a>启动webpack</h1><blockquote>
<p>启动wekpack执行构建，默认<code>mode=production</code>(默认开启代码压缩)</p>
</blockquote>
<ol>
<li><p>webpack默认配置</p>
<ul>
<li>webpack默认⽀持JS模块和JSON模块</li>
<li>⽀持CommonJS Es moudule AMD等模块类型</li>
<li>webpack4⽀持零配置使⽤,但是很弱，稍微复杂些的场景都需要额外扩展</li>
</ul>
</li>
<li><p>准备执⾏构建</p>
<ul>
<li>新建<code>src</code>⽂件夹</li>
<li>新建<code>src/index.js</code>、<code>src/index.json</code>、<code>src/other.js</code></li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">"./index.json"</span>);<span class="comment">//commonJS</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">"./other.js"</span>;<span class="comment">//es module</span></span><br><span class="line"><span class="built_in">console</span>.log(json, add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// index.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"JOSN"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//other.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执⾏构建</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npx⽅式</span></span><br><span class="line">npx webpack</span><br><span class="line"><span class="meta">#</span><span class="bash"> npm script</span></span><br><span class="line">npm run dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改package.json</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原理就是通过shell脚本在<code>node_modules/.bin</code>⽬录下创建⼀个软链接。</p>
</blockquote>
<ol start="4">
<li><p>我们会发现⽬录下多出⼀个<code>dist</code>⽬录，⾥⾯有个<code>main.js</code>，这个⽂件是⼀个可执⾏的<code>JavaScript</code>⽂件，⾥⾯包含<code>webpackBootstrap</code>启动函数。</p>
</li>
<li><p>默认配置</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">'./src/index.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'./dist'</span>), <span class="comment">// 输出的文件存放的目录</span></span><br><span class="line">    filename:<span class="string">'main.js'</span> <span class="comment">// 输出的文件名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">'development'</span>,<span class="comment">// 模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>webpack</code>配置名默认为<code>webpack.config.js</code>,也可以用其他命名，其他命名需要修改<code>package.json</code><br>“scripts”: {<br>  “dev”: “webpack –config ./youFileName.js”<br>}</p>
</blockquote>
<ol start="6">
<li>多入口对应多出口</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// entry支持：字符串 对象 数组</span></span><br><span class="line">  <span class="comment">// 字符串数组对应单页面应用</span></span><br><span class="line">  <span class="comment">// 对象可以单页面应用也可以多页面应用</span></span><br><span class="line">  entry:&#123;</span><br><span class="line">    index:<span class="string">'./src/index.js'</span>,</span><br><span class="line">    a:<span class="string">'./src/a.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// entry:['./src/index.js','./src/a.js'],</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'./dist'</span>), <span class="comment">// 输出的文件存放的目录</span></span><br><span class="line">    filename:<span class="string">'[name].js'</span><span class="comment">// 输出的文件名称 使用占位符 index打包成index.js a打包成a.js</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">'development'</span>,<span class="comment">// 构建模式  none development production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="webpack配置核⼼概念"><a href="#webpack配置核⼼概念" class="headerlink" title="webpack配置核⼼概念"></a>webpack配置核⼼概念</h1><ul>
<li>chunk：指代码块，⼀个<code>chunk</code>可能由多个模块组合⽽成，也⽤于代码合并与分割。</li>
<li>bundle：资源经过<code>Webpack</code>流程解析编译后最终结输出的成果⽂件。(输出到dist的文件)</li>
<li>entry：顾名思义，就是⼊⼝起点，⽤来告诉webpack⽤哪个⽂件作为构建依赖图的起点。<code>webpack</code>会根据<code>entry</code>递归的去寻找依赖，每个依赖都将被它处理，最后输出到打包成果中。</li>
<li>output：<code>output</code>配置描述了<code>webpack</code>打包的输出配置，包含输出⽂件的命名、位置等信息。</li>
<li>loader：默认情况下，<code>webpack</code>仅⽀持<code>.js</code> <code>.json</code> ⽂件，通过<code>loader</code>，可以让它解析其他类型的⽂件，充当翻译官的⻆⾊。理论上只要有相应的<code>loader</code>，就可以处理任何类型的⽂件。</li>
<li>plugin：<code>loader</code>主要的职责是让<code>webpack</code>认识更多的⽂件类型，⽽<code>plugin</code>的职责则是让其可以控制构建流程，从⽽执⾏⼀些特殊的任务。插件的功能⾮常强⼤，可以完成各种各样的任务。<ul>
<li><code>webpack</code>的功能补充</li>
</ul>
</li>
<li>mode：4.0开始，<code>webpack</code>⽀持零配置，旨在为开发⼈员减少上⼿难度，同时加⼊了<code>mode</code>的概念，⽤于指定打包的⽬标环境，以便在打包的过程中启⽤<code>webpack</code>针对不同的环境下内置的优化。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> htmlwebpackplugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>), <span class="comment">// 输出的文件存放的目录</span></span><br><span class="line">    filename: <span class="string">"main.js"</span>, <span class="comment">// 输出的文件名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// webpack处理css内容</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 多个loader情况下 执行顺序自后往前</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> htmlwebpackplugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">      filename: <span class="string">"index.html"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>webpack 默认只支持.js .json类型的模板。loader需要通过npm 进行安装<code>npm install style-loader -D</code>,<code>npm install css-loader -D</code></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack进行前端开发工程环境搭建</title>
    <url>/2021/08/webpack%E8%BF%9B%E8%A1%8C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>在阅读这篇文章之前，请确认你已经了解了webpack的基本常识</p>
<blockquote>
<p><a href="https://qytayh.github.io/2021/08/webpack%E5%9F%BA%E7%A1%80/">还不了解？点击查看《webpack基础》</a></p>
</blockquote>
<a id="more"></a>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>多人协作时，可以在项目根目录下新建一个<code>.npmrc</code>文件用来指定npm源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 统一团队的npm源</span></span><br><span class="line">registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用npm install的时候就会默认淘宝源</span></span><br></pre></td></tr></table></figure>

<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="样式-静态资源-图片第三方字体-es6-vue-react-ts"><a href="#样式-静态资源-图片第三方字体-es6-vue-react-ts" class="headerlink" title="样式 静态资源 (图片第三方字体) es6+ (vue react ts)"></a>样式 静态资源 (图片第三方字体) es6+ (vue react ts)</h2><h3 id="样式：借助css-loader处理css语法，借助style-loader使用css"><a href="#样式：借助css-loader处理css语法，借助style-loader使用css" class="headerlink" title="样式：借助css-loader处理css语法，借助style-loader使用css"></a>样式：借助css-loader处理css语法，借助style-loader使用css</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// webpack处理css内容</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 多个loader情况下 执行顺序自后往前</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 先将less语法转成css语法</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>,<span class="string">"less-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>,<span class="string">"sass-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.postcss.com.cn/" target="_blank" rel="noopener">postcss官网</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">根目录下新增<span class="string">`postcss.config.js`</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"autoprefixer"</span>),<span class="comment">// 浏览器兼容</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"cssnano"</span>) <span class="comment">// css 压缩</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>package.json</code>中<code>&quot;browserslist&quot;:[&quot;last 2 versions&quot;,&quot;&gt; 1%&quot;]</code>用于配置<code>autoprefixer</code>自动兼容版本（兼容所有浏览器最近的两个大版本，全球市场占有率大于1%的浏览器）<br>更多点击 –&gt; <a href="https://qytayh.github.io/2021/08/Browserslist/">Browserslist</a></p>
</blockquote>
<p>安装<code>mini-css-extract-plugin</code>用来做样式提取，将css样式抽离成css文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>
<p>修改<code>webpack.config.js</code>中的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> minicssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)<span class="comment">//先进行引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">   <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 将style-loader替换成minicssExtractPlugin自带的loader</span></span><br><span class="line">        use: [minicssExtractPlugin.loader, <span class="string">"css-loader"</span>, <span class="string">"postcss-loader"</span>,<span class="string">"less-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> minicssExtractPlugin(&#123; <span class="comment">// 将样式抽离成独立的css文件</span></span><br><span class="line">      filename:<span class="string">"[name].css"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图片-字体⽂件处理："><a href="#图片-字体⽂件处理：" class="headerlink" title="图片/字体⽂件处理："></a>图片/字体⽂件处理：</h3><ul>
<li>file-loader </li>
<li>url-loader</li>
</ul>
<p><code>url-loader</code>和<code>file-loader</code>都可以⽤来处理本地的资源⽂件，如图⽚、字体、⾳视频等。功能也是类似的，不过<code>url-loader</code>可以指定在⽂件⼤⼩⼩于指定的限制时，返回<code>DataURL</code>，不会输出真实的⽂件，可以减少昂贵的⽹络请求。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">npm install url-loader file-loader -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> pic <span class="keyword">from</span> <span class="string">'you pic url'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = pic</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">root.append(img)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line">&#123;</span><br><span class="line">  test:<span class="regexp">/\.(png|jp?g|gif|webp)$/</span>,</span><br><span class="line">  <span class="comment">// use:"file-loader"</span></span><br><span class="line">  use:&#123;</span><br><span class="line">    loader:<span class="string">'file-loader'</span>,</span><br><span class="line">    options:&#123;</span><br><span class="line">      name:<span class="string">"images/[name].[ext]"</span>, <span class="comment">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class="line">      outputPath:<span class="string">'images'</span>,<span class="comment">// 输出目录</span></span><br><span class="line">      publicPath:<span class="string">'../images'</span> <span class="comment">// 引用的目录自动带上publicPath路径</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use:"url-loader"  url-loader兼容file-loader的配置</span></span><br><span class="line">  use:&#123;</span><br><span class="line">    loader:<span class="string">'url-loader'</span>,</span><br><span class="line">    options:&#123;</span><br><span class="line">      name:<span class="string">"images/[name].[ext]"</span>, <span class="comment">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class="line">      outputPath:<span class="string">'images'</span>,<span class="comment">// 输出目录</span></span><br><span class="line">      publicPath:<span class="string">'../images'</span>, <span class="comment">// 引用的目录自动带上publicPath路径</span></span><br><span class="line">      limit: <span class="number">1024</span>*<span class="number">10</span>   <span class="comment">// 单位是字节 1024为一个kb  大于limit值为png格式 小于limit值 转base64</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noopener">file-loader更多相关</a><br>如果需要使⽤图⽚压缩功能，可以使⽤<code>image-webpack-loader</code>。</p>
</blockquote>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;css</span><br><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &quot;webfont&quot;;</span><br><span class="line">  font-display: swap;</span><br><span class="line">  src: url(&quot;webfont.woff2&quot;) format(&quot;woff2&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  background: blue;</span><br><span class="line">  font-family: &quot;webfont&quot;!important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">&#123;</span><br><span class="line">  test: &#x2F;\.(eot|ttf|woff|woff2|svg)$&#x2F;,</span><br><span class="line">  use: &quot;file-loader&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><ul>
<li><p><code>hash</code>策略</p>
<blockquote>
<p>在输出的文件名后添加<code>[hash]</code>，可以用<code>[hash:8]</code>控制文件名中hash长度<br>以项目为单位，项目内容改变，则会生产新的hash，内容不变hash不变</p>
</blockquote>
</li>
<li><p>使用<code>chunkhash</code></p>
<blockquote>
<p>以<code>chunk</code>为单位，当一个文件内容改变，则整个chunk组的模块hash都会改变<br><code>[name]-[chunkhash:8].[ext]</code></p>
</blockquote>
</li>
<li><p><code>contenthash</code></p>
<blockquote>
<p>以自身内容为单位</p>
</blockquote>
</li>
</ul>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>TS装饰器之防抖节流</title>
    <url>/2021/08/TS%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B9%8B%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>首先，我们先来了解一下什么是防抖和节流。</p>
<a id="more"></a>

<h1 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h1><p><strong>函数防抖，这里的抖动就是执行的意思，而一般的抖动都是持续的，多次的。假设函数持续多次执行，我们希望让它冷静下来再执行。也就是当持续触发事件的时候，函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行</strong></p>
<p>特点：</p>
<ul>
<li>持续触发不执行</li>
<li>最后一次触发过了一段时间之后再执行</li>
</ul>
<p>我们写 js 的时候通常会这么来写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(fn, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用的时候 以滚动为例</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = debounce(test, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>



<h1 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h1><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。</strong></p>
<p>说的通俗一点就是设计一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间）。</p>
<p>特点:</p>
<ul>
<li>如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效.</li>
</ul>
<p>js中我们的常见写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fun, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">          fun()</span><br><span class="line">        &#125;, wait)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用的时候 我们还是以滚动为例</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = throttle(test, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<h1 id="进阶（TS装饰器）"><a href="#进阶（TS装饰器）" class="headerlink" title="进阶（TS装饰器）"></a>进阶（TS装饰器）</h1><blockquote>
<p>在你阅读这节之前，希望你已经了解了<a href="https://qytayh.github.io/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/">TS基础</a>以及<a href="https://qytayh.github.io/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/">装饰器的基本用法</a>。</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工具函数</span></span><br><span class="line"><span class="keyword">const</span> delayDefault = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="function">(<span class="params">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = descriptor.value;</span><br><span class="line">    <span class="keyword">let</span> timer: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        oldValue.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流 时间戳写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> throttle = <span class="function">(<span class="params">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime, timer;</span><br><span class="line">    <span class="keyword">const</span> oldFunction = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="keyword">if</span> (lastTime &amp;&amp; nowTime - lastTime &lt; delay) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">          clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          oldFunction.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">          lastTime = nowTime;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oldFunction.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        lastTime = nowTime;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流  定时器写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> throttle = <span class="function">(<span class="params">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> oldFunction = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          timer = <span class="literal">null</span>;</span><br><span class="line">          oldFunction.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以上两种节流都可正常使用，没有好坏之分，看个人喜好。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">class</span> Test&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@debounce</span>()</span><br><span class="line">  funA()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'A'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@throttle</span>()</span><br><span class="line">  funB()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'B'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002-->
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket从入门到入土</title>
    <url>/2021/08/websocket%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    <content><![CDATA[<h1 id="什么是websocket？"><a href="#什么是websocket？" class="headerlink" title="什么是websocket？"></a>什么是<code>websocket</code>？</h1><p><code>websocket</code>是一种网络传输协议，可在单个<code>tcp</code>连接上进行全双工通信，位于<code>OSI</code>模型的应用层。</p>
<a id="more"></a>

<p>特点：</p>
<ul>
<li><code>TCP</code>链接，与<code>HTTP</code>协议兼容</li>
<li>双向通信，主动推送（服务端向客户端）</li>
<li>无同源限制，协议标识符为ws（加密wss）</li>
</ul>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li>聊天、消息、点赞</li>
<li>直播评论（弹幕）</li>
<li>游戏、协调编辑、基于位置的应用</li>
</ul>
<h1 id="开始你的第一个websocket应用"><a href="#开始你的第一个websocket应用" class="headerlink" title="开始你的第一个websocket应用"></a>开始你的第一个websocket应用</h1><h2 id="websocket常用前端库"><a href="#websocket常用前端库" class="headerlink" title="websocket常用前端库"></a>websocket常用前端库</h2><ul>
<li>ws (实现原生协议，特点：通用、性能高，定制型强)</li>
<li>socket.io (向下兼容协议，特点：适配性强，性能一般)</li>
</ul>
<h2 id="3分钟编写一个ws应用"><a href="#3分钟编写一个ws应用" class="headerlink" title="3分钟编写一个ws应用"></a>3分钟编写一个ws应用</h2><ol>
<li>新建<code>server</code>目录，通过<code>npm init -y</code>初始化<code>server</code>目录</li>
<li><code>npm install ws</code> 安装ws库</li>
<li>新建<code>index.js</code>作为入口文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>)</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;)</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'on client is connected'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>根目录下新建一个<code>client</code>目录，并添加<code>index.html</code>文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws =  <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:3000'</span>)</span><br></pre></td></tr></table></figure></li>
<li>通过<code>node index.js</code>启动服务端</li>
<li>访问客户端的<code>index.html</code>，我们可以看到服务端控制台输出有用户连接了</li>
</ol>
<blockquote>
<p>客户端中使用ws方法与服务端类似</p>
</blockquote>
<h1 id="常见API介绍"><a href="#常见API介绍" class="headerlink" title="常见API介绍"></a>常见API介绍</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>
<h1 id="websocket常见状态"><a href="#websocket常见状态" class="headerlink" title="websocket常见状态"></a>websocket常见状态</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'open'</span>+ws.readyState) <span class="comment">// 1</span></span><br><span class="line">  ws.send(<span class="string">'hello from client'</span>)</span><br><span class="line">&#125;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'message'</span>+ws.readyState) <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接主动断开时触发</span></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'close'</span>+ ws.readyState)  <span class="comment">//  close: 服务端断开 3  客户端主动断开 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'yiguanbi'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当连接失败触发error事件</span></span><br><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>+ ws.readyState)  <span class="comment">//  erroe:3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实现一个ws广播"><a href="#实现一个ws广播" class="headerlink" title="实现一个ws广播"></a>实现一个ws广播</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server端</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">wss.clients.forEach(<span class="function">(<span class="params">client</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 判断非自己的客户端 并且有连接的客户端</span></span><br><span class="line">  <span class="keyword">if</span>(ws!==client&amp;&amp;client.readyState===WebSocket.OPEN)&#123;</span><br><span class="line">    client.send(msg.toString())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="统计进入聊天室的人数"><a href="#统计进入聊天室的人数" class="headerlink" title="统计进入聊天室的人数"></a>统计进入聊天室的人数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="comment">// 改写sendMSg方法</span></span><br><span class="line">sendMsg()&#123;</span><br><span class="line">  <span class="keyword">this</span>.lists.push(<span class="keyword">this</span>.name+<span class="string">":"</span>+<span class="keyword">this</span>.message)</span><br><span class="line">  <span class="keyword">this</span>.ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    event:<span class="string">'message'</span>,</span><br><span class="line">    message:<span class="keyword">this</span>.message,</span><br><span class="line">    name:<span class="keyword">this</span>.name <span class="comment">// 传递用户名</span></span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">this</span>.message=<span class="string">''</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 改写onMsessage</span></span><br><span class="line">onMessage(event)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.isshow) <span class="keyword">return</span> <span class="comment">// 未进入聊天室则不接收消息</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(event.data)</span><br><span class="line">  <span class="keyword">if</span>(obj.event===<span class="string">'enter'</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.lists.push(<span class="string">'欢迎'</span>+obj.message+<span class="string">'加入聊天室'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.event ===<span class="string">'out'</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.lists.push(obj.name+<span class="string">'离开了聊天室'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.name!==<span class="keyword">this</span>.name)&#123;</span><br><span class="line">      <span class="keyword">this</span>.lists.push(obj.name+<span class="string">":"</span>+obj.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.num = obj.num</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个全局的变量num用于人数统计</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> msgObj = <span class="built_in">JSON</span>.parse(msg);</span><br><span class="line">  <span class="keyword">if</span> (msgObj.event === <span class="string">"enter"</span>) &#123;</span><br><span class="line">    ws.name = msgObj.message;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ws.send(msg)</span></span><br><span class="line">  <span class="comment">// 广播消息</span></span><br><span class="line">  wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">      <span class="comment">// 为了获取在线的聊天人数</span></span><br><span class="line">      msgObj.num = num;</span><br><span class="line">      client.send(<span class="built_in">JSON</span>.stringify(msgObj));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当ws客户端断开</span></span><br><span class="line">ws.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(ws.name)&#123;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> msgObj = &#123;&#125;</span><br><span class="line">  <span class="comment">// 广播消息</span></span><br><span class="line">  wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">      <span class="comment">// 为了获取在线的聊天人数</span></span><br><span class="line">      msgObj.num = num;</span><br><span class="line">      msgObj.name = ws.name;</span><br><span class="line">      msgObj.event = <span class="string">'out'</span></span><br><span class="line">      client.send(<span class="built_in">JSON</span>.stringify(msgObj));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="实现多聊天室"><a href="#实现多聊天室" class="headerlink" title="实现多聊天室"></a>实现多聊天室</h1><p>调整<code>client</code>代码，在<code>enter</code>的时候带上聊天室的<code>id</code>,广播的时候只对该聊天室进行广播</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client</span></span><br><span class="line">enter()&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.name.trim()===<span class="string">''</span>)  &#123;</span><br><span class="line">    alert(<span class="string">'用户名不得为空'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.isShow=<span class="literal">false</span></span><br><span class="line">  <span class="keyword">this</span>.ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    event:<span class="string">'enter'</span>,</span><br><span class="line">    message:<span class="keyword">this</span>.name,</span><br><span class="line">    roomid:<span class="keyword">this</span>.roomid</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line"> wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (client.readyState === WebSocket.OPEN&amp;&amp; client.roomid ===ws.roomid) &#123;</span><br><span class="line">    msgObj.name = ws.name</span><br><span class="line">    client.send(<span class="built_in">JSON</span>.stringify(msgObj));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="websocket鉴权"><a href="#websocket鉴权" class="headerlink" title="websocket鉴权"></a>websocket鉴权</h1><ul>
<li>协议本身在握手阶段不提的</li>
<li>浏览器侧：url传参、message主动消息，session/cookie</li>
<li>Nodejs侧：直接使用ws传Header</li>
</ul>
<h1 id="心跳检测-amp-断线重连"><a href="#心跳检测-amp-断线重连" class="headerlink" title="心跳检测&amp;断线重连"></a>心跳检测&amp;断线重连</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server 发送心跳检测</span></span><br><span class="line"><span class="keyword">const</span> timeInterval = <span class="number">1000</span></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  wss.clients.forEach(<span class="function">(<span class="params">ws</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ws.isAlive)&#123;</span><br><span class="line">      group[ws.roomid]--</span><br><span class="line">      <span class="keyword">return</span> ws.terminate() <span class="comment">//关闭ws链接</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主动发送心跳检测请求</span></span><br><span class="line">    <span class="comment">// 当客户端返回了消息后，主动设置flag为在线</span></span><br><span class="line">    ws.isAlive = <span class="literal">false</span></span><br><span class="line">    ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      event:<span class="string">'heartbeat'</span>,</span><br><span class="line">      message:<span class="string">'ping'</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,timeInterval)</span><br><span class="line"></span><br><span class="line"><span class="comment">// client 响应</span></span><br><span class="line">onMessage(event) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isShow) <span class="keyword">return</span>; <span class="comment">//用户没进入聊天室 就不接收消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"message"</span> + <span class="keyword">this</span>.ws.readyState); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(event.data);</span><br><span class="line">  <span class="keyword">switch</span> (obj.event) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"noAuth"</span>:</span><br><span class="line">      <span class="comment">// 鉴权失败</span></span><br><span class="line">      <span class="comment">// 重新获取token</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"enter"</span>:</span><br><span class="line">      <span class="keyword">this</span>.lists.push(<span class="string">"欢迎"</span> + obj.message + <span class="string">"加入聊天室"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"out"</span>:</span><br><span class="line">      <span class="keyword">this</span>.lists.push(obj.name + <span class="string">"离开了聊天室"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'heartbeat'</span>:<span class="comment">// 响应心跳检测</span></span><br><span class="line">      <span class="keyword">this</span>.ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        event:<span class="string">'heartbeat'</span>,</span><br><span class="line">        message:<span class="string">'pong'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">if</span> (obj.name !== <span class="keyword">this</span>.name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lists.push(obj.name + <span class="string">":"</span> + obj.message);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.num = obj.num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client 断线重连</span></span><br><span class="line"><span class="comment">// 新增定时器方法</span></span><br><span class="line">checkServer()&#123;</span><br><span class="line">  clearTimeout(<span class="keyword">this</span>.handle)</span><br><span class="line">  <span class="keyword">this</span>.handle = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.onClose()</span><br><span class="line">    <span class="keyword">this</span>.initWS()</span><br><span class="line">  &#125;, <span class="number">1000</span>+<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写onError</span></span><br><span class="line"> onError() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"error"</span> + ws.readyState); <span class="comment">//  erroe:3</span></span><br><span class="line">  <span class="comment">// 连接失败后1s 尝试断线重连</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.initWS()</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


<blockquote>
<p>相关代码请移步github —–&gt; <a href="https://github.com/qytayh/websocketBase" target="_blank" rel="noopener">websocketBase</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝小程序前端授权</title>
    <url>/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>支付宝小程序授权中，前端的详细流程。</p>
<a id="more"></a>


<!-- ![授权流程](./支付宝小程序前端授权/authFlow.png) -->
<img src="/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E6%8E%88%E6%9D%83/authFlow.png" class="" title="[授权流程]">








<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>支付宝小程序</category>
      </categories>
      <tags>
        <tag>支付宝小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>JS面向对象</title>
    <url>/2021/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>面向对象编程</p>
<a id="more"></a>

<h2 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h2><ol>
<li>执行函数；</li>
<li>自动创建空对象</li>
<li>把创建的对象指向另一个对象</li>
<li>吧空对象和函数里的this衔接起来(this指向实例化对象)</li>
<li>隐式返还this</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test...."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"><span class="keyword">new</span> test;</span><br><span class="line"><span class="keyword">new</span> test(); </span><br><span class="line"><span class="comment">//这三种方法执行效果相同</span></span><br></pre></td></tr></table></figure>
<p>简化工厂模式  —–&gt; 构造函数</p>
<ul>
<li><p>约定俗成 ： 首字母大写</p>
</li>
<li><p>属性放在构造原型；方法放在原型</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tab</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// let obj = &#123;&#125;; ---&gt; this</span></span><br><span class="line">    <span class="comment">// obj.name = "张三";</span></span><br><span class="line">    <span class="comment">// obj.hobby = function()&#123;</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"张三"</span>;</span><br><span class="line">    <span class="keyword">this</span>.hobby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"篮球"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return obj;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tab1 = <span class="keyword">new</span> Tab();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tab1.__proto__===Tab.prototype)  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Tab.prototype.__proto__===<span class="built_in">Object</span>.prototype) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">Tab.prototype.psFor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'psFor...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tab2 = <span class="keyword">new</span> Tab();</span><br><span class="line"><span class="built_in">console</span>.log(tab1.psFor === tab2.psFor)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Tab.prototype.foods = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="string">'foods...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tab1.foods()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每个原型上都有一个预定义属性 ： constructor<br>覆盖原本的 constructor 属性<br>用以下写法必须要写constructor,不然会找不到对象的原型指向</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Tab.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Tab,</span><br><span class="line">    psFor()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'psFor...'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hobby()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hobby...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'123saar'</span></span><br><span class="line"><span class="keyword">if</span>(str.constructor===<span class="built_in">String</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"字符串"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"不是"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="es6-类"><a href="#es6-类" class="headerlink" title="es6 类"></a>es6 类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drag</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> height = <span class="string">"178cm"</span>; <span class="comment">//静态属性 也可以这样写静态方法</span></span><br><span class="line">    <span class="keyword">constructor</span>(age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"张三"</span></span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    hobby()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"篮球"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    setStyle()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父类逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    testSuper()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父类test逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Drag.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//静态方法  也可这样写静态属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Drag.test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Drag.height) <span class="comment">//178cm</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Drag)  <span class="comment">//function</span></span><br><span class="line"><span class="keyword">let</span> drag1 = <span class="keyword">new</span> Drag()</span><br></pre></td></tr></table></figure>

<p>继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LimitDrag</span> <span class="keyword">extends</span> <span class="title">Drag</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age)&#123;</span><br><span class="line">        <span class="keyword">super</span>(age);</span><br><span class="line">    &#125;</span><br><span class="line">    setStyle()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"子类逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    testSuper()&#123;</span><br><span class="line">        <span class="keyword">super</span>.testSuper()  <span class="comment">//调用父类</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"子类test逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> drag2 = <span class="keyword">new</span> LimitDrag(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(LimitDrag.height) <span class="comment">//178cm  静态属性方法在类上继承</span></span><br><span class="line"><span class="built_in">console</span>.log(drag2.height) <span class="comment">//undefined  </span></span><br><span class="line"></span><br><span class="line">drag2.setStyle()  <span class="comment">//子类逻辑</span></span><br><span class="line">drag2.testSuper()  <span class="comment">//父类test逻辑  子类test逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数的属性和方法通过实例化对象继承</span></span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础之变量提升</title>
    <url>/2021/08/JavaScript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<p>直觉上我们一般会认为JavaScript代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有一些特殊情况会导致这个假设是错误的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
<p>那么<code>console.log(a)</code>会输出什么呢？</p>
<p>我们很多人会认为是<code>undefined</code>，因为<code>var a</code>的声明在<code>a=2</code>的后面，因此就认为变量<code>a</code>被重新赋上默认值<code>undefined</code>。但是，实际输出的结果却是<strong>2</strong>。</p>
<p>再看一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>从上个代码块所变现出来的某种自上而下的行为特点，大家可能又会认为这个代码块也会输出<code>2</code>,甚至还会有人认为，由于变量<code>a</code>在使用前没有事先声明，所以会抛出异常。</p>
<p>但是实际上，输出的会是<code>undefined</code>。</p>
<blockquote>
<p>所以我们就面临了一个问题，到底是声明在前还是赋值在前？</p>
</blockquote>
<h1 id="从编译器的角度来以上看问题"><a href="#从编译器的角度来以上看问题" class="headerlink" title="从编译器的角度来以上看问题"></a>从编译器的角度来以上看问题</h1><p>引擎会在解释<code>JavaScript</code>代码之前首先对其进行编译。</p>
<p>编译阶段中的一部分工作就是<strong>找到所有的声明</strong>，并用合适的作用域将它们关联起来。</p>
<p>所以，正确的思路应该是，包括变量和函数在内的所有<strong>声明</strong>都会在<strong>任何代码被执行前首先被处理</strong>。</p>
<p>在我们看到<code>var a = 2</code>的时候，可能会认为这是一个声明，但是<code>JavaScript</code>实际上会将其看成两个声明<code>var a</code>和<code>a = 2</code>。第一个声明是在编译阶段进行的，第二个赋值声明会被留在原地等待执行。</p>
<p>因此，我们上面的第一个代码块其实会被以如下方式进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
<p>类似的，我们的第二个代码块 实际上是按这个流程来处理的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">a = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>这个过程就好像变量和函数声明从它们在代码中出现的位置被移动到了最上面，这个过程就叫做<strong>提升</strong>。</p>
<blockquote>
<p>简单的说就是，先声明，后赋值</p>
</blockquote>
<h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> a =<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>foo</code>的声明被提升了，因此在第一行的调用中可以正常运行。</p>
<p>另外，值得注意的是，每个作用域都会进行提升操作，就像我们正在讨论的<code>foo</code>也会在其内部对<code>var a</code>进行提升。因此，这段代码可以被理解为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意<strong>函数声明会被提升，但是函数表达式不会</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo() <span class="comment">// 不是ReferenceError，而是TypeError</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段程序的变量标识符<code>foo()</code>被提升并分配给所在作用域，因此<code>foo()</code>不会导致<code>ReferenceError</code>，但是<code>foo</code>没有被赋值（如果它是函数声明而不是函数表达式，那么就会被赋值）。<code>foo</code>由于对<code>undefined</code>值进行函数调用而导致非法操作，所以抛出<code>TypeError</code>。</p>
<p>实际上这段代码会被解析为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo()</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" target="_blank" rel="noopener">ReferenceError解释</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noopener">TypeError解释</a></p>
</blockquote>
<h1 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h1><p>函数声明和变量声明都会被提升，但是有一点值得注意：<strong>函数会首先被提升，然后才是变量</strong>。</p>
<p>以这段代码来举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo()</span><br><span class="line"><span class="keyword">var</span> foo</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果会输出<code>1</code>而不是<code>2</code>。这段代码会被引擎解析为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尽管<code>var foo</code>出现在<code>function foo()</code>的声明之前，但它是重复声明（因此被忽略掉了），因为函数声明会被提到变量声明之前。</p>
<p>于此同时，<strong>后面出现的函数声明可以覆盖前面的</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>我们习惯的将<code>var a = 2</code>看做一个声明，但是实际上<code>JavaScript</code>引擎并不这么认为，它将<code>var a</code>和<code>a = 2</code>当做两个单独的声明，第一个是编译阶段的任务，第二个是执行阶段的任务。</p>
<p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。所有的函数和变量声明都会被移到各自作用域的最顶端，这个过程就是<strong>提升</strong>。</p>
<p>声明本身会被提升，但是包括函数表达式在内的赋值操作不会被提升。</p>
<p>函数优先原则。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>mac电脑也能模拟ie浏览器了</title>
    <url>/2021/01/mac%E7%94%B5%E8%84%91%E4%B9%9F%E8%83%BD%E6%A8%A1%E6%8B%9Fie%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%86/</url>
    <content><![CDATA[<p>在我们日常开发中难免会遇到需要兼容ie浏览器的情况，这就让我们mac用户十分头疼。<br>本文可以解决此类问题</p>
<a id="more"></a>

<ol>
<li><p>打开safair浏览器，在偏好设置 -&gt; 高级 -&gt; 在菜单栏中显示“开发”菜单</p>
</li>
<li><p>开发 -&gt; 用户代理</p>
<ul>
<li><p>有需要的ie版本则选择需要的版本</p>
</li>
<li><p>没有的话，点开其他，参照下表贴入需要的对应的代理字符串</p>
<table>
<thead>
<tr>
<th>系统平台</th>
<th>浏览器</th>
<th>代理字符串</th>
</tr>
</thead>
<tbody><tr>
<td>Windows</td>
<td>IE 5</td>
<td>Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 6</td>
<td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 7</td>
<td>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; Trident/4.0; SLCC1)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 8</td>
<td>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 9</td>
<td>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 10</td>
<td>Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 11</td>
<td>Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>前端</category>
        <category>ie</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝小程序父子组件相互调用</title>
    <url>/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>组件调用方式与vue类似，但是还是有一些区别，记录一下。</p>
<a id="more"></a>

<h1 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-name title=<span class="string">"title"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">props:&#123;</span><br><span class="line">  title:<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;view&gt;&#123;&#123;title&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">props:&#123;</span><br><span class="line">  onYourMethod:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">  onTapSubmit()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onYourMethod(<span class="string">'from child'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-name onTapSubmit=<span class="string">"fatherMethod"</span> /&gt;</span><br><span class="line"></span><br><span class="line">fatherMethod(e)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)  <span class="comment">// from child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="父组件调用子组件方法"><a href="#父组件调用子组件方法" class="headerlink" title="父组件调用子组件方法"></a>父组件调用子组件方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-name ref=<span class="string">'childRefName'</span> /&gt;</span><br><span class="line"></span><br><span class="line">childRefName(ref)&#123;</span><br><span class="line">  <span class="keyword">this</span>.ref=ref</span><br><span class="line">&#125;</span><br><span class="line">youFun()&#123;</span><br><span class="line">  <span class="keyword">this</span>.ref.childMethod(<span class="string">'from father'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">methods:&#123;</span><br><span class="line">  childMethod(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e) <span class="comment">//from father</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>使用ref时需要开启component2 不然ref不会生效</strong></p>
</blockquote>
<h1 id="兄弟组件相互调用"><a href="#兄弟组件相互调用" class="headerlink" title="兄弟组件相互调用"></a>兄弟组件相互调用</h1><p>大致思路是这样的：组件A -&gt; 父组件 -&gt; 组件B</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件A</span></span><br><span class="line">props:&#123;</span><br><span class="line">  onEmitToBrother:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">  onTapAButton()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onEmitToBrother(<span class="string">'refB'</span>,<span class="string">'comBFun'</span>,<span class="string">'from A'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  comAFun(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)  <span class="comment">// from B</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件B</span></span><br><span class="line"><span class="comment">// 子组件A</span></span><br><span class="line">props:&#123;</span><br><span class="line">  onEmitToBrother:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">  onTapBButton()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onEmitToBrother(<span class="string">'refA'</span>,<span class="string">'comAFun'</span>,<span class="string">'from B'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  comBFun(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e) <span class="comment">// from A</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;A-name onEmitToBrother=<span class="string">"onEmitToBrother"</span> ref=<span class="string">"refA"</span> /&gt;</span><br><span class="line">&lt;B-name onEmitToBrother=<span class="string">"onEmitToBrother"</span> ref=<span class="string">"refB"</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">refA(ref)&#123;</span><br><span class="line">  <span class="keyword">this</span>.refA=ref</span><br><span class="line">&#125;</span><br><span class="line">refB(ref)&#123;</span><br><span class="line">  <span class="keyword">this</span>.refB=ref</span><br><span class="line">&#125;</span><br><span class="line">onEmitToBrother(refName,funName,args)&#123;</span><br><span class="line">  <span class="keyword">this</span>[refName][funName](args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果有其他更好的方案 欢迎补充</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>支付宝小程序</category>
      </categories>
      <tags>
        <tag>支付宝小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>仿写new运算符</title>
    <url>/2021/01/%E4%BB%BF%E5%86%99new%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>实现new运算符</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">constructor,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;<span class="comment">//创建对象</span></span><br><span class="line">    <span class="keyword">constructor</span>.call(obj,...arg)//改变this执行</span><br><span class="line">    obj.__proto__==<span class="keyword">constructor</span>.prototype//构造函数的原型赋给对象的原型</span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Tab()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"张三"</span></span><br><span class="line">    <span class="keyword">this</span>.hobby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hobby..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tab1 = myNew(Tab)</span><br><span class="line"><span class="built_in">console</span>.log(tab1.name)</span><br><span class="line">tab1.hobby()</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
  </entry>
  <entry>
    <title>从零开始进阶全栈之数据库（一）</title>
    <url>/2021/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%BF%9B%E9%98%B6%E5%85%A8%E6%A0%88%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="数据库能做什么"><a href="#数据库能做什么" class="headerlink" title="数据库能做什么"></a>数据库能做什么</h1><a id="more"></a>

<ul>
<li><p>存储大量数据，方便检索和访问</p>
</li>
<li><p>保持数据信息的一致、完整</p>
</li>
<li><p>共享和安全</p>
</li>
<li><p>通过组合分析，产生新的有用的信息</p>
</li>
</ul>
<h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>只要是在客观世界存在的，可以被描述出来的都是实体</p>
<h2 id="数据库（DB）"><a href="#数据库（DB）" class="headerlink" title="数据库（DB）"></a>数据库（DB）</h2><p>数据库就是数据的仓库，可以存放结构化的数据</p>
<h2 id="数据库管理系统（DBMS）"><a href="#数据库管理系统（DBMS）" class="headerlink" title="数据库管理系统（DBMS）"></a>数据库管理系统（DBMS）</h2><p>是一种系统软件，提供操作数据库的环境，可以通过数据库管理系统对数据进行插入，修改，删除和查询等操作</p>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>结构化查询语言，专门用来和数据库进行交流的语言，几乎所有DBMS都支持SQL</p>
<h2 id="SQL规范"><a href="#SQL规范" class="headerlink" title="SQL规范"></a>SQL规范</h2><ul>
<li>SQL语句不区分大小写，建议SQL关键字大写，表名和列表小写</li>
<li>命令用分号结尾</li>
<li>命令可以缩进和换行，一种类型的关键字放在一行</li>
<li>可以写单行和多行注释，#是单行注释 /***/是多行注释</li>
</ul>
<h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><ul>
<li>表是数据库中包含所有数据的数据库对象，也是其他对象的基础</li>
<li>表定义是一个列的集合，数据在表中是按行和列的格式组织的，用来存放数据</li>
<li>行也称为记录，用于存放一个个实体，列称为字段，用来描述实体的某一个属性</li>
</ul>
<h1 id="MYSQL简介"><a href="#MYSQL简介" class="headerlink" title="MYSQL简介"></a>MYSQL简介</h1><h2 id="MYSQL特点"><a href="#MYSQL特点" class="headerlink" title="MYSQL特点"></a>MYSQL特点</h2><ul>
<li>开源免费</li>
<li>性能高</li>
<li>安装使用简单</li>
</ul>
<h1 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h1><ul>
<li>为了实现数据完整性，需要检验数据库表中的每行和每列数据是否符合要求</li>
<li>在创建表的时候，应该保证以后的数据是正确的，错误的数据不允许输入</li>
</ul>
<h2 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h2><h3 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h3><ul>
<li>tinyint  (1字节)</li>
<li>smallint  （2自字节）</li>
<li>mediumint  (3字节)</li>
<li>int      (4字节)</li>
<li>bigint   （8字节）</li>
</ul>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li>float   </li>
<li>double</li>
</ul>
<h3 id="定点"><a href="#定点" class="headerlink" title="定点"></a>定点</h3><ul>
<li>decimal  (字符串或数字型数值转换成大浮点数)</li>
</ul>
<h3 id="日期时间型"><a href="#日期时间型" class="headerlink" title="日期时间型"></a>日期时间型</h3><ul>
<li>year</li>
<li>timestamp   (时间戳)</li>
<li>time</li>
<li>date</li>
<li>datetime</li>
</ul>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul>
<li>set   (集合)</li>
<li>enum  (枚举)</li>
<li>blob  (可以存二进制)</li>
<li>text</li>
<li>varchar</li>
<li>char</li>
</ul>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>默认值是指如果用户没有指定的情况下会记录的此字段之前指定预设的值</p>
<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><p>我们可以约定某个字段不能不输入，必须提供一个非空的值</p>
<h1 id="实例完整性"><a href="#实例完整性" class="headerlink" title="实例完整性"></a>实例完整性</h1><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合就称为表的主键，主键表的数据不能重复</p>
<blockquote>
<p>如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为组合键</p>
</blockquote>
<p><strong>主键选择标准</strong></p>
<ol>
<li>最少性:尽量选择单个键作为主键</li>
<li>稳定性: 由于主键是用来在两个表之间建立连接的，所以不能经常更新，最好就不更新</li>
</ol>
<h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>唯一约束是指某个字段值是唯一的，在所有的记录中不能有重复的值</p>
<h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><ul>
<li>当表中没有合适的列作为主键时，可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条几率</li>
<li>标识列的值是自动生成的，不能再该列上输入数据</li>
</ul>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>一个表的外键必须引用另一个表的主键</p>
<ul>
<li>主表没有记录，子表中不能添加对应的记录</li>
<li>修改和删除主标记录不能让子表记录孤立，必须相应修改和删除</li>
</ul>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始手撸vue源码</title>
    <url>/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>本文用于记录学习vue源码的过程</p>
<a id="more"></a>
<p>简介<br>本文主要为学习B站 <a href="https://www.bilibili.com/video/BV1HE411L7fM" target="_blank" rel="noopener">前端铁蛋-手写vue框架</a> 的学习笔记</p>
<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>首先，利用webpack构建项目</p>
<ol>
<li><p>初始化项目</p>
<p> <code>npm init -y</code></p>
</li>
<li><p>安装webpack</p>
<p> <code>npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save</code></p>
</li>
<li><p>配置webpack</p>
<p> 根目录创建webpack.config.js文件</p>
<p> 配置代码如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">"source-map"</span>, <span class="comment">//调试的时候可以快速找到源码</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">//更改模块的查找方式</span></span><br><span class="line">        modules: [path.resolve(__dirname, <span class="string">'source'</span>), path.resolve(<span class="string">'node_modules'</span>)]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'public/index.html'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li><p>新建source文件夹用于后期存放资源</p>
</li>
<li><p>新建public文件夹</p>
<p> 创建index.html文件并生成h5代码</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改packjson.json配置</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "webpack-dev-server",</span><br><span class="line">    "build": "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>命令行输入</p>
<p> <code>npm start //启动</code> </p>
</li>
</ol>
<h1 id="二、数据代理"><a href="#二、数据代理" class="headerlink" title="二、数据代理"></a>二、数据代理</h1><ol>
<li><p>创建构造函数并初始化用户传入的参数(我们先假设用户传入的只有el、data)</p>
<p> 在source文件夹新建vue文件夹并添加index.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;initstate&#125; <span class="keyword">from</span> <span class="string">'./Observe'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123; <span class="comment">//vue中传入参数</span></span><br><span class="line">    <span class="comment">//初始化用户传入的选项</span></span><br><span class="line">    <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span></span><br><span class="line">    vm.$options = options</span><br><span class="line">    <span class="comment">//重新初始化状态 data computed watch</span></span><br><span class="line">    initstate(vm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure></li>
<li><p>vue文件夹中新建Observe并添加index.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Observe <span class="keyword">from</span> <span class="string">'./observe'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initstate</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做不同的初始化工作</span></span><br><span class="line">    <span class="keyword">let</span> opts = vm.$options</span><br><span class="line">    <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">        initData(vm)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断data是不是对象 不是就return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> data!==<span class="string">'object'</span>||data==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是对象则new一个Observe对象来使这个data 实现数据监听</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observe(data) <span class="comment">//观察数据的业务逻辑放在这里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户传入的data</span></span><br><span class="line">    <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">    <span class="comment">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class="line">    data=vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class="line">    <span class="comment">//观察数据</span></span><br><span class="line">    observe(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Observe文件夹下新建observe.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"."</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123; <span class="comment">//data就是vue中我们定义的data vm._data</span></span><br><span class="line">        <span class="comment">//将用户的数据使用defineProperty定义</span></span><br><span class="line">        <span class="keyword">this</span>.walk(data)</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> key = keys[i] <span class="comment">//获取所有的key</span></span><br><span class="line">            <span class="keyword">let</span> value = data[keys[i]] <span class="comment">//所有的value</span></span><br><span class="line">            defineReactive(data, key, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//观察value是不是对象 然后监听  如果是一个对象 递归监听</span></span><br><span class="line">    observe(value)</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="keyword">if</span>(newval===value) <span class="keyword">return</span></span><br><span class="line">            <span class="comment">//有可能设置的时候也是一个对象</span></span><br><span class="line">            observe(newval)</span><br><span class="line">            value = newval</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Observe</span><br></pre></td></tr></table></figure></li>
<li><p>这时我们回到src/index.js 引入vue并初始化vue对象</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认  source/vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>  </span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            msg:<span class="string">'hello'</span>,</span><br><span class="line">            haha:&#123;</span><br><span class="line">                a:<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>修改一下data中某个属性的值，看一下效果</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm._data.msg=<span class="string">'Joker 666'</span></span><br><span class="line"><span class="built_in">console</span>.log(vm)</span><br></pre></td></tr></table></figure>
 <img src="/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/2-1.png" class="" title="[这边我们可以看到msg已经发生了变化]">
</li>
<li><p>实现数据代理</p>
<p> 我们在使用vue的时候，获取data属性时一般都是通过this.xxx获取，而我们上面只实现了通过this._data.xxx,所以我们要编写一个proxy方法，将传入的数据直接挂载到vm上</p>
<p> 在 source/Observe/index.js 文件中新增proxy方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">vm, source, key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> vm[source][key]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="keyword">return</span> vm[source][key]=newval</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 修改initData()</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户传入的data</span></span><br><span class="line">    <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">    <span class="comment">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class="line">    data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class="line">    <span class="comment">//其实是vm._data代理了vm的操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        proxy(vm, <span class="string">"_data"</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//观察数据</span></span><br><span class="line">    observe(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 实现的原理其实非常简单，实际上就是在我们想要获取this.data时，其实去获取this._data</p>
</li>
</ol>
<pre><code>至此，我们已经实现了数据监听，但是还有个问题，Object.defineProperty是无法监听数组的变化的(面试需要注意)</code></pre><h1 id="三、重写数组方法"><a href="#三、重写数组方法" class="headerlink" title="三、重写数组方法"></a>三、重写数组方法</h1><p> 我们常用的改变数组的方法有以下几种<br>    <code>[&#39;push&#39;,&#39;shift&#39;,&#39;unshift&#39;,&#39;pop&#39;,&#39;reverse&#39;,&#39;sort&#39;,&#39;splice&#39;]</code></p>
<pre><code>我们企图往数组arr中添加值，结果发现新添加进去的值是没办法被监听到的，因此，我们需要改写push等方法    

基本思路就是之前我们调用push方法时，是从Aarray.prototype寻找这个方法，我们改成用一个空对象{}继承Array.prototype，然后再给空对象添加push方法
我们在source/vue/Observe下新增array.js文件
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数组原型上的方法</span></span><br><span class="line"><span class="keyword">let</span> oldArrayProtoMethods = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">//复制一份  然后改新的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> arrayMethods = <span class="built_in">Object</span>.create(oldArrayProtoMethods)</span><br><span class="line"><span class="comment">//修改的方法</span></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">'push'</span>, <span class="string">'shift'</span>, <span class="string">'unshift'</span>, <span class="string">'pop'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>, <span class="string">'splice'</span>]</span><br><span class="line">methods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    arrayMethods[method] = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//不光要返回新的数组方法  还要执行监听</span></span><br><span class="line">        <span class="keyword">let</span> res = oldArrayProtoMethods[method].apply(<span class="keyword">this</span>, arg)</span><br><span class="line">        <span class="comment">//实现新增属性的监听</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'实现了监听数组属性的变化'</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
我们在用户数据传入Observe中接收监听的时候需要区分data是数组还是对象，如果是数组，则改变数组的原型链
修改source/vue/Observe/observe.js中的代码
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123; <span class="comment">//data就是vue中我们定义的data vm._data</span></span><br><span class="line">        <span class="comment">//将用户的数据使用defineProperty定义</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">            data.__proto__ = arrayMethods</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.walk(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> key = keys[i] <span class="comment">//获取所有的key</span></span><br><span class="line">            <span class="keyword">let</span> value = data[keys[i]] <span class="comment">//所有的value</span></span><br><span class="line">            defineReactive(data, key, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
执行以下代码

`vm.arr.push(4)`

然后在控制台可以看到我们成功修改了数组
{% asset_img 3-1.png [这边我们可以看到arr已经发生了变化] %}</code></pre><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>未完待续。。。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题(二)</title>
    <url>/2020/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%BA%8C)/</url>
    <content><![CDATA[<p>高频面试题</p>
<a id="more"></a>

<h2 id="vue-router原理"><a href="#vue-router原理" class="headerlink" title="vue-router原理"></a>vue-router原理</h2><p>大型单页应用最显著特点之一就是采用前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。</p>
<p>页面都是由组件组成的，只需要把组件和路径相对应起来，就能把组件渲染出来。</p>
<p>当用户点击<code>router-link</code>标签时，会去寻找它对应的to属性，它的to属性和js中配置的路径<code>{path:&#39;/home&#39;,component:Home}</code>中的path一一对应，从而找到了匹配的组件，最后把组件渲染到<code>router-view</code>标签所在的地方。</p>
<p>前端路由时通过改变url，在不重新请求页面的情况下，更新页面视图。</p>
<p>目前在浏览器环境中实现这一功能主要有两种：</p>
<ul>
<li><p>利用url中的hash：</p>
<p>  在改变url的情况下，保证页面的不刷新。在2014年之前，大家是通过hash来实现路由，url hash就类似于：<br>  <code>https://www.xxx.com/#/login</code><br>  这种# 后面hash值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求也就不会刷新页面。另外每次hash值变化都会触发hashchange这个事件，通过这个事件我们就可以知道hash值发生了哪些变化。然后我们就可以通过监听hashchange来实现更新页面部分内容的操作</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, matchAndUpdate)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchAndUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// todo 匹配 hash 做 dom 更新操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用H5中history：</p>
<p>  14年后，因为HTML5标准发布。多了两个Api，<code>pushState</code>和<code>replaceState</code>,通过这两个api可以改变url地址且不会发送请求。同时还有<code>popstate</code>事件，通过这些就能用另一种方式实现前端路由了，原理和hash实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。<br>  内部使⽤<code>window.history.pushState</code>来处理url的变化，切换对应的组件</p>
</li>
</ul>
<p><a href="https://qytayh.github.io/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/">如果对具体代码实现感兴趣可以点击这里查看，<strong>vue-router源码实现</strong></a></p>
<h2 id="组件间通信方式"><a href="#组件间通信方式" class="headerlink" title="组件间通信方式"></a>组件间通信方式</h2><p><a href="https://qytayh.github.io/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/">点击这里查看详情</a></p>
<h2 id="vue2和vue3区别"><a href="#vue2和vue3区别" class="headerlink" title="vue2和vue3区别"></a>vue2和vue3区别</h2><ol>
<li><p><strong>目录结构</strong></p>
<p> vue-cli2.0与3.0在目录结构方面，有明显的不同</p>
<p> vue-cli3.0移除了配置文件目录，config和build文件夹</p>
<p> 同时移除了<code>static</code>静态文件夹，新增了<code>public</code>文件夹，打开层级目录还会发现，<code>index.html</code>移动到<code>public</code>中</p>
</li>
<li><p><strong>配置项</strong></p>
<p> 3.0中config文件已经被移除，但是多了<code>.env.production</code>和<code>.env.development</code>文件，除了文件位置，实际配置起来和2.0没什么不同</p>
<p> 没了<code>config</code>文件，跨域需要配置域名时，从<code>config/index.js</code>挪到了<code>vue.config.js</code>中，配置方法不变</p>
</li>
<li><p><strong>渲染</strong></p>
<p> Vue2.x使用的Virtual Dom实现的渲染</p>
<p> Vue3.0不论是原生的html标签还是vue组件，他们都会通过h函数来判断，如果是原生html标签，在运行时直接通过Virtual Dom来直接渲染，同样如果是组件会直接生成组件代码</p>
</li>
<li><p><strong>数据监听</strong></p>
<p> Vue2.x大家都知道使用的是es5的<code>object.defineproperties</code>中<code>getter</code>和<code>setter</code>实现的，而vue3.0的版本，是基于<code>Proxy</code>进行监听的，其实基于<code>proxy</code>监听就是所谓的<code>lazy by default</code>，什么意思呢，就是只要你用到了才会监听，可以理解为‘按需监听’，官方给出的诠释是：速度加倍，同时内存占用还减半。</p>
</li>
<li><p><strong>按需引入</strong></p>
<p> Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实无论你用到还是没用到，都会跑一变。而vue3.0中可以用ES module imports按需引入，如：keep-alive内置组件、v-model指令，等等。</p>
</li>
</ol>
<h2 id="简述vue2双向绑定原理"><a href="#简述vue2双向绑定原理" class="headerlink" title="简述vue2双向绑定原理"></a>简述vue2双向绑定原理</h2><ol>
<li><p>由页面-&gt;数据的变化：通过给页面元素添加对应的事件监听来实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">"value"</span> oninput=<span class="string">"()=&gt;this.handleInput($event)"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleInput</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = e.target.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>由数据-&gt;页面的变化:通过数据劫持(<code>Object.defineProperty</code>)+发布订阅模式来实现的<br> 具体流程：</p>
<ul>
<li><p>Compile解析器会将⻚⾯上的插值表达式/指定翻译成对应Watcher以添加到订阅器维护的列表中</p>
</li>
<li><p>通过<code>Object.defineProperty</code>劫持数据的变化，⼀旦数据源发⽣变化会触发对应的set⽅法</p>
</li>
<li><p>在set⽅法中，通知订阅器(Dep)对象中维护的所有订阅者(Watcher)列表更新</p>
</li>
<li><p>每⼀个Watch会去更新对应的⻚⾯</p>
</li>
</ul>
</li>
<li><p>关于发布订阅模式</p>
<p> 发布订阅模式又叫观察者模式，他定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象的变化，当这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得他们能够自动更新自己。</p>
</li>
</ol>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>Vue里面有许多内置的指令，比如<code>v-if</code>和<code>v-show</code>，这些丰富的指令能满足我们的绝大部分业务需求，不过在需要一些特殊功能时，我们仍然希望对<code>DOM</code>进行底层的操作，这时就要用到自定义指令。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123; </span><br><span class="line">        <span class="comment">// 每当指令绑定到元素上的时候，会立即执行这个bind 函数，只执行一次</span></span><br><span class="line">        <span class="comment">// 注意： 在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生的JS对象</span></span><br><span class="line">        <span class="comment">// 在元素刚绑定了指令的时候还没有插入到DOM中去的时候调用focus方法没有作用。因为，一个元素只有插入DOM之后才能获取焦点</span></span><br><span class="line">        <span class="comment">// el.focus()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;  </span><br><span class="line">        <span class="comment">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】。和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</span></span><br><span class="line">        el.focus()</span><br><span class="line">    &#125;,</span><br><span class="line">    updated: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;  </span><br><span class="line">        <span class="comment">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">&lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ES6特性"><a href="#ES6特性" class="headerlink" title="ES6特性"></a>ES6特性</h2><p>ES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。</p>
<ol>
<li><p>新增箭头函数</p>
<ul>
<li>简化了写法， 少打代码，结构清晰</li>
<li>明确了this。传统JS的this是在运行的时候确定的，而不是在定义的时候确定的；而箭头函数的this是在定义时就确定的，不能被改变，也不能被call,apply,bind这些方法修改。      </li>
</ul>
</li>
<li><p>块级作用域</p>
<ul>
<li>ES6中的let声明的变量有块级作用域</li>
<li>ES5中是没有块级作用域的，并且var有变量提升的概念</li>
<li>let声明的变量在同一个作用域内只有一个</li>
<li>要声明常量使用const</li>
</ul>
</li>
<li><p>解构赋值</p>
<p> ES6中变量的解构赋值，比如：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>:abc,bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'hello'</span>,<span class="attr">bar</span>:<span class="string">'hi'</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6新增了一种Symbol数据类型，表示全局唯一的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(a1 === a2);   <span class="comment">//false   a1和a2永远不相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">"a3"</span>);</span><br><span class="line"><span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">"a3"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a3 === a4);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模板字符串</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> gender=<span class="string">"男"</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`姓名<span class="subst">$&#123;name&#125;</span>,年龄<span class="subst">$&#123;age&#125;</span>,性别<span class="subst">$&#123;gender&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>展开运算符</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br></pre></td></tr></table></figure>
</li>
<li><p>类</p>
<p> ES6引入Class这个概念，让JS拥有其他面向对象语言的语法糖。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承传递参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='child')&#123;</span><br><span class="line">        <span class="comment">//先初始化父亲的信息，在初始化自己的信息  </span></span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.type=<span class="string">'child'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'继承传递参数'</span>,<span class="keyword">new</span> Child(<span class="string">'hello'</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>Promise</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6的Promise主要用于解决JS回调地狱问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pReadFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filePath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">'./data/a.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> pReadFile(<span class="string">'./data/b.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> pReadFile(<span class="string">'./data/c.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6的迭代器</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for ... of 是ES6中新增加的语法,主要用来循环实现了Iterator接口类型的对象</span></span><br><span class="line"><span class="comment">//for ... of 可以遍历Array、Set、Map不能遍历Object </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'China'</span>, <span class="string">'America'</span>, <span class="string">'Korea'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o) <span class="comment">//China, America, Korea</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6模块化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.导出</span></span><br><span class="line"><span class="comment">//导出单个成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'leo'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age= <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> name= <span class="string">'leo'</span>;</span><br><span class="line"><span class="keyword">let</span> age= <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> kk = <span class="string">"abc"</span></span><br><span class="line"><span class="comment">//导出多个成员</span></span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;;</span><br><span class="line"><span class="comment">//导出默认成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> kk;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.引入</span></span><br><span class="line"><span class="keyword">import</span> kk,&#123;name,age&#125; <span class="keyword">from</span> <span class="string">'a.js'</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域问题产生的原因 ：浏览器的同源策略导致了跨域。当我们在前端开发中使用ajax/fetch这些技术发送网络请求的时候，当协议、主机、端口有任何一个不一致的时候，则构成跨域。</p>
<p>跨域的作用 ：用于隔离潜在恶意文件的重要安全机制</p>
<p>跨域问题的解决：</p>
<ol>
<li><p>jsonp，允许script加载第三方资源</p>
</li>
<li><p>在服务器使用cors实现跨域资源共享<br> res.writeHead(200, {</p>
<pre><code>&quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;,
&quot;Access-Control-Allow-Origin&quot;:&apos;http://localhost&apos;,
&apos;Access-Control-Allow-Methods&apos;: &apos;GET, POST, OPTIONS&apos;,
&apos;Access-Control-Allow-Headers&apos;: &apos;X-Requested-With, Content-Type&apos;</code></pre><p> });</p>
</li>
<li><p>在前端的工程化项目(webpack)中,我们可以通过配置devserver的proxy来解决跨域访问的问题。他的原理是在本地开启一个服务器向数据服务器发送请求，因为服务器和服务器之间是没有跨域</p>
</li>
<li><p>但是因为webpack的devserver只在开发环境下有效，当项目发布上线之后仍然会有跨域问题，为了解决项目上线的跨域问题，我们配置服务器的反向代理（Apache/ngix）来实现跨域请求 </p>
</li>
<li><p>除此之外，我还知道当项目打包成apk之后就不存在跨域问题了，所以如果项目要打包成apk，我们需要在项目中的所有请求中写全路径(此时我们可以配置axios.default.baseURL来解决)</p>
</li>
<li><p>iframe 嵌套通讯，postmessage</p>
</li>
</ol>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol>
<li><p>借助构造函数实现继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  定义父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'xxx'</span>,</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  定义子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//通过call()方法改变Child1的this指向使子类的函数体内执行父级的构造函数从而实现继承效果</span></span><br><span class="line">    Parent1.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.address = <span class="string">'yyy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  构建子类的实例s1</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child1()</span><br><span class="line"><span class="built_in">console</span>.log(s1.name)  <span class="comment">//xxx</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点:该方法的实力(s1)无法使用父类(Parent1)的原型(prototype)中的属性和方法</p>
</blockquote>
</li>
<li><p>借助原型链实现继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'xx'</span>,</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">19</span>,</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  一样在父类添加say方法</span></span><br><span class="line">Parent2.prototype = &#123;</span><br><span class="line">    say () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'say'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span> (<span class="params">address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.address = <span class="string">'yyy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让子类的原型直接指向父类实例</span></span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2()</span><br><span class="line"><span class="comment">//  生成两个子类的实例s2、s3</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2()</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Child2()</span><br><span class="line"><span class="comment">// s2实例继承了父类中的name属性</span></span><br><span class="line"><span class="built_in">console</span>.log(s2.name)  <span class="comment">//xx</span></span><br><span class="line"><span class="comment">//  s2实例也同样继承了父类原型上的say方法</span></span><br><span class="line"><span class="built_in">console</span>.log(s2.say())  <span class="comment">//say</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点:在子类调用构造函数创建对象的时候，无法入参所有的属性值</p>
</blockquote>
</li>
<li><p>组合继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'xx'</span>,</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">20</span>,</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span> (<span class="params">name,age,address</span>) </span>&#123;</span><br><span class="line">    Parent5.call(<span class="keyword">this</span>,name,age)</span><br><span class="line">    <span class="keyword">this</span>.address = address</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较关键的一步</span></span><br><span class="line">Child5.prototype = <span class="keyword">new</span> Parent5()</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child5(<span class="string">"zhangsan"</span>,<span class="number">19</span>,<span class="string">"无锡"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例继承(为父类实例添加新特性，作为子类实例返回)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">    instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">    <span class="comment">// 遍历拷贝属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> animal)&#123;</span><br><span class="line">        Cat.prototype[p] = animal[p];</span><br><span class="line">    &#125;</span><br><span class="line">    Cat.prototype.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="宏微任务"><a href="#宏微任务" class="headerlink" title="宏微任务"></a>宏微任务</h2><p>事件循环的任务队列有宏任务队列和微任务队列，每次一个宏任务执行完毕的时候，都会把微任务队列中的微任务执行完毕之后才会再次执行下一个宏任务。</p>
<ul>
<li><p>宏队列：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.</p>
</li>
<li><p>微队列：process.nextTick, Promise.then, Object.observer, MutationObserver.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"datagrand1"</span>);</span><br><span class="line">setTimeOut(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand2"</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand3"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand4"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"datagrand5"</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand6"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand7"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>打印顺序是：1,3,5,6,4,7,2</p>
</blockquote>
<h2 id="说几个常用的meta标签"><a href="#说几个常用的meta标签" class="headerlink" title="说几个常用的meta标签"></a>说几个常用的meta标签</h2><p>详细看这篇</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router源码实现</title>
    <url>/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>从零开始，实现vue-router</p>
<a id="more"></a>

<h1 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h1><ul>
<li>实现<code>VueRouter</code>类和<code>install</code>方法，使之作为一个插件存在</li>
<li>实现两个全局组件:<code>router-view</code>用于显示匹配组件内容，<code>router-link</code>用于跳转</li>
<li>监控<code>url</code>变化:监听<code>hashchange</code>或<code>popstate</code>事件</li>
<li>响应最新<code>url</code>:创建一个响应式的属性<code>current</code>，当它改变时获取对应的组件并显示</li>
</ul>
<h1 id="实现一个插件：创建VueRouter类和install方法"><a href="#实现一个插件：创建VueRouter类和install方法" class="headerlink" title="实现一个插件：创建VueRouter类和install方法"></a>实现一个插件：创建VueRouter类和install方法</h1><p>在<code>src</code>目录下创<code>jrouter</code>文件夹用于存放我们手写的路由的相关代码，在<code>jrouter</code>下新建<code>index.js</code>和<code>jvue-router.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jvue-router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Vue;<span class="comment">//引用构造函数，在JVueRouter里面使用</span></span><br><span class="line"><span class="comment">//1、实现一个插件：挂载$router</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="comment">//获取用户配置并保存</span></span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插件：实现install方法，注册$router</span></span><br><span class="line">JVueRouter.install = <span class="function"><span class="keyword">function</span>(<span class="params">_Vue</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//保存构造函数，在JVueRouter里面使用</span></span><br><span class="line">    Vue=_Vue;</span><br><span class="line">    <span class="comment">// 挂载$router</span></span><br><span class="line">    Vue.mixin(&#123;<span class="comment">//混入</span></span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line">            <span class="comment">//确保根实例的时候才执行,只有根组件拥有router选项</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.$options.router)&#123;</span><br><span class="line">                Vue.prototype.$router = <span class="keyword">this</span>.$options.router</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> JVueRouter;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么要采用混入的方式：主要原因是use代码在前，Router实例创建在后，而install逻辑又需要用到该实例</p>
</blockquote>
<p>修改<code>jrouter</code>中<code>index.js</code>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./jvue-router'</span><span class="comment">//引入我们写好的插件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.应用插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>最后我们只需要修改<code>main.js</code>中对路由的引用就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./jrouter'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,<span class="comment">//挂载router实例</span></span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实现router-link和router-view"><a href="#实现router-link和router-view" class="headerlink" title="实现router-link和router-view"></a>实现router-link和router-view</h1><p>修改<code>jrouter</code>中<code>index.js</code>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">KVueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Vue.component(<span class="string">'router-link'</span>, &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            to: &#123;</span><br><span class="line">                type: <span class="built_in">String</span>,</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        render(h) &#123;</span><br><span class="line">            <span class="comment">// &lt;a href="#/about"&gt;abc&lt;/a&gt;</span></span><br><span class="line">            <span class="comment">// &lt;router-link to="/about"&gt;xxx&lt;/router-link&gt;</span></span><br><span class="line">            <span class="comment">// h(tag, data, children)</span></span><br><span class="line">            <span class="keyword">return</span> h(<span class="string">'a'</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">'#'</span> + <span class="keyword">this</span>.to &#125; &#125;, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">            <span class="comment">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">        render(h)&#123;</span><br><span class="line">            <span class="keyword">return</span> h(<span class="string">'div'</span>,<span class="string">'router-view'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="监控url的变化"><a href="#监控url的变化" class="headerlink" title="监控url的变化"></a>监控url的变化</h1><p>定义响应式的current，监听hashchange事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">        <span class="comment">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>,<span class="string">'current'</span>,<span class="string">'/'</span>)</span><br><span class="line">        <span class="comment">//监控url变化</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//避免onHashChange中this变成window</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//页面加载 避免onHashChange中this变成window</span></span><br><span class="line">    &#125;</span><br><span class="line">    onHashChange()&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态获取对应的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">        render(h)&#123;</span><br><span class="line">            <span class="comment">//获取path对应的component</span></span><br><span class="line">            <span class="keyword">let</span> component=<span class="literal">null</span></span><br><span class="line">            <span class="keyword">this</span>.$router.$options.routes.forEach(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(route.path===<span class="keyword">this</span>.$router.current)&#123;</span><br><span class="line">                    component=route.component</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> h(component)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="提前处理路由表"><a href="#提前处理路由表" class="headerlink" title="提前处理路由表"></a>提前处理路由表</h1><p>提前处理路由表可以避免每次都循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">//创建一个路由映射表</span></span><br><span class="line">        <span class="keyword">this</span>.routeMap=&#123;&#125;</span><br><span class="line">        options.routes.forEach(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.routeMap[route.path]=route</span><br><span class="line">        &#125;)</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>router-view</code>根据path获取component的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">    render(h)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;routeMap,current&#125;=<span class="keyword">this</span>.$router</span><br><span class="line">        <span class="keyword">const</span> component=routeMap[current].component || <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> h(component)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="代码结构优化"><a href="#代码结构优化" class="headerlink" title="代码结构优化"></a>代码结构优化</h1><p>我们在<code>jrouter</code>文件夹下新建<code>jrouter-link.js</code>和<code>jrouter-view.js</code>,调整<code>jvue-router.js</code>中代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先进行引入</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'./jrouter-link'</span></span><br><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">'./jrouter-view'</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"> <span class="comment">// </span></span><br><span class="line">JVueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    Vue.component(<span class="string">'router-link'</span>, Link)</span><br><span class="line">    Vue.component(<span class="string">'router-view'</span>, View)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们将原先写在<code>jvue-router.js</code>中组件部分的代码分别写到对应的js文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jrouter-link.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">// &lt;a href="#/about"&gt;abc&lt;/a&gt;</span></span><br><span class="line">    <span class="comment">// &lt;router-link to="/about"&gt;xxx&lt;/router-link&gt;</span></span><br><span class="line">    <span class="comment">// h(tag, data, children)</span></span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'a'</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">'#'</span> + <span class="keyword">this</span>.to &#125; &#125;, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">    <span class="comment">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// jrouter-view.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">//获取path对应的component</span></span><br><span class="line">    <span class="keyword">const</span> &#123;routeMap, current&#125; = <span class="keyword">this</span>.$router;</span><br><span class="line">    <span class="keyword">const</span> component = routeMap[current].component || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果我们不用<code>Vue.util.defineReactive(this,&#39;current&#39;,&#39;/&#39;)</code>来实现监听，其实也可以用这种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   data()&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">           current:<span class="string">'/'</span></span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取current的方式就变为</span></span><br><span class="line"><span class="keyword">this</span>.app.current</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>当用户的路由为类似如下的嵌套路由时，我们应该如何兼容呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    ......</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/About.vue'</span>),</span><br><span class="line">    children:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about/info'</span>,</span><br><span class="line">            component:<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/AboutInfo.vue'</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">    ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>打开<code>jrouter-view.js</code>文件，并修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">//标记当前router-view深度</span></span><br><span class="line">    <span class="keyword">this</span>.$vnode.data.routerView = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> parent = <span class="keyword">this</span>.$parent</span><br><span class="line">    <span class="keyword">while</span>(parent)&#123;</span><br><span class="line">        <span class="keyword">const</span> vnodeData = parent.$vnode&amp;&amp;parent.$vnode.data</span><br><span class="line">        <span class="keyword">if</span>(vnodeData&amp;&amp;vnodeData.routerView)&#123;</span><br><span class="line">            <span class="comment">//说明当前的parent是一个router-view</span></span><br><span class="line">            depth++</span><br><span class="line">        &#125;</span><br><span class="line">        parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取path对应的component</span></span><br><span class="line">    <span class="keyword">let</span> component = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.$router.matched[depth];</span><br><span class="line">    <span class="keyword">if</span>(route)&#123;</span><br><span class="line">        component = route.component</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>jvue-router.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">        <span class="comment">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class="line">        <span class="comment">// Vue.util.defineReactive(this,'current','/')通过matched数组获取component，不需要current响应式了</span></span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)||<span class="string">'/'</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>,<span class="string">'matched'</span>,[])</span><br><span class="line">        <span class="comment">//match方法可以递归遍历路由表，获得匹配关系的数组</span></span><br><span class="line">        <span class="keyword">this</span>.match()</span><br><span class="line">        <span class="comment">//监控url变化</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//避免onHashChange中this变成window</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//页面加载 避免onHashChange中this变成window</span></span><br><span class="line">    &#125;</span><br><span class="line">    onHashChange()&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">this</span>.matched = []</span><br><span class="line">        <span class="keyword">this</span>.match()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    match(routes)&#123;</span><br><span class="line">        routes = routes||<span class="keyword">this</span>.$options.routes</span><br><span class="line">        <span class="comment">//递归遍历路由表</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> route <span class="keyword">of</span> routes)&#123;</span><br><span class="line">            <span class="keyword">if</span>(route.path === <span class="string">'/'</span>&amp;&amp;<span class="keyword">this</span>.current===<span class="string">'/'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.matched.push(route)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(route.path!==<span class="string">'/'</span>&amp;&amp;<span class="keyword">this</span>.current.indexOf(route.path)!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.matched.push(route)</span><br><span class="line">                <span class="keyword">if</span>(route.children)&#123;<span class="comment">//如果有嵌套 </span></span><br><span class="line">                    <span class="keyword">this</span>.match(route.children)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript还不会?看完这篇就行了</title>
    <url>/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/</url>
    <content><![CDATA[<h1 id="TypeScript究竟是什么呢？"><a href="#TypeScript究竟是什么呢？" class="headerlink" title="TypeScript究竟是什么呢？"></a>TypeScript究竟是什么呢？</h1><a id="more"></a>

<ul>
<li><p>JavaScript that scales</p>
</li>
<li><p>静态类型风格的类型系统</p>
</li>
<li><p>从es6到es10甚至是esnext的语法支持</p>
</li>
<li><p>兼容各种浏览器、各种系统、各种服务器，完全开源</p>
</li>
</ul>
<blockquote>
<p> <a href="https://tslang.cn" target="_blank" rel="noopener">ts官网</a></p>
</blockquote>
<h2 id="为什么要使用TS"><a href="#为什么要使用TS" class="headerlink" title="为什么要使用TS"></a>为什么要使用TS</h2><ul>
<li><p>程序更容易理解</p>
<blockquote>
<p>函数或者方法输入输出的类型参数，外部条件等<br>动态语言的约束：需要手动调试等过程<br>有了TS:代码本事就可以回答上述问题</p>
</blockquote>
</li>
<li><p>效率更高</p>
<blockquote>
<p>在不同的代码块和定义中进行跳转<br>代码自动补全<br>丰富的接口提示</p>
</blockquote>
</li>
<li><p>更少的错误</p>
<blockquote>
<p>编译期间能够发现大部分错误<br>杜绝一些常见错误</p>
</blockquote>
</li>
<li><p>非常好的包容性</p>
<blockquote>
<p>完全兼容JavaScript<br>第三方库可以单独编写类型文件</p>
</blockquote>
</li>
</ul>
<h2 id="一些缺点："><a href="#一些缺点：" class="headerlink" title="一些缺点："></a>一些缺点：</h2><ul>
<li><p>增加了一些学习成本</p>
</li>
<li><p>短时间内增加了一些开发成本</p>
</li>
</ul>
<h1 id="安装TypeScript"><a href="#安装TypeScript" class="headerlink" title="安装TypeScript"></a>安装TypeScript</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<h1 id="原始数据类型和any类型"><a href="#原始数据类型和any类型" class="headerlink" title="原始数据类型和any类型"></a>原始数据类型和any类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone:boolen = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> age:<span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> firstName:<span class="built_in">string</span> = <span class="string">'Joker'</span></span><br><span class="line"><span class="keyword">let</span> message:<span class="built_in">string</span> = <span class="string">`Hello <span class="subst">$&#123;firstName&#125;</span>!`</span></span><br><span class="line"><span class="keyword">let</span> u:<span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n:<span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num:<span class="built_in">number</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> notSure:<span class="built_in">any</span> = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">'Maybe a string'</span></span><br><span class="line">notSure = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">notSure.myName</span><br><span class="line">notSure.getName()</span><br><span class="line"><span class="comment">// 如果有明确类型要避免使用any，any可以任意调用方法和属性很有可能出现错误，就失去了类型检查的作用</span></span><br></pre></td></tr></table></figure>

<h1 id="数组和元祖"><a href="#数组和元祖" class="headerlink" title="数组和元祖"></a>数组和元祖</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrOfNumber:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arrOfNumber.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖</span></span><br><span class="line"><span class="keyword">let</span> user:[<span class="built_in">string</span>,<span class="built_in">number</span>] = [<span class="string">'Joker'</span>,<span class="number">666</span>]</span><br><span class="line">user.push(<span class="string">'123'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h1><blockquote>
<ul>
<li>对对象的形状（shape)进行描述</li>
<li>Duck Typing(鸭子类型)</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line">  readonly id:<span class="built_in">number</span>;<span class="comment">//只读属性</span></span><br><span class="line">  name:<span class="built_in">string</span>;</span><br><span class="line">  age:<span class="built_in">number</span>;</span><br><span class="line">  tel?:<span class="built_in">number</span>;  <span class="comment">//可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Joker:IPerson = &#123;</span><br><span class="line">  id:<span class="number">1</span>,</span><br><span class="line">  name:<span class="string">'Joker'</span>,</span><br><span class="line">  age:<span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="function-函数"><a href="#function-函数" class="headerlink" title="function 函数"></a>function 函数</h1><blockquote>
<p>在js中function是一等公民</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// z 为可选参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> z === <span class="string">'number'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum = （x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span>):<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> z === <span class="string">'number'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ISum &#123;</span><br><span class="line">  (x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span>):<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add2:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span> = add</span><br><span class="line"><span class="keyword">let</span> add3:ISum = add</span><br></pre></td></tr></table></figure>

<h2 id="类型推论-联合类型和类型断言"><a href="#类型推论-联合类型和类型断言" class="headerlink" title="类型推论 联合类型和类型断言"></a>类型推论 联合类型和类型断言</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'str'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// union types</span></span><br><span class="line"><span class="keyword">let</span> numberOrString:<span class="built_in">number</span>|<span class="built_in">string</span>  <span class="comment">//连盒类型</span></span><br><span class="line">numberOrString=<span class="string">'abc'</span></span><br><span class="line">numberOrString=<span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">input:<span class="built_in">string</span>:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = input <span class="keyword">as</span> <span class="built_in">string</span> <span class="comment">// 类型断言</span></span><br><span class="line">  <span class="keyword">if</span>(str.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.length</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">number</span> = input <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">number</span>.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type guard</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength2</span>(<span class="params">input:<span class="built_in">string</span>:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> input ===<span class="string">'string'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> input.length</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类Class"><a href="#类Class" class="headerlink" title="类Class"></a>类Class</h1><h2 id="js中的类"><a href="#js中的类" class="headerlink" title="js中的类"></a>js中的类</h2><ul>
<li><p>类(Class):定义了一切事物的抽象特点</p>
</li>
<li><p>对象（Object):类的实例</p>
</li>
<li><p>面向对象(OOP)三大特性:封装、继承、多态</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is running!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">'japan'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.run())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Pig <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  bark()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is barking!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tlp = <span class="keyword">new</span> Pig(<span class="string">'tlp'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(tlp.run())</span><br><span class="line"><span class="built_in">console</span>.log(tlp.bark())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  <span class="keyword">static</span> categories = [<span class="string">'cat'</span>]</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> maomao = <span class="keyword">new</span> Cat(<span class="string">'maomao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(maomao.run())</span><br><span class="line"><span class="built_in">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>


<h2 id="TS中的类"><a href="#TS中的类" class="headerlink" title="TS中的类"></a>TS中的类</h2><ul>
<li><p>Public:修饰的属性是共有的</p>
</li>
<li><p>Private:修饰的属性或者方法是私有的</p>
</li>
<li><p>Protected:修饰的属性或方法是受保护的</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal&#123;</span><br><span class="line">  readonly name:<span class="built_in">string</span> <span class="comment">//只读</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> eat()&#123; <span class="comment">// 仅在本事和</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'eat'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> run()&#123;  <span class="comment">// 本身和子类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is running!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">'japan'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.run())  <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Pig <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  bark()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is barking!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tlp = <span class="keyword">new</span> Pig(<span class="string">'tlp'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(tlp.eat())  <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  <span class="keyword">static</span> categories = [<span class="string">'cat'</span>]</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.run() <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> maomao = <span class="keyword">new</span> Cat(<span class="string">'maomao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(maomao.run())</span><br><span class="line"><span class="built_in">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>

<h1 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h1><ul>
<li><p>继承的困境</p>
</li>
<li><p>类可以使用implements来实现接口</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Radio &#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>):<span class="built_in">void</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Battery &#123;</span><br><span class="line">  checkBatteryStatus():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RadioWithBattery <span class="keyword">extends</span> Radio &#123;</span><br><span class="line">  checkBatteryStatus():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Radio &#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CellPhone <span class="keyword">implements</span> Radio,Battery&#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  checkBatteryStatus()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MobilePhone <span class="keyword">implements</span> RadioWithBattery&#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  checkBatteryStatus()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left=<span class="number">10</span>,</span><br><span class="line">  Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Direction.Up) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Down) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction[<span class="number">0</span>]) <span class="comment">// 'Up'</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Left) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Right) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Direction &#123; <span class="comment">// 加上const 变成常量枚举可以提升性能  只有常量值可以使用const</span></span><br><span class="line">  Up = <span class="string">'Up'</span>,</span><br><span class="line">  Down = <span class="string">'Down'</span>,</span><br><span class="line">  Left = <span class="string">'Left'</span>,</span><br><span class="line">  Right = <span class="string">'Right'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> value = <span class="string">'Up'</span></span><br><span class="line"><span class="keyword">if</span>(value === Direction.Up)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'go up'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>在定义函数接口或类的时候不预先指定类型，在使用的时候再指定</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str:<span class="built_in">string</span>=<span class="string">'str'</span></span><br><span class="line"><span class="keyword">const</span> result0 = echo(str)</span><br><span class="line"><span class="keyword">const</span> result1 = echo(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">const</span> result2 = echo(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>,<span class="title">U</span>&gt;(<span class="params">tuple:[T,U]</span>):[<span class="title">U</span>,<span class="title">T</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [tuple[<span class="number">1</span>],tuple[<span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result3 = swap([<span class="string">'abc'</span>,<span class="number">123</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束泛型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T[]</span>):<span class="title">T</span>[]</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = echoWithArr([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IWithLength&#123;</span><br><span class="line">  length:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">IWithLength</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> str = echoWithLength(<span class="string">'str'</span>)</span><br><span class="line"><span class="keyword">const</span> obj = echoWithLength(&#123;length:<span class="number">10</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> arr2 = echoWithLength([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Queue&lt;T&gt;&#123;</span><br><span class="line">  <span class="keyword">private</span> data = []</span><br><span class="line">  push(item:T)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  pop():T&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> KeyPair&lt;T,U&gt; &#123;</span><br><span class="line">  key:T,</span><br><span class="line">  value:U</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> kp1:KeyPair&lt;<span class="built_in">number</span>,<span class="built_in">string</span>&gt; = &#123;key:<span class="number">1</span>,value:<span class="string">'str'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> kp2:KeyPair&lt;<span class="built_in">string</span>,<span class="built_in">number</span>&gt; = &#123;key:<span class="string">'str'</span>,value:<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>


<h1 id="类型别名-字面量和交叉类型"><a href="#类型别名-字面量和交叉类型" class="headerlink" title="类型别名,字面量和交叉类型"></a>类型别名,字面量和交叉类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span> </span><br><span class="line"><span class="keyword">const</span> result = sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PlusType = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> sum2:PlusType</span><br><span class="line"><span class="keyword">const</span> result = sum2(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StrOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> result3:StrOrNumber = <span class="string">'123'</span></span><br><span class="line">result3 = <span class="number">123</span></span><br><span class="line">result3 = <span class="literal">true</span> <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str:<span class="string">'name'</span> = <span class="string">'name'</span></span><br><span class="line"><span class="keyword">const</span> str2:<span class="string">'name'</span> = <span class="string">'name1'</span>  <span class="comment">//error</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">number</span>:<span class="number">1</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Direction = <span class="string">'Up'</span>|<span class="string">'Down'</span>|<span class="string">'Left'</span>|<span class="string">'Right'</span></span><br><span class="line"><span class="keyword">let</span> toWards:Direction = <span class="string">'Down'</span> <span class="comment">// 只能四个里面的一个值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IName &#123;</span><br><span class="line">  name:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> TPerson = IName &amp; &#123;age:<span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person:TPerson = &#123;name:<span class="string">'123'</span>,age:<span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h1><p>一般是<code>.d.ts</code>结尾，只是实现了类型的定义并未实现真正代码功能</p>
<h1 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.getTime()</span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/abc/</span></span><br><span class="line">reg.test(<span class="string">'abc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//build-in object</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dom and Bom</span></span><br><span class="line"><span class="keyword">let</span> body = <span class="built_in">document</span>.body</span><br><span class="line"><span class="keyword">let</span> allLis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line">allLis.keys()</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Utility Types</span></span><br><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  name:<span class="built_in">string</span>,</span><br><span class="line">  age:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Joker:IPerson = &#123;name:<span class="string">'Joker'</span>,age:<span class="number">25</span>&#125;</span><br><span class="line"><span class="keyword">type</span> TPartical = Partical&lt;IPerson&gt; <span class="comment">//将所有参数变为可选</span></span><br><span class="line"><span class="keyword">let</span> Joker2:IPerson = &#123;name:<span class="string">'Joker'</span>&#125;</span><br><span class="line"><span class="keyword">type</span> TOmit = Omit&lt;IPerson,<span class="string">'name'</span>&gt; <span class="comment">// 忽略一个选项</span></span><br><span class="line"><span class="keyword">let</span> Joker3:IPerson = &#123;age:<span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS进阶之--装饰器</title>
    <url>/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h1><p><code>装饰器-Decorators</code> 在 <code>TypeScript</code> 中是一种可以在不修改类代码的基础上通过添加标注的方式来对类型进行扩展的一种方式</p>
<a id="more"></a>


<ul>
<li>减少代码量</li>
<li>提高代码扩展性、可读性和维护性</li>
</ul>
<blockquote>
<p>在 <code>TypeScript</code> 中，装饰器只能在类中使用</p>
</blockquote>
<h1 id="装饰器语法"><a href="#装饰器语法" class="headerlink" title="装饰器语法"></a>装饰器语法</h1><p>装饰器的使用极其的简单</p>
<ul>
<li>装饰器本质就是一个函数</li>
<li>通过特定语法在特定的位置调用装饰器函数即可对数据（类、方法、甚至参数等）进行扩展</li>
</ul>
<p><strong>启用装饰器特性</strong></p>
<ul>
<li><code>experimentalDecorators: true</code></li>
</ul>
<blockquote>
<p><code>tsconfig.json</code>中进行配置</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *    target:被装饰的方法所属的类</span></span><br><span class="line"><span class="comment">  *    被装饰的方法的名称</span></span><br><span class="line"><span class="comment">  *    descriptor: 描述符</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="comment">// 把原始的方法提取出来</span></span><br><span class="line">  <span class="keyword">let</span> fn = descriptor.value</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = fn(a,b)  <span class="comment">// 原先方法行为</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'日志：'</span>,&#123;</span><br><span class="line">      name,</span><br><span class="line">      a,</span><br><span class="line">      b,</span><br><span class="line">      result</span><br><span class="line">    &#125;) <span class="comment">// 扩展行为</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> M &#123;</span><br><span class="line">  <span class="meta">@log</span></span><br><span class="line">  <span class="keyword">static</span> add(a:<span class="built_in">number</span>,b:<span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="装饰器细节"><a href="#装饰器细节" class="headerlink" title="装饰器细节"></a>装饰器细节</h1><p><code>装饰器</code> 是一个函数，它可以通过 <code>@装饰器函数</code> 这种特殊的语法附加在 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 上，对它们进行包装，然后返回一个包装后的目标对象（<code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> ），<strong>装饰器工作在类的构建阶段，而不是使用阶段</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d1</span>(<span class="params">target:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,target)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d11</span>(<span class="params">target:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d3</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name,descriptor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d4</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name,descriptor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d5</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span>,index: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// name为当前参数所在的方法的名称</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name,index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@d1</span> </span><br><span class="line"><span class="meta">@d11</span>  <span class="comment">// 多个装饰器时 或 @d1 @d11</span></span><br><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d2</span></span><br><span class="line">  a: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d2</span></span><br><span class="line">  <span class="keyword">static</span> property1: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d3</span></span><br><span class="line">  <span class="keyword">get</span> b() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d3</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> c() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d4</span></span><br><span class="line">  <span class="keyword">public</span> method1(<span class="meta">@d5</span> x: <span class="built_in">number</span>,<span class="meta">@d5</span> y:<span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d4</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> method2() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>目标</p>
<ul>
<li>应用于类的构造函数</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数（也只有一个参数）<ul>
<li>类的构造函数作为其唯一的参数</li>
</ul>
</li>
</ul>
<h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>目标</p>
<ul>
<li>应用于类的属性上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数<ul>
<li>静态方法：类的构造函数 (装饰<code>static property1</code>那么为<code>MyClass</code>)</li>
<li>实例方法：类的原型对象 (装饰的<code>a: number;</code>那么为<code>new MyClass()</code>实例后的对象)</li>
</ul>
</li>
<li>第二个参数<ul>
<li>属性名称</li>
</ul>
</li>
</ul>
<h2 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h2><p>目标</p>
<ul>
<li>应用于类的访问器（getter、setter）上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数 (同属性装饰器)<ul>
<li>静态方法：类的构造函数</li>
<li>实例方法：类的原型对象</li>
</ul>
</li>
<li>第二个参数<ul>
<li>属性名称</li>
</ul>
</li>
<li>第三个参数<ul>
<li>方法描述符对象</li>
</ul>
</li>
</ul>
<h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>目标</p>
<ul>
<li>应用于类的方法上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数<ul>
<li>静态方法：类的构造函数</li>
<li>实例方法：类的原型对象</li>
</ul>
</li>
<li>第二个参数<ul>
<li>方法名称</li>
</ul>
</li>
<li>第三个参数<ul>
<li>方法描述符对象</li>
</ul>
</li>
</ul>
<h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><p>目标</p>
<ul>
<li>应用在参数上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数<ul>
<li>静态方法：类的构造函数</li>
<li>实例方法：类的原型对象</li>
</ul>
</li>
<li>第二个参数<ul>
<li>方法名称</li>
</ul>
</li>
<li>第三个参数<ul>
<li>参数在函数参数列表中的索引</li>
</ul>
</li>
</ul>
<h1 id="装饰器执行顺序"><a href="#装饰器执行顺序" class="headerlink" title="装饰器执行顺序"></a>装饰器执行顺序</h1><p>实例装饰器</p>
<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>
<p>静态装饰器</p>
<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>
<p>类</p>
<p>​        类</p>
<h1 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h1><p>如果我们需要给装饰器执行过程中传入一些参数的时候，就可以使用装饰器工厂来实现</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">callback: <span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value = descriptor.value</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = value(x,y)</span><br><span class="line">      callback(&#123;</span><br><span class="line">        <span class="keyword">type</span>,</span><br><span class="line">        a,</span><br><span class="line">        b,</span><br><span class="line">        result</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> M&#123;</span><br><span class="line">  <span class="meta">@log</span>(<span class="function"><span class="keyword">function</span>(<span class="params">result:<span class="built_in">any</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1111'</span>,result)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">static</span> add(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@log</span>(<span class="function"><span class="keyword">function</span>(<span class="params">result:<span class="built_in">any</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'222'</span>,result)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">static</span> sub(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v1 = M.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1);</span><br><span class="line"><span class="keyword">let</span> v2 = M.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v2);</span><br></pre></td></tr></table></figure>


<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><p>在 <code>装饰器</code> 函数中 ，我们可以拿到 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 的基本信息，如它们的名称，描述符 等，但是我们想获取更多信息就需要通过另外的方式来进行：<code>元数据</code></p>
<h2 id="什么是元数据？"><a href="#什么是元数据？" class="headerlink" title="什么是元数据？"></a>什么是元数据？</h2><p><code>元数据</code> ：用来描述数据的数据，在我们的程序中，<code>对象</code>、<code>类</code> 等都是数据，它们描述了某种数据，另外还有一种数据，它可以用来描述 <code>对象</code>、<code>类</code>，这些用来描述数据的数据就是 <code>元数据</code></p>
<blockquote>
<p>比如一首歌曲本身就是一组数据，同时还有一组用来描述歌曲的歌手、格式、时长的数据，那么这组数据就是歌曲数据的元数据</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用元数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L</span>(<span class="params"><span class="keyword">type</span>?:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">    target.prototype.type = <span class="keyword">type</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">type</span>?: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class="line">    <span class="keyword">let</span> value = descriptor.value</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = value(x,y)</span><br><span class="line">      <span class="keyword">let</span> _type = <span class="keyword">type</span></span><br><span class="line">      <span class="keyword">if</span>(!_type)&#123;</span><br><span class="line">        _type = <span class="keyword">typeof</span> target ====<span class="string">'function'</span>?target.prototype.type : target.type</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(&#123;</span><br><span class="line">        _type,</span><br><span class="line">        a,</span><br><span class="line">        b,</span><br><span class="line">        result</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@L</span>(<span class="string">'log'</span>)</span><br><span class="line"><span class="keyword">class</span> M&#123;</span><br><span class="line">  <span class="meta">@log</span>(<span class="string">'local'</span>)</span><br><span class="line">  <span class="keyword">static</span> add(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@log</span>()</span><br><span class="line">  <span class="keyword">static</span> sub(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v1 = M.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1);</span><br><span class="line"><span class="keyword">let</span> v2 = M.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v2);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>会添加额外的属性</p>
</blockquote>
<h2 id="定义元数据"><a href="#定义元数据" class="headerlink" title="定义元数据"></a>定义元数据</h2><p>使用 <a href="https://www.npmjs.com/package/reflect-metadata" target="_blank" rel="noopener">reflect-metadata</a></p>
<p>首先，需要安装 <code>reflect-metadata</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install reflect-metadata</span><br></pre></td></tr></table></figure>

<p>我们可以 <code>类</code>、<code>方法</code> 等数据定义元数据</p>
<ul>
<li>元数据会被附加到指定的 <code>类</code>、<code>方法</code> 等数据之上，但是又不会影响 <code>类</code>、<code>方法</code> 本身的代码</li>
</ul>
<p>设置</p>
<p><code>Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)</code></p>
<ul>
<li>metadataKey：meta 数据的 key</li>
<li>metadataValue：meta 数据的 值</li>
<li>target：meta 数据附加的目标</li>
<li>propertyKey：对应的 property key</li>
</ul>
<p>调用方式</p>
<ul>
<li><p>通过  <code>Reflect.defineMetadata</code> 方法调用来添加 元数据</p>
</li>
<li><p>通过 <code>@Reflect.metadata</code> 装饰器来添加 元数据</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Reflect</span>.metadata(<span class="string">"n"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">    <span class="meta">@Reflect</span>.metadata(<span class="string">"n"</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> method1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Reflect</span>.metadata(<span class="string">"n"</span>, <span class="number">4</span>)</span><br><span class="line">  	<span class="keyword">public</span> method2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">1</span>, A);</span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">2</span>, A, <span class="string">'method1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> A();</span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">3</span>, obj);</span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">4</span>, obj, <span class="string">'method2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Reflect.getMetadata(<span class="string">'n'</span>, A));</span><br><span class="line"><span class="built_in">console</span>.log(Reflect.getMetadata(<span class="string">'n'</span>, A, ));</span><br></pre></td></tr></table></figure>
<p>获取</p>
<p><code>Reflect.getMetadata(metadataKey, target, propertyKey)</code></p>
<p>参数的含义与 <code>defineMetadata</code> 对应</p>
<h2 id="使用元数据的-log-装饰器"><a href="#使用元数据的-log-装饰器" class="headerlink" title="使用元数据的 log 装饰器"></a>使用元数据的 log 装饰器</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span></span><br><span class="line"><span class="comment">// function L(type?:string)&#123;</span></span><br><span class="line"><span class="comment">//   return function(target:Function)&#123;</span></span><br><span class="line"><span class="comment">//     Reflect.defineMetadata("type", type, target);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">type</span>?: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class="line">    <span class="keyword">let</span> value = descriptor.value</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = value(x,y)</span><br><span class="line">      <span class="keyword">let</span> _type = <span class="keyword">type</span></span><br><span class="line">      <span class="keyword">if</span>(!_type)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> target ====<span class="string">'function'</span>)&#123;</span><br><span class="line">          _type = Reflect.getMetadata(<span class="string">"type"</span>, target);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          _type = Reflect.getMetadata(<span class="string">'type'</span>,target.<span class="keyword">constructor</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(<span class="params">&#123;</span></span><br><span class="line"><span class="params">        _type,</span></span><br><span class="line"><span class="params">        a,</span></span><br><span class="line"><span class="params">        b,</span></span><br><span class="line"><span class="params">        result</span></span><br><span class="line"><span class="params">      &#125;</span>);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @L('log')</span></span><br><span class="line"><span class="meta">@Reflect</span>.metadata(<span class="string">'type'</span>,<span class="string">'storage'</span>)</span><br><span class="line"><span class="keyword">class</span> M&#123;</span><br><span class="line">  <span class="meta">@log</span>(<span class="string">'local'</span>)</span><br><span class="line">  <span class="keyword">static</span> add(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@log</span>()</span><br><span class="line">  <span class="keyword">static</span> sub(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v1 = M.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1);</span><br><span class="line"><span class="keyword">let</span> v2 = M.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v2);</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>es6基础</title>
    <url>/2021/01/es6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="ECMAScript-6-简介"><a href="#ECMAScript-6-简介" class="headerlink" title="ECMAScript 6 简介"></a>ECMAScript 6 简介</h2><ul>
<li>JavaScript 三大组成部分<ul>
<li>ECMAScript </li>
<li>DOM</li>
<li>BOM </li>
</ul>
</li>
<li>ECMAScript 发展历史 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources</a></li>
<li>ECMAScript 包含内容：JS 中的数据类型及相关操作，流程控制，运算符及相关运算……<a id="more"></a>

</li>
</ul>
<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><ol>
<li><p>let 和 var 的差异</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>:</span><br><span class="line">    <span class="number">1.</span>  <span class="keyword">var</span>可以重复声明</span><br><span class="line">    <span class="number">2.</span>  作用域：全局作用域和函数作用域</span><br><span class="line">    <span class="number">3.</span>  会进行预解析</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>:</span><br><span class="line">    <span class="number">1.</span>  同一作用域下不能重复声明   </span><br><span class="line">    <span class="number">2.</span>  作用域： 全局作用域 和 块级作用域  &#123;&#125;</span><br><span class="line">    <span class="number">3.</span>  不进行预解析</span><br></pre></td></tr></table></figure>
</li>
<li><p>const 常量</p>
<ul>
<li>声明时必须赋值</li>
<li>常量不能重新赋值</li>
<li>不能重复声明</li>
<li>块级作用域</li>
<li>const 不会被预解析</li>
</ul>
</li>
</ol>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lis.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//以上for循环等效于</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">2</span>;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><ul>
<li><p>对象的解构赋值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    d:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a,b&#125; = obj </span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="comment">//let a = obj.a</span></span><br><span class="line"><span class="comment">//let b = obj.b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let &#123;a,b,c&#125; = obj</span></span><br><span class="line"><span class="comment">// console.log(a,b,c) //1,2,undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的解构赋值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">let</span> [e,f]=arr</span><br><span class="line"><span class="built_in">console</span>.log(e,f)<span class="comment">//a b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//如何快速交换a,b的值</span></span><br><span class="line">[a,b]=[b,a]</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串的解构赋值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">let</span> [e,f] = str</span><br><span class="line"><span class="built_in">console</span>.log(e,f)<span class="comment">//a b</span></span><br><span class="line"><span class="comment">//let nub = 123 无法解构</span></span><br><span class="line"><span class="comment">//let [c,d] = nub</span></span><br><span class="line"><span class="comment">//console.log(c,d)//报错</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><ul>
<li><p>对象展开</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    c:<span class="number">3</span>,</span><br><span class="line">    d:<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,...c&#125; = obj3</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">//1 2 &#123;c: 3, d: 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = obj</span><br><span class="line">obj4.a=<span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;a:10,b:2&#125;</span></span><br><span class="line"><span class="keyword">let</span> obj5 = &#123;...obj&#125;</span><br><span class="line">obj5.a=<span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组展开</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line"><span class="comment">//将arr插入arr2的'b'之后</span></span><br><span class="line"><span class="keyword">let</span> arr3=[<span class="string">"a"</span>,<span class="string">"b"</span>,...arr,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="keyword">let</span> [a,b,...c] = arr</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">// 1  2 [3,4]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Set-对象"><a href="#Set-对象" class="headerlink" title="Set 对象"></a>Set 对象</h2><p>构造函数：用来构建某一类型的对象 - 对象的实例化<br>    <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="string">"a"</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(s.size); <span class="comment">//去重后的长度  相当于length</span></span><br><span class="line">s.delete(<span class="string">"a"</span>)  <span class="comment">//删除某一项 console.log(s.delete("a") ) true 删除不成功返回false</span></span><br><span class="line"><span class="comment">//s.add(7)//可以添加</span></span><br><span class="line"><span class="comment">//s.add(5)//添加不了 自动去重</span></span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="number">1</span>))<span class="comment">//true</span></span><br><span class="line">arr = [...s]</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1, 2, 3, 4, 5, 6]  //去重</span></span><br><span class="line"><span class="comment">//s.clear();//清空所有值  Set(0) &#123;&#125;    console.log(s.clear()) undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br></pre></td></tr></table></figure></p>
<h2 id="Map-对象"><a href="#Map-对象" class="headerlink" title="Map 对象"></a>Map 对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    [<span class="string">"a"</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="string">"b"</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="string">"c"</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="string">"d"</span>,<span class="number">4</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(arr)</span><br><span class="line"><span class="comment">// m.clear()</span></span><br><span class="line"><span class="comment">// console.log(m.delete("a"))</span></span><br><span class="line"><span class="comment">// console.log(m.get("b"))</span></span><br><span class="line"><span class="comment">// console.log(m.set("e",5))</span></span><br><span class="line">m.set(<span class="string">"e"</span>,<span class="number">5</span>).set(<span class="string">"a"</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clear() 清空所有值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">delete(key) 删除某一项</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        true || false 是否删除成功(没有这个值才会出现删除不成功)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">get(key)   获取某一项的具体值</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        key对应的value  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">has(key)   是否包含某一项</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        true || false  是否包含这个值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set(key,val)  设置一个值</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">        val   数据的value值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        map对象本身</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="函数新增扩展"><a href="#函数新增扩展" class="headerlink" title="函数新增扩展"></a>函数新增扩展</h2><ol>
<li><p>箭头函数</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    箭头函数：</span></span><br><span class="line"><span class="comment">    形参 =&gt; 返回值</span></span><br><span class="line"><span class="comment">    let fun = nub =&gt; nub*2</span></span><br><span class="line"><span class="comment">    console.log(fun(10))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    (形参,形参) =&gt; 返回值</span></span><br><span class="line"><span class="comment">    let fun2 = (nub,nub2) =&gt; nub*nub2</span></span><br><span class="line"><span class="comment">    console.log(fun2(10,3))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ()=&gt; 返回值</span></span><br><span class="line"><span class="comment">    let fun3 = () =&gt; "返回值"</span></span><br><span class="line"><span class="comment">    console.log(fun3())</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        执行语句</span></span><br><span class="line"><span class="comment">        // return 返回值</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    let fun4 = ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        console.log("天气不错")</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //箭头函数没有不定参</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    function fun5()&#123;</span></span><br><span class="line"><span class="comment">        console.log(arguments) //可以正常输出</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    let fun5 = ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        console.log(arguments) //arguments is not defined</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    fun5(1,2,3,4)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>rest 参数  剩余参数</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg) <span class="comment">//[1,2,3,4]</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数默认值设置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="function">(<span class="params">a=<span class="number">10</span>,b=<span class="number">2</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a*b)</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure>


</li>
</ol>
<blockquote>
<p>箭头函数本身没有this,调用箭头函数的this时,指向其声明时所在作用域的this</p>
</blockquote>
<h2 id="数组新增方法"><a href="#数组新增方法" class="headerlink" title="数组新增方法"></a>数组新增方法</h2><ul>
<li><p>Array.from(),Array.isArray()</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line"><span class="javascript"><span class="built_in">Array</span>.from()  把一个类数组转换成真正的数组  或者 lis=[...lis]</span></span><br><span class="line">        类数组：有下标有length</span><br><span class="line">    返回值：</span><br><span class="line">        转换之后的新数组</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">Array</span>.isArray()  判断是不是数组</span></span><br><span class="line">*/</span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#list li"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(lis))  <span class="comment">//false</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = []</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//基本用法</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//lis = Array.from(lis) </span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    lis = <span class="built_in">Array</span>.from(lis,<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(item,index,<span class="keyword">this</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> index</span></span><br><span class="line"><span class="actionscript">    &#125;,arr)  <span class="comment">//arr为this指向 存在时不能使用箭头函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(lis))  <span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis) <span class="comment">//[0,1,2,3]</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Array.of() </p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"a"</span>))<span class="comment">//[1, 2, 3, 4, "a"]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>Array.from(),Array.isArray(),Array.of()  都是Array这个构造函数下的方法</p>
</blockquote>
<ul>
<li><p>find()、findIndex()、includes()</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//find() 查找数组中满足要求的第一个值</span></span><br><span class="line"><span class="comment">//findIndex()  查找数组中满足要求的第一个值的索引</span></span><br><span class="line"><span class="comment">//includes()  判断数组中是否存在某值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]<span class="comment">//['a','b','c','d']</span></span><br><span class="line"><span class="comment">//arr.indexOf('a')</span></span><br><span class="line"><span class="comment">//let val = arr.find((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   if(item&gt;3)&#123;</span></span><br><span class="line"><span class="comment">//        return true</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line">val =arr.find(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(val)  <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;=<span class="number">3</span>))  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">2</span>))  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">8</span>))  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">// false 从第二位开始检索</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>flat()、flatMap()  数组扁平化方法</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    [<span class="string">"小明"</span>,<span class="string">"18"</span>],</span><br><span class="line">    [<span class="string">"小刚"</span>,<span class="string">"18"</span>],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>,</span><br><span class="line">            [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">]</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat())  <span class="comment">//向下提取一层 ["小明", "18", "小刚", "18", Array(2)]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="number">3</span>)) <span class="comment">//向下提取三层 ["小明", "18", "小刚", "18", 1, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>))  <span class="comment">//无限层</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [</span><br><span class="line">    [<span class="string">"小明"</span>,<span class="string">"18"</span>],</span><br><span class="line">    [<span class="string">"小刚"</span>,<span class="string">"18"</span>],</span><br><span class="line">]</span><br><span class="line"><span class="comment">//flatMap  只处理一层</span></span><br><span class="line"><span class="keyword">let</span> newArr = arr2.flatMap(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index)</span><br><span class="line">    item = item.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index==<span class="number">0</span>  <span class="comment">//只输出姓名</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>
</li>
<li><p>fill()  数据填充</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.fill(<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//["a", "a", "a", "a", "a"]</span></span><br><span class="line"></span><br><span class="line">arr.fill(<span class="string">"a"</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[0,1,2,3,"a"]</span></span><br><span class="line"></span><br><span class="line">arr.fill(<span class="string">"a"</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[0, "a", 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">arr.fill(<span class="string">"a"</span>,<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[0, "a", "a", "a", "a"] 不会改变原数组长度</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="字符串新增方法"><a href="#字符串新增方法" class="headerlink" title="字符串新增方法"></a>字符串新增方法</h2><ul>
<li>includes()  与数组中includes使用方法相同</li>
<li>startsWith endsWith()  判断字符串是否以某个字符串开头 或结尾  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Joker is very smart!'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'Joker'</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'Joker'</span>,<span class="number">4</span>)) <span class="comment">//false  从第四位开始查找</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'smart!'</span>))  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'smart!'</span>,<span class="number">4</span>))  <span class="comment">//false    只看前四位</span></span><br></pre></td></tr></table></figure></li>
<li>repeat()   将字符串进行重复  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'aaa'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">3</span>))  <span class="comment">// aaaaaaaaa</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    今年<span class="tag">&lt;<span class="name">strong</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>就要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>18<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>岁了，终于要上<span class="tag">&lt;<span class="name">strong</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>了。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p = <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = <span class="string">"小明"</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = <span class="number">18</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> school = <span class="string">"大学"</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    //p.innerHTML = '今年<span class="tag">&lt;<span class="name">strong</span>&gt;</span>'+name+'<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>就要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>'+age+'<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>岁了，终于要上<span class="tag">&lt;<span class="name">strong</span>&gt;</span>'+school+'<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>了。'</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//等同于</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    p.innerHTML = `今年<span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>就要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;age&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>岁了，终于要上<span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;school&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>了。`</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>模板字符串可以换行</p>
</blockquote>
<p>${}  差值表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">`a的值为<span class="subst">$&#123;a()&#125;</span>,d<span class="subst">$&#123; d&gt;<span class="number">8</span>?<span class="string">'大于'</span>:<span class="string">'小于等于'</span>&#125;</span>8`</span></span><br></pre></td></tr></table></figure>

<h2 id="对象新增方法"><a href="#对象新增方法" class="headerlink" title="对象新增方法"></a>对象新增方法</h2><ul>
<li><p>简洁表示法</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="comment">//let obj = &#123;</span></span><br><span class="line"><span class="comment">//    a:a,</span></span><br><span class="line"><span class="comment">//    b:b,</span></span><br><span class="line"><span class="comment">//    c:function()&#123;</span></span><br><span class="line"><span class="comment">//          console.log(a)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// 可以写成</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    c()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性名表达式</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"小明"</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [name]:<span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line">obj[name]=<span class="number">111</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象合并</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    c:<span class="number">3</span>,</span><br><span class="line">    d:<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//let obj3 = &#123;...obj,...obj2&#125;</span></span><br><span class="line"><span class="comment">//Object.assign(obj2,obj)  //将后面的对象合并到前面的对象中</span></span><br><span class="line">obj2=<span class="built_in">Object</span>.assign(&#123;&#125;,obj2,obj)  <span class="comment">//将后面的对象合并到前面的空目标对象中</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>比较</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">1</span>,<span class="string">'1'</span>)) <span class="comment">//fasle</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    规则：</span></span><br><span class="line"><span class="comment">        1.两个值都是undefined</span></span><br><span class="line"><span class="comment">        2.两个值都是null</span></span><br><span class="line"><span class="comment">        3.两个值都是true 或两个值都是false</span></span><br><span class="line"><span class="comment">        4.两个值都是由相同个数的字符串按照相同的顺序组成的字符串</span></span><br><span class="line"><span class="comment">        5.两个值都指向同一个对象</span></span><br><span class="line"><span class="comment">        6.两个值都是数字并且：</span></span><br><span class="line"><span class="comment">                都是正零  +0</span></span><br><span class="line"><span class="comment">                都是负零  -0</span></span><br><span class="line"><span class="comment">                都是NAN</span></span><br><span class="line"><span class="comment">        以上几种时候比较结果为true </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>1-5条等同于 <code>===</code>，<br><code>-0===+0    true</code> ; <code>Object.is(-0,+0)  false</code><br><code>NaN===NaN  false</code>; <code>Object.is(NaN,NaN)  true</code></p>
</blockquote>
</li>
</ul>
<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><ul>
<li><p>Babel 是一个 JavaScript 编译器</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'babel.min.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> a = <span class="number">1</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> b = <span class="number">2</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> obj = &#123;</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    c()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">let</span> obj2 = &#123;</span></span><br><span class="line">    d:4,</span><br><span class="line">    ...obj,</span><br><span class="line">    e:5</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




</li>
</ul>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>基于高德地图jsapi的二次封装</title>
    <url>/2021/08/%E5%9F%BA%E4%BA%8E%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEjsapi%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>针对vue、uni等项目的一些常用地图api的二次封装</p>
<a id="more"></a>

<h1 id="申请key"><a href="#申请key" class="headerlink" title="申请key"></a>申请key</h1><p>第一步我们要做地图肯定要有这地图对应的key，还不知道怎么生成的话可以点这个查看—–&gt;<a href="http://baidu.physton.com/?q=%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E7%9A%84key" target="_blank" rel="noopener">如何生成高德地图的key</a></p>
<h1 id="使用AMapLoader加载高德地图的js"><a href="#使用AMapLoader加载高德地图的js" class="headerlink" title="使用AMapLoader加载高德地图的js"></a>使用AMapLoader加载高德地图的js</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm i @amap/amap-jsapi-loader</span><br></pre></td></tr></table></figure>
<blockquote>
<p>是的，你没有看错，就用cnpm！npm安装会有各种报错</p>
</blockquote>
<h1 id="修改map-js"><a href="#修改map-js" class="headerlink" title="修改map.js"></a>修改map.js</h1><p>在<code>map.js</code>中，我们修改<code>key</code>为自己的<code>key</code>，并按自己需要去修改插件数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AMapLoader <span class="keyword">from</span> <span class="string">'@amap/amap-jsapi-loader'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置地图所需要的插件</span></span><br><span class="line"><span class="keyword">const</span> mapPlugin = [</span><br><span class="line">  <span class="comment">// 'AMap.ToolBar',</span></span><br><span class="line">  <span class="comment">// 'AMap.Scale',</span></span><br><span class="line">  <span class="comment">// 'AMap.AdvancedInfoWindow',</span></span><br><span class="line">  <span class="comment">// 'AMap.Geolocation',</span></span><br><span class="line">  <span class="comment">// 'AMap.Transfer',</span></span><br><span class="line">  <span class="comment">// 'AMap.StationSearch',</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 地图key</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">'your key'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题id</span></span><br><span class="line"><span class="keyword">const</span> styleId = <span class="string">'your styleId'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认城市号</span></span><br><span class="line"><span class="keyword">const</span> defaultCityCode = <span class="string">'城市号'</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(opt) &#123;</span><br><span class="line">    <span class="keyword">this</span>.map = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.initMap(opt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 销毁地图</span></span><br><span class="line">  destroy() &#123;</span><br><span class="line">    <span class="keyword">this</span>.map.destroy();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化地图</span></span><br><span class="line">  initMap(&#123; domId, geolocation &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      AMapLoader.load(&#123;</span><br><span class="line">        key: key, <span class="comment">// 申请好的Web端开发者Key，首次调用 load 时必填</span></span><br><span class="line">        plugins: mapPlugin, <span class="comment">// 需要使用的的插件列表，如比例尺'AMap.Scale'等</span></span><br><span class="line">        AMapUI: &#123;</span><br><span class="line">          <span class="comment">// 是否加载 AMapUI，缺省不加载</span></span><br><span class="line">          plugins: [], <span class="comment">// 需要加载的 AMapUI ui插件</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">AMap</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.map = <span class="keyword">new</span> AMap.Map(domId, &#123;</span><br><span class="line">            mapStyle: <span class="string">`amap://styles/<span class="subst">$&#123;styleId&#125;</span>`</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">if</span> (geolocation) &#123;</span><br><span class="line">            <span class="comment">// 初始化定位</span></span><br><span class="line">            <span class="keyword">this</span>.initGetLocation();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (mapPlugin.length &gt; <span class="number">0</span>) &#123; <span class="comment">// 加载插件</span></span><br><span class="line">            <span class="keyword">this</span>.initMapPlugin(mapPlugin);</span><br><span class="line">          &#125;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(e);</span><br><span class="line">          reject();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取当前定位</span></span><br><span class="line">  getLocation() &#123;</span><br><span class="line">    <span class="keyword">this</span>.geolocation.getCurrentPosition();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化定位组件</span></span><br><span class="line">  initGetLocation() &#123;</span><br><span class="line">    <span class="keyword">this</span>.map.plugin(<span class="string">'AMap.Geolocation'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.geolocation = <span class="keyword">new</span> AMap.Geolocation(&#123;</span><br><span class="line">        enableHighAccuracy: <span class="literal">false</span>, <span class="comment">//是否使用高精度定位，默认:true</span></span><br><span class="line">        timeout: <span class="number">1000</span>, <span class="comment">//超过10秒后停止定位，默认：无穷大</span></span><br><span class="line">        maximumAge: <span class="number">0</span>, <span class="comment">//定位结果缓存0毫秒，默认：0</span></span><br><span class="line">        convert: <span class="literal">true</span>, <span class="comment">//自动偏移坐标，偏移后的坐标为高德坐标，默认：true</span></span><br><span class="line">        showButton: <span class="literal">false</span>, <span class="comment">//显示定位按钮，默认：true</span></span><br><span class="line">        showMarker: <span class="literal">true</span>, <span class="comment">//定位成功后在定位到的位置显示点标记，默认：true</span></span><br><span class="line">        showCircle: <span class="literal">true</span>, <span class="comment">//定位成功后用圆圈表示定位精度范围，默认：true</span></span><br><span class="line">        panToLocation: <span class="literal">true</span>, <span class="comment">//定位成功后将定位到的位置作为地图中心点，默认：true</span></span><br><span class="line">        zoomToAccuracy: <span class="literal">false</span>, <span class="comment">//定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.map.addControl(<span class="keyword">this</span>.geolocation);</span><br><span class="line">      <span class="keyword">this</span>.getLocation();<span class="comment">// 初始化完成默认调用一次获取定位</span></span><br><span class="line">      AMap.event.addListener(<span class="keyword">this</span>.geolocation, <span class="string">'complete'</span>, onComplete =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(onComplete, <span class="string">'定位成功'</span>);</span><br><span class="line">        <span class="keyword">this</span>.currentLocation = onComplete; <span class="comment">//  存储当前定位</span></span><br><span class="line">      &#125;); <span class="comment">//返回定位信息</span></span><br><span class="line"></span><br><span class="line">      AMap.event.addListener(geolocation, <span class="string">'error'</span>, onError =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(onError, <span class="string">'定位失败'</span>);</span><br><span class="line">      &#125;); <span class="comment">//返回 定位失败</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加载插件</span></span><br><span class="line">  initMapPlugin(l) &#123;</span><br><span class="line">    l.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> f = v.split(<span class="string">'.'</span>)[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">this</span>.map.addControl(<span class="keyword">new</span> AMap[f]());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 画线</span></span><br><span class="line">  pathLine(pointList, pathOption) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * pointList 为线所要经过的点 格式为</span></span><br><span class="line"><span class="comment">     * [</span></span><br><span class="line"><span class="comment">          &#123;</span></span><br><span class="line"><span class="comment">            name: "轨迹名",</span></span><br><span class="line"><span class="comment">            path: [</span></span><br><span class="line"><span class="comment">              [100.340417, 27.376994],</span></span><br><span class="line"><span class="comment">              [108.426354, 37.827452],</span></span><br><span class="line"><span class="comment">              [113.392174, 31.208439],</span></span><br><span class="line"><span class="comment">              [124.905846, 42.232876],</span></span><br><span class="line"><span class="comment">            ],</span></span><br><span class="line"><span class="comment">          &#125;,</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">     * pathOption 为线条参数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> pathLineStyle = &#123;</span><br><span class="line">      strokeStyle: <span class="string">'red'</span>,</span><br><span class="line">      lineWidth: <span class="number">6</span>,</span><br><span class="line">      dirArrowStyle: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">Object</span>.assign(pathLineStyle, pathOption);</span><br><span class="line">    AMapUI.load([<span class="string">'ui/misc/PathSimplifier'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">PathSimplifier</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> pathSimplifierIns = <span class="keyword">new</span> PathSimplifier(&#123;</span><br><span class="line">        zIndex: <span class="number">100</span>,</span><br><span class="line">        map: that.map, <span class="comment">//所属的地图实例</span></span><br><span class="line">        getPath: <span class="function"><span class="keyword">function</span>(<span class="params">pathData, pathIndex</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//返回轨迹数据中的节点坐标信息，[AMap.LngLat, AMap.LngLat...] 或者 [[lng|number,lat|number],...]</span></span><br><span class="line">          <span class="keyword">return</span> pathData.path;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// getHoverTitle: function(pathData, pathIndex, pointIndex) &#123;</span></span><br><span class="line">        <span class="comment">//   //返回鼠标悬停时显示的信息</span></span><br><span class="line">        <span class="comment">//   if (pointIndex &gt;= 0) &#123;</span></span><br><span class="line">        <span class="comment">//     //鼠标悬停在某个轨迹节点上</span></span><br><span class="line">        <span class="comment">//     return (</span></span><br><span class="line">        <span class="comment">//       pathData.name + '，点:' + pointIndex + '/' + pathData.path.length</span></span><br><span class="line">        <span class="comment">//     );</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">//   //鼠标悬停在节点之间的连线上</span></span><br><span class="line">        <span class="comment">//   return pathData.name + '，点数量' + pathData.path.length;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        renderOptions: &#123;</span><br><span class="line">          <span class="comment">//轨迹线的样式</span></span><br><span class="line">          pathLineStyle,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      pathSimplifierIns.setData(pointList);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义兴趣点</span></span><br><span class="line">  drawMarker(marker) &#123;</span><br><span class="line">    <span class="comment">// marker可传单个点 可传点数组</span></span><br><span class="line">    <span class="keyword">this</span>.map.add(marker);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取自定义内容标记</span></span><br><span class="line">  getMarker(position, opt, extData, fn) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * position 为位置信息 必传</span></span><br><span class="line"><span class="comment">     * opt 为用户自定义覆盖物 可传</span></span><br><span class="line"><span class="comment">     * icon: '//vdata.amap.com/icons/b18/1/2.png', // 添加 Icon 图标 URL</span></span><br><span class="line"><span class="comment">     * size: new AMap.Size(40, 50),    // 图标尺寸</span></span><br><span class="line"><span class="comment">     * image: '//webapi.amap.com/theme/v1.3/images/newpc/way_btn2.png',  // Icon的图像</span></span><br><span class="line"><span class="comment">     * imageOffset: new AMap.Pixel(0, -60),  // 图像相对展示区域的偏移量，适于雪碧图等</span></span><br><span class="line"><span class="comment">     * imageSize: new AMap.Size(40, 50)   // 根据所设置的大小拉伸或压缩图片</span></span><br><span class="line"><span class="comment">     * zoom: 13</span></span><br><span class="line"><span class="comment">     * content:'&lt;div class="marker-route marker-marker-bus-from"&gt;&lt;/div&gt;'</span></span><br><span class="line"><span class="comment">     * 更多配置 https://lbs.amap.com/api/javascript-api/reference/overlay#marker</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      position, <span class="comment">// 基点位置</span></span><br><span class="line">      offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-17</span>, <span class="number">-42</span>), <span class="comment">// 相对于基点的</span></span><br><span class="line">      clickable: <span class="literal">true</span>,</span><br><span class="line">      extData: extData,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (opt) &#123;</span><br><span class="line">      option = &#123; ...option, ...opt &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> marker = <span class="keyword">new</span> AMap.Marker(option);</span><br><span class="line">    marker.on(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">      <span class="comment">// 注册marker的点击事件</span></span><br><span class="line">      <span class="comment">// console.log(e.target.getExtData());</span></span><br><span class="line">      <span class="keyword">this</span>.map.setZoomAndCenter(<span class="number">10</span>, e.target.getPosition()); <span class="comment">// 点击marker点后以 marker点为中心</span></span><br><span class="line">      <span class="comment">// marker点 点击</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.lastSelectedMarker) &#123;</span><br><span class="line">        <span class="comment">// 如果存在上个点击点 将上个点击点的icon恢复默认大小</span></span><br><span class="line">        <span class="keyword">const</span> &#123; image &#125; = <span class="keyword">this</span>.lastSelectedMarker.w.icon.Ce;</span><br><span class="line">        <span class="keyword">const</span> icon = <span class="keyword">this</span>.getMarkerIcon(&#123; image &#125;);</span><br><span class="line">        <span class="keyword">this</span>.lastSelectedMarker.setIcon(icon);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> &#123; image &#125; = e.target.w.icon.Ce;</span><br><span class="line">      <span class="keyword">const</span> newIcon = <span class="keyword">this</span>.getMarkerIcon(&#123;</span><br><span class="line">        image,</span><br><span class="line">        setOffset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-18</span>, <span class="number">-50</span>),</span><br><span class="line">        size: <span class="keyword">new</span> AMap.Size(<span class="number">52</span>, <span class="number">52</span>), <span class="comment">// 图标尺寸</span></span><br><span class="line">        imageSize: <span class="keyword">new</span> AMap.Size(<span class="number">48</span>, <span class="number">48</span>),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      e.target.setIcon(newIcon);</span><br><span class="line">      fn(extData);</span><br><span class="line">      <span class="keyword">this</span>.lastSelectedMarker = e.target;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> marker;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成marker的图片icon</span></span><br><span class="line">  getMarkerIcon(opt) &#123;</span><br><span class="line">    <span class="comment">// opt 必须包含image属性</span></span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      size: <span class="keyword">new</span> AMap.Size(<span class="number">40</span>, <span class="number">40</span>), <span class="comment">// 图标尺寸</span></span><br><span class="line">      imageSize: <span class="keyword">new</span> AMap.Size(<span class="number">36</span>, <span class="number">36</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AMap.Icon(&#123; ...option, ...opt &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化 拖拽选址</span></span><br><span class="line">  initPositionPicker([fnSuc, fnFail], position) &#123;</span><br><span class="line">    <span class="comment">// [fnSuc, fnFail], position</span></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 入参说明</span></span><br><span class="line"><span class="comment">     * fn数组 为拖拽事件处理 必传</span></span><br><span class="line"><span class="comment">     * position 为start的中线点 可不传</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    AMapUI.loadUI([<span class="string">'misc/PositionPicker'</span>], PositionPicker =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.positionPicker = <span class="keyword">new</span> PositionPicker(&#123;</span><br><span class="line">        mode: <span class="string">'dragMap'</span>, <span class="comment">//设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'</span></span><br><span class="line">        map: <span class="keyword">this</span>.map, <span class="comment">//依赖地图对象</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//<span class="doctag">TODO:</span>事件绑定、结果处理等</span></span><br><span class="line">      <span class="keyword">this</span>.positionPicker.on(<span class="string">'success'</span>, positionResult =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(positionResult, <span class="string">'拖拽 success'</span>);</span><br><span class="line">        <span class="comment">// fnSuc(positionResult)</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.positionPicker.on(<span class="string">'fail'</span>, positionResult =&gt; &#123;</span><br><span class="line">        <span class="comment">// 海上或海外无法获得地址信息</span></span><br><span class="line">        <span class="built_in">console</span>.log(positionResult, <span class="string">'拖拽err'</span>);</span><br><span class="line">        <span class="comment">// fnFail()</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.positionPicker.start(</span><br><span class="line">        position ? position : <span class="keyword">this</span>.currentLocation.position</span><br><span class="line">      ); <span class="comment">// 开启定位  默认以当前点为中心点  有传入 就以传入的为中心点</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加搜索框输入提示</span></span><br><span class="line">  initAutoComplete() &#123;</span><br><span class="line">    AMap.plugin(<span class="string">'AMap.Autocomplete'</span>, ()=&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;citycode&#125; = <span class="keyword">this</span>.currentLocation.addressComponent  <span class="comment">// 获取当前定位的城市的城市号</span></span><br><span class="line">      <span class="keyword">this</span>.autoComplete = <span class="keyword">new</span> AMap.Autocomplete(&#123;</span><br><span class="line">        city:citycode?citycode:defaultCityCode</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在我们需要使用地图的地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Map</span></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">"@/common/script/map"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;<span class="attr">domId</span>:<span class="string">"dom的id"</span>,<span class="attr">geolocation</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取定位 (可以放在你点击获取当前定位的按钮上)</span></span><br><span class="line"><span class="keyword">this</span>.map.getLocation()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入提示 </span></span><br><span class="line"><span class="keyword">this</span>.map.initAutoComplete()  <span class="comment">// 注册输入提示</span></span><br><span class="line">  <span class="comment">// 在需要触发的方法里面  this.place为 需要进行模糊匹配的内容</span></span><br><span class="line">  <span class="keyword">this</span>.map.autoComplete.search(<span class="keyword">this</span>.place,(status,res)=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(status,res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 画自定义点 content </span></span><br><span class="line">drawMarker() &#123;</span><br><span class="line">  <span class="keyword">const</span> content =<span class="string">'&lt;div&gt;1&lt;/div&gt;'</span></span><br><span class="line">  <span class="keyword">const</span> marker = <span class="keyword">this</span>.map.getMarker([<span class="number">116.39</span>, <span class="number">39.9</span>],&#123;content&#125;);</span><br><span class="line">  <span class="keyword">this</span>.map.drawMarker(marker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画自定义点 icon</span></span><br><span class="line">drawMarker()&#123;</span><br><span class="line">  <span class="keyword">const</span> icon = <span class="keyword">this</span>.map.getMarkerIcon(&#123; <span class="attr">image</span>: <span class="string">'you image url'</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> marker = <span class="keyword">this</span>.map.getMarker(</span><br><span class="line">      [<span class="number">120.3</span>, <span class="number">31.3</span>],</span><br><span class="line">      &#123; icon &#125;,</span><br><span class="line">      extData,</span><br><span class="line">      callback <span class="comment">// 传递给marker点 点击触发的回调方法</span></span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">this</span>.map.drawMarker(marker);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画自定义线</span></span><br><span class="line">drawPath() &#123;</span><br><span class="line">  <span class="keyword">this</span>.map.pathLine(</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"轨迹0"</span>,</span><br><span class="line">        path: [</span><br><span class="line">          [<span class="number">100.340417</span>, <span class="number">27.376994</span>],</span><br><span class="line">          [<span class="number">108.426354</span>, <span class="number">37.827452</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &#123;</span><br><span class="line">      strokeStyle: <span class="string">"green"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">this</span>.map.pathLine([</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"轨迹0"</span>,</span><br><span class="line">      path: [</span><br><span class="line">        [<span class="number">108.426354</span>, <span class="number">37.827452</span>],</span><br><span class="line">        [<span class="number">113.392174</span>, <span class="number">31.208439</span>],</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">this</span>.map.pathLine(</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"轨迹0"</span>,</span><br><span class="line">        path: [</span><br><span class="line">          [<span class="number">113.392174</span>, <span class="number">31.208439</span>],</span><br><span class="line">          [<span class="number">124.905846</span>, <span class="number">42.232876</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &#123;</span><br><span class="line">      strokeStyle: <span class="string">"pink"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拖拽定位 初始化 第一次初始化会默认开启拖拽</span></span><br><span class="line"><span class="keyword">this</span>.map.initPositionPicker([sucCallBack,failCallBack])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束拖拽</span></span><br><span class="line"><span class="keyword">this</span>.map.positionPicker.stop();</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>地图</category>
        <category>jsapi</category>
      </categories>
      <tags>
        <tag>地图</tag>
        <tag>jsapi</tag>
      </tags>
  </entry>
</search>
