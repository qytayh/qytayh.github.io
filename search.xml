<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue中Watch和Computed的差异</title>
    <url>/2020/05/Vue%E4%B8%ADWatch%E5%92%8CComputed%E7%9A%84%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<p>计算属性 vs 监听器</p>
<a id="more"></a>

<h1 id="语境上的差异"><a href="#语境上的差异" class="headerlink" title="语境上的差异"></a>语境上的差异</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个值变化了，我要做些事情，适合一个值影响多个值的情形</span></span><br><span class="line">watch:&#123;</span><br><span class="line">    firstname(newval,oldval)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fullname = <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;,</span><br><span class="line">    lastname(newval,oldval)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fullname = <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个值由其他值得来，这些值变化了我也要变，适合多个值影响一个值的情形</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    fullname()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计算属性有缓存性"><a href="#计算属性有缓存性" class="headerlink" title="计算属性有缓存性"></a>计算属性有缓存性</h1><p>计算所得的值如果没有变化不会重复执行</p>
<h1 id="监听器选项"><a href="#监听器选项" class="headerlink" title="监听器选项"></a>监听器选项</h1><p>监听器选项提供了更通用的方法，适合执行异步操作或者较大开销操作的情况</p>
<p><a href="https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8" target="_blank" rel="noopener">点击查看范例</a></p>
<p>我们可以在范例中看到，在created的时候将我们要发送的请求做了一次防抖处理的封装，输入停止500毫秒后才会触发，这样就可以很有效的控制请求的频率</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>日常工作中的git高频命令</p>
<a id="more"></a>
<h2 id="日常工作中常用的几条git命令"><a href="#日常工作中常用的几条git命令" class="headerlink" title="日常工作中常用的几条git命令"></a>日常工作中常用的几条git命令</h2><ol>
<li><p>查看所有本地分支和远程分支</p>
<p> <code>git branch -a</code></p>
</li>
<li><p>下载一个项目和它的整个代码历史</p>
<p> <code>git clone [url]</code></p>
</li>
<li><p>列出所有远程分支</p>
<p> <code>git branch -r</code></p>
</li>
<li><p>切换到指定分支</p>
<p> <code>git checkout [branch-name]</code></p>
</li>
<li><p>合并指定分支到当前分支</p>
<p> <code>git merge [branch]</code></p>
</li>
<li><p>新建一个分支，但依然停留在当前分支</p>
<p> <code>git branch [branch-name]</code></p>
</li>
<li><p>新建一个分支，并切换到该分支</p>
<p> <code>git checkout -b [branch]</code></p>
</li>
<li><p>显示所有远程仓库</p>
<p> <code>git remote -v</code></p>
</li>
<li><p>取回远程仓库的变化</p>
<p> <code>git pull</code></p>
</li>
<li><p>添加当前目录的所有文件到暂存区</p>
<p><code>git add .</code></p>
</li>
<li><p>提交暂存区到仓库区</p>
<p><code>git commit -m [message]</code></p>
</li>
<li><p>上传本地代码到远程仓库</p>
<p><code>git push</code></p>
</li>
<li><p>提交本地分支到远程仓库</p>
<p><code>git push origin 本地分支名</code></p>
</li>
<li><p>删除远程分支</p>
<p><code>git push --delete origin 分支名</code></p>
</li>
<li><p>更新远程分支列表</p>
<p><code>git remote update origin -p</code></p>
</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo简单使用说明</title>
    <url>/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="一些使用hexo常用的命令"><a href="#一些使用hexo常用的命令" class="headerlink" title="一些使用hexo常用的命令"></a>一些使用hexo常用的命令</h1><a id="more"></a>


<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">"博客名称"</span>  =&gt; hexo new <span class="string">"博客名称"</span>   <span class="comment">#这两个都是创建新文章，前者是简写模式</span></span><br><span class="line">hexo p  =&gt; hexo publish</span><br><span class="line">hexo g  =&gt; hexo generate  <span class="comment">#生成</span></span><br><span class="line">hexo s  =&gt; hexo server  <span class="comment">#启动服务预览</span></span><br><span class="line">hexo clean  //清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo d  =&gt; hexo deploy  <span class="comment">#部署</span></span><br><span class="line">hexo publish [layout] &lt;title&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 引入图片</span></span><br><span class="line">``` bash</span><br><span class="line">![图片alt](图片地址 <span class="string">''</span>图片title<span class="string">''</span>)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line">例如</span><br><span class="line">![百度](https://www.baidu.com/img/flexible/logo/pc/result@2.png)</span><br><span class="line">或者</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_img result@2.png [title] %&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://www.baidu.com/img/flexible/logo/pc/result@2.png" alt="第一种"></p>
<img src="/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/result@2.png" class="" title="[第二种]">




<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">"超链接title"</span>)</span><br><span class="line">例如</span><br><span class="line">[简书](http://jianshu.com)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用符号<code>-</code></p>
<ul>
<li>第一个</li>
<li>第二个<br>。。。。。。</li>
</ul>
<h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**需要加粗的内容**</span><br></pre></td></tr></table></figure>
<p><strong>需要加粗的内容</strong></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; 内容</span><br><span class="line">&gt;&gt; 内容</span><br><span class="line">&gt;&gt;&gt; 内容</span><br></pre></td></tr></table></figure>
<blockquote>
<p>内容</p>
<blockquote>
<p>内容</p>
<blockquote>
<p>内容</p>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>不好好工作会怎么样呢</title>
    <url>/2020/05/%E4%B8%8D%E5%A5%BD%E5%A5%BD%E5%B7%A5%E4%BD%9C%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%E5%91%A2/</url>
    <content><![CDATA[<p>经常看到有人抱怨工作辛苦</p>
<p>那么当你看完这个，还会继续抱怨吗</p>
<a id="more"></a>




<video src='1.mp4 ' type='video/mp4' controls='controls'  width='100%' height='100%'>
</video>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取豆瓣电影top250</title>
    <url>/2020/05/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top250/</url>
    <content><![CDATA[<p>记录使用python爬取豆瓣</p>
<a id="more"></a>



<h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import xlwt</span><br><span class="line"></span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>, style_compression=0)</span><br><span class="line">sheet = book.add_sheet(<span class="string">'豆瓣电影Top250'</span>)</span><br><span class="line">sheet.write(0, 0, <span class="string">'名称'</span>)</span><br><span class="line">sheet.write(0, 1, <span class="string">'图片'</span>)</span><br><span class="line">sheet.write(0, 2, <span class="string">'排名'</span>)</span><br><span class="line">sheet.write(0, 3, <span class="string">'评分'</span>)</span><br><span class="line">sheet.write(0, 4, <span class="string">'作者'</span>)</span><br><span class="line">sheet.write(0, 5, <span class="string">'简介'</span>)</span><br><span class="line"></span><br><span class="line">n = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(page):</span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start='</span> + str(page * 25) + <span class="string">'&amp;filter='</span></span><br><span class="line">    html = request_douban(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    list = soup.find(class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        item_name = item.find(class_=<span class="string">'title'</span>).string</span><br><span class="line">        item_img = item.find(<span class="string">'a'</span>).find(<span class="string">'img'</span>).get(<span class="string">'src'</span>)</span><br><span class="line">        item_index = item.find(class_=<span class="string">''</span>).string</span><br><span class="line">        item_score = item.find(class_=<span class="string">'rating_num'</span>).string</span><br><span class="line">        item_author = item.find(<span class="string">'p'</span>).text</span><br><span class="line">        <span class="keyword">if</span> item.find(class_=<span class="string">'inq'</span>) is not None:</span><br><span class="line">            item_intr = item.find(class_=<span class="string">'inq'</span>).string</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'爬取电影：'</span> + item_index + <span class="string">' | '</span> + item_name + <span class="string">' | '</span> + item_score + <span class="string">' | '</span> + item_intr)</span><br><span class="line"></span><br><span class="line">        global n</span><br><span class="line">        sheet.write(n, 0, item_name)</span><br><span class="line">        sheet.write(n, 1, item_img)</span><br><span class="line">        sheet.write(n, 2, item_index)</span><br><span class="line">        sheet.write(n, 3, item_score)</span><br><span class="line">        sheet.write(n, 4, item_author)</span><br><span class="line">        sheet.write(n, 5, item_intr)</span><br><span class="line">        n = n + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def request_douban(url):</span><br><span class="line">    maxTryNum = 20</span><br><span class="line">    <span class="keyword">for</span> tries <span class="keyword">in</span> range(maxTryNum):</span><br><span class="line">        try:</span><br><span class="line">            kv = &#123;<span class="string">"user-agent"</span>: <span class="string">"Mizilla/5.0"</span>&#125;</span><br><span class="line">            response = requests.get(url, headers=kv, timeout=60)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">                <span class="built_in">return</span> response.text</span><br><span class="line">        except requests.RequestException:</span><br><span class="line">            <span class="keyword">if</span> tries &lt; (maxTryNum - 1):</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Has tried %d times to access url %s, all failed!"</span> % (maxTryNum, url))</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0, 10):</span><br><span class="line">        main(i)</span><br><span class="line"></span><br><span class="line">    book.save(<span class="string">'豆瓣最受欢迎的250部电影.xls'</span>)</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue中使用graphql</title>
    <url>/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/</url>
    <content><![CDATA[<p>记录在vue中使用graphql踩过的坑</p>
<a id="more"></a>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>首先我们保证已经有了一个vue项目，输入以下命令</p>
<p><code>npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag</code></p>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>创建apollo.js并输入以下代码</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApolloClient &#125; <span class="keyword">from</span> <span class="string">'apollo-client'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createHttpLink &#125; <span class="keyword">from</span> <span class="string">'apollo-link-http'</span></span><br><span class="line"><span class="keyword">import</span> &#123; InMemoryCache &#125; <span class="keyword">from</span> <span class="string">'apollo-cache-inmemory'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ApolloLink&#125; <span class="keyword">from</span> <span class="string">'apollo-link'</span></span><br><span class="line"><span class="comment">// 与 API 的 HTTP 连接</span></span><br><span class="line"><span class="keyword">const</span> httpLink = createHttpLink(&#123;</span><br><span class="line">  <span class="comment">// 你需要在这里使用绝对路径</span></span><br><span class="line">  uri: process.env.VUE_APP_BASEURL + <span class="string">'graphql'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> middlewareLink = <span class="keyword">new</span> ApolloLink(<span class="function">(<span class="params">operation, forward</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="string">''</span>;</span><br><span class="line">  <span class="comment">//配置token验证</span></span><br><span class="line">  <span class="keyword">let</span> api_token = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'api_token'</span>)!)</span><br><span class="line">  <span class="keyword">if</span> (api_token) &#123;</span><br><span class="line">      token = api_token</span><br><span class="line">  &#125;</span><br><span class="line">  operation.setContext(&#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">          Authorization: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span> || <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> forward(operation)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 缓存实现</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> InMemoryCache()</span><br><span class="line"><span class="comment">// 创建 apollo 客户端</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apolloClient = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  link: middlewareLink.concat(httpLink),</span><br><span class="line">  cache,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后在main.js中引入</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> apollo <span class="keyword">from</span> <span class="string">'./plugins/apollo'</span></span><br><span class="line"><span class="keyword">import</span> VueApollo <span class="keyword">from</span> <span class="string">'vue-apollo'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueApollo)</span><br><span class="line"><span class="keyword">const</span> apolloProvider = <span class="keyword">new</span> VueApollo(&#123;</span><br><span class="line">  defaultClient: apollo.apolloClient,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用 apolloProvider 选项将它添加到你的应用程序</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  vuetify,</span><br><span class="line">  i18n,</span><br><span class="line">  store,</span><br><span class="line">  apolloProvider,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在我们需要使用graphql的页面引入<code>gql</code></p>
<p><code>import gql from &#39;graphql-tag&#39;</code></p>
<p>然后创建一个js文件<code>query.js</code>用来编写查询语句，并在我们使用graphql的页面引入</p>
<p><code>import * as sql from &#39;./query&#39;</code></p>
<p>在<code>query.js</code>中添加查询代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span> <span class="string">'graphql-tag'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> report1 = gql <span class="string">`query($id: ID!)&#123;</span></span><br><span class="line"><span class="string">     contracts(first:10,id:$id)&#123;</span></span><br><span class="line"><span class="string">        data&#123;</span></span><br><span class="line"><span class="string">            id</span></span><br><span class="line"><span class="string">            address</span></span><br><span class="line"><span class="string">            contract_no</span></span><br><span class="line"><span class="string">            order&#123;</span></span><br><span class="line"><span class="string">                contract_id</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure>

<p>然后回到我们需要使用apollo的页面，使用如下方法进行查询</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$apollo.query(&#123;</span><br><span class="line">          query: sql.report1,</span><br><span class="line">          variables: &#123;</span><br><span class="line">            id: <span class="number">195</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          fetchPolicy:<span class="string">"no-cache"</span>,<span class="comment">//禁止缓存</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<img src="/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/1.png" class="" title="[如图，我们便得到了查询结果]">

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>graphql</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>graphql</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中路由守卫</title>
    <url>/2020/06/Vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/</url>
    <content><![CDATA[<p>Vue中路由守卫的详细用法</p>
<a id="more"></a>

<h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p><code>vue-router</code> 提供的导航守卫主要是用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局，单个路由独享，或者组件级</p>
<h2 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//to:Route:即将要进入的目标，路由对象</span></span><br><span class="line">    <span class="comment">//from:Route:当前导航正要离开的路由</span></span><br><span class="line">    <span class="comment">//next:Function:一定要调用该方法来 resolve 这个钩子 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home.vue'</span>),</span><br><span class="line">        meta: &#123;</span><br><span class="line">            auth: <span class="literal">true</span><span class="comment">//限制home要登录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/login.vue'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判断路由是否需要守卫</span></span><br><span class="line">    <span class="comment">//meta数据</span></span><br><span class="line">    <span class="keyword">if</span>(to.meta.auth)&#123;</span><br><span class="line">        <span class="comment">//是否登录</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">            next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="单个路由守卫"><a href="#单个路由守卫" class="headerlink" title="单个路由守卫"></a>单个路由守卫</h2><p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        component:  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home.vue'</span>),</span><br><span class="line">        meta: &#123;</span><br><span class="line">            auth: <span class="literal">true</span><span class="comment">//限制home要登录</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeEnter(to,<span class="keyword">from</span>,next)&#123;</span><br><span class="line">            <span class="comment">//是否登录</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">                next()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">                next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h2><p>可以在路由组件内直接定义以下导航守卫</p>
<ul>
<li>beforeRouteEnter</li>
<li>beforeRouteUpdate</li>
<li>beforeRouteLeave</li>
</ul>
<p>范例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//About.vue</span></span><br><span class="line">mounted()&#123;...&#125;,</span><br><span class="line">methods:&#123;...&#125;,</span><br><span class="line">beforeRouteEnter(to,<span class="keyword">from</span>,next)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.isLogin)&#123;<span class="comment">//登录了就直接跳转</span></span><br><span class="line">            next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class="line">        next(<span class="string">'/login?redirect='</span>+to.fullPath)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>通过router.addRoutes(routes)方式动态添加路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局守卫修改为：要求用户必须登录，否则只能去登录页</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.isLogin) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next(<span class="string">'/'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next(<span class="string">'/login?redirect='</span> + to.fullPath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Login.vue用户登录成功后动态添加/about</span></span><br><span class="line">login() &#123;</span><br><span class="line">    <span class="built_in">window</span>.isLogin = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.$router.addRoutes([</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">"/about"</span>, <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="keyword">this</span>.$route.query.redirect || <span class="string">"/"</span>;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(redirect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件化</title>
    <url>/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
    <content><![CDATA[<p>Vue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用程序界面都可以抽象为一个组件树。组件化可以提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。</p>
<a id="more"></a>

<h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>父给子传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child</span></span><br><span class="line">props:&#123; <span class="attr">msg</span>: <span class="built_in">String</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;HelloWorld msg=<span class="string">"hello world"</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>子给父传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'add'</span>, good)</span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line">&lt;Cart @add=<span class="string">"cartAdd($event)"</span>&gt;&lt;<span class="regexp">/Cart&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>任意两个组件之间传值常用事件总线或vuex的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bus:事件触发、监听和回调管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks=&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $on(name,fn)&#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks[name]=<span class="keyword">this</span>.callbacks[name]||[]</span><br><span class="line">        <span class="keyword">this</span>.callbacks[name].push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    $emit(name,args)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.callbacks[name])&#123;</span><br><span class="line">            <span class="keyword">this</span>.callbacks[name].forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(args))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Bus()</span><br><span class="line"></span><br><span class="line"><span class="comment">//child1</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//child2</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>

<p>实践中通常用Vue代替Bus,因为Vue已经实现了相应的接口</p>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>创建唯一的全局数据管理者store，通过他管理数据并通知组件状态变更</p>
<p>详细见<a href="https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/">Vue统一状态管理——Vuex</a></p>
<h2 id="parent-root"><a href="#parent-root" class="headerlink" title="$parent/$root"></a>$parent/$root</h2><p>兄弟组件之间通信可以通过共同的祖辈搭桥，$parent或$root,与Bus总线类似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//brother1</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$on(<span class="string">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//brother2</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$emit(<span class="string">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>

<h2 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h2><p>父组件可以通过$children访问子组件，实现父子通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="keyword">this</span>.$children[<span class="number">0</span>].xx = <span class="string">'xxx'</span></span><br></pre></td></tr></table></figure>
<p>  注意：$children不能保证子元素顺序 (异步组件)</p>
<h2 id="attr-listener"><a href="#attr-listener" class="headerlink" title="$attr/$listener"></a>$attr/$listener</h2><p>包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外)。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定(class和style除外)，并且可以通过 vbind=”$attrs”传入内部组件——在创建高级别的组件时非常有用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child:并未在props内声明foo</span></span><br><span class="line">&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/parent</span></span><br><span class="line"><span class="regexp">&lt;Helloworld foo = 'foo'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>获取子节点引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;Helloworld ref=<span class="string">'hw'</span>&gt;</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.hw.xx = <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><p>能够实现祖先和后代之间传值(依赖注入)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ancestor </span></span><br><span class="line">provide()&#123;<span class="comment">//与data、mounted平级</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo:<span class="string">'foooooo'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//descendant</span></span><br><span class="line">&lt;p&gt;&#123;&#123;foo&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">inject:['foo']</span></span><br></pre></td></tr></table></figure>
<p>也可以使用别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件中</span></span><br><span class="line">&lt;p&gt;&#123;&#123;bar&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">inject:&#123;bar:&#123;from:'foo'&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>  provide和inject主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p>
<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p>
<h2 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span>content...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Comp1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>将内容分发到子组件指定位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认插槽使用default做参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:default</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽使用插槽名做参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:content</span>&gt;</span>内容。。<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>分发内容要用到子组件中的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comp3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solt</span> <span class="attr">:foo</span>=<span class="string">"foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comp3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 把v-slot的值指定为作用域上下文对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-solt:default</span>=<span class="string">"soltProps"</span>&gt;</span></span><br><span class="line">        来自子组件数据：&#123;&#123;soltProps.foo&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Comp3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 作用域插槽 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对象解构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>=<span class="string">"&#123;fc&#125;"</span>&gt;</span>&#123;&#123;fc&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- children --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">:fc</span>=<span class="string">"footerContent"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/slots/Layout.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Layout</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// children </span></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        remark: [</span><br><span class="line">          <span class="string">'好好学习，天天向上'</span>,</span><br><span class="line">          <span class="string">'学习永远不晚'</span>,</span><br><span class="line">          <span class="string">'学习知识要善于思考,思考,再思考'</span>,</span><br><span class="line">          <span class="string">'学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始'</span>,</span><br><span class="line">          <span class="string">'构成我们学习最大障碍的是已知的东西,而不是未知的东西'</span>,</span><br><span class="line">          <span class="string">'在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事'</span>,</span><br><span class="line">          <span class="string">'三人行必有我师焉；择其善者而从之，其不善者而改之'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    footerContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.remark[<span class="keyword">new</span> <span class="built_in">Date</span>().getDay() - <span class="number">1</span>] </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue统一状态管理——Vuex</title>
    <url>/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/</url>
    <content><![CDATA[<p>Vuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状<br>态，并以相应的规则保证状态以可预测的方式发生变化。</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>vue add vuex</code></p>
<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>将应用全局状态定义在state中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line"> isLogin: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>修改State只能通过Mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    login(state) &#123;</span><br><span class="line">        state.isLogin = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    logout(state) &#123;</span><br><span class="line">        state.isLogin = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="获取和修改状态"><a href="#获取和修改状态" class="headerlink" title="获取和修改状态"></a>获取和修改状态</h2><p>使用store.state获取状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!$store.state.isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"logout"</span> <span class="attr">v-else</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改状态只能通过store.dispatch(mutation)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'login'</span>)</span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'logout'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数1是vuex传递的上下文context:&#123;commit,dispatch,state&#125;</span></span><br><span class="line">login(&#123;commit&#125;, username) &#123;</span><br><span class="line">    <span class="comment">//模拟登陆api调用，1s后如果登录名是admin则登陆成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (username === <span class="string">'admin'</span>) &#123;</span><br><span class="line">                commit(<span class="string">'login'</span>)</span><br><span class="line">                resolve()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>派发动作，触发actions</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'login'</span>, <span class="string">'admin'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$router.push(<span class="keyword">this</span>.$route.query.redirect)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'用户名或密码错误'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>使用modules定义多个子模块有利于组件复杂状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        user,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>移动先前登陆状态相关代码到store文件夹下新建的user.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,<span class="comment">//避免命名冲突</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问方式相应变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Login.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!$store.state.user.isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'user/login'</span>, <span class="string">'admin'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="keyword">this</span>.$route.query.redirect || <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">this</span>.$router.push(redirect)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'用户名或密码错误'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line">store.state.user.isLogin</span><br></pre></td></tr></table></figure>

<h2 id="mapState-mapMutation-mapAction"><a href="#mapState-mapMutation-mapAction" class="headerlink" title="mapState()/mapMutation()/mapAction()"></a>mapState()/mapMutation()/mapAction()</h2><p>通过这些映射方法可以让大家少敲几个字，而起避免对store的直接访问</p>
<p>state相关修改,<code>Login.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"login"</span> <span class="attr">v-if</span>=<span class="string">"!isLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(<span class="string">'user'</span>, [<span class="string">'isLogin'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>action相关修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">'user/login'</span>](<span class="string">"admin"</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapActions([<span class="string">'user/login'</span>,<span class="string">'user/logout'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><p>可以使用getters从store的state中派生出一些状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state:&#123;</span><br><span class="line">        isLogin:<span class="literal">false</span>,</span><br><span class="line">        username:<span class="string">''</span><span class="comment">//用户名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        login(state,username)&#123;</span><br><span class="line">            state.isLogin = <span class="literal">true</span></span><br><span class="line">            state.username = username</span><br><span class="line">        &#125;,</span><br><span class="line">        logout()&#123;</span><br><span class="line">            state.isLogin = <span class="literal">false</span></span><br><span class="line">            state.username = <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        welcome: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.username + <span class="string">',欢迎回来'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        login(&#123;commit&#125;,username)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(username===<span class="string">'admin'</span>)&#123;</span><br><span class="line">                        commit(<span class="string">'login'</span>,username)</span><br><span class="line">                        resolve()</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        reject()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">1000</span>)</span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在需要渲染的页面中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isLogin"</span>&gt;</span></span><br><span class="line">    &#123;&#123;welcome&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState,mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState(<span class="string">'user'</span>,[<span class="string">'isLogin'</span>])</span><br><span class="line">        ...mapGetters(<span class="string">'user'</span>,[<span class="string">'welcome'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。开启严格模式<code>strict: true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    strict: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Vuex的store接受plugins选项，这个选项暴露出每次mutation的钩子。Vuex插件就是一个函数，它接收 store 作为唯一参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 当 store 初始化后调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在store文件夹下新建plugins文件夹并新建persist.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store =&gt;&#123;</span><br><span class="line">    <span class="comment">//store初始化的时候，将存储在localStoreage的状态还原</span></span><br><span class="line">    <span class="keyword">if</span>(localStoreage)&#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'user'</span>))</span><br><span class="line">        <span class="keyword">if</span>(user)&#123;</span><br><span class="line">            store.commit(<span class="string">'login'</span>,user.username)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果用户相关状态发生变化，自动存入localStoreage</span></span><br><span class="line">    store.subscribe(<span class="function">(<span class="params">mutation,state</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//&#123;type:'user/login'&#125;</span></span><br><span class="line">        <span class="comment">//&#123;type:'user/logout'&#125;</span></span><br><span class="line">        <span class="comment">//&#123;type:'cart/addcart'&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(mutation.type===<span class="string">'user/login'</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> user = <span class="built_in">JSON</span>.stringify(state.user)</span><br><span class="line">            localStoreage.setItem(<span class="string">'user'</span>,user)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mutation.type===<span class="string">'user/logout'</span>)&#123;</span><br><span class="line">            localStoreage.removeItem(<span class="string">'user'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册插件：</p>
<p>在store的index.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">'./plugins/persist'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [persist]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue项目中动态加载js</title>
    <url>/2020/06/%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDjs/</url>
    <content><![CDATA[<p>通常情况下，如果网页加载的js文件较多并且文件较大的时候，一次性加载完毕的话，会非常的影响网页加载的速度，当然将会严重影响用户体验，最终会影响的站点的人气，所以我们要想办法解决这个问题。</p>
<a id="more"></a>

<p>很多时候，加载的js代码在当前页面功能中并不需要，所以如果能够根据需要动态的加载js文件，那么将会极大的提高网页的加载速度，下面就通过代码实例介绍一下如何动态加载js。</p>
<p>vue中常用的引入js文件的方式一般有三种</p>
<ul>
<li><p>在html文件中<code>&lt;script src=&quot;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>引入</p>
</li>
<li><p>在<code>main.js</code>或需要引用的<code>.vue</code>文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'../a'</span><span class="comment">//要用到export导出之后 才能用import导入.</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../a'</span><span class="comment">//和直接引入script标签是一样的</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>假设我们有这样一个比较极限的应用场景：</p>
<p>我们在登录页需要支持facebook，google，微信等十多个平台的第三方登录，并且每个第三方登录所需要的js文件特别大，用我们常规的用法去加载的话在用户第一次使用的时候就需要加载特别多的js文件，势必会造成用户体验不好的情况</p>
<p>那么我们应该怎么去优化呢</p>
<h1 id="vue-plugin-load-script"><a href="#vue-plugin-load-script" class="headerlink" title="vue-plugin-load-script"></a>vue-plugin-load-script</h1><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save vue-plugin-load-script</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In main.js</span></span><br><span class="line"><span class="keyword">import</span> LoadScript <span class="keyword">from</span> <span class="string">'vue-plugin-load-script'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(LoadScript);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//login.vue</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    wxLogin()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$loadScript(<span class="string">"https://wx登录需要的js"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Script is loaded, do something</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Failed to fetch script</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    googleLogin()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$loadScript(<span class="string">"https://谷歌登录需要的js"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Script is loaded, do something</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Failed to fetch script</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样用户点击什么登录方式就会去加载对应的第三方登录需要的js，从而避免了加载过多不需要的js造成页面性能浪费</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>必备知识之Vue-Cli</title>
    <url>/2020/06/%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%E4%B9%8BVue-Cli/</url>
    <content><![CDATA[<p>更快速构建vue项目</p>
<a id="more"></a>

<h1 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h1><p>你可以使用<code>vue serve</code>和<code>vue build</code>命令对单个vue文件快速进行原型开发</p>
<h2 id="安装-vue-cli-service-global扩展"><a href="#安装-vue-cli-service-global扩展" class="headerlink" title="安装@vue/cli-service-global扩展"></a>安装<code>@vue/cli-service-global</code>扩展</h2><p><code>npm install  -g @vue/cli-service-global</code></p>
<p>准备一个内容原型</p>
<h2 id="vue-serve"><a href="#vue-serve" class="headerlink" title="vue serve"></a>vue serve</h2><p>启动一个服务并运行原型</p>
<p><code>vue serve Hello.vue</code></p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="vue-create"><a href="#vue-create" class="headerlink" title="vue create"></a>vue create</h2><p>创建一个vue项目</p>
<p><code>vue create projectname</code></p>
<h2 id="vue-ui"><a href="#vue-ui" class="headerlink" title="vue ui"></a>vue ui</h2><p>图形化项目管理</p>
<p><code>vue ui</code></p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>Vue Cli使用了一套基于插件的架构。插件可以修改webpack的内部配置，也可以向vue-cli-serve注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的</p>
<h2 id="在现有的项目中安装插件"><a href="#在现有的项目中安装插件" class="headerlink" title="在现有的项目中安装插件"></a>在现有的项目中安装插件</h2><p>如果你想在一个已经被创建好的项目中安装一个插件，可以使用 <code>vue add</code> 命令</p>
<p><code>vue add router</code></p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="处理资源路径"><a href="#处理资源路径" class="headerlink" title="处理资源路径"></a>处理资源路径</h2><p>当你在JavaScript、css或vue文件中使用相对路径(必须以<code>.</code>开头)引用一个静态资源时，该资源将被webpack处理。(public中文件webpack不会处理)</p>
<h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>如果URL是一个绝对路径(例如<code>/images/foo.png</code>),他将会保留不变。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"/assets/logo.png"</span>&gt;</span>//当前服务器静态路径下 public会作为服务器静态路径</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"http://image.xx.com/logo.png"</span>&gt;</span>//某图片服务器线上地址</span><br></pre></td></tr></table></figure>

<p>如果URL以<code>.</code>开头会作为一个相对模块请求被解释并基于文件系统相对路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果URL以<code>~</code>开头会作为一个模块请求被解析，这意味着你甚至可以引用Node模块中的资源</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"vue logo"</span> <span class="attr">src</span>=<span class="string">"~some-npm-package/foo.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果URL以<code>@</code>开头会作为一个模块请求被解析，Vue Cli默认会设置一个指向<code>src</code>的别名<code>@</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/Hello.vue'</span></span><br></pre></td></tr></table></figure>

<h3 id="何时使用public文件夹"><a href="#何时使用public文件夹" class="headerlink" title="何时使用public文件夹"></a>何时使用<code>public</code>文件夹</h3><p>通过webpack的处理并获得如下好处：</p>
<ul>
<li><p>脚本和样式表会被压缩并且打包在一起，从而避免额外的网络请求</p>
</li>
<li><p>文件丢失会直接在编译时报错，而不是到了用户端才会产生404错误</p>
</li>
<li><p>最终生成的文件名包含了内容哈希，因此不用担心浏览器缓存他们的老版本</p>
</li>
</ul>
<p>以下的几种情况可以考虑使用public文件夹</p>
<ul>
<li><p>你需要在构建输出中指定一个固定的文件名字</p>
</li>
<li><p>你有上千个图片，需要动态引用他们的路径</p>
</li>
<li><p>有些库可能会和webpack不兼容，除了将其用一个独立的<code>&lt;script&gt;</code>标签引入没有别的办法</p>
</li>
</ul>
<h3 id="使用public文件夹的注意事项"><a href="#使用public文件夹的注意事项" class="headerlink" title="使用public文件夹的注意事项"></a>使用public文件夹的注意事项</h3><p>如果你的应用没有部署在域名的根部，那么你需要为你的URL配置<code>publicPath</code>前缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">    publicPath: precess.env.NODE_ENV === <span class="string">'production'</span>?<span class="string">'线上所在目录'</span>:<span class="string">'本地所在目录 正常为 / '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>public/index.html</code> 等通过<code>html-webpack-plugin</code>用作模板的HTML文件中，你需要用过<code>&lt;% =BASE_URL %&gt;</code> 设置链接前缀：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;% =BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在模板中，先向组件传入BASE_URL：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        publicPath: process.env.BASE_URL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用的时候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img :src=<span class="string">"`$&#123;publicPath&#125;my-image.png`"</span>&gt;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML中常用的meta便签</title>
    <url>/2020/07/HTML%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84meta%E4%BE%BF%E7%AD%BE/</url>
    <content><![CDATA[<p><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</p>
<p><code>&lt;meta&gt;</code>标签位于文档的头部，不包含任何内容。<code>&lt;meta&gt;</code>标签的属性定义了与文档相关联的名称/值对。</p>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>标签提供关于HTML文档的元数据。它不会显示在页面上，但是对于机器是可读的。可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>meta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的http头部内容，例如我们为页面中添加如下meta标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"charset"</span> <span class="attr">content</span>=<span class="string">"iso-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"31 Dec 2008"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器的头部就会包括这些:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">charset:iso-8859-1</span><br><span class="line">expires:31 Dec 2008</span><br></pre></td></tr></table></figure>
<p>只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
  </entry>
  <entry>
    <title>自己动手封装一个Vue表单组件</title>
    <url>/2020/06/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAVue%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>仿element-ui封装一个通用的表单组件</p>
<a id="more"></a>

<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ul>
<li><p>实现JForm</p>
<ul>
<li>指定数据，校验规则</li>
</ul>
</li>
<li><p>JFormItem</p>
<ul>
<li>执行校验</li>
<li>显示错误信息</li>
</ul>
</li>
<li><p>JInput</p>
<ul>
<li>维护数据</li>
</ul>
</li>
</ul>
<p>最终理想效果：<a href="https://element.eleme.cn/#/zh-CN/component/form" target="_blank" rel="noopener">element Form 表单</a></p>
<h1 id="JInput"><a href="#JInput" class="headerlink" title="JInput"></a>JInput</h1><p>创建components/form/JInput.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 自定义组件双向绑定：:value  @input --&gt;</span><br><span class="line">    &lt;!-- v-bind&#x3D;&quot;$attrs&quot;展开$attrs 每一个项都可以单独设置上去 --&gt;</span><br><span class="line">    &lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">  export default &#123;</span><br><span class="line">    inheritAttrs: false, &#x2F;&#x2F; 设置为false避免attrs设置到根元素上</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      type: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;text&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onInput(e) &#123;</span><br><span class="line">        &#x2F;&#x2F; 派发一个input事件即可</span><br><span class="line">        this.$emit(&#39;input&#39;, e.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JInput"><a href="#使用JInput" class="headerlink" title="使用JInput"></a>使用JInput</h1><p>创建components/form/index.vue，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class="line">        &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实现JFormItem"><a href="#实现JFormItem" class="headerlink" title="实现JFormItem"></a>实现JFormItem</h1><p>创建components/form/JFormItem.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class="line">            type:String,</span><br><span class="line">            default:&#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JFormItem"><a href="#使用JFormItem" class="headerlink" title="使用JFormItem"></a>使用JFormItem</h1><p>在components/form/index.vue中添加基础代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class="line">        &lt;j-form-item label&#x3D;&quot;用户名&quot;&gt;</span><br><span class="line">            &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;&#x2F;j-form-item&gt;</span><br><span class="line">        &lt;j-form-item label&#x3D;&quot;密码&quot;&gt;</span><br><span class="line">            &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class="line">        &lt;&#x2F;j-form-item&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput,JFormItem</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实现JForm"><a href="#实现JForm" class="headerlink" title="实现JForm"></a>实现JForm</h1><p>创建components/form/JForm.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    provide() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            form: this &#x2F;&#x2F; 将组件实例作为提供者，子代组件可方便获取</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        model: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">            type: Object</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用JForm"><a href="#使用JForm" class="headerlink" title="使用JForm"></a>使用JForm</h1><p>在components/form/index.vue中添加基础代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; </span><br><span class="line">    &lt;!-- JForm --&gt;</span><br><span class="line">    &lt;JForm :model&#x3D;&quot;userInfo&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;!-- 用户名 --&gt;</span><br><span class="line">      &lt;JFormItem label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;JInput v-model&#x3D;&quot;userInfo.username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">      &lt;!-- 密码 --&gt;</span><br><span class="line">      &lt;JFormItem label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;JInput type&#x3D;&quot;password&quot; v-model&#x3D;&quot;userInfo.password&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">      &lt;!-- 提交按钮 --&gt;</span><br><span class="line">      &lt;JFormItem&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;JFormItem&gt;</span><br><span class="line">    &lt;&#x2F;JForm&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class="line">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class="line">import JForm from &quot;.&#x2F;JForm&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        JInput,JFormItem,JForm</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            rules: &#123;</span><br><span class="line">                username: [&#123; required: true, message: &quot;请输入用户名&quot; &#125;],</span><br><span class="line">                password: [&#123; required: true, message: &quot;请输入密码&quot; &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        login()&#123;</span><br><span class="line">            this.$refs[&#39;loginForm&#39;].validate(valid &#x3D;&gt; &#123;</span><br><span class="line">                if(valid)&#123;</span><br><span class="line">                    alert(&quot;请求登录&quot;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&quot;请求失败&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h1><p>JInput中通知校验，修改components/form/JInput.vue中代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- dom --&gt;</span><br><span class="line">&lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- methods --&gt;</span><br><span class="line">onInput(e) &#123;</span><br><span class="line">    &#x2F;&#x2F; 派发一个input事件即可</span><br><span class="line">    this.$emit(&#39;input&#39;, e.target.value)</span><br><span class="line">    &#x2F;&#x2F; 通知父级执行校验</span><br><span class="line">    this.$parent.$emit(&#39;validate&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JFormItem监听校验通知，获取规则并执行校验，修改components/form/JFormItem.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    inject:[&#39;form&#39;],&#x2F;&#x2F;注入</span><br><span class="line">    mounted()&#123;&#x2F;&#x2F;监听校验事件</span><br><span class="line">        this.$on(&#39;validate&#39;,()&#x3D;&gt;&#123;this.validate()&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        validate()&#123;</span><br><span class="line">            &#x2F;&#x2F;获取对应JFormItem的校验规则</span><br><span class="line">            console.log(this.form.rules[this.prop]);</span><br><span class="line">            &#x2F;&#x2F;获取对应JFormItem的值</span><br><span class="line">            console.log(this.form.model[this.prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class="line">            type:String,</span><br><span class="line">            default:&#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        prop: &#123;</span><br><span class="line">            type: String</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>安装校验库async-validator： <code>npm i async-validator -S</code></p>
<p>在components/form/JFormItem.vue中引入，并添加校验代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">"async-validator"</span>;</span><br><span class="line">...</span><br><span class="line">validate()&#123;</span><br><span class="line">    <span class="comment">//获取对应校验规则</span></span><br><span class="line">    <span class="keyword">const</span> rules = <span class="keyword">this</span>.form.rules[<span class="keyword">this</span>.prop];</span><br><span class="line">    <span class="comment">//获取校验值</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.form.model[<span class="keyword">this</span>.prop];</span><br><span class="line">    <span class="comment">//获取描述对象</span></span><br><span class="line">    <span class="keyword">const</span> desc = &#123;[<span class="keyword">this</span>.prop]:rules&#125;;</span><br><span class="line">    <span class="comment">//创建Schema实例</span></span><br><span class="line">    <span class="keyword">const</span> schema = <span class="keyword">new</span> Schema(desc)</span><br><span class="line">    <span class="keyword">return</span> schema.validate(&#123;[<span class="keyword">this</span>.prop]:value&#125;,errors =&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(errors)&#123;</span><br><span class="line">            <span class="keyword">this</span>.error=errors[<span class="number">0</span>].message</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//校验通过</span></span><br><span class="line">            <span class="keyword">this</span>.error=<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="表单全局校验"><a href="#表单全局校验" class="headerlink" title="表单全局校验"></a>表单全局校验</h1><p>为JForm提供validate方法，修改components/form/JForm.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validate(cb)&#123;</span><br><span class="line">    <span class="comment">// 获取所有孩子KFormItem</span></span><br><span class="line">    <span class="comment">// [resultPromise]</span></span><br><span class="line">    <span class="keyword">const</span> task = <span class="keyword">this</span>.$children</span><br><span class="line">    .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.prop) <span class="comment">// 过滤掉没有prop属性的Item</span></span><br><span class="line">    .map(<span class="function"><span class="params">item</span> =&gt;</span> item.validate())</span><br><span class="line">    <span class="comment">//统一处理所有的Promise结果</span></span><br><span class="line">    <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> cb(<span class="literal">true</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span>=&gt;</span> cb(<span class="literal">false</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中v-if和v-for的优先级</title>
    <url>/2020/07/Vue%E4%B8%ADv-if%E5%92%8Cv-for%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化才能得到更好的性能？</p>
<a id="more"></a>

<p>当v-if和v-for同级的时候，我们写一个例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"child in children"</span> <span class="attr">v-if</span>=<span class="string">"isFolder"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#demo"</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    children:[</span><br><span class="line"><span class="actionscript">                        &#123;title:<span class="string">'foo'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;title:<span class="string">'bar'</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line">                isFolder()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.children&amp;&amp;<span class="keyword">this</span>.children.length&gt;<span class="number">0</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(app.$options.render)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>生成的渲染函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'div'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"demo"</span>&#125;&#125;,_l((children),<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;<span class="keyword">return</span> (isFolder)?_c(<span class="string">'p'</span>,[_v(_s(child.title))]):_e()&#125;),<span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样我们可以看出来是循环先执行，isFolder判断后执行</p>
</blockquote>
<p>当v-if和v-for不同级的时候，我们先调整下dom区域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">'isFolder'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"child in children"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两者不同级时，渲染函数入下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'div'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"demo"</span>&#125;&#125;,[(isFolder)?_l((children),<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'p'</span>,[_v(_s(child.title))])&#125;):_e()],<span class="number">2</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先判断了isFolder再看是否执行-l</p>
</blockquote>
<p><strong>结论</strong></p>
<ol>
<li>显然v-for优先于v-if被解析</li>
<li>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何，循环都不可避免，浪费了性能</li>
<li>要避免出现这种情况，可以在外层嵌套template,然后在这一层进行v-if判断，然后在内部进行v-for循环</li>
<li>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中key的作用和工作原理</title>
    <url>/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>一般我们会回答：可以唯一的确定一个dom元素，从而执行diff算法的时候更高效。</p>
<p>但是到底为什么是这样呢，我们来从源码中找一下答案。</p>
<a id="more"></a>

<p>准备测试代码,在页面加载两秒后执行一个插入操作，在c的前面插入一个f</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#demo"</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    items:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted()&#123;</span><br><span class="line"><span class="javascript">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.items.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'f'</span>)</span></span><br><span class="line">                &#125;,2000)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不使用key，其实并不知道要更新谁，只能做一个操作，就是逐步更新：</p>
<p>首先更新a，其次更新b，第三步的时候覆盖更新，将f更新到原来的c上，c更新到原来的d，d更新到e，然后再创建一个新的e追加在最后。执行了五次更新一次创建追加。</p>
<p>如果使用了key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前两次更新与不使用key一样</span><br><span class="line">&#x2F;&#x2F;首次循环patch a</span><br><span class="line">a b c d e</span><br><span class="line">a b f c d e </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第2次循环patch b</span><br><span class="line">b c d e</span><br><span class="line">b f c d e</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第3次循环patch e</span><br><span class="line">c d e</span><br><span class="line">f c d e</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第4次循环patch d</span><br><span class="line">c d </span><br><span class="line">f c d </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第5次循环patch c</span><br><span class="line">c</span><br><span class="line">f c </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;oldch全部处理结束，newch中剩下f，创建f并插入到c前面</span><br></pre></td></tr></table></figure>

<p>这边虽然看上去是执行了五次更新，但是这五次并没有发生任何操作，因为是在更新五个完全相同的节点。因为数据没有发生变化，所以在执行patch是不会做任何事情，也不会发生任何dom操作。</p>
<p>因此准确的来讲，如果不使用key我们执行了三次更新同时一次创建插入操作；而使用了key只做了一次创建插入操作，在数据量比较大的时候运行效率会大大提高。</p>
<p>打开控制台，在vue.js的第6182行加上一个断点，并将oldStartVnode的标签指定在p标签上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//断点所在行</span></span><br><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;......&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右键编辑断点，加上以下条件 这样以后在update children时只观察p标签的变化</span></span><br><span class="line">oldStartVnode.tag===<span class="string">'p'</span></span><br></pre></td></tr></table></figure>
<p>然后刷新页面，我们可以看到，每次都会进入以下逻辑</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/1.png" class="" title="[sameVnode]">

<p>我们进到sameVnode()中看一下</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/2.png" class="" title="[sameVnode]">

<p>判断的条件第一条就是判断key的值是否相等，两个undefined会让等式成立，标签相同，都不是注释，data也没有发生变化，也不是input，因此判断条件已经成立了。如果没有设置key的情况下，只要两个标签相同，就会被认为是同一节点，就开始进行patch操作。</p>
<p>我们将key加上，再看一下结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前两次直接跳过，因为a、b都是相同的节点，到第三次的时候，就会进入到patch e中</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/3.png" class="" title="[sameVnode]">

<p>到第五次循环时，老的已经循环结束了，新的只剩下了f</p>
<img src="/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/4.png" class="" title="[sameVnode]">

<p>并且在debug的过程中我们也不难看出，设置了key的只会在最后一步更新，而未设置key的会从第三次开始，每次在视图上做出更新。</p>
<p><strong>结论</strong></p>
<ol>
<li><p>key的作用主要是为了更高效的更新虚拟dom，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同的元素，使得整个patch过程更加的高效，减少dom操作量，提高性能。</p>
</li>
<li><p>另外，如果不设置key还可能在列表更新时引发一些隐蔽的bug(例如：更新了某一不需要更新的行)</p>
</li>
<li><p>vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果 </p>
</li>
</ol>
<blockquote>
<p>2.2.0+ 的版本里，当在组件中使用v-for时，key现在是必须的，key的取值需要是number或者string，而且需要在同级唯一。</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题(一)</title>
    <url>/2020/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%80)/</url>
    <content><![CDATA[<p>整理了一些之前面试遇到的题</p>
<a id="more"></a>


<h2 id="NAN-NAN-是否成立，为什么？"><a href="#NAN-NAN-是否成立，为什么？" class="headerlink" title="NAN === NAN 是否成立，为什么？"></a><code>NAN === NAN</code> 是否成立，为什么？</h2><p>不成立。因为JavaScript规定，NaN表示的是非数字，但是这个非数字也是不同的，因此 NaN 不等于 NaN，两个NaN永远不可能相等。</p>
<h2 id="0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？"><a href="#0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？" class="headerlink" title="0.1+0.2 == 0.3和 0.1+0.2 === 0.3 哪个成立，为什么？"></a><code>0.1+0.2 == 0.3</code>和 <code>0.1+0.2 === 0.3</code> 哪个成立，为什么？</h2><p>都不成立.在正常的数学逻辑思维中，0.1+0.2=0.3这个逻辑是正确的，但是在JavaScript中0.1+0.2！==0.3，这是为什么呢？在JavaScript中的二进制的浮点数0.1和0.2并不是十分精确，在他们相加的结果并非正好等于0.3，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为false。</p>
<blockquote>
<p>可以通过 <code>(0.1 + 0.2).toFixed(2) // &quot;0.30&quot;</code> 和 <code>parseFloat((0.1 + 0.2).toFixed(2)) //0.3</code> 的方法使<code>0.1+0.2==0.3</code></p>
</blockquote>
<h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p><strong>如果一个函数用到了它作用域外面的变量，那么这个变量和这个函数之间的环境就叫闭包。</strong></p>
<p>举一个简单的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Joker = <span class="string">"帅"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Joker</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fun()();<span class="comment">//输出：'帅'</span></span><br><span class="line"><span class="comment">//当然我们也可以这样，等同于fun()()</span></span><br><span class="line"><span class="keyword">var</span> temfun = fun();</span><br><span class="line"><span class="built_in">console</span>.log(temfun())</span><br></pre></td></tr></table></figure>

<p><strong>闭包的使用场景</strong></p>
<p>封装局部变量</p>
<p>例如：一个游戏，主人公有10条命，我们如果把<code>var live=10</code>写在全局作用域的话，全局中任何地方都能调用修改，就会出现安全性，容易出bug。</p>
<p>但如果写在局部作用域，会有如下问题：</p>
<ul>
<li><p>在全局环境中调用不了</p>
</li>
<li><p>局部环境执行完毕后，会被清出环境栈，局部环境中的变量和函数都会垃圾回收机制回收。</p>
</li>
</ul>
<p>因此我们用闭包去将<code>var live=10</code>变量封装起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">liveFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> live = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//以下是闭包函数代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">condition</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(condition==<span class="string">'add'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> live+=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(condition==<span class="string">'reduce'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> live-=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> live=liveFun()</span><br><span class="line"><span class="built_in">console</span>.log(live(<span class="string">'add'</span>)); <span class="comment">//执行闭包函数 ，10+1=11，输出：11</span></span><br><span class="line"><span class="built_in">console</span>.log(live(<span class="string">'reduce'</span>)); <span class="comment">//执行闭包函数 ，11-1=10，输出：10</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数与普通函数的区别？"><a href="#箭头函数与普通函数的区别？" class="headerlink" title="箭头函数与普通函数的区别？"></a>箭头函数与普通函数的区别？</h2><p>区别：</p>
<ul>
<li>箭头函数没有自己的<code>this</code>属性，<code>arguments</code>属性、而普通函数有，箭头函数的<code>this</code>指向当前函数作用域的<code>this</code>。</li>
<li>箭头函数没有不能使用<code>new</code>命令，因为没有自己的<code>this</code>，无法调用<code>call</code>，<code>apply</code>，没有prototype显示原型，所以不能作为构造函数。</li>
<li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数。</li>
</ul>
<p>箭头函数的好处：</p>
<ul>
<li>没有箭头函数的时候，函数闭包<code>var that = this</code>的事没少干，有了箭头函数，就不需要这么写了</li>
<li>极简语法，函数式风格</li>
</ul>
<h2 id="js原型原型链"><a href="#js原型原型链" class="headerlink" title="js原型原型链"></a>js原型原型链</h2><p><strong>首先我们要清除明白两个概念</strong></p>
<ul>
<li><p>js分为函数对象和普通对象，每个对象都有<code>__proto__</code>属性，但是只有函数对象才有<code>prototype</code>属性</p>
</li>
<li><p>Object、Function都是js的内置函数，类似的还有我们常用的Array,RegExp、Date、Boolean、Number、String</p>
</li>
<li><p>属性<code>prototype</code>是一个对象，他有两个属性，<code>constructor</code>和<code>__proto__</code>;</p>
</li>
<li><p>原型对象<code>prototype</code>有一个默认的<code>constructor</code>属性，用于记录实例是由哪个构造函数创建；</p>
</li>
</ul>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有以下构造函数Person，他的原型上有所属国属性motherland='china'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.motherland = <span class="string">'china'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过new Person()创建的persson01实例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> persion01 = <span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>js在设计原型、原型链的时候遵从以下两个准则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Person.prototype.constructor == Person <span class="comment">// **准则1：原型对象（即Person.prototype）的constructor指向构造函数本身**</span></span><br><span class="line"><span class="number">2.</span> person01.__proto__ == Person.prototype <span class="comment">// **准则2：实例（即person01）的__proto__和原型对象指向同一个地方**</span></span><br></pre></td></tr></table></figure>
<p>举个例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">f1</span> = <span class="title">new</span> <span class="title">Foo</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">f2</span> = <span class="title">new</span> <span class="title">Foo</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">f1</span>.<span class="title">__proto__</span> = <span class="title">Foo</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"><span class="title">f2</span>.<span class="title">__proto__</span> = <span class="title">Foo</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Foo</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">Object</span>.<span class="title">prototype</span>; //准则2 （<span class="title">Foo</span>.<span class="title">prototype</span>本身也是普通对象，适用于准则2）</span></span><br><span class="line"><span class="function"><span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">null</span>;//原型链到此停止</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Foo</span>.<span class="title">prototype</span>.<span class="title">constructor</span> = <span class="title">Foo</span>; // 准则1</span></span><br><span class="line"><span class="function"><span class="title">Foo</span>.<span class="title">__proto__</span> = <span class="title">Function</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"><span class="title">Function</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">Object</span>.<span class="title">prototype</span>;//准则2</span></span><br><span class="line"><span class="function"><span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">__proto__</span> = <span class="title">null</span>;//原型链到此停止</span></span><br><span class="line"><span class="function">// **此处注意<span class="title">Foo</span> 和 <span class="title">Function</span>的区别， <span class="title">Foo</span>是 <span class="title">Function</span>的实例**</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了Object的原型对象（Object.prototype）的<strong>proto</strong>指向null，其他内置函数对象的原型对象（例如：Array.prototype）和自定义构造函数的<strong>proto</strong>都指向Object.prototype, 因为原型对象本身是普通对象。即：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.__proto__ = <span class="built_in">Object</span>.prototype;</span><br><span class="line">Foo.prototype.__proto__  = <span class="built_in">Object</span>.prototype;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原型对象的作用，是用来存放实例中共有的那部份属性、方法，可以大大减少内存消耗。</p>
</blockquote>
<h2 id="em、rem-是什么？"><a href="#em、rem-是什么？" class="headerlink" title="em、rem 是什么？"></a>em、rem 是什么？</h2><ul>
<li><p>em：em是相对于⽗元素的尺⼨单位</p>
</li>
<li><p>rem：相对于html元素的尺⼨单位（html默认font-size:16px）</p>
</li>
</ul>
<h2 id="Vue为什么使用虚拟dom？"><a href="#Vue为什么使用虚拟dom？" class="headerlink" title="Vue为什么使用虚拟dom？"></a>Vue为什么使用虚拟dom？</h2><h2 id="promise和callback的区别"><a href="#promise和callback的区别" class="headerlink" title="promise和callback的区别"></a>promise和callback的区别</h2><!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件data为何要函数形式</title>
    <url>/2020/07/Vue%E7%BB%84%E4%BB%B6data%E4%B8%BA%E4%BD%95%E8%A6%81%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<p>Vue组件中data为什么必须是个函数，而Vue的根实例则没有此限制</p>
<a id="more"></a>

<blockquote>
<p>函数每次执行都会返回全新的data对象实例</p>
</blockquote>
<p>测试代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'comp'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123;counter&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">            data:&#123;counter:0&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#demo"</span>,</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们查看源码研究一下数据是如何初始化的,源码位置<code>src\core\instance\state.js-initData()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果data是函数，则执行之并将其结果作为data选项的值否则则会执行用户设置的data</span></span><br><span class="line">data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果每一个组件都是使用的对象来设置data,那么将会作为将来组件实例里的data选项，Vue.component组件的时候其实只执行了一次，每一次初始化的时候对于两个comp的data指向的将会是同一个地方，一个组件的不同实例直接的数据就共享了，会产生数据污染。</p>
</blockquote>
<p>我们看一下控制台的报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue.js:<span class="number">634</span> [Vue warn]: The <span class="string">"data"</span> option should be a <span class="function"><span class="keyword">function</span> <span class="title">that</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">per</span>-<span class="title">instance</span> <span class="title">value</span> <span class="title">in</span> <span class="title">component</span> <span class="title">definitions</span>.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程序甚至无法通过vue检测</p>
</blockquote>
<p>我们接下来再看一下为什么根实例中data可以直接用对象,测试代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'comp'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123;counter&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">            data()&#123;<span class="keyword">return</span> &#123;counter:<span class="number">1</span>&#125;&#125;</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#demo"</span>,</span></span><br><span class="line">            data:&#123;counter:1&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从逻辑上来讲，在全局范围内根实例是单例的，不会存在多实例的问题，我们再看一下源码中是怎么处理的<br><code>src/core/instance/init.js-initMinx()-Vue-_init</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// merge options 合并选项</span></span><br><span class="line"><span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;<span class="comment">//自定义组件</span></span><br><span class="line">    <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">    <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">    <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">    initInternalComponent(vm, options)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//根实例</span></span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再看一下<code>src/core/util/options.js</code>中对data的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">strats.data = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!vm) &#123;<span class="comment">//只有当根实例创建的时候vm才会存在，普通组件VM不存在，所以进入方法</span></span><br><span class="line">    <span class="keyword">if</span> (childVal &amp;&amp; <span class="keyword">typeof</span> childVal !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">'The "data" option should be a function '</span> +</span><br><span class="line">        <span class="string">'that returns a per-instance value in component '</span> +</span><br><span class="line">        <span class="string">'definitions.'</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> parentVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<p>Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态<br>变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返<br>回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也<br>是因为根实例只能有一个，不需要担心这种情况。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue弹窗组件(一)</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/</url>
    <content><![CDATA[<p>本文讲述如何使用<code>render()</code>，构造一个弹窗组件</p>
<p><a href="https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/">点击这里查看</a>,使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>
<a id="more"></a>

<p>弹窗这类组件的特点是他们<strong>在当前vue实例之外独立存在</strong>，通常挂载于body；他们是通过JS动态创建的，不需要在任何组件中声明。常见的使用姿势：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$create(Notice, &#123;</span><br><span class="line">    title: <span class="string">"标题"</span>,</span><br><span class="line">    message: <span class="string">"提示信息"</span>,</span><br><span class="line">    duration: <span class="number">2000</span><span class="comment">//延时时间</span></span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure>

<h2 id="create函数"><a href="#create函数" class="headerlink" title="create函数"></a>create函数</h2><p>创建utils/create.js,并添加以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">Component,props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 组件构造函数如何获取？</span></span><br><span class="line">    <span class="comment">// 1.Vue.extend()</span></span><br><span class="line">    <span class="comment">// 2.render</span></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="comment">// h是createElement, 返回VNode，是虚拟dom</span></span><br><span class="line">        <span class="comment">// 需要挂载才能变成真实dom</span></span><br><span class="line">        render: <span class="function"><span class="params">h</span> =&gt;</span> h(Component, &#123;props&#125;),</span><br><span class="line">    &#125;).$mount() <span class="comment">// 不指定宿主元素，则会创建真实dom，但是不会追加操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取真实dom————vm.$el,并挂载到body上</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(vm.$el)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> comp = vm.$children[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    comp.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(vm.$el)</span><br><span class="line">        vm.$destroy()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> comp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> create</span><br></pre></td></tr></table></figure>

<h2 id="弹窗组件"><a href="#弹窗组件" class="headerlink" title="弹窗组件"></a>弹窗组件</h2><p>新建弹窗组件，<code>Notice.vue</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;box&quot; v-if&#x3D;&quot;isShow&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;box-content&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    message: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    duration: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 1000</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">      this.isShow &#x3D; true;</span><br><span class="line">      setTimeout(this.hide, this.duration);</span><br><span class="line">    &#125;,</span><br><span class="line">    hide() &#123;</span><br><span class="line">      this.isShow &#x3D; false;</span><br><span class="line">      &#x2F;&#x2F; 清除自己</span><br><span class="line">      this.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  top: 16px;</span><br><span class="line">  left: 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  border: grey 3px solid;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.box-content &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">  font-size: 14px;  </span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  margin-bottom: 8px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="使用弹窗组件"><a href="#使用弹窗组件" class="headerlink" title="使用弹窗组件"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Notice <span class="keyword">from</span> <span class="string">"@/components/Notice.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> create <span class="keyword">from</span> <span class="string">'./utils/create'</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    showNotice() &#123;</span><br><span class="line">        create(Notice, &#123;</span><br><span class="line">            title: <span class="string">"标题"</span>,</span><br><span class="line">            message: <span class="string">"提示信息"</span>,</span><br><span class="line">            duration: <span class="number">2000</span><span class="comment">//延时时间</span></span><br><span class="line">        &#125;).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue弹窗组件(二)</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/</url>
    <content><![CDATA[<p>本文讲述如何使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>
<p><a href="https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/">点击这里查看</a>，查看如何使用<code>render()</code>,构造一个弹窗组件</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在<code>components</code>文件夹下新建<code>Tools</code>文件夹用于存放所有的全局组件，<code>Tools</code>文件夹下新增<code>Notice</code>文件夹，并在其中新建<code>Notice.vue</code>和<code>Notice.js</code></p>
<h2 id="修改Notice-js"><a href="#修改Notice-js" class="headerlink" title="修改Notice.js"></a>修改<code>Notice.js</code></h2><p>在<code>Notice.js</code>中添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Notice <span class="keyword">from</span> <span class="string">'./Notice.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取组件构造器</span></span><br><span class="line"><span class="keyword">const</span> notice = Vue.extend(Notice);</span><br><span class="line"><span class="keyword">let</span> VM = <span class="string">''</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!props.text) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!VM) &#123;</span><br><span class="line">      <span class="keyword">const</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      <span class="comment">// 创建notice实例</span></span><br><span class="line">      VM = <span class="keyword">new</span> notice(&#123; <span class="attr">el</span>: oDiv &#125;);</span><br><span class="line">      <span class="comment">// 并把实例化的模板插入body</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(VM.$el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置属性</span></span><br><span class="line">    VM.type = type;</span><br><span class="line">    VM.text = props.text;</span><br><span class="line">    VM.timeout = !props.timeout&amp;&amp;props.timeout!=<span class="number">0</span>?<span class="number">3000</span>:props.timeout;</span><br><span class="line">    VM.show = <span class="literal">true</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      VM.show = <span class="literal">false</span>;</span><br><span class="line">    &#125;, VM.timeout);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> SHOW = AModal();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warning</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'warning'</span>, props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'info'</span>, props);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'success'</span>,props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  SHOW(<span class="string">'error'</span>, props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  warning,</span><br><span class="line">  success,</span><br><span class="line">  info,</span><br><span class="line">  error</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="编写弹窗组件"><a href="#编写弹窗组件" class="headerlink" title="编写弹窗组件"></a>编写弹窗组件</h2><p>在<code>Notice.vue</code>中，添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if&#x3D;&quot;show&quot; class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">      &lt;div :class&#x3D;&quot;type&quot;&gt;</span><br><span class="line">        &lt;strong&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;strong&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&quot;show&quot;, &quot;text&quot;, &quot;type&quot;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  top: 16px;</span><br><span class="line">  left: 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  border: grey 3px solid;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.success &#123;</span><br><span class="line">  background: #4caf50 !important;</span><br><span class="line">&#125;</span><br><span class="line">.info &#123;</span><br><span class="line">  background: #2196f3 !important;</span><br><span class="line">&#125;</span><br><span class="line">.warning &#123;</span><br><span class="line">  background: #ffc107 !important;</span><br><span class="line">&#125;</span><br><span class="line">.error &#123;</span><br><span class="line">  background: #ff1744 !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h2><p>在<code>main.js</code>中，添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> notice <span class="keyword">from</span> <span class="string">'./components/Tools/Notice/Notice'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$notice = notice</span><br></pre></td></tr></table></figure>

<h2 id="使用弹窗组件"><a href="#使用弹窗组件" class="headerlink" title="使用弹窗组件"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$notice.info(&#123;<span class="attr">text</span>:<span class="string">"Joker真帅"</span>,<span class="attr">timeout</span>:<span class="number">9999</span>&#125;)</span><br><span class="line"><span class="keyword">this</span>.$notice.success(&#123;<span class="attr">text</span>:<span class="string">"Joker真帅"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>就可以尽情使用了</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简易Vuex</title>
    <url>/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/</url>
    <content><![CDATA[<p>在阅读本篇之前，希望你已经对vuex的用法有了一定了解。可以参考一下<a href="https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/">Vue统一状态管理——Vuex</a>。</p>
<a id="more"></a>

<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex<strong>集中式</strong>存储管理应用的所有组件的状态，并以相应的规则保证状态以<strong>可预测</strong>的方式发生改变</p>
<img src="/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/1.png" class="" title="[第一步]">

<h2 id="整合vuex"><a href="#整合vuex" class="headerlink" title="整合vuex"></a>整合vuex</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add vuex</span><br></pre></td></tr></table></figure>

<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li>state 状态、数据</li>
<li>mutations 更改状态的函数</li>
<li>actions 异步操作</li>
<li>store 包含以上概念的容器</li>
</ul>
<h2 id="状态-state"><a href="#状态-state" class="headerlink" title="状态 - state"></a>状态 - state</h2><p>state保存应用状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123; <span class="attr">counter</span>:<span class="number">0</span> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="状态变更-mutations"><a href="#状态变更-mutations" class="headerlink" title="状态变更 - mutations"></a>状态变更 - mutations</h2><p>mutations用于修改状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add(state) &#123;</span><br><span class="line">            state.counter++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="派生状态-getters"><a href="#派生状态-getters" class="headerlink" title="派生状态 - getters"></a>派生状态 - getters</h2><p>从state派生出新状态，类似计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doubleCounter(state) &#123; <span class="comment">// 计算剩余数量</span></span><br><span class="line">            <span class="keyword">return</span> state.counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="动作-actions"><a href="#动作-actions" class="headerlink" title="动作 - actions"></a>动作 - actions</h2><p>添加业务逻辑，类似于controller</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        add(&#123; commit &#125;) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; commit(<span class="string">'add'</span>)&#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add')"</span>&gt;</span>counter: &#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('add')"</span>&gt;</span>async counter: &#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>double：&#123;&#123;$store.getters.doubleCounter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vuex原理解析"><a href="#Vuex原理解析" class="headerlink" title="Vuex原理解析"></a>Vuex原理解析</h1><h2 id="目标分析："><a href="#目标分析：" class="headerlink" title="目标分析："></a>目标分析：</h2><ul>
<li>实现一个插件：声明store类，挂载$store</li>
<li>Store具体实现：<ul>
<li>创建响应式的state，保存mutations、actions和getters</li>
<li>实现commit根据用户传入的type，执行对应的mutation</li>
<li>实现dispatch根据用户传入的type执行对应的action，同时传递上下文</li>
<li>实现getters，按照getters定义对state做派生</li>
</ul>
</li>
</ul>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Store声明、install实现，jvuex.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jvuex</span></span><br><span class="line"><span class="keyword">let</span> Vue <span class="comment">//保存构造函数的引用，避免import</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="comment">//响应化处理state</span></span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: options.state</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>)</span>&#123;</span><br><span class="line">    Vue = _Vue</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.$options.store)&#123;</span><br><span class="line">                Vue.prototype.$store = <span class="keyword">this</span>.$options.store</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    Store,</span><br><span class="line">    install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-commit"><a href="#实现-commit" class="headerlink" title="实现 commit"></a>实现 commit</h2><p>根据用户传入type获取并执行对应的mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改 Store类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>._mutations = options.mutations</span><br><span class="line">        <span class="comment">//响应化处理state</span></span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: options.state</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// store.commit('add',1)</span></span><br><span class="line">    <span class="comment">//type:mutation的类型</span></span><br><span class="line">    <span class="comment">//payload：载荷，参数</span></span><br><span class="line">    commit(type,payload)&#123;</span><br><span class="line">        <span class="keyword">const</span> entry = <span class="keyword">this</span>._mutations[type]</span><br><span class="line">        <span class="keyword">if</span>(entry)&#123;</span><br><span class="line">            entry(<span class="keyword">this</span>.state,payload)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-actions"><a href="#实现-actions" class="headerlink" title="实现 actions"></a>实现 actions</h2><p>根据用户传入的type获取并执行对应的mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继续修改Store类</span></span><br><span class="line">dispatch(type,payload)&#123;</span><br><span class="line">    <span class="keyword">const</span> entry = <span class="keyword">this</span>._actions[type]</span><br><span class="line">    <span class="keyword">if</span> (entry) &#123;</span><br><span class="line">        entry(<span class="keyword">this</span>, payload)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们运行一下会发现报以下错误</p>
<img src="/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/2.png" class="" title="[报错信息]">

<blockquote>
<p>错误原因：因为class的影响，this指向出了问题</p>
</blockquote>
<p>参考了一下官方的解决方案，我们修改Store：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//绑定 commit、dispatch的上下文</span></span><br><span class="line">    <span class="keyword">this</span>.commit = <span class="keyword">this</span>.commit.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.dispatch = <span class="keyword">this</span>.dispatch.bind(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化state"><a href="#优化state" class="headerlink" title="优化state"></a>优化state</h2><p>目前的代码还没有对state做一个很好的保护，会存在将来用户直接去改state中的值得行为，继续修改Store的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//响应化处理state</span></span><br><span class="line">    <span class="comment">// this.state = new Vue(&#123;</span></span><br><span class="line">    <span class="comment">//     data: options.state</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="keyword">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            <span class="comment">//加两个$，Vue不做代理 对外部是隐藏的</span></span><br><span class="line">            $$state:options.state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存取器 store.state</span></span><br><span class="line"><span class="keyword">get</span> state()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>._vm)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._vm._data.$$state</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> state(v)&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'禁止这样修改'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-getters"><a href="#实现-getters" class="headerlink" title="实现 getters"></a>实现 getters</h2><p>继续修改Store类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">this</span>._wrapperGetters = options.getters</span><br><span class="line">        <span class="comment">//定义computed选项</span></span><br><span class="line">        <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">        <span class="keyword">this</span>.getters = &#123;&#125;</span><br><span class="line">        <span class="keyword">const</span> store=<span class="keyword">this</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(<span class="keyword">this</span>._wrapperGetters).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//获取用户定义的getter</span></span><br><span class="line">            <span class="keyword">const</span> fn = store._wrapperGetters[key]</span><br><span class="line">            <span class="comment">//转化为computed可以使用的无参数形式</span></span><br><span class="line">            computed[key]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fn(store.state)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//为getters定义只读属性</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(store.getters,key,&#123;</span><br><span class="line">                <span class="keyword">get</span>:()=&gt; store._vm[key]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果手机自定义siri回答</title>
    <url>/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/</url>
    <content><![CDATA[<p>前几天抖音上看到一个在苹果店让siri叫老公的视频，相信不少小伙伴看完都偷偷对自己的siri试过吧。而且肯定也有不少小伙伴没有试出视频中的效果，这个是怎么做到的呢？看完这篇你就明白了。</p>
<a id="more"></a>

<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>首先我们肯定要有一步苹果手机，然后打开<strong>快捷指令</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/1.jpg" class="" title="[第一步]">

<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>点击创建快捷指令</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/2.jpg" class="" title="[第二步]">

<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>添加操作，并搜索<strong>显示提醒</strong>，选中最下方的<strong>显示提醒</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/3.jpg" class="" title="[第三步]">

<h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>修改图中<strong>信息</strong>部分为你希望siri回应的内容，然后点击下一步</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/4.jpg" class="" title="[设置回复内容]">

<p>例如我可以设置成这样</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/5.jpg" class="" title="[肯定是我最帅了]">

<blockquote>
<p>记得将下方的显示取消按钮设置成图中状态</p>
</blockquote>
<h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h1><p>设置触发我们设置好的回复内容的关键词语，然后点击完成</p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/6.jpg" class="" title="[第五步]">

<p>例如我设置的<strong>谁是世界上最帅的男人</strong></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/7.jpg" class="" title="[别问，问就是我最帅]">

<h1 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h1><p>接下来我们就可以和siri一起愉快的玩耍啦<del>~</del></p>
<img src="/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/8.jpg" class="" title="[我帅吧]">












<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
  <entry>
    <title>JS从入门到放弃——数据类型</title>
    <url>/2020/08/JS%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p>
<p>引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p>
<blockquote>
<p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>
</blockquote>
<a id="more"></a>

<h2 id="JavaScript拥有动态类型"><a href="#JavaScript拥有动态类型" class="headerlink" title="JavaScript拥有动态类型"></a><strong>JavaScript拥有动态类型</strong></h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;              <span class="comment">//x为undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;          <span class="comment">//x为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"Joker"</span>;    <span class="comment">//x为字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h2><p>字符串是存储字符（比如 “Joker 真帅”）的变量。<br>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Joker"</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Joker'</span>;</span><br></pre></td></tr></table></figure>
<p>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> area = <span class="string">"Joker's Blog"</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"He is called 'Joker'"</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'He is called "Joker"'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h2><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x1=<span class="number">34.00</span>;      <span class="comment">//使用小数点来写</span></span><br><span class="line"><span class="keyword">var</span> x2=<span class="number">34</span>;         <span class="comment">//不使用小数点来写</span></span><br></pre></td></tr></table></figure>
<p>极大或极小的数字可以通过科学（指数）计数法来书写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a><strong>布尔</strong></h2><p>布尔（逻辑）只能有两个值：true 或 false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> y=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p>下面的代码创建名为 cars 的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">"Saab"</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">"Volvo"</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">"BMW"</span>;</span><br></pre></td></tr></table></figure>
<p>或者 (condensed array):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Saab"</span>,<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>);</span><br></pre></td></tr></table></figure>
<p>或者 (literal array):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=[<span class="string">"Saab"</span>,<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>];</span><br></pre></td></tr></table></figure>
<p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><strong>对象</strong></h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">"John"</span>, <span class="attr">lastname</span>:<span class="string">"Doe"</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p>
<p>对象属性有两种寻址方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name=person.lastname;</span><br><span class="line">name=person[<span class="string">"lastname"</span>];</span><br></pre></td></tr></table></figure>

<h2 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a><strong>Undefined 和 Null</strong></h2><p>undefined 的字面意思就是：未定义的值 。这个值的语义是，希望<strong>表示一个变量最原始的状态，而非人为操作的结果</strong>。</p>
<p>null 的字面意思是：空值。这个值的语义是，希望<strong>表示一个对象被人为的重置为空对象，而非一个变量最原始的状态</strong>。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter中区分开发环境与正式环境</title>
    <url>/2020/08/flutter%E4%B8%AD%E5%8C%BA%E5%88%86%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E6%AD%A3%E5%BC%8F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本文讲述如何在flutter中区分开开发环境以及正式环境中接口地址等相关信息。</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们已经有了一个flutter项目，创建一个新文件用来保存所有环境特定配置信息<code>lib/app_config.dart</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:meta/meta.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ENV</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> appName; <span class="comment">// 系统名称</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> envName; <span class="comment">// 运行环境</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> baseUrl; <span class="comment">// 基础api url</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> webViewUrl; <span class="comment">// 基础webviewurl</span></span><br><span class="line"> ENV(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> appName,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> envName,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> baseUrl,</span><br><span class="line">    <span class="meta">@required</span> Widget child,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">String</span> webViewUrl</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(child: child)&#123;</span><br><span class="line">    ENV.appName = appName;</span><br><span class="line">    ENV.envName = envName;</span><br><span class="line">    ENV.baseUrl = baseUrl;</span><br><span class="line">    ENV.webViewUrl = webViewUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ENV of(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> context.dependOnInheritedWidgetOfExactType(aspect: ENV);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(InheritedWidget oldWidget) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区分环境配置"><a href="#区分环境配置" class="headerlink" title="区分环境配置"></a>区分环境配置</h2><p>新建<code>main_dev.dart</code>,并编写开发环境的配置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'app_config.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'main.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> configuredApp = <span class="keyword">new</span> ENV(</span><br><span class="line">    appName: <span class="string">'项目名dev'</span>,</span><br><span class="line">    envName: <span class="string">'development'</span>,</span><br><span class="line">    baseUrl: <span class="string">'开发环境接口地址'</span>,</span><br><span class="line">    child: <span class="keyword">new</span> App(),</span><br><span class="line">    webViewUrl:<span class="string">'开发环境webview地址'</span></span><br><span class="line">  );</span><br><span class="line">  runApp(configuredApp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于此同时，创建<code>main_pro.dart</code>,编写对应的正式环境配置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'app_config.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'main.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> configuredApp = <span class="keyword">new</span> ENV(</span><br><span class="line">    appName: <span class="string">'项目名'</span>,</span><br><span class="line">    envName: <span class="string">'product'</span>,</span><br><span class="line">    baseUrl: <span class="string">'正式环境接口地址'</span>,</span><br><span class="line">    child: <span class="keyword">new</span> App(),</span><br><span class="line">    webViewUrl:<span class="string">'正式环境webview地址'</span></span><br><span class="line">  );</span><br><span class="line">  runApp(configuredApp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>修改<code>dio.dart</code>中baseurl的获取方式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:zzc_app/app_config.dart'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">String</span> BASE_URL = ENV.baseUrl + url;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>dio的封装可以看这篇-&gt;<a href="https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/">在flutter中优雅的封装网络请求</a></p>
</blockquote>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li><p>运行开发版本，采用<code>flutter run -t lib/main_dev.dart</code></p>
</li>
<li><p>运行生产版本，采用<code>flutter run -t lib/main_pro.dart</code></p>
</li>
<li><p>Android上创建一个release版本,采用<code>flutter build apk -t lib/main_&lt;environment&gt;.dart</code></p>
</li>
</ul>
<blockquote>
<p>我们将为不同的环境生成对应的APK。 要在iOS上构建版本，只需将apk替换为ios。</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter中验证码倒计时</title>
    <url>/2020/08/flutter%E4%B8%AD%E9%AA%8C%E8%AF%81%E7%A0%81%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    <content><![CDATA[<p>flutter中更换手机号，验证码倒计时的一种写法。</p>
<a id="more"></a>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> userinfo;</span><br><span class="line">  PhoneNumber(<span class="keyword">this</span>.userinfo, &#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PhoneNumberState createState() =&gt; _PhoneNumberState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PhoneNumberState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PhoneNumber</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _codeController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  Timer _countdownTimer;</span><br><span class="line">  <span class="built_in">String</span> _codeCountdownStr = <span class="string">'获取验证码'</span>;</span><br><span class="line">  <span class="built_in">int</span> _countdownNum = <span class="number">59</span>;</span><br><span class="line"></span><br><span class="line">  _getcode() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> Net().<span class="keyword">get</span>(<span class="string">'verification-code'</span>, &#123;</span><br><span class="line">      <span class="string">'phone_number'</span>: widget.userinfo[<span class="string">'phone_number'</span>],</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">"change_phone"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    reGetCountdown();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> reGetCountdown() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">if</span> (_countdownTimer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Timer的第一秒倒计时是有一点延迟的，为了立刻显示效果可以添加下一行</span></span><br><span class="line">      _codeCountdownStr = <span class="string">'<span class="subst">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class="line">      _countdownTimer = <span class="keyword">new</span> Timer.periodic(<span class="keyword">new</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>), (timer) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (_countdownNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            _codeCountdownStr = <span class="string">'<span class="subst">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _codeCountdownStr = <span class="string">'获取验证码'</span>;</span><br><span class="line">            _countdownNum = <span class="number">59</span>;</span><br><span class="line">            _countdownTimer.cancel();</span><br><span class="line">            _countdownTimer = <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要忘记在这里释放掉Timer</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _countdownTimer?.cancel();</span><br><span class="line">    _countdownTimer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'绑定手机号'</span>)),</span><br><span class="line">      body: Container(</span><br><span class="line">        padding: EdgeInsets.only(left: <span class="number">10</span>, right: <span class="number">10</span>, top: <span class="number">10</span>),</span><br><span class="line">        child: ListView(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            ListTile(</span><br><span class="line">              leading: Text(<span class="string">'当前手机号'</span>),</span><br><span class="line">              title: Text(widget.userinfo[<span class="string">'phone_number'</span>]),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              title: TextField(</span><br><span class="line">                controller: _codeController,</span><br><span class="line">                decoration: InputDecoration(hintText: <span class="string">'请输入验证码'</span>),</span><br><span class="line">              ),</span><br><span class="line">              trailing: RaisedButton(</span><br><span class="line">                onPressed: _countdownNum &gt;= <span class="number">59</span> ? _getcode : <span class="keyword">null</span>,</span><br><span class="line">                child: Text(_codeCountdownStr),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>在flutter中优雅的封装网络请求</title>
    <url>/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>本文讲述如何封装dio网络请求，并在实际中使用。</p>
<a id="more"></a>

<h2 id="Dio-http库"><a href="#Dio-http库" class="headerlink" title="Dio http库"></a>Dio http库</h2><p>dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时等。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>引入dio:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">dio:</span> <span class="string">^x.x.x</span>   <span class="comment">#请使用pub上的最新版本</span></span><br></pre></td></tr></table></figure>

<h2 id="开始封装"><a href="#开始封装" class="headerlink" title="开始封装"></a>开始封装</h2><p>在lib文件夹下创建<code>utils/dio/dio.dart</code>,用于编写我们封装的代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:shared_preferences/shared_preferences.dart'</span>;</span><br><span class="line"><span class="comment">/// <span class="markdown">自定义枚举</span></span></span><br><span class="line"><span class="keyword">enum</span> Method &#123; <span class="keyword">get</span>, post, put, delete &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 工厂模式</span></span><br><span class="line">  <span class="keyword">factory</span> Net() =&gt; _getInstance();</span><br><span class="line">  <span class="keyword">static</span> Net <span class="keyword">get</span> instance =&gt; _getInstance();</span><br><span class="line">  <span class="keyword">static</span> Net _instance;</span><br><span class="line"></span><br><span class="line">  Dio dio;</span><br><span class="line">  Net._internal() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    dio = Dio(BaseOptions(</span><br><span class="line">      connectTimeout: <span class="number">60000</span>, <span class="comment">// 连接服务器超时时间，单位是毫秒.</span></span><br><span class="line">      receiveTimeout: <span class="number">10000</span>, <span class="comment">// 响应流上前后两次接受到数据的间隔，单位为毫秒, 这并不是接收数据的总时限.</span></span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 单列模式</span></span><br><span class="line">  <span class="keyword">static</span> Net _getInstance() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      _instance = Net._internal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span>(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.<span class="keyword">get</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  post(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.post);</span><br><span class="line">  &#125;</span><br><span class="line">  put(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.put);</span><br><span class="line">  &#125;</span><br><span class="line">  delete(<span class="built_in">String</span> url, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">    <span class="keyword">return</span> _doRequest(url, params, Method.delete);</span><br><span class="line">  &#125;</span><br><span class="line">   _doRequest(</span><br><span class="line">    <span class="built_in">String</span> url,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params,</span><br><span class="line">    Method method,</span><br><span class="line">  ) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> _prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">      <span class="keyword">var</span> token = _prefs.getString(<span class="string">'token'</span>)??<span class="string">''</span>;</span><br><span class="line">      <span class="comment">/// <span class="markdown">可以添加header 设置token</span></span></span><br><span class="line">      dio.options.headers.addAll(&#123;<span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + token&#125;);</span><br><span class="line">      <span class="built_in">String</span> BASE_URL = <span class="string">'你的接口地址'</span> + url;</span><br><span class="line">      Response response;</span><br><span class="line">      <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">        <span class="keyword">case</span> Method.<span class="keyword">get</span>:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Method.post:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.post(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.post(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Method.put:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.put(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.put(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Method.delete:</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.delete(BASE_URL, queryParameters: params);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response = <span class="keyword">await</span> dio.delete(BASE_URL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> json.decode(response.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'错误：<span class="subst">$&#123;exception.toString()&#125;</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> code;</span><br><span class="line">  <span class="built_in">dynamic</span> data;</span><br><span class="line">  <span class="built_in">String</span> error;</span><br><span class="line">  BaseModel(&#123;<span class="keyword">this</span>.code, <span class="keyword">this</span>.data, <span class="keyword">this</span>.error&#125;);</span><br><span class="line">  BaseModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    code = json[<span class="string">'code'</span>];</span><br><span class="line">    data = json[<span class="string">'data'</span>];</span><br><span class="line">    error = json[<span class="string">'error'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们以一个登陆的demo来看dio的用法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  LoginForm(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _LoginFormState createState() =&gt; _LoginFormState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LoginFormState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LoginForm</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _userNameController = TextEditingController();</span><br><span class="line">  <span class="keyword">final</span> _pwdController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  _onsubmit() <span class="keyword">async</span> &#123;<span class="comment">//进行登陆操作</span></span><br><span class="line">    <span class="keyword">var</span> params=&#123;</span><br><span class="line">      <span class="string">'username'</span>:_userNameController.text,</span><br><span class="line">      <span class="string">'password'</span>:_pwdController.text</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> Net().post(<span class="string">'login'</span>, params);</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="string">'code'</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">//登陆成功的操作</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//登陆失败的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">      padding: EdgeInsetsDirectional.fromSTEB(<span class="number">30</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">10</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          TextField(</span><br><span class="line">            controller: _userNameController,</span><br><span class="line">            decoration: InputDecoration(</span><br><span class="line">              labelText: <span class="string">'用户名'</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          TextField(</span><br><span class="line">            controller: _pwdController,</span><br><span class="line">            decoration: InputDecoration(</span><br><span class="line">              labelText: <span class="string">'密码'</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          MaterialButton(onPressed: _onsubmit,<span class="comment">//等同于我们常见的click事件</span></span><br><span class="line">           child: Text(<span class="string">'登陆'</span>))</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p> <a href="https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/">将uni-request进行axios化封装</a><br> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/">在vue中对axios进行二次封装</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>flutter</category>
        <category>网络请求</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title>将uni-request进行axios化封装</title>
    <url>/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>本文介绍如何将uni-app提供的网络请求方式uni-request进行封装。</p>
<a id="more"></a>
<h1 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h1><p>首先我们使用hubuilderX创建一个uni-app项目，并在根目录下创建目录<code>common</code>，用于统一存放我们的的工具类。</p>
<h1 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h1><p>在<code>common</code>下新建<code>axios/axios.js</code>,并贴上如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> url_config =<span class="string">"你的接口地址"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">axios</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">const</span> &#123;url, method, data&#125;=options</span><br><span class="line">	<span class="keyword">const</span> api_token =uni.getStorageSync(<span class="string">'api_token'</span>);</span><br><span class="line">	<span class="keyword">let</span> headers=&#123;</span><br><span class="line">		Authorization:<span class="string">'Bearer '</span> + api_token,</span><br><span class="line">		TargetLanguage:<span class="string">"zh-CN"</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> uni.request(&#123;</span><br><span class="line">		url: url_config + url,</span><br><span class="line">		method,</span><br><span class="line">		data,</span><br><span class="line">		dataType: <span class="string">'json'</span>,</span><br><span class="line">		header: headers</span><br><span class="line">	&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> result=res[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">return</span> checkStatus(result)</span><br><span class="line">	&#125;).catch(<span class="function"><span class="params">parmas</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(parmas,<span class="string">'parmas'</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(response.statusCode===<span class="number">200</span>|| </span><br><span class="line">			response.statusCode === <span class="number">304</span> ||</span><br><span class="line">			response.statusCode === <span class="number">400</span>)&#123;</span><br><span class="line">			resolve(response.data);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			reject(&#123;</span><br><span class="line">				status: response.statusCode,</span><br><span class="line">				message: response.data.message,</span><br><span class="line">				error: response.data.errors[<span class="built_in">Object</span>.keys(response.data.errors)[<span class="number">0</span>]][<span class="number">0</span>]</span><br><span class="line">			 &#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	post(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"post"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">get</span>(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"get"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">delete</span>(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"delete"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	put(url, params) &#123;</span><br><span class="line">		<span class="keyword">return</span> axios(&#123;url, <span class="attr">method</span>:<span class="string">"put"</span>, <span class="attr">data</span>:params&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> response</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h1><p>将我们封装好的axios挂载到全局，编辑<code>main.js</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;common&#x2F;axios&#x2F;axios.js&#39;</span><br><span class="line">Vue.prototype.$axios &#x3D; axios;</span><br></pre></td></tr></table></figure>
<p>到这边是不是已经开始熟悉起来了</p>
<h1 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h1><p>接下来我们就可以在需要发送网络请求的地方快乐的使用axios了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios.get(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br><span class="line"><span class="keyword">this</span>.$axios.post(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br><span class="line"><span class="keyword">this</span>.$axios.delete(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br><span class="line"><span class="keyword">this</span>.$axios.put(url,params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br></pre></td></tr></table></figure>


<blockquote>
<p> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/">在flutter中优雅的封装网络请求</a><br> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/">在vue中对axios进行二次封装</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>uni-app</category>
        <category>网络请求</category>
      </categories>
      <tags>
        <tag>网络请求</tag>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue中对axios进行二次封装</title>
    <url>/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>为aixos配置统一请求地址，统一请求头等。</p>
<a id="more"></a>

<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>在<code>src</code>下新建<code>axios/axios.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"../router"</span></span><br><span class="line"><span class="keyword">import</span> Tools <span class="keyword">from</span> <span class="string">'@/components/Tools/index'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> token = <span class="string">''</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span> + token;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> api_token = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'api_token'</span>)!)</span><br><span class="line">    <span class="keyword">if</span> (api_token) &#123;</span><br><span class="line">      token = api_token</span><br><span class="line">    &#125;</span><br><span class="line">    config.headers.common[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span> + token;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error.response);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">axios.defaults.baseURL = process.env.VUE_APP_BASEURL</span><br><span class="line"></span><br><span class="line">axios.defaults.headers.post[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">axios.defaults.headers.post[<span class="string">"X-Requested-With"</span>] = <span class="string">"XMLHttpRequest"</span>;</span><br><span class="line">axios.defaults.headers.put[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">axios.defaults.headers.put[<span class="string">"X-Requested-With"</span>] = <span class="string">"XMLHttpRequest"</span>;</span><br><span class="line">axios.defaults.headers.delete[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">axios.defaults.headers.delete[<span class="string">"X-Requested-With"</span>] = <span class="string">"XMLHttpRequest"</span>;</span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      response &amp;&amp;</span><br><span class="line">      (response.status === <span class="number">200</span> ||</span><br><span class="line">        response.status === <span class="number">304</span> ||</span><br><span class="line">        response.status === <span class="number">400</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        resolve(response.data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(&#123;</span><br><span class="line">        status: response.status,</span><br><span class="line">        message: response.data.message,</span><br><span class="line">        error: response.data.errors[<span class="built_in">Object</span>.keys(response.data.errors)[<span class="number">0</span>]][<span class="number">0</span>]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  post(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"post"</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span>(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"get"</span>,</span><br><span class="line">      url,</span><br><span class="line">      params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  put(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"put"</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">delete</span>(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">"delete"</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先在<code>main.js</code>中进行引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'./axios/axios'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure>
<p>然后在我们要使用的地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios.post(<span class="string">'接口地址'</span>,&#123;&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<blockquote>
<p> <a href="https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/">将uni-request进行axios化封装</a><br> <a href="https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/">在flutter中优雅的封装网络请求</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
        <category>网络请求</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局&amp;&amp;双飞翼布局</title>
    <url>/2020/12/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。</p>
<a id="more"></a>

<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>圣杯布局和双飞翼布局解决的问题是相同的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul>
<li><p>圣杯布局：为了让中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</p>
</li>
<li><p>双飞翼布局：为了让中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该div里用margin-left和margin-right为左右两栏div留出位置。</p>
</li>
</ul>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><a href="https://github.com/qytayh/common-css-layout" target="_blank" rel="noopener">详细代码点击这里去github查看</a></p>
<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><ul>
<li><p>优点：不需要添加dom节点</p>
</li>
<li><p>缺点：圣杯布局的缺点：正常情况下是没有问题的，但是部分情况下会出现页面变形的问题</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span>: 0 100<span class="selector-tag">px</span> 0 200<span class="selector-tag">px</span>;<span class="comment">/* 此段代码是为了摆正中间栏的位置 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* min-width: 600px; 不设置最小宽度  页面容易变形 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background: red;</span><br><span class="line"><span class="css">        <span class="comment">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        left: -200px;</span><br><span class="line"><span class="css">        <span class="comment">/* 中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        background: blue;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">        right: -100px;</span><br><span class="line"><span class="css">        <span class="comment">/* 中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,<span class="selector-class">.main</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        min-height: 200px;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>圣杯布局总结：用父盒子的padding将中间栏挤到中间，并腾出地方给两边栏</p>
</blockquote>
<h2 id="双飞翼"><a href="#双飞翼" class="headerlink" title="双飞翼"></a>双飞翼</h2><ul>
<li><p>优点：不会像圣杯布局那样变形</p>
</li>
<li><p>缺点是：多加了一层dom节点</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,<span class="selector-class">.main</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        min-height: 300px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 关键点：用margin把div挤到中间正常展示*/</span></span></span><br><span class="line">        margin: 0 100px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background: green;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        background: blue;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>双飞翼总结：中间的div外层用另一个div包裹了一下，然后利用 margin来把嵌套的div“挤”到中间</p>
</blockquote>
<h2 id="使用其他方法实现中间栏div内容不被遮挡"><a href="#使用其他方法实现中间栏div内容不被遮挡" class="headerlink" title="使用其他方法实现中间栏div内容不被遮挡"></a>使用其他方法实现中间栏div内容不被遮挡</h2><p>除了圣杯布局和双飞翼布局，我们还可以用别的方式实现同样的效果</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>使用<code>box-sizing:boder-box</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>其他方法实现中间栏div内容不被遮挡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">        padding: 0 100px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,<span class="selector-class">.main</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        min-height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        background: lightgreen;</span><br><span class="line">        width: 200px;</span><br><span class="line"><span class="css">        <span class="comment">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        left: -200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        background: lightpink;</span><br><span class="line">        width: 100%;</span><br><span class="line"><span class="css">        <span class="comment">/* 关键点！！！ */</span></span></span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        padding: 0 100px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        background: lightseagreen;</span><br><span class="line">        width: 100px;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">        right: -100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>利用flex</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        min-height: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        flex-grow: 1;</span><br><span class="line">        background-color: mediumaquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        flex-basis: 200px;</span><br><span class="line"><span class="css">        <span class="comment">/* 固定宽度 */</span></span></span><br><span class="line">        background-color: mediumpurple;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        flex-basis: 300px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>BFC布局</title>
    <url>/2020/12/BFC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>这篇文章主要介绍的是关于块格式化上下文（Block Formatting Context），也就是大家俗称的BFC。你可能从未听说过这个术语，但只要你曾经使用过CSS布局，你就可能知道它是什么。理解BFC是什么，它有什么功能，以及如何创建一个BFC是非常有用的，这些能帮助你更好的理解CSS布局。</p>
<a id="more"></a>

<h1 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h1><p>通过一个简单的float布局示例就能很好的理解BFC的行为。在下面的示例中，我们创建了一个盒子（其实在CSS中，每个元素都是一个盒子），这个盒子中包含了一个设置了浮动的图片和一段文本。如果有足够多的文本内容的时候，文本会围绕着图片（把整个图片包裹起来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated element.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    I am text inside the</span><br><span class="line">        <span class="comment">&lt;!-- outer box.If there is enough text </span></span><br><span class="line"><span class="comment">    then the text will wrap around the floated element.</span></span><br><span class="line"><span class="comment">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> dotted red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid teal;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:skyblue;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/12/BFC%E5%B8%83%E5%B1%80/1.png" class="">

<p>如果在上面的基础上删除一些文本，就没有足够的文本去围绕图片，同时由于浮动元素脱离文档流，盒子元素的边框高度就会随着文本的减少而降低（常被理解为元素浮动之后使得其父元素坍塌）。</p>
<img src="/2020/12/BFC%E5%B8%83%E5%B1%80/2.png" class="">

<p>之所以会这样，是因为当一个元素浮动时，盒子依然保持原来的宽度，使文本所占的空间缩短了,才给浮动的元素腾出位置，这就是为什么背景和边框都能够看起来包裹住了浮动的元素。</p>
<p>有两种方案可以解决这个布局问题。</p>
<ul>
<li>一种是使用<code>clearfix</code>黑魔法，就是在文本和浮动元素的下面加一个元素，比如<code>div</code>，并将<code>clear</code>属性设置为<code>both</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated element.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    I am text inside the</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- outer box.If there is enough text </span></span><br><span class="line"><span class="comment">    then the text will wrap around the floated element.</span></span><br><span class="line"><span class="comment">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>另一种方法就是使用<code>overflow</code>属性，把它设置为非<code>visible</code>的值。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated element.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    I am text inside the</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="selector-tag">overflow</span><span class="selector-pseudo">:auto</span>;<span class="comment">/* 补上这个属性 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>overflow:auto</code>后盒子就能包裹浮动元素。</p>
<img src="/2020/12/BFC%E5%B8%83%E5%B1%80/3.png" class="">

<p><code>overflow</code>之所以能够有效是因为它的值是非<code>visible</code>时会创建一个BFC，而BFC的特性就是包裹浮动元素</p>
<blockquote>
<p>使用Clearfix黑魔法时，除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after。其实也就是大家常说的清除浮动.</p>
</blockquote>
<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after</p>
<h2 id="使用伪元素-after"><a href="#使用伪元素-after" class="headerlink" title="使用伪元素 ::after"></a>使用伪元素 ::after</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用伪类-after"><a href="#使用伪类-after" class="headerlink" title="使用伪类 :after"></a>使用伪类 :after</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该方法在 ie6、7 中无效，需要对 .outer 设置 zoom:1</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始手撸vue源码</title>
    <url>/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>本文用于记录学习vue源码的过程</p>
<a id="more"></a>
<p>简介<br>本文主要为学习B站 <a href="https://www.bilibili.com/video/BV1HE411L7fM" target="_blank" rel="noopener">前端铁蛋-手写vue框架</a> 的学习笔记</p>
<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>首先，利用webpack构建项目</p>
<ol>
<li><p>初始化项目</p>
<p> <code>npm init -y</code></p>
</li>
<li><p>安装webpack</p>
<p> <code>npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save</code></p>
</li>
<li><p>配置webpack</p>
<p> 根目录创建webpack.config.js文件</p>
<p> 配置代码如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">"source-map"</span>, <span class="comment">//调试的时候可以快速找到源码</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">//更改模块的查找方式</span></span><br><span class="line">        modules: [path.resolve(__dirname, <span class="string">'source'</span>), path.resolve(<span class="string">'node_modules'</span>)]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'public/index.html'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li><p>新建source文件夹用于后期存放资源</p>
</li>
<li><p>新建public文件夹</p>
<p> 创建index.html文件并生成h5代码</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改packjson.json配置</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "webpack-dev-server",</span><br><span class="line">    "build": "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>命令行输入</p>
<p> <code>npm start //启动</code> </p>
</li>
</ol>
<h1 id="二、数据代理"><a href="#二、数据代理" class="headerlink" title="二、数据代理"></a>二、数据代理</h1><ol>
<li><p>创建构造函数并初始化用户传入的参数(我们先假设用户传入的只有el、data)</p>
<p> 在source文件夹新建vue文件夹并添加index.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;initstate&#125; <span class="keyword">from</span> <span class="string">'./Observe'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123; <span class="comment">//vue中传入参数</span></span><br><span class="line">    <span class="comment">//初始化用户传入的选项</span></span><br><span class="line">    <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span></span><br><span class="line">    vm.$options = options</span><br><span class="line">    <span class="comment">//重新初始化状态 data computed watch</span></span><br><span class="line">    initstate(vm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure></li>
<li><p>vue文件夹中新建Observe并添加index.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Observe <span class="keyword">from</span> <span class="string">'./observe'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initstate</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做不同的初始化工作</span></span><br><span class="line">    <span class="keyword">let</span> opts = vm.$options</span><br><span class="line">    <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">        initData(vm)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断data是不是对象 不是就return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> data!==<span class="string">'object'</span>||data==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是对象则new一个Observe对象来使这个data 实现数据监听</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observe(data) <span class="comment">//观察数据的业务逻辑放在这里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户传入的data</span></span><br><span class="line">    <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">    <span class="comment">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class="line">    data=vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class="line">    <span class="comment">//观察数据</span></span><br><span class="line">    observe(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Observe文件夹下新建observe.js文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"."</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123; <span class="comment">//data就是vue中我们定义的data vm._data</span></span><br><span class="line">        <span class="comment">//将用户的数据使用defineProperty定义</span></span><br><span class="line">        <span class="keyword">this</span>.walk(data)</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> key = keys[i] <span class="comment">//获取所有的key</span></span><br><span class="line">            <span class="keyword">let</span> value = data[keys[i]] <span class="comment">//所有的value</span></span><br><span class="line">            defineReactive(data, key, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//观察value是不是对象 然后监听  如果是一个对象 递归监听</span></span><br><span class="line">    observe(value)</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="keyword">if</span>(newval===value) <span class="keyword">return</span></span><br><span class="line">            <span class="comment">//有可能设置的时候也是一个对象</span></span><br><span class="line">            observe(newval)</span><br><span class="line">            value = newval</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Observe</span><br></pre></td></tr></table></figure></li>
<li><p>这时我们回到src/index.js 引入vue并初始化vue对象</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认  source/vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>  </span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            msg:<span class="string">'hello'</span>,</span><br><span class="line">            haha:&#123;</span><br><span class="line">                a:<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>修改一下data中某个属性的值，看一下效果</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm._data.msg=<span class="string">'Joker 666'</span></span><br><span class="line"><span class="built_in">console</span>.log(vm)</span><br></pre></td></tr></table></figure>
 <img src="/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/2-1.png" class="" title="[这边我们可以看到msg已经发生了变化]">
</li>
<li><p>实现数据代理</p>
<p> 我们在使用vue的时候，获取data属性时一般都是通过this.xxx获取，而我们上面只实现了通过this._data.xxx,所以我们要编写一个proxy方法，将传入的数据直接挂载到vm上</p>
<p> 在 source/Observe/index.js 文件中新增proxy方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">vm, source, key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> vm[source][key]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="keyword">return</span> vm[source][key]=newval</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 修改initData()</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户传入的data</span></span><br><span class="line">    <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">    <span class="comment">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class="line">    data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class="line">    <span class="comment">//其实是vm._data代理了vm的操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        proxy(vm, <span class="string">"_data"</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//观察数据</span></span><br><span class="line">    observe(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 实现的原理其实非常简单，实际上就是在我们想要获取this.data时，其实去获取this._data</p>
</li>
</ol>
<pre><code>至此，我们已经实现了数据监听，但是还有个问题，Object.defineProperty是无法监听数组的变化的(面试需要注意)</code></pre><h1 id="三、重写数组方法"><a href="#三、重写数组方法" class="headerlink" title="三、重写数组方法"></a>三、重写数组方法</h1><p> 我们常用的改变数组的方法有以下几种<br>    <code>[&#39;push&#39;,&#39;shift&#39;,&#39;unshift&#39;,&#39;pop&#39;,&#39;reverse&#39;,&#39;sort&#39;,&#39;splice&#39;]</code></p>
<pre><code>我们企图往数组arr中添加值，结果发现新添加进去的值是没办法被监听到的，因此，我们需要改写push等方法    

基本思路就是之前我们调用push方法时，是从Aarray.prototype寻找这个方法，我们改成用一个空对象{}继承Array.prototype，然后再给空对象添加push方法
我们在source/vue/Observe下新增array.js文件
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数组原型上的方法</span></span><br><span class="line"><span class="keyword">let</span> oldArrayProtoMethods = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">//复制一份  然后改新的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> arrayMethods = <span class="built_in">Object</span>.create(oldArrayProtoMethods)</span><br><span class="line"><span class="comment">//修改的方法</span></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">'push'</span>, <span class="string">'shift'</span>, <span class="string">'unshift'</span>, <span class="string">'pop'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>, <span class="string">'splice'</span>]</span><br><span class="line">methods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    arrayMethods[method] = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//不光要返回新的数组方法  还要执行监听</span></span><br><span class="line">        <span class="keyword">let</span> res = oldArrayProtoMethods[method].apply(<span class="keyword">this</span>, arg)</span><br><span class="line">        <span class="comment">//实现新增属性的监听</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'实现了监听数组属性的变化'</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
我们在用户数据传入Observe中接收监听的时候需要区分data是数组还是对象，如果是数组，则改变数组的原型链
修改source/vue/Observe/observe.js中的代码
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123; <span class="comment">//data就是vue中我们定义的data vm._data</span></span><br><span class="line">        <span class="comment">//将用户的数据使用defineProperty定义</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">            data.__proto__ = arrayMethods</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.walk(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> key = keys[i] <span class="comment">//获取所有的key</span></span><br><span class="line">            <span class="keyword">let</span> value = data[keys[i]] <span class="comment">//所有的value</span></span><br><span class="line">            defineReactive(data, key, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
执行以下代码

`vm.arr.push(4)`

然后在控制台可以看到我们成功修改了数组
{% asset_img 3-1.png [这边我们可以看到arr已经发生了变化] %}</code></pre><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>未完待续。。。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router源码实现</title>
    <url>/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>从零开始，实现vue-router</p>
<a id="more"></a>

<h1 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h1><ul>
<li>实现<code>VueRouter</code>类和<code>install</code>方法，使之作为一个插件存在</li>
<li>实现两个全局组件:<code>router-view</code>用于显示匹配组件内容，<code>router-link</code>用于跳转</li>
<li>监控<code>url</code>变化:监听<code>hashchange</code>或<code>popstate</code>事件</li>
<li>响应最新<code>url</code>:创建一个响应式的属性<code>current</code>，当它改变时获取对应的组件并显示</li>
</ul>
<h1 id="实现一个插件：创建VueRouter类和install方法"><a href="#实现一个插件：创建VueRouter类和install方法" class="headerlink" title="实现一个插件：创建VueRouter类和install方法"></a>实现一个插件：创建VueRouter类和install方法</h1><p>在<code>src</code>目录下创<code>jrouter</code>文件夹用于存放我们手写的路由的相关代码，在<code>jrouter</code>下新建<code>index.js</code>和<code>jvue-router.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jvue-router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Vue;<span class="comment">//引用构造函数，在JVueRouter里面使用</span></span><br><span class="line"><span class="comment">//1、实现一个插件：挂载$router</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="comment">//获取用户配置并保存</span></span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插件：实现install方法，注册$router</span></span><br><span class="line">JVueRouter.install = <span class="function"><span class="keyword">function</span>(<span class="params">_Vue</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//保存构造函数，在JVueRouter里面使用</span></span><br><span class="line">    Vue=_Vue;</span><br><span class="line">    <span class="comment">// 挂载$router</span></span><br><span class="line">    Vue.mixin(&#123;<span class="comment">//混入</span></span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line">            <span class="comment">//确保根实例的时候才执行,只有根组件拥有router选项</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.$options.router)&#123;</span><br><span class="line">                Vue.prototype.$router = <span class="keyword">this</span>.$options.router</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> JVueRouter;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么要采用混入的方式：主要原因是use代码在前，Router实例创建在后，而install逻辑又需要用到该实例</p>
</blockquote>
<p>修改<code>jrouter</code>中<code>index.js</code>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./jvue-router'</span><span class="comment">//引入我们写好的插件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.应用插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>最后我们只需要修改<code>main.js</code>中对路由的引用就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./jrouter'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,<span class="comment">//挂载router实例</span></span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实现router-link和router-view"><a href="#实现router-link和router-view" class="headerlink" title="实现router-link和router-view"></a>实现router-link和router-view</h1><p>修改<code>jrouter</code>中<code>index.js</code>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">KVueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Vue.component(<span class="string">'router-link'</span>, &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            to: &#123;</span><br><span class="line">                type: <span class="built_in">String</span>,</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        render(h) &#123;</span><br><span class="line">            <span class="comment">// &lt;a href="#/about"&gt;abc&lt;/a&gt;</span></span><br><span class="line">            <span class="comment">// &lt;router-link to="/about"&gt;xxx&lt;/router-link&gt;</span></span><br><span class="line">            <span class="comment">// h(tag, data, children)</span></span><br><span class="line">            <span class="keyword">return</span> h(<span class="string">'a'</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">'#'</span> + <span class="keyword">this</span>.to &#125; &#125;, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">            <span class="comment">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">        render(h)&#123;</span><br><span class="line">            <span class="keyword">return</span> h(<span class="string">'div'</span>,<span class="string">'router-view'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="监控url的变化"><a href="#监控url的变化" class="headerlink" title="监控url的变化"></a>监控url的变化</h1><p>定义响应式的current，监听hashchange事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">        <span class="comment">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>,<span class="string">'current'</span>,<span class="string">'/'</span>)</span><br><span class="line">        <span class="comment">//监控url变化</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//避免onHashChange中this变成window</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//页面加载 避免onHashChange中this变成window</span></span><br><span class="line">    &#125;</span><br><span class="line">    onHashChange()&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态获取对应的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">        render(h)&#123;</span><br><span class="line">            <span class="comment">//获取path对应的component</span></span><br><span class="line">            <span class="keyword">let</span> component=<span class="literal">null</span></span><br><span class="line">            <span class="keyword">this</span>.$router.$options.routes.forEach(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(route.path===<span class="keyword">this</span>.$router.current)&#123;</span><br><span class="line">                    component=route.component</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> h(component)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="提前处理路由表"><a href="#提前处理路由表" class="headerlink" title="提前处理路由表"></a>提前处理路由表</h1><p>提前处理路由表可以避免每次都循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">//创建一个路由映射表</span></span><br><span class="line">        <span class="keyword">this</span>.routeMap=&#123;&#125;</span><br><span class="line">        options.routes.forEach(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.routeMap[route.path]=route</span><br><span class="line">        &#125;)</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>router-view</code>根据path获取component的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'router-view'</span>, &#123;</span><br><span class="line">    render(h)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;routeMap,current&#125;=<span class="keyword">this</span>.$router</span><br><span class="line">        <span class="keyword">const</span> component=routeMap[current].component || <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> h(component)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="代码结构优化"><a href="#代码结构优化" class="headerlink" title="代码结构优化"></a>代码结构优化</h1><p>我们在<code>jrouter</code>文件夹下新建<code>jrouter-link.js</code>和<code>jrouter-view.js</code>,调整<code>jvue-router.js</code>中代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先进行引入</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'./jrouter-link'</span></span><br><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">'./jrouter-view'</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"> <span class="comment">// </span></span><br><span class="line">JVueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    Vue.component(<span class="string">'router-link'</span>, Link)</span><br><span class="line">    Vue.component(<span class="string">'router-view'</span>, View)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们将原先写在<code>jvue-router.js</code>中组件部分的代码分别写到对应的js文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jrouter-link.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">// &lt;a href="#/about"&gt;abc&lt;/a&gt;</span></span><br><span class="line">    <span class="comment">// &lt;router-link to="/about"&gt;xxx&lt;/router-link&gt;</span></span><br><span class="line">    <span class="comment">// h(tag, data, children)</span></span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'a'</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">'#'</span> + <span class="keyword">this</span>.to &#125; &#125;, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">    <span class="comment">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// jrouter-view.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">//获取path对应的component</span></span><br><span class="line">    <span class="keyword">const</span> &#123;routeMap, current&#125; = <span class="keyword">this</span>.$router;</span><br><span class="line">    <span class="keyword">const</span> component = routeMap[current].component || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果我们不用<code>Vue.util.defineReactive(this,&#39;current&#39;,&#39;/&#39;)</code>来实现监听，其实也可以用这种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   data()&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">           current:<span class="string">'/'</span></span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取current的方式就变为</span></span><br><span class="line"><span class="keyword">this</span>.app.current</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>当用户的路由为类似如下的嵌套路由时，我们应该如何兼容呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    ......</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/About.vue'</span>),</span><br><span class="line">    children:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about/info'</span>,</span><br><span class="line">            component:<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/AboutInfo.vue'</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">    ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>打开<code>jrouter-view.js</code>文件，并修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">//标记当前router-view深度</span></span><br><span class="line">    <span class="keyword">this</span>.$vnode.data.routerView = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> parent = <span class="keyword">this</span>.$parent</span><br><span class="line">    <span class="keyword">while</span>(parent)&#123;</span><br><span class="line">        <span class="keyword">const</span> vnodeData = parent.$vnode&amp;&amp;parent.$vnode.data</span><br><span class="line">        <span class="keyword">if</span>(vnodeData&amp;&amp;vnodeData.routerView)&#123;</span><br><span class="line">            <span class="comment">//说明当前的parent是一个router-view</span></span><br><span class="line">            depth++</span><br><span class="line">        &#125;</span><br><span class="line">        parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取path对应的component</span></span><br><span class="line">    <span class="keyword">let</span> component = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.$router.matched[depth];</span><br><span class="line">    <span class="keyword">if</span>(route)&#123;</span><br><span class="line">        component = route.component</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>jvue-router.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JVueRouter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">        <span class="comment">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class="line">        <span class="comment">// Vue.util.defineReactive(this,'current','/')通过matched数组获取component，不需要current响应式了</span></span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)||<span class="string">'/'</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>,<span class="string">'matched'</span>,[])</span><br><span class="line">        <span class="comment">//match方法可以递归遍历路由表，获得匹配关系的数组</span></span><br><span class="line">        <span class="keyword">this</span>.match()</span><br><span class="line">        <span class="comment">//监控url变化</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//避免onHashChange中this变成window</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.onHashChange.bind(<span class="keyword">this</span>))<span class="comment">//页面加载 避免onHashChange中this变成window</span></span><br><span class="line">    &#125;</span><br><span class="line">    onHashChange()&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">this</span>.matched = []</span><br><span class="line">        <span class="keyword">this</span>.match()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    match(routes)&#123;</span><br><span class="line">        routes = routes||<span class="keyword">this</span>.$options.routes</span><br><span class="line">        <span class="comment">//递归遍历路由表</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> route <span class="keyword">of</span> routes)&#123;</span><br><span class="line">            <span class="keyword">if</span>(route.path === <span class="string">'/'</span>&amp;&amp;<span class="keyword">this</span>.current===<span class="string">'/'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.matched.push(route)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(route.path!==<span class="string">'/'</span>&amp;&amp;<span class="keyword">this</span>.current.indexOf(route.path)!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.matched.push(route)</span><br><span class="line">                <span class="keyword">if</span>(route.children)&#123;<span class="comment">//如果有嵌套 </span></span><br><span class="line">                    <span class="keyword">this</span>.match(route.children)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题(二)</title>
    <url>/2020/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%BA%8C)/</url>
    <content><![CDATA[<p>高频面试题</p>
<a id="more"></a>

<h2 id="vue-router原理"><a href="#vue-router原理" class="headerlink" title="vue-router原理"></a>vue-router原理</h2><p>大型单页应用最显著特点之一就是采用前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。</p>
<p>页面都是由组件组成的，只需要把组件和路径相对应起来，就能把组件渲染出来。</p>
<p>当用户点击<code>router-link</code>标签时，会去寻找它对应的to属性，它的to属性和js中配置的路径<code>{path:&#39;/home&#39;,component:Home}</code>中的path一一对应，从而找到了匹配的组件，最后把组件渲染到<code>router-view</code>标签所在的地方。</p>
<p>前端路由时通过改变url，在不重新请求页面的情况下，更新页面视图。</p>
<p>目前在浏览器环境中实现这一功能主要有两种：</p>
<ul>
<li><p>利用url中的hash：</p>
<p>  在改变url的情况下，保证页面的不刷新。在2014年之前，大家是通过hash来实现路由，url hash就类似于：<br>  <code>https://www.xxx.com/#/login</code><br>  这种# 后面hash值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求也就不会刷新页面。另外每次hash值变化都会触发hashchange这个事件，通过这个事件我们就可以知道hash值发生了哪些变化。然后我们就可以通过监听hashchange来实现更新页面部分内容的操作</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, matchAndUpdate)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchAndUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// todo 匹配 hash 做 dom 更新操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用H5中history：</p>
<p>  14年后，因为HTML5标准发布。多了两个Api，<code>pushState</code>和<code>replaceState</code>,通过这两个api可以改变url地址且不会发送请求。同时还有<code>popstate</code>事件，通过这些就能用另一种方式实现前端路由了，原理和hash实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。<br>  内部使⽤<code>window.history.pushState</code>来处理url的变化，切换对应的组件</p>
</li>
</ul>
<p><a href="https://qytayh.github.io/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/">如果对具体代码实现感兴趣可以点击这里查看，<strong>vue-router源码实现</strong></a></p>
<h2 id="组件间通信方式"><a href="#组件间通信方式" class="headerlink" title="组件间通信方式"></a>组件间通信方式</h2><p><a href="https://qytayh.github.io/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/">点击这里查看详情</a></p>
<h2 id="vue2和vue3区别"><a href="#vue2和vue3区别" class="headerlink" title="vue2和vue3区别"></a>vue2和vue3区别</h2><ol>
<li><p><strong>目录结构</strong></p>
<p> vue-cli2.0与3.0在目录结构方面，有明显的不同</p>
<p> vue-cli3.0移除了配置文件目录，config和build文件夹</p>
<p> 同时移除了<code>static</code>静态文件夹，新增了<code>public</code>文件夹，打开层级目录还会发现，<code>index.html</code>移动到<code>public</code>中</p>
</li>
<li><p><strong>配置项</strong></p>
<p> 3.0中config文件已经被移除，但是多了<code>.env.production</code>和<code>.env.development</code>文件，除了文件位置，实际配置起来和2.0没什么不同</p>
<p> 没了<code>config</code>文件，跨域需要配置域名时，从<code>config/index.js</code>挪到了<code>vue.config.js</code>中，配置方法不变</p>
</li>
<li><p><strong>渲染</strong></p>
<p> Vue2.x使用的Virtual Dom实现的渲染</p>
<p> Vue3.0不论是原生的html标签还是vue组件，他们都会通过h函数来判断，如果是原生html标签，在运行时直接通过Virtual Dom来直接渲染，同样如果是组件会直接生成组件代码</p>
</li>
<li><p><strong>数据监听</strong></p>
<p> Vue2.x大家都知道使用的是es5的<code>object.defineproperties</code>中<code>getter</code>和<code>setter</code>实现的，而vue3.0的版本，是基于<code>Proxy</code>进行监听的，其实基于<code>proxy</code>监听就是所谓的<code>lazy by default</code>，什么意思呢，就是只要你用到了才会监听，可以理解为‘按需监听’，官方给出的诠释是：速度加倍，同时内存占用还减半。</p>
</li>
<li><p><strong>按需引入</strong></p>
<p> Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实无论你用到还是没用到，都会跑一变。而vue3.0中可以用ES module imports按需引入，如：keep-alive内置组件、v-model指令，等等。</p>
</li>
</ol>
<h2 id="简述vue2双向绑定原理"><a href="#简述vue2双向绑定原理" class="headerlink" title="简述vue2双向绑定原理"></a>简述vue2双向绑定原理</h2><ol>
<li><p>由页面-&gt;数据的变化：通过给页面元素添加对应的事件监听来实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">"value"</span> oninput=<span class="string">"()=&gt;this.handleInput($event)"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleInput</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = e.target.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>由数据-&gt;页面的变化:通过数据劫持(<code>Object.defineProperty</code>)+发布订阅模式来实现的<br> 具体流程：</p>
<ul>
<li><p>Compile解析器会将⻚⾯上的插值表达式/指定翻译成对应Watcher以添加到订阅器维护的列表中</p>
</li>
<li><p>通过<code>Object.defineProperty</code>劫持数据的变化，⼀旦数据源发⽣变化会触发对应的set⽅法</p>
</li>
<li><p>在set⽅法中，通知订阅器(Dep)对象中维护的所有订阅者(Watcher)列表更新</p>
</li>
<li><p>每⼀个Watch会去更新对应的⻚⾯</p>
</li>
</ul>
</li>
<li><p>关于发布订阅模式</p>
<p> 发布订阅模式又叫观察者模式，他定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象的变化，当这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得他们能够自动更新自己。</p>
</li>
</ol>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>Vue里面有许多内置的指令，比如<code>v-if</code>和<code>v-show</code>，这些丰富的指令能满足我们的绝大部分业务需求，不过在需要一些特殊功能时，我们仍然希望对<code>DOM</code>进行底层的操作，这时就要用到自定义指令。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123; </span><br><span class="line">        <span class="comment">// 每当指令绑定到元素上的时候，会立即执行这个bind 函数，只执行一次</span></span><br><span class="line">        <span class="comment">// 注意： 在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生的JS对象</span></span><br><span class="line">        <span class="comment">// 在元素刚绑定了指令的时候还没有插入到DOM中去的时候调用focus方法没有作用。因为，一个元素只有插入DOM之后才能获取焦点</span></span><br><span class="line">        <span class="comment">// el.focus()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;  </span><br><span class="line">        <span class="comment">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】。和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</span></span><br><span class="line">        el.focus()</span><br><span class="line">    &#125;,</span><br><span class="line">    updated: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;  </span><br><span class="line">        <span class="comment">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">&lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ES6特性"><a href="#ES6特性" class="headerlink" title="ES6特性"></a>ES6特性</h2><p>ES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。</p>
<ol>
<li><p>新增箭头函数</p>
<ul>
<li>简化了写法， 少打代码，结构清晰</li>
<li>明确了this。传统JS的this是在运行的时候确定的，而不是在定义的时候确定的；而箭头函数的this是在定义时就确定的，不能被改变，也不能被call,apply,bind这些方法修改。      </li>
</ul>
</li>
<li><p>块级作用域</p>
<ul>
<li>ES6中的let声明的变量有块级作用域</li>
<li>ES5中是没有块级作用域的，并且var有变量提升的概念</li>
<li>let声明的变量在同一个作用域内只有一个</li>
<li>要声明常量使用const</li>
</ul>
</li>
<li><p>解构赋值</p>
<p> ES6中变量的解构赋值，比如：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>:abc,bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'hello'</span>,<span class="attr">bar</span>:<span class="string">'hi'</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6新增了一种Symbol数据类型，表示全局唯一的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(a1 === a2);   <span class="comment">//false   a1和a2永远不相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">"a3"</span>);</span><br><span class="line"><span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">"a3"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a3 === a4);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模板字符串</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> gender=<span class="string">"男"</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`姓名<span class="subst">$&#123;name&#125;</span>,年龄<span class="subst">$&#123;age&#125;</span>,性别<span class="subst">$&#123;gender&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>展开运算符</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br></pre></td></tr></table></figure>
</li>
<li><p>类</p>
<p> ES6引入Class这个概念，让JS拥有其他面向对象语言的语法糖。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承传递参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='child')&#123;</span><br><span class="line">        <span class="comment">//先初始化父亲的信息，在初始化自己的信息  </span></span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.type=<span class="string">'child'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'继承传递参数'</span>,<span class="keyword">new</span> Child(<span class="string">'hello'</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>Promise</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6的Promise主要用于解决JS回调地狱问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pReadFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filePath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">'./data/a.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> pReadFile(<span class="string">'./data/b.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> pReadFile(<span class="string">'./data/c.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6的迭代器</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for ... of 是ES6中新增加的语法,主要用来循环实现了Iterator接口类型的对象</span></span><br><span class="line"><span class="comment">//for ... of 可以遍历Array、Set、Map不能遍历Object </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'China'</span>, <span class="string">'America'</span>, <span class="string">'Korea'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o) <span class="comment">//China, America, Korea</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6模块化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.导出</span></span><br><span class="line"><span class="comment">//导出单个成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'leo'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age= <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> name= <span class="string">'leo'</span>;</span><br><span class="line"><span class="keyword">let</span> age= <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> kk = <span class="string">"abc"</span></span><br><span class="line"><span class="comment">//导出多个成员</span></span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;;</span><br><span class="line"><span class="comment">//导出默认成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> kk;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.引入</span></span><br><span class="line"><span class="keyword">import</span> kk,&#123;name,age&#125; <span class="keyword">from</span> <span class="string">'a.js'</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域问题产生的原因 ：浏览器的同源策略导致了跨域。当我们在前端开发中使用ajax/fetch这些技术发送网络请求的时候，当协议、主机、端口有任何一个不一致的时候，则构成跨域。</p>
<p>跨域的作用 ：用于隔离潜在恶意文件的重要安全机制</p>
<p>跨域问题的解决：</p>
<ol>
<li><p>jsonp，允许script加载第三方资源</p>
</li>
<li><p>在服务器使用cors实现跨域资源共享<br> res.writeHead(200, {</p>
<pre><code>&quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;,
&quot;Access-Control-Allow-Origin&quot;:&apos;http://localhost&apos;,
&apos;Access-Control-Allow-Methods&apos;: &apos;GET, POST, OPTIONS&apos;,
&apos;Access-Control-Allow-Headers&apos;: &apos;X-Requested-With, Content-Type&apos;</code></pre><p> });</p>
</li>
<li><p>在前端的工程化项目(webpack)中,我们可以通过配置devserver的proxy来解决跨域访问的问题。他的原理是在本地开启一个服务器向数据服务器发送请求，因为服务器和服务器之间是没有跨域</p>
</li>
<li><p>但是因为webpack的devserver只在开发环境下有效，当项目发布上线之后仍然会有跨域问题，为了解决项目上线的跨域问题，我们配置服务器的反向代理（Apache/ngix）来实现跨域请求 </p>
</li>
<li><p>除此之外，我还知道当项目打包成apk之后就不存在跨域问题了，所以如果项目要打包成apk，我们需要在项目中的所有请求中写全路径(此时我们可以配置axios.default.baseURL来解决)</p>
</li>
<li><p>iframe 嵌套通讯，postmessage</p>
</li>
</ol>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol>
<li><p>借助构造函数实现继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  定义父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'xxx'</span>,</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  定义子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//通过call()方法改变Child1的this指向使子类的函数体内执行父级的构造函数从而实现继承效果</span></span><br><span class="line">    Parent1.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.address = <span class="string">'yyy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  构建子类的实例s1</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child1()</span><br><span class="line"><span class="built_in">console</span>.log(s1.name)  <span class="comment">//xxx</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点:该方法的实力(s1)无法使用父类(Parent1)的原型(prototype)中的属性和方法</p>
</blockquote>
</li>
<li><p>借助原型链实现继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'xx'</span>,</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">19</span>,</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  一样在父类添加say方法</span></span><br><span class="line">Parent2.prototype = &#123;</span><br><span class="line">    say () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'say'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span> (<span class="params">address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.address = <span class="string">'yyy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让子类的原型直接指向父类实例</span></span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2()</span><br><span class="line"><span class="comment">//  生成两个子类的实例s2、s3</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2()</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Child2()</span><br><span class="line"><span class="comment">// s2实例继承了父类中的name属性</span></span><br><span class="line"><span class="built_in">console</span>.log(s2.name)  <span class="comment">//xx</span></span><br><span class="line"><span class="comment">//  s2实例也同样继承了父类原型上的say方法</span></span><br><span class="line"><span class="built_in">console</span>.log(s2.say())  <span class="comment">//say</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点:在子类调用构造函数创建对象的时候，无法入参所有的属性值</p>
</blockquote>
</li>
<li><p>组合继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'xx'</span>,</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">20</span>,</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span> (<span class="params">name,age,address</span>) </span>&#123;</span><br><span class="line">    Parent5.call(<span class="keyword">this</span>,name,age)</span><br><span class="line">    <span class="keyword">this</span>.address = address</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较关键的一步</span></span><br><span class="line">Child5.prototype = <span class="keyword">new</span> Parent5()</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child5(<span class="string">"zhangsan"</span>,<span class="number">19</span>,<span class="string">"无锡"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例继承(为父类实例添加新特性，作为子类实例返回)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">    instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">    <span class="comment">// 遍历拷贝属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> animal)&#123;</span><br><span class="line">        Cat.prototype[p] = animal[p];</span><br><span class="line">    &#125;</span><br><span class="line">    Cat.prototype.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="宏微任务"><a href="#宏微任务" class="headerlink" title="宏微任务"></a>宏微任务</h2><p>事件循环的任务队列有宏任务队列和微任务队列，每次一个宏任务执行完毕的时候，都会把微任务队列中的微任务执行完毕之后才会再次执行下一个宏任务。</p>
<ul>
<li><p>宏队列：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.</p>
</li>
<li><p>微队列：process.nextTick, Promise.then, Object.observer, MutationObserver.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"datagrand1"</span>);</span><br><span class="line">setTimeOut(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand2"</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand3"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand4"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"datagrand5"</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand6"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"datagrand7"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>打印顺序是：1,3,5,6,4,7,2</p>
</blockquote>
<h2 id="说几个常用的meta标签"><a href="#说几个常用的meta标签" class="headerlink" title="说几个常用的meta标签"></a>说几个常用的meta标签</h2><p>详细看这篇</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>mac电脑也能模拟ie浏览器了</title>
    <url>/2021/01/mac%E7%94%B5%E8%84%91%E4%B9%9F%E8%83%BD%E6%A8%A1%E6%8B%9Fie%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%86/</url>
    <content><![CDATA[<p>在我们日常开发中难免会遇到需要兼容ie浏览器的情况，这就让我们mac用户十分头疼。<br>本文可以解决此类问题</p>
<a id="more"></a>

<ol>
<li><p>打开safair浏览器，在偏好设置 -&gt; 高级 -&gt; 在菜单栏中显示“开发”菜单</p>
</li>
<li><p>开发 -&gt; 用户代理</p>
<ul>
<li><p>有需要的ie版本则选择需要的版本</p>
</li>
<li><p>没有的话，点开其他，参照下表贴入需要的对应的代理字符串</p>
<table>
<thead>
<tr>
<th>系统平台</th>
<th>浏览器</th>
<th>代理字符串</th>
</tr>
</thead>
<tbody><tr>
<td>Windows</td>
<td>IE 5</td>
<td>Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 6</td>
<td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 7</td>
<td>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; Trident/4.0; SLCC1)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 8</td>
<td>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 9</td>
<td>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 10</td>
<td>Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)</td>
</tr>
<tr>
<td>Windows</td>
<td>IE 11</td>
<td>Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>前端</category>
        <category>ie</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>仿写new运算符</title>
    <url>/2021/01/%E4%BB%BF%E5%86%99new%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>实现new运算符</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">constructor,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;<span class="comment">//创建对象</span></span><br><span class="line">    <span class="keyword">constructor</span>.call(obj,...arg)//改变this执行</span><br><span class="line">    obj.__proto__==<span class="keyword">constructor</span>.prototype//构造函数的原型赋给对象的原型</span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Tab()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"张三"</span></span><br><span class="line">    <span class="keyword">this</span>.hobby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hobby..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tab1 = myNew(Tab)</span><br><span class="line"><span class="built_in">console</span>.log(tab1.name)</span><br><span class="line">tab1.hobby()</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
  </entry>
  <entry>
    <title>Browserslist</title>
    <url>/2021/08/Browserslist/</url>
    <content><![CDATA[<p><code>browserslist</code>实际上就是声明了⼀段浏览器的集合，我们的⼯具可以根据这段集合描述，针对性的输出兼容性代码。</p>
<a id="more"></a>

<p><a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">Browserslist</a>就是帮助我们来设置⽬标浏览器的⼯具。<code>Browserslist</code> 被⼴泛的应⽤到 <code>Babel</code>、<code>postcsspreset-env</code>、<code>autoprefixer</code> 等开发⼯具上。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>Browserslist</code>的配置可以放在<code>package.json</code>中，也可以单独放在配置⽂件<code>.browserslistrc</code>中。所有的⼯具都会主动查找<code>browserslist</code>的配置⽂件，根据 <code>browserslist</code>配置找出对应的⽬标浏览器集合。</p>
<p>Browserslist 的数据都是来⾃Can I Use:<a href="https://browserl.ist/" target="_blank" rel="noopener">https://browserl.ist/</a></p>
<p>可惜⽹站关闭了，现在需要⼿动检测：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx browserslist "last 1 version, &gt;1%"</span><br></pre></td></tr></table></figure>

<p>在<code>package.json</code>中的配置是增加⼀个<code>browserslist</code>数组属性：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"browserslist"</span>: [<span class="string">"last 2 version"</span>, <span class="string">"&gt; 1%"</span>, <span class="string">"maintained node versions"</span>, <span class="string">"not</span></span><br><span class="line"><span class="string">ie &lt; 11"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者在项⽬的根⽬录下创建⼀个<code>.browserslistrc</code>⽂件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注释是这样写的，以#号开头</span><br><span class="line"># 每⾏⼀个浏览器集合描述</span><br><span class="line">last 2 version</span><br><span class="line">&gt; 1%</span><br><span class="line">maintained node versions</span><br><span class="line">not ie &lt; 11</span><br></pre></td></tr></table></figure>

<h1 id="常⻅集合范围说明"><a href="#常⻅集合范围说明" class="headerlink" title="常⻅集合范围说明"></a>常⻅集合范围说明</h1><table>
<thead>
<tr>
<th>范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>last 2 versions</td>
<td>caniuse.com⽹站跟踪的最新两个版本，假如 iOS 12 是最新版本，那么向后兼容两个版本就是 iOS 11 和 iOS 12</td>
</tr>
<tr>
<td>&gt; 1%</td>
<td>全球超过 1%⼈使⽤的浏览器，类似&gt; 5% in US 则指代美国 5%以上⽤户</td>
</tr>
<tr>
<td>cover 99.5%</td>
<td>覆盖 99.5%主流浏览器</td>
</tr>
<tr>
<td>chrome &gt; 50   ie 6-8</td>
<td>指定某个浏览器版本范围</td>
</tr>
<tr>
<td>unreleased versions</td>
<td>所有浏览器的 beta 版本</td>
</tr>
<tr>
<td>not ie &lt; 11</td>
<td>排除 ie11 以下版本不兼容</td>
</tr>
<tr>
<td>since 2013  last 2 years</td>
<td>某时间范围发布的所有浏览器版本</td>
</tr>
<tr>
<td>maintained node versions</td>
<td>所有被 node 基⾦会维护的 node 版本</td>
</tr>
<tr>
<td>current node</td>
<td>当前环境的 node 版本</td>
</tr>
<tr>
<td>dead</td>
<td>通过last 2 versions 筛选的浏览器中，全球使⽤率低于0.5% 且官⽅声明不再维护或者事实上已经两年没有再更新的版本</td>
</tr>
<tr>
<td>defaults</td>
<td>默认配置， &gt; 0.5% last 2 versions Firefox ESR not dead</td>
</tr>
</tbody></table>
<h1 id="常见浏览器名称"><a href="#常见浏览器名称" class="headerlink" title="常见浏览器名称"></a>常见浏览器名称</h1><table>
<thead>
<tr>
<th>名称</th>
<th>中文对照</th>
</tr>
</thead>
<tbody><tr>
<td>Android</td>
<td>安卓 webview 浏览器</td>
</tr>
<tr>
<td>Baidu</td>
<td>百度浏览器</td>
</tr>
<tr>
<td>BlackBerry / bb</td>
<td>⿊莓浏览器</td>
</tr>
<tr>
<td>Chrome</td>
<td>chrome 浏览器</td>
</tr>
<tr>
<td>ChromeAndroid / and_chr</td>
<td>chrome 安卓移动浏览器</td>
</tr>
<tr>
<td>Edge</td>
<td>微软 Edge 浏览器</td>
</tr>
<tr>
<td>Electron</td>
<td>Electron</td>
</tr>
<tr>
<td>Explorer / ie</td>
<td>ie 浏览器</td>
</tr>
<tr>
<td>ExplorerMobile / ie_mob</td>
<td>ie 移动浏览器</td>
</tr>
<tr>
<td>Firefox / ff</td>
<td>⽕狐浏览器</td>
</tr>
<tr>
<td>FirefoxAndroid / and_ff</td>
<td>⽕狐安卓浏览器</td>
</tr>
<tr>
<td>iOS / ios_saf</td>
<td>iOS Safari 浏览器</td>
</tr>
<tr>
<td>Node</td>
<td>nodejs</td>
</tr>
<tr>
<td>Opera</td>
<td>Opera浏览器</td>
</tr>
<tr>
<td>OperaMini / op_mini</td>
<td>operaMini 浏览器</td>
</tr>
<tr>
<td>OperaMobile / op_mob</td>
<td>opera 移动浏览器</td>
</tr>
<tr>
<td>QQAndroid / and_qq</td>
<td>QQ安卓浏览器</td>
</tr>
<tr>
<td>Samsung</td>
<td>三星浏览器</td>
</tr>
<tr>
<td>Safari</td>
<td>桌⾯版本 Safari</td>
</tr>
<tr>
<td>UCAndroid / and_uc</td>
<td>UC 安卓浏览器</td>
</tr>
</tbody></table>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs文件操作</title>
    <url>/2021/03/nodejs%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>使用nodejs进行文件以及目录的创建，删除，修改，复制。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>) <span class="comment">//文件操作</span></span><br><span class="line"><span class="comment">// 增删改查;</span></span><br><span class="line"><span class="comment">// 1.文件操作   2.目录操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件操作</span></span><br><span class="line">fs.writeFile(<span class="string">'1.txt'</span>,<span class="string">"我是写入的文字"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a:追加写入;w:写入;r:读取</span></span><br><span class="line">fs.writeFile(<span class="string">'1.txt'</span>,<span class="string">"我是zhuijia的文字"</span>,&#123;<span class="attr">flag</span>:<span class="string">"a"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line">fs.readFile(<span class="string">'1.txt'</span>,<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(<span class="string">'1.txt'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data,toString())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的文件操作  没有加Sync都是异步  否则是同步</span></span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(<span class="string">'1.txt'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(data.toString())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改文件名</span></span><br><span class="line">fs.rename(<span class="string">"1.txt"</span>,<span class="string">"2.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">fs.unlink(<span class="string">'2.txt'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line">fs.copyFile(<span class="string">'1.js'</span>,<span class="string">"2.js"</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCopy</span>(<span class="params">src,dest</span>)</span>&#123;</span><br><span class="line">    fs.writeFileSync(dest,fs.readFileSync(src))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目录操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line">fs.mkdir(<span class="string">'test'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改目录名称</span></span><br><span class="line">fs.rename(<span class="string">'test'</span>,<span class="string">"test1"</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取目录</span></span><br><span class="line">fs.readdir(<span class="string">'test1'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除目录(空文件夹/目录)</span></span><br><span class="line">fs.rmdir(<span class="string">'test1'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断文件/目录是否存在  true/false</span></span><br><span class="line">fs.exists(<span class="string">"test"</span>,exists=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(exists)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件活目录的详细信息</span></span><br><span class="line">fs.stat(<span class="string">'1.js'</span>,(err,stat)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(stat)</span></span><br><span class="line">    <span class="comment">// let res =stat.isFile()//判断是否是文件</span></span><br><span class="line">    <span class="keyword">let</span> res =stat.isDirectory()<span class="comment">//判断是否是文件夹</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除非空文件夹</span></span><br><span class="line"><span class="comment">// 先把目录里文件删除-&gt;删除空目录</span></span><br><span class="line">removeDir(<span class="string">'test1'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeDir</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data=fs.readdirSync(path)</span><br><span class="line">    data.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//是文件直接删除    目录继续查找</span></span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">`<span class="subst">$&#123;path&#125;</span>/<span class="subst">$&#123;v&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> stat=fs.statSync(url)</span><br><span class="line">        <span class="keyword">if</span>(stat.isFile())&#123;</span><br><span class="line">            <span class="comment">// 文件 删除</span></span><br><span class="line">            fs.unlinkSync(url)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//目录 继续查找</span></span><br><span class="line">            removeDir(url)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    fs.rmdirSync(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础之变量提升</title>
    <url>/2021/08/JavaScript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<p>直觉上我们一般会认为JavaScript代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有一些特殊情况会导致这个假设是错误的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
<p>那么<code>console.log(a)</code>会输出什么呢？</p>
<p>我们很多人会认为是<code>undefined</code>，因为<code>var a</code>的声明在<code>a=2</code>的后面，因此就认为变量<code>a</code>被重新赋上默认值<code>undefined</code>。但是，实际输出的结果却是<strong>2</strong>。</p>
<p>再看一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>从上个代码块所变现出来的某种自上而下的行为特点，大家可能又会认为这个代码块也会输出<code>2</code>,甚至还会有人认为，由于变量<code>a</code>在使用前没有事先声明，所以会抛出异常。</p>
<p>但是实际上，输出的会是<code>undefined</code>。</p>
<blockquote>
<p>所以我们就面临了一个问题，到底是声明在前还是赋值在前？</p>
</blockquote>
<h1 id="从编译器的角度来以上看问题"><a href="#从编译器的角度来以上看问题" class="headerlink" title="从编译器的角度来以上看问题"></a>从编译器的角度来以上看问题</h1><p>引擎会在解释<code>JavaScript</code>代码之前首先对其进行编译。</p>
<p>编译阶段中的一部分工作就是<strong>找到所有的声明</strong>，并用合适的作用域将它们关联起来。</p>
<p>所以，正确的思路应该是，包括变量和函数在内的所有<strong>声明</strong>都会在<strong>任何代码被执行前首先被处理</strong>。</p>
<p>在我们看到<code>var a = 2</code>的时候，可能会认为这是一个声明，但是<code>JavaScript</code>实际上会将其看成两个声明<code>var a</code>和<code>a = 2</code>。第一个声明是在编译阶段进行的，第二个赋值声明会被留在原地等待执行。</p>
<p>因此，我们上面的第一个代码块其实会被以如下方式进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
<p>类似的，我们的第二个代码块 实际上是按这个流程来处理的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">a = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>这个过程就好像变量和函数声明从它们在代码中出现的位置被移动到了最上面，这个过程就叫做<strong>提升</strong>。</p>
<blockquote>
<p>简单的说就是，先声明，后赋值</p>
</blockquote>
<h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> a =<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>foo</code>的声明被提升了，因此在第一行的调用中可以正常运行。</p>
<p>另外，值得注意的是，每个作用域都会进行提升操作，就像我们正在讨论的<code>foo</code>也会在其内部对<code>var a</code>进行提升。因此，这段代码可以被理解为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意<strong>函数声明会被提升，但是函数表达式不会</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo() <span class="comment">// 不是ReferenceError，而是TypeError</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段程序的变量标识符<code>foo()</code>被提升并分配给所在作用域，因此<code>foo()</code>不会导致<code>ReferenceError</code>，但是<code>foo</code>没有被赋值（如果它是函数声明而不是函数表达式，那么就会被赋值）。<code>foo</code>由于对<code>undefined</code>值进行函数调用而导致非法操作，所以抛出<code>TypeError</code>。</p>
<p>实际上这段代码会被解析为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo()</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" target="_blank" rel="noopener">ReferenceError解释</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noopener">TypeError解释</a></p>
</blockquote>
<h1 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h1><p>函数声明和变量声明都会被提升，但是有一点值得注意：<strong>函数会首先被提升，然后才是变量</strong>。</p>
<p>以这段代码来举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo()</span><br><span class="line"><span class="keyword">var</span> foo</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果会输出<code>1</code>而不是<code>2</code>。这段代码会被引擎解析为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尽管<code>var foo</code>出现在<code>function foo()</code>的声明之前，但它是重复声明（因此被忽略掉了），因为函数声明会被提到变量声明之前。</p>
<p>于此同时，<strong>后面出现的函数声明可以覆盖前面的</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>我们习惯的将<code>var a = 2</code>看做一个声明，但是实际上<code>JavaScript</code>引擎并不这么认为，它将<code>var a</code>和<code>a = 2</code>当做两个单独的声明，第一个是编译阶段的任务，第二个是执行阶段的任务。</p>
<p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。所有的函数和变量声明都会被移到各自作用域的最顶端，这个过程就是<strong>提升</strong>。</p>
<p>声明本身会被提升，但是包括函数表达式在内的赋值操作不会被提升。</p>
<p>函数优先原则。</p>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS面向对象</title>
    <url>/2021/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>面向对象编程</p>
<a id="more"></a>

<h2 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h2><ol>
<li>执行函数；</li>
<li>自动创建空对象</li>
<li>把创建的对象指向另一个对象</li>
<li>吧空对象和函数里的this衔接起来(this指向实例化对象)</li>
<li>隐式返还this</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test...."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"><span class="keyword">new</span> test;</span><br><span class="line"><span class="keyword">new</span> test(); </span><br><span class="line"><span class="comment">//这三种方法执行效果相同</span></span><br></pre></td></tr></table></figure>
<p>简化工厂模式  —–&gt; 构造函数</p>
<ul>
<li><p>约定俗成 ： 首字母大写</p>
</li>
<li><p>属性放在构造原型；方法放在原型</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tab</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// let obj = &#123;&#125;; ---&gt; this</span></span><br><span class="line">    <span class="comment">// obj.name = "张三";</span></span><br><span class="line">    <span class="comment">// obj.hobby = function()&#123;</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"张三"</span>;</span><br><span class="line">    <span class="keyword">this</span>.hobby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"篮球"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return obj;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tab1 = <span class="keyword">new</span> Tab();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tab1.__proto__===Tab.prototype)  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Tab.prototype.__proto__===<span class="built_in">Object</span>.prototype) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">Tab.prototype.psFor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'psFor...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tab2 = <span class="keyword">new</span> Tab();</span><br><span class="line"><span class="built_in">console</span>.log(tab1.psFor === tab2.psFor)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Tab.prototype.foods = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="string">'foods...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tab1.foods()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每个原型上都有一个预定义属性 ： constructor<br>覆盖原本的 constructor 属性<br>用以下写法必须要写constructor,不然会找不到对象的原型指向</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Tab.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Tab,</span><br><span class="line">    psFor()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'psFor...'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hobby()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hobby...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'123saar'</span></span><br><span class="line"><span class="keyword">if</span>(str.constructor===<span class="built_in">String</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"字符串"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"不是"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="es6-类"><a href="#es6-类" class="headerlink" title="es6 类"></a>es6 类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drag</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> height = <span class="string">"178cm"</span>; <span class="comment">//静态属性 也可以这样写静态方法</span></span><br><span class="line">    <span class="keyword">constructor</span>(age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"张三"</span></span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    hobby()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"篮球"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    setStyle()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父类逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    testSuper()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父类test逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Drag.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//静态方法  也可这样写静态属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Drag.test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Drag.height) <span class="comment">//178cm</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Drag)  <span class="comment">//function</span></span><br><span class="line"><span class="keyword">let</span> drag1 = <span class="keyword">new</span> Drag()</span><br></pre></td></tr></table></figure>

<p>继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LimitDrag</span> <span class="keyword">extends</span> <span class="title">Drag</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age)&#123;</span><br><span class="line">        <span class="keyword">super</span>(age);</span><br><span class="line">    &#125;</span><br><span class="line">    setStyle()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"子类逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    testSuper()&#123;</span><br><span class="line">        <span class="keyword">super</span>.testSuper()  <span class="comment">//调用父类</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"子类test逻辑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> drag2 = <span class="keyword">new</span> LimitDrag(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(LimitDrag.height) <span class="comment">//178cm  静态属性方法在类上继承</span></span><br><span class="line"><span class="built_in">console</span>.log(drag2.height) <span class="comment">//undefined  </span></span><br><span class="line"></span><br><span class="line">drag2.setStyle()  <span class="comment">//子类逻辑</span></span><br><span class="line">drag2.testSuper()  <span class="comment">//父类test逻辑  子类test逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数的属性和方法通过实例化对象继承</span></span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS装饰器之防抖节流</title>
    <url>/2021/08/TS%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B9%8B%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>首先，我们先来了解一下什么是防抖和节流。</p>
<a id="more"></a>

<h1 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h1><p><strong>函数防抖，这里的抖动就是执行的意思，而一般的抖动都是持续的，多次的。假设函数持续多次执行，我们希望让它冷静下来再执行。也就是当持续触发事件的时候，函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行</strong></p>
<p>特点：</p>
<ul>
<li>持续触发不执行</li>
<li>最后一次触发过了一段时间之后再执行</li>
</ul>
<p>我们写 js 的时候通常会这么来写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(fn, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用的时候 以滚动为例</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = debounce(test, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>



<h1 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h1><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。</strong></p>
<p>说的通俗一点就是设计一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间）。</p>
<p>特点:</p>
<ul>
<li>如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效.</li>
</ul>
<p>js中我们的常见写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fun, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">          fun()</span><br><span class="line">        &#125;, wait)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用的时候 我们还是以滚动为例</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = throttle(test, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<h1 id="进阶（TS装饰器）"><a href="#进阶（TS装饰器）" class="headerlink" title="进阶（TS装饰器）"></a>进阶（TS装饰器）</h1><blockquote>
<p>在你阅读这节之前，希望你已经了解了<a href="https://qytayh.github.io/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/">TS基础</a>以及<a href="https://qytayh.github.io/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/">装饰器的基本用法</a>。</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工具函数</span></span><br><span class="line"><span class="keyword">const</span> delayDefault = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="function">(<span class="params">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = descriptor.value;</span><br><span class="line">    <span class="keyword">let</span> timer: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        oldValue.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流 时间戳写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> throttle = <span class="function">(<span class="params">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime, timer;</span><br><span class="line">    <span class="keyword">const</span> oldFunction = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="keyword">if</span> (lastTime &amp;&amp; nowTime - lastTime &lt; delay) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">          clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          oldFunction.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">          lastTime = nowTime;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oldFunction.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        lastTime = nowTime;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流  定时器写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> throttle = <span class="function">(<span class="params">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> oldFunction = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          timer = <span class="literal">null</span>;</span><br><span class="line">          oldFunction.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以上两种节流都可正常使用，没有好坏之分，看个人喜好。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">class</span> Test&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@debounce</span>()</span><br><span class="line">  funA()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'A'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@throttle</span>()</span><br><span class="line">  funB()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'B'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<!-- markdownlint-disable MD041 MD002-->
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack基础</title>
    <url>/2021/08/webpack%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h1><a id="more"></a>


<p><code>Webpack</code> 是⼀个现代 <code>JavaScript</code> 应⽤程序的静态模块打包器（<code>module bundler</code>），当 <code>webpack</code> 处理应⽤程序时，它会递归地构建⼀个依赖关系图(d<code>ependency graph</code>)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 <code>bundle</code>。</p>
<p><code>Webpack</code>是⼀个打包模块化<code>JavaScript</code>的⼯具，它会从⼊⼝模块出发，识别出源码中的模块化导⼊语句，递归地找出⼊⼝⽂件的所有依赖，将⼊⼝和其所有的依赖打包到⼀个单独的⽂件中是⼯程化、⾃动化思想在前端开发中的体现。</p>
<h1 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h1><p>环境准备<br>  nodejs:：<code>https://nodejs.org/en/</code><br>  版本参考官⽹发布的最新版本，可以提升webpack的打包速度</p>
<p>安装⽅式</p>
<p>  局部安装（推荐）</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y # 初始化npm配置⽂件</span><br><span class="line">npm install --save-dev webpack # 安装核⼼库</span><br><span class="line">npm install --save-dev webpack-cli # 安装命令⾏⼯具</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装4.x稳定版本</span></span><br><span class="line">npm i -D webpack@4.44.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line">npm i -D webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>  全局安装（不推荐）<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装webpack V4+版本时，需要额外安装webpack-cli</span></span><br><span class="line">npm install webpack webpack-cli -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查版本</span></span><br><span class="line">webpack -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">npm uninstall webpack webpack-cli -g</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>全局安装webpack，这会将你项⽬中的webpack锁定到指定版本，造成不同的项⽬中因为webpack依赖不同版本⽽导致冲突，构建失败</p>
</blockquote>
<h1 id="启动webpack"><a href="#启动webpack" class="headerlink" title="启动webpack"></a>启动webpack</h1><blockquote>
<p>启动wekpack执行构建，默认<code>mode=production</code>(默认开启代码压缩)</p>
</blockquote>
<ol>
<li><p>webpack默认配置</p>
<ul>
<li>webpack默认⽀持JS模块和JSON模块</li>
<li>⽀持CommonJS Es moudule AMD等模块类型</li>
<li>webpack4⽀持零配置使⽤,但是很弱，稍微复杂些的场景都需要额外扩展</li>
</ul>
</li>
<li><p>准备执⾏构建</p>
<ul>
<li>新建<code>src</code>⽂件夹</li>
<li>新建<code>src/index.js</code>、<code>src/index.json</code>、<code>src/other.js</code></li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">"./index.json"</span>);<span class="comment">//commonJS</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">"./other.js"</span>;<span class="comment">//es module</span></span><br><span class="line"><span class="built_in">console</span>.log(json, add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// index.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"JOSN"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//other.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执⾏构建</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npx⽅式</span></span><br><span class="line">npx webpack</span><br><span class="line"><span class="meta">#</span><span class="bash"> npm script</span></span><br><span class="line">npm run dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改package.json</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原理就是通过shell脚本在<code>node_modules/.bin</code>⽬录下创建⼀个软链接。</p>
</blockquote>
<ol start="4">
<li><p>我们会发现⽬录下多出⼀个<code>dist</code>⽬录，⾥⾯有个<code>main.js</code>，这个⽂件是⼀个可执⾏的<code>JavaScript</code>⽂件，⾥⾯包含<code>webpackBootstrap</code>启动函数。</p>
</li>
<li><p>默认配置</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">'./src/index.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'./dist'</span>), <span class="comment">// 输出的文件存放的目录</span></span><br><span class="line">    filename:<span class="string">'main.js'</span> <span class="comment">// 输出的文件名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">'development'</span>,<span class="comment">// 模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>webpack</code>配置名默认为<code>webpack.config.js</code>,也可以用其他命名，其他命名需要修改<code>package.json</code><br>“scripts”: {<br>  “dev”: “webpack –config ./youFileName.js”<br>}</p>
</blockquote>
<ol start="6">
<li>多入口对应多出口</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// entry支持：字符串 对象 数组</span></span><br><span class="line">  <span class="comment">// 字符串数组对应单页面应用</span></span><br><span class="line">  <span class="comment">// 对象可以单页面应用也可以多页面应用</span></span><br><span class="line">  entry:&#123;</span><br><span class="line">    index:<span class="string">'./src/index.js'</span>,</span><br><span class="line">    a:<span class="string">'./src/a.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// entry:['./src/index.js','./src/a.js'],</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'./dist'</span>), <span class="comment">// 输出的文件存放的目录</span></span><br><span class="line">    filename:<span class="string">'[name].js'</span><span class="comment">// 输出的文件名称 使用占位符 index打包成index.js a打包成a.js</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">'development'</span>,<span class="comment">// 构建模式  none development production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="webpack配置核⼼概念"><a href="#webpack配置核⼼概念" class="headerlink" title="webpack配置核⼼概念"></a>webpack配置核⼼概念</h1><ul>
<li>chunk：指代码块，⼀个<code>chunk</code>可能由多个模块组合⽽成，也⽤于代码合并与分割。</li>
<li>bundle：资源经过<code>Webpack</code>流程解析编译后最终结输出的成果⽂件。(输出到dist的文件)</li>
<li>entry：顾名思义，就是⼊⼝起点，⽤来告诉webpack⽤哪个⽂件作为构建依赖图的起点。<code>webpack</code>会根据<code>entry</code>递归的去寻找依赖，每个依赖都将被它处理，最后输出到打包成果中。</li>
<li>output：<code>output</code>配置描述了<code>webpack</code>打包的输出配置，包含输出⽂件的命名、位置等信息。</li>
<li>loader：默认情况下，<code>webpack</code>仅⽀持<code>.js</code> <code>.json</code> ⽂件，通过<code>loader</code>，可以让它解析其他类型的⽂件，充当翻译官的⻆⾊。理论上只要有相应的<code>loader</code>，就可以处理任何类型的⽂件。</li>
<li>plugin：<code>loader</code>主要的职责是让<code>webpack</code>认识更多的⽂件类型，⽽<code>plugin</code>的职责则是让其可以控制构建流程，从⽽执⾏⼀些特殊的任务。插件的功能⾮常强⼤，可以完成各种各样的任务。<ul>
<li><code>webpack</code>的功能补充</li>
</ul>
</li>
<li>mode：4.0开始，<code>webpack</code>⽀持零配置，旨在为开发⼈员减少上⼿难度，同时加⼊了<code>mode</code>的概念，⽤于指定打包的⽬标环境，以便在打包的过程中启⽤<code>webpack</code>针对不同的环境下内置的优化。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> htmlwebpackplugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>), <span class="comment">// 输出的文件存放的目录</span></span><br><span class="line">    filename: <span class="string">"main.js"</span>, <span class="comment">// 输出的文件名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// webpack处理css内容</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 多个loader情况下 执行顺序自后往前</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> htmlwebpackplugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">      filename: <span class="string">"index.html"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>webpack 默认只支持.js .json类型的模板。loader需要通过npm 进行安装<code>npm install style-loader -D</code>,<code>npm install css-loader -D</code></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket从入门到入土</title>
    <url>/2021/08/websocket%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    <content><![CDATA[<h1 id="什么是websocket？"><a href="#什么是websocket？" class="headerlink" title="什么是websocket？"></a>什么是<code>websocket</code>？</h1><p><code>websocket</code>是一种网络传输协议，可在单个<code>tcp</code>连接上进行全双工通信，位于<code>OSI</code>模型的应用层。</p>
<a id="more"></a>

<p>特点：</p>
<ul>
<li><code>TCP</code>链接，与<code>HTTP</code>协议兼容</li>
<li>双向通信，主动推送（服务端向客户端）</li>
<li>无同源限制，协议标识符为ws（加密wss）</li>
</ul>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li>聊天、消息、点赞</li>
<li>直播评论（弹幕）</li>
<li>游戏、协调编辑、基于位置的应用</li>
</ul>
<h1 id="开始你的第一个websocket应用"><a href="#开始你的第一个websocket应用" class="headerlink" title="开始你的第一个websocket应用"></a>开始你的第一个websocket应用</h1><h2 id="websocket常用前端库"><a href="#websocket常用前端库" class="headerlink" title="websocket常用前端库"></a>websocket常用前端库</h2><ul>
<li>ws (实现原生协议，特点：通用、性能高，定制型强)</li>
<li>socket.io (向下兼容协议，特点：适配性强，性能一般)</li>
</ul>
<h2 id="3分钟编写一个ws应用"><a href="#3分钟编写一个ws应用" class="headerlink" title="3分钟编写一个ws应用"></a>3分钟编写一个ws应用</h2><ol>
<li>新建<code>server</code>目录，通过<code>npm init -y</code>初始化<code>server</code>目录</li>
<li><code>npm install ws</code> 安装ws库</li>
<li>新建<code>index.js</code>作为入口文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>)</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;)</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'on client is connected'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>根目录下新建一个<code>client</code>目录，并添加<code>index.html</code>文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws =  <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:3000'</span>)</span><br></pre></td></tr></table></figure></li>
<li>通过<code>node index.js</code>启动服务端</li>
<li>访问客户端的<code>index.html</code>，我们可以看到服务端控制台输出有用户连接了</li>
</ol>
<blockquote>
<p>客户端中使用ws方法与服务端类似</p>
</blockquote>
<h1 id="常见API介绍"><a href="#常见API介绍" class="headerlink" title="常见API介绍"></a>常见API介绍</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>
<h1 id="websocket常见状态"><a href="#websocket常见状态" class="headerlink" title="websocket常见状态"></a>websocket常见状态</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'open'</span>+ws.readyState) <span class="comment">// 1</span></span><br><span class="line">  ws.send(<span class="string">'hello from client'</span>)</span><br><span class="line">&#125;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'message'</span>+ws.readyState) <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接主动断开时触发</span></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'close'</span>+ ws.readyState)  <span class="comment">//  close: 服务端断开 3  客户端主动断开 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'yiguanbi'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当连接失败触发error事件</span></span><br><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>+ ws.readyState)  <span class="comment">//  erroe:3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实现一个ws广播"><a href="#实现一个ws广播" class="headerlink" title="实现一个ws广播"></a>实现一个ws广播</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server端</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">wss.clients.forEach(<span class="function">(<span class="params">client</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 判断非自己的客户端 并且有连接的客户端</span></span><br><span class="line">  <span class="keyword">if</span>(ws!==client&amp;&amp;client.readyState===WebSocket.OPEN)&#123;</span><br><span class="line">    client.send(msg.toString())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="统计进入聊天室的人数"><a href="#统计进入聊天室的人数" class="headerlink" title="统计进入聊天室的人数"></a>统计进入聊天室的人数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="comment">// 改写sendMSg方法</span></span><br><span class="line">sendMsg()&#123;</span><br><span class="line">  <span class="keyword">this</span>.lists.push(<span class="keyword">this</span>.name+<span class="string">":"</span>+<span class="keyword">this</span>.message)</span><br><span class="line">  <span class="keyword">this</span>.ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    event:<span class="string">'message'</span>,</span><br><span class="line">    message:<span class="keyword">this</span>.message,</span><br><span class="line">    name:<span class="keyword">this</span>.name <span class="comment">// 传递用户名</span></span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">this</span>.message=<span class="string">''</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 改写onMsessage</span></span><br><span class="line">onMessage(event)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.isshow) <span class="keyword">return</span> <span class="comment">// 未进入聊天室则不接收消息</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(event.data)</span><br><span class="line">  <span class="keyword">if</span>(obj.event===<span class="string">'enter'</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.lists.push(<span class="string">'欢迎'</span>+obj.message+<span class="string">'加入聊天室'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.event ===<span class="string">'out'</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.lists.push(obj.name+<span class="string">'离开了聊天室'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.name!==<span class="keyword">this</span>.name)&#123;</span><br><span class="line">      <span class="keyword">this</span>.lists.push(obj.name+<span class="string">":"</span>+obj.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.num = obj.num</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个全局的变量num用于人数统计</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> msgObj = <span class="built_in">JSON</span>.parse(msg);</span><br><span class="line">  <span class="keyword">if</span> (msgObj.event === <span class="string">"enter"</span>) &#123;</span><br><span class="line">    ws.name = msgObj.message;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ws.send(msg)</span></span><br><span class="line">  <span class="comment">// 广播消息</span></span><br><span class="line">  wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">      <span class="comment">// 为了获取在线的聊天人数</span></span><br><span class="line">      msgObj.num = num;</span><br><span class="line">      client.send(<span class="built_in">JSON</span>.stringify(msgObj));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当ws客户端断开</span></span><br><span class="line">ws.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(ws.name)&#123;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> msgObj = &#123;&#125;</span><br><span class="line">  <span class="comment">// 广播消息</span></span><br><span class="line">  wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">      <span class="comment">// 为了获取在线的聊天人数</span></span><br><span class="line">      msgObj.num = num;</span><br><span class="line">      msgObj.name = ws.name;</span><br><span class="line">      msgObj.event = <span class="string">'out'</span></span><br><span class="line">      client.send(<span class="built_in">JSON</span>.stringify(msgObj));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="实现多聊天室"><a href="#实现多聊天室" class="headerlink" title="实现多聊天室"></a>实现多聊天室</h1><p>调整<code>client</code>代码，在<code>enter</code>的时候带上聊天室的<code>id</code>,广播的时候只对该聊天室进行广播</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client</span></span><br><span class="line">enter()&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.name.trim()===<span class="string">''</span>)  &#123;</span><br><span class="line">    alert(<span class="string">'用户名不得为空'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.isShow=<span class="literal">false</span></span><br><span class="line">  <span class="keyword">this</span>.ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    event:<span class="string">'enter'</span>,</span><br><span class="line">    message:<span class="keyword">this</span>.name,</span><br><span class="line">    roomid:<span class="keyword">this</span>.roomid</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line"> wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (client.readyState === WebSocket.OPEN&amp;&amp; client.roomid ===ws.roomid) &#123;</span><br><span class="line">    msgObj.name = ws.name</span><br><span class="line">    client.send(<span class="built_in">JSON</span>.stringify(msgObj));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="websocket鉴权"><a href="#websocket鉴权" class="headerlink" title="websocket鉴权"></a>websocket鉴权</h1><ul>
<li>协议本身在握手阶段不提的</li>
<li>浏览器侧：url传参、message主动消息，session/cookie</li>
<li>Nodejs侧：直接使用ws传Header</li>
</ul>
<h1 id="心跳检测-amp-断线重连"><a href="#心跳检测-amp-断线重连" class="headerlink" title="心跳检测&amp;断线重连"></a>心跳检测&amp;断线重连</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server 发送心跳检测</span></span><br><span class="line"><span class="keyword">const</span> timeInterval = <span class="number">1000</span></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  wss.clients.forEach(<span class="function">(<span class="params">ws</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ws.isAlive)&#123;</span><br><span class="line">      group[ws.roomid]--</span><br><span class="line">      <span class="keyword">return</span> ws.terminate() <span class="comment">//关闭ws链接</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主动发送心跳检测请求</span></span><br><span class="line">    <span class="comment">// 当客户端返回了消息后，主动设置flag为在线</span></span><br><span class="line">    ws.isAlive = <span class="literal">false</span></span><br><span class="line">    ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      event:<span class="string">'heartbeat'</span>,</span><br><span class="line">      message:<span class="string">'ping'</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,timeInterval)</span><br><span class="line"></span><br><span class="line"><span class="comment">// client 响应</span></span><br><span class="line">onMessage(event) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isShow) <span class="keyword">return</span>; <span class="comment">//用户没进入聊天室 就不接收消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"message"</span> + <span class="keyword">this</span>.ws.readyState); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(event.data);</span><br><span class="line">  <span class="keyword">switch</span> (obj.event) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"noAuth"</span>:</span><br><span class="line">      <span class="comment">// 鉴权失败</span></span><br><span class="line">      <span class="comment">// 重新获取token</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"enter"</span>:</span><br><span class="line">      <span class="keyword">this</span>.lists.push(<span class="string">"欢迎"</span> + obj.message + <span class="string">"加入聊天室"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"out"</span>:</span><br><span class="line">      <span class="keyword">this</span>.lists.push(obj.name + <span class="string">"离开了聊天室"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'heartbeat'</span>:<span class="comment">// 响应心跳检测</span></span><br><span class="line">      <span class="keyword">this</span>.ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        event:<span class="string">'heartbeat'</span>,</span><br><span class="line">        message:<span class="string">'pong'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">if</span> (obj.name !== <span class="keyword">this</span>.name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lists.push(obj.name + <span class="string">":"</span> + obj.message);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.num = obj.num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client 断线重连</span></span><br><span class="line"><span class="comment">// 新增定时器方法</span></span><br><span class="line">checkServer()&#123;</span><br><span class="line">  clearTimeout(<span class="keyword">this</span>.handle)</span><br><span class="line">  <span class="keyword">this</span>.handle = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.onClose()</span><br><span class="line">    <span class="keyword">this</span>.initWS()</span><br><span class="line">  &#125;, <span class="number">1000</span>+<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写onError</span></span><br><span class="line"> onError() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"error"</span> + ws.readyState); <span class="comment">//  erroe:3</span></span><br><span class="line">  <span class="comment">// 连接失败后1s 尝试断线重连</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.initWS()</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


<blockquote>
<p>相关代码请移步github —–&gt; <a href="https://github.com/qytayh/websocketBase" target="_blank" rel="noopener">websocketBase</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack进行前端开发工程环境搭建</title>
    <url>/2021/08/webpack%E8%BF%9B%E8%A1%8C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>在阅读这篇文章之前，请确认你已经了解了webpack的基本常识</p>
<blockquote>
<p><a href="https://qytayh.github.io/2021/08/webpack%E5%9F%BA%E7%A1%80/">还不了解？点击查看《webpack基础》</a></p>
</blockquote>
<a id="more"></a>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>多人协作时，可以在项目根目录下新建一个<code>.npmrc</code>文件用来指定npm源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 统一团队的npm源</span></span><br><span class="line">registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用npm install的时候就会默认淘宝源</span></span><br></pre></td></tr></table></figure>

<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="样式-静态资源-图片第三方字体-es6-vue-react-ts"><a href="#样式-静态资源-图片第三方字体-es6-vue-react-ts" class="headerlink" title="样式 静态资源 (图片第三方字体) es6+ (vue react ts)"></a>样式 静态资源 (图片第三方字体) es6+ (vue react ts)</h2><h3 id="样式：借助css-loader处理css语法，借助style-loader使用css"><a href="#样式：借助css-loader处理css语法，借助style-loader使用css" class="headerlink" title="样式：借助css-loader处理css语法，借助style-loader使用css"></a>样式：借助css-loader处理css语法，借助style-loader使用css</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// webpack处理css内容</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 多个loader情况下 执行顺序自后往前</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 先将less语法转成css语法</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>,<span class="string">"less-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>,<span class="string">"sass-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.postcss.com.cn/" target="_blank" rel="noopener">postcss官网</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">根目录下新增<span class="string">`postcss.config.js`</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"autoprefixer"</span>),<span class="comment">// 浏览器兼容</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"cssnano"</span>) <span class="comment">// css 压缩</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>package.json</code>中<code>&quot;browserslist&quot;:[&quot;last 2 versions&quot;,&quot;&gt; 1%&quot;]</code>用于配置<code>autoprefixer</code>自动兼容版本（兼容所有浏览器最近的两个大版本，全球市场占有率大于1%的浏览器）<br>更多点击 –&gt; <a href="https://qytayh.github.io/2021/08/Browserslist/">Browserslist</a></p>
</blockquote>
<p>安装<code>mini-css-extract-plugin</code>用来做样式提取，将css样式抽离成css文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>
<p>修改<code>webpack.config.js</code>中的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> minicssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)<span class="comment">//先进行引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">   <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 将style-loader替换成minicssExtractPlugin自带的loader</span></span><br><span class="line">        use: [minicssExtractPlugin.loader, <span class="string">"css-loader"</span>, <span class="string">"postcss-loader"</span>,<span class="string">"less-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> minicssExtractPlugin(&#123; <span class="comment">// 将样式抽离成独立的css文件</span></span><br><span class="line">      filename:<span class="string">"[name].css"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图片-字体⽂件处理："><a href="#图片-字体⽂件处理：" class="headerlink" title="图片/字体⽂件处理："></a>图片/字体⽂件处理：</h3><ul>
<li>file-loader </li>
<li>url-loader</li>
</ul>
<p><code>url-loader</code>和<code>file-loader</code>都可以⽤来处理本地的资源⽂件，如图⽚、字体、⾳视频等。功能也是类似的，不过<code>url-loader</code>可以指定在⽂件⼤⼩⼩于指定的限制时，返回<code>DataURL</code>，不会输出真实的⽂件，可以减少昂贵的⽹络请求。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">npm install url-loader file-loader -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> pic <span class="keyword">from</span> <span class="string">'you pic url'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = pic</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">root.append(img)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line">&#123;</span><br><span class="line">  test:<span class="regexp">/\.(png|jp?g|gif|webp)$/</span>,</span><br><span class="line">  <span class="comment">// use:"file-loader"</span></span><br><span class="line">  use:&#123;</span><br><span class="line">    loader:<span class="string">'file-loader'</span>,</span><br><span class="line">    options:&#123;</span><br><span class="line">      name:<span class="string">"images/[name].[ext]"</span>, <span class="comment">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class="line">      outputPath:<span class="string">'images'</span>,<span class="comment">// 输出目录</span></span><br><span class="line">      publicPath:<span class="string">'../images'</span> <span class="comment">// 引用的目录自动带上publicPath路径</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use:"url-loader"  url-loader兼容file-loader的配置</span></span><br><span class="line">  use:&#123;</span><br><span class="line">    loader:<span class="string">'url-loader'</span>,</span><br><span class="line">    options:&#123;</span><br><span class="line">      name:<span class="string">"images/[name].[ext]"</span>, <span class="comment">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class="line">      outputPath:<span class="string">'images'</span>,<span class="comment">// 输出目录</span></span><br><span class="line">      publicPath:<span class="string">'../images'</span>, <span class="comment">// 引用的目录自动带上publicPath路径</span></span><br><span class="line">      limit: <span class="number">1024</span>*<span class="number">10</span>   <span class="comment">// 单位是字节 1024为一个kb  大于limit值为png格式 小于limit值 转base64</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noopener">file-loader更多相关</a><br>如果需要使⽤图⽚压缩功能，可以使⽤<code>image-webpack-loader</code>。</p>
</blockquote>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;css</span><br><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &quot;webfont&quot;;</span><br><span class="line">  font-display: swap;</span><br><span class="line">  src: url(&quot;webfont.woff2&quot;) format(&quot;woff2&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  background: blue;</span><br><span class="line">  font-family: &quot;webfont&quot;!important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">&#123;</span><br><span class="line">  test: &#x2F;\.(eot|ttf|woff|woff2|svg)$&#x2F;,</span><br><span class="line">  use: &quot;file-loader&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><ul>
<li><p><code>hash</code>策略</p>
<blockquote>
<p>在输出的文件名后添加<code>[hash]</code>，可以用<code>[hash:8]</code>控制文件名中hash长度<br>以项目为单位，项目内容改变，则会生产新的hash，内容不变hash不变</p>
</blockquote>
</li>
<li><p>使用<code>chunkhash</code></p>
<blockquote>
<p>以<code>chunk</code>为单位，当一个文件内容改变，则整个chunk组的模块hash都会改变<br><code>[name]-[chunkhash:8].[ext]</code></p>
</blockquote>
</li>
<li><p><code>contenthash</code></p>
<blockquote>
<p>以自身内容为单位</p>
</blockquote>
</li>
</ul>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始进阶全栈之koa源码</title>
    <url>/2021/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%BF%9B%E9%98%B6%E5%85%A8%E6%A0%88%E4%B9%8Bkoa%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>深入了解koa原理</p>
<a id="more"></a>

<h1 id="koa原理"><a href="#koa原理" class="headerlink" title="koa原理"></a>koa原理</h1><p>⼀个基于nodejs的⼊⻔级http服务，类似下⾯代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>)</span><br><span class="line">    res.end(<span class="string">'hello world!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server listen at 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>koa的⽬标是⽤更简单化、流程化、模块化的⽅式实现回调部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 koa.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Koa</span> </span>&#123;</span><br><span class="line">    listen(...args)&#123;</span><br><span class="line">        <span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.callback(req,res)</span><br><span class="line">        &#125;)</span><br><span class="line">        server.listen(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    use(callback)&#123;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports =  Koa</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 在inde.js中</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'./koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>)</span><br><span class="line">    res.end(<span class="string">'hello world!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">300</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server start at 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>⽬前为⽌，Koa只是个⻢甲，要真正实现⽬标还需要引⼊上下⽂（context）和中间件机制</p>
</blockquote>
<h1 id="context"><a href="#context" class="headerlink" title="context"></a>context</h1><p>koa为了能够简化API，引⼊上下⽂context概念，将原始请求对象req和响应对象res封装并挂载到context上，并且在context上设置getter和setter，从⽽简化操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo</span></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span>=&gt;</span>&#123;</span><br><span class="line">    ctx.body = <span class="string">'hehe'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>封装 context、request、response</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="keyword">get</span> url()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.req.url</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> method()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.req.method.toLowerCase()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// response.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="keyword">get</span> body() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._body</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> body(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>._body = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// context.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="keyword">get</span> url()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.req.url</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> method()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.req.method.toLowerCase()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> body() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._body</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> body(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>._body = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在koa.js中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">'./context'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'./request'</span>)</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">'./response'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Koa</span> </span>&#123;</span><br><span class="line">    listen(...args)&#123;</span><br><span class="line">        <span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// this.callback(req,res)</span></span><br><span class="line">            <span class="comment">// 创建上下文</span></span><br><span class="line">            <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContext(req,res)</span><br><span class="line">            <span class="keyword">this</span>.callback(ctx)</span><br><span class="line">            <span class="comment">// 相应</span></span><br><span class="line">            res.end(ctx.body)</span><br><span class="line">        &#125;)</span><br><span class="line">        server.listen(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    createContext(req,res)&#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="built_in">Object</span>.create(context)</span><br><span class="line">        ctx.request = <span class="built_in">Object</span>.create(request)</span><br><span class="line">        ctx.response = <span class="built_in">Object</span>.create(response)</span><br><span class="line">        ctx.req = ctx.request.req = req</span><br><span class="line">        ctx.res = ctx.response.res = res</span><br><span class="line">        <span class="keyword">return</span> ctx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>Koa中间件机制：Koa中间件机制就是函数式 组合概念Compose的概念，将⼀组需要顺序执⾏的函数复合为⼀个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是源码中的精髓和难点。</p>
<p>异步中间件：我们要⽀持async + await的中间件，要等异步结束后，再执⾏下⼀个中间件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middlewares</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> fn = middlewares[i]</span><br><span class="line">            <span class="keyword">if</span>(!fn)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">                fn(<span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="comment">// promise完成后，再执⾏下⼀个</span></span><br><span class="line">                    <span class="keyword">return</span> dispatch(i+<span class="number">1</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="router"><a href="#router" class="headerlink" title="router"></a>router</h1><p>routes()的返回值是⼀个中间件，由于需要⽤到method，所以需要挂载method到ctx之上，修改request.js</p>
<blockquote>
<p>实现方式请移步<a href="https://github.com/qytayh/write_koa" target="_blank" rel="noopener">github—-&gt;write_koa</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>全栈之路</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>全栈之路</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始进阶全栈之NODE基础api</title>
    <url>/2021/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%BF%9B%E9%98%B6%E5%85%A8%E6%A0%88%E4%B9%8BNODE%E5%9F%BA%E7%A1%80api/</url>
    <content><![CDATA[<p>本篇内容：异步I/O概念、promisify用法、流、buffer，http服务</p>
<a id="more"></a>

<h1 id="异步I-O概念"><a href="#异步I-O概念" class="headerlink" title="异步I/O概念"></a>异步I/O概念</h1><p>对于这个概念，网上有一个很经典的例子</p>
<p>隔壁王大爷有个水壶，王大爷经常用它来烧开水。</p>
<ul>
<li>王大爷把水壶放到火上烧，然后啥也不干在那等，直到水开了王大爷再去搞别的事情。（同步阻塞）</li>
<li>王大爷觉得自己有点憨，不打算等了。把水壶放上去之后大爷就是去看电视，时不时来瞅一眼有没有开（同步非阻塞）</li>
<li>王大爷去买了个响水壶，他把响水壶放在火上，然后也是等着水开，水开的时候水壶会发出声响（异步阻塞）</li>
<li>王大爷又觉得自己有点憨，他把响水壶放在火上然后去看电视，这时他不用是不是来瞅一眼，因为水开的时候水壶会发出声音通知大爷。（异步非阻塞）</li>
</ul>
<p>上面四个例子里，阻塞非阻塞说明的是大爷的状态，同步非同步说明的是水壶的调用姿势。水壶能在烧好的时候主动响起，就等同于我们异步的定义，能在结束时通知主线程并且回调。所以异步一般配合非阻塞，才能发挥其作用。</p>
<h1 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">// 同步调用 </span></span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(<span class="string">'./xxx.js'</span>); <span class="comment">//代码会阻塞在这里 </span></span><br><span class="line"><span class="built_in">console</span>.log(data);<span class="comment">// 打出的是 buffer数据 如果要显示实际数据 打印 data.toString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步调用</span></span><br><span class="line"><span class="comment">// 错误优先的回调</span></span><br><span class="line">fs.readFile(<span class="string">'./xxxx.js'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// promisify</span></span><br><span class="line"><span class="comment">// promise风格接口</span></span><br><span class="line"><span class="keyword">const</span> &#123;promisify&#125; = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"><span class="keyword">const</span> readFile = promisify(fs.readFile)</span><br><span class="line">readFile(<span class="string">'./xxx.js'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data))</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs Promises API node v10 </span></span><br><span class="line"><span class="keyword">const</span> fsp = <span class="built_in">require</span>(<span class="string">"fs"</span>).promises; </span><br><span class="line">fsp.readFile(<span class="string">"./confs.js"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data)) </span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// async/await</span></span><br><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123;promisify&#125; = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line">    <span class="keyword">const</span> readFile = promisify(fs.readFile)</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> readFile(<span class="string">'./xxx.js'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h1 id="buffer对象"><a href="#buffer对象" class="headerlink" title="buffer对象"></a>buffer对象</h1><p>Buffer - 用于在 TCP 流、文件系统操作、以及其他上下文中与八位字节流进行交互。 八位字节组成的数组，可以有效的在JS中存储二进制数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个长度为10字节以0填充的Buffer</span></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>) <span class="comment">// 分配10字节的内存空间</span></span><br><span class="line"><span class="comment">// 读取Buffer数据</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1)  <span class="comment">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Buffer包含ascii.</span></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">'a'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf2)  <span class="comment">//&lt;Buffer 61&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Buffer 包含utf-8字节</span></span><br><span class="line"><span class="comment">// UFT-8：一种变长的编码方案，使用 1~6 个字节来存储； </span></span><br><span class="line"><span class="comment">// UFT-32：一种固定长度的编码方案，不管字符编号大小，始终使用 4 个字节来存储； </span></span><br><span class="line"><span class="comment">// UTF-16：介于 UTF-8 和 UTF-32 之间，使用 2 个或者 4 个字节来存储，长度既固定又可变。</span></span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.from(<span class="string">'中文'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf3,buf3.toString()) <span class="comment">//&lt;Buffer e4 b8 ad e6 96 87&gt; 中文</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并  图片的上传 二进制=&gt; 分包  分包接收</span></span><br><span class="line"><span class="keyword">const</span> buf4 = Buffer.concat([buf2,buf3])</span><br><span class="line"><span class="built_in">console</span>.log(buf4,buf4.toString())  <span class="comment">// &lt;Buffer 61 e4 b8 ad e6 96 87&gt; 'a中文'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入buffer</span></span><br><span class="line">buf1.write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf1,buf1.toString()) <span class="comment">//&lt;Buffer 68 65 6c 6c 6f 00 00 00 00 00&gt; 'hello\u0000\u0000\u0000\u0000\u0000'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Buffer类似数组，所以很多数组方法它都有<br>GBK转码 icon-lite</p>
</blockquote>
<h1 id="http服务"><a href="#http服务" class="headerlink" title="http服务"></a>http服务</h1><p>创建一个http服务器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request'</span>,request)</span><br><span class="line">    response.end(<span class="string">'hello node'</span>)</span><br><span class="line">&#125;) </span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br><span class="line"><span class="comment">// 使用 node/nodemon 启动</span></span><br><span class="line"><span class="comment">// 访问localhost:3000</span></span><br></pre></td></tr></table></figure>

<p>显示一个首页</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;url, method&#125; = request; </span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span> &amp;&amp; method === <span class="string">'GET'</span>) &#123; </span><br><span class="line">        fs.readFile(<span class="string">'index.html'</span>, (err, data) =&gt; &#123; </span><br><span class="line">            <span class="keyword">if</span> (err) &#123; </span><br><span class="line">                response.writeHead(<span class="number">500</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=utf-8'</span> &#125;); </span><br><span class="line">                response.end(<span class="string">'500，服务器错误'</span>); </span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.statusCode = <span class="number">200</span>; </span><br><span class="line">            response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>); </span><br><span class="line">            response.end(data);</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/users'</span> &amp;&amp; method === <span class="string">'GET'</span>) &#123; </span><br><span class="line">        <span class="comment">// 编写一个接口</span></span><br><span class="line">        response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;); </span><br><span class="line">        response.end(<span class="built_in">JSON</span>.stringify([&#123;<span class="attr">name</span>:<span class="string">'tom'</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;]));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        response.statusCode = <span class="number">404</span>; </span><br><span class="line">        response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain;charset=utf-8'</span>); </span><br><span class="line">        response.end(<span class="string">'404, 页面没有找到'</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> rs =  fs.createReadStream(<span class="string">'./1.jpg'</span>)</span><br><span class="line"><span class="keyword">const</span> ws = fs.createWriteStream(<span class="string">'./2.jpg'</span>)</span><br><span class="line">rs.pipe(ws) <span class="comment">// 占用内存少</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>) </span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;url, method, headers&#125; = request; </span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span> &amp;&amp; method === <span class="string">'GET'</span>) &#123; </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 所有的图片请求</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'GET'</span> &amp;&amp; headers.accept.includes(<span class="string">'image/*'</span>)) &#123; </span><br><span class="line">        <span class="comment">// 不使用fs.readFile() ----&gt; 读文件 全部存入内存 1k  100m</span></span><br><span class="line">        <span class="comment">// 使用createReadStream 流的方式</span></span><br><span class="line">        fs.createReadStream(<span class="string">'.'</span>+url).pipe(response); </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>全栈之路</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝小程序父子组件相互调用</title>
    <url>/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>组件调用方式与vue类似，但是还是有一些区别，记录一下。</p>
<a id="more"></a>

<h1 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-name title=<span class="string">"title"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">props:&#123;</span><br><span class="line">  title:<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;view&gt;&#123;&#123;title&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">props:&#123;</span><br><span class="line">  onYourMethod:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">  onTapSubmit()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onYourMethod(<span class="string">'from child'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-name onTapSubmit=<span class="string">"fatherMethod"</span> /&gt;</span><br><span class="line"></span><br><span class="line">fatherMethod(e)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)  <span class="comment">// from child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="父组件调用子组件方法"><a href="#父组件调用子组件方法" class="headerlink" title="父组件调用子组件方法"></a>父组件调用子组件方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-name ref=<span class="string">'childRefName'</span> /&gt;</span><br><span class="line"></span><br><span class="line">childRefName(ref)&#123;</span><br><span class="line">  <span class="keyword">this</span>.ref=ref</span><br><span class="line">&#125;</span><br><span class="line">youFun()&#123;</span><br><span class="line">  <span class="keyword">this</span>.ref.childMethod(<span class="string">'from father'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">methods:&#123;</span><br><span class="line">  childMethod(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e) <span class="comment">//from father</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>使用ref时需要开启component2 不然ref不会生效</strong></p>
</blockquote>
<h1 id="兄弟组件相互调用"><a href="#兄弟组件相互调用" class="headerlink" title="兄弟组件相互调用"></a>兄弟组件相互调用</h1><p>大致思路是这样的：组件A -&gt; 父组件 -&gt; 组件B</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件A</span></span><br><span class="line">props:&#123;</span><br><span class="line">  onEmitToBrother:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">  onTapAButton()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onEmitToBrother(<span class="string">'refB'</span>,<span class="string">'comBFun'</span>,<span class="string">'from A'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  comAFun(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)  <span class="comment">// from B</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件B</span></span><br><span class="line"><span class="comment">// 子组件A</span></span><br><span class="line">props:&#123;</span><br><span class="line">  onEmitToBrother:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">  onTapBButton()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onEmitToBrother(<span class="string">'refA'</span>,<span class="string">'comAFun'</span>,<span class="string">'from B'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  comBFun(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e) <span class="comment">// from A</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;A-name onEmitToBrother=<span class="string">"onEmitToBrother"</span> ref=<span class="string">"refA"</span> /&gt;</span><br><span class="line">&lt;B-name onEmitToBrother=<span class="string">"onEmitToBrother"</span> ref=<span class="string">"refB"</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">refA(ref)&#123;</span><br><span class="line">  <span class="keyword">this</span>.refA=ref</span><br><span class="line">&#125;</span><br><span class="line">refB(ref)&#123;</span><br><span class="line">  <span class="keyword">this</span>.refB=ref</span><br><span class="line">&#125;</span><br><span class="line">onEmitToBrother(refName,funName,args)&#123;</span><br><span class="line">  <span class="keyword">this</span>[refName][funName](args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果有其他更好的方案 欢迎补充</p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>支付宝小程序</category>
      </categories>
      <tags>
        <tag>支付宝小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝小程序前端授权</title>
    <url>/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>支付宝小程序授权中，前端的详细流程。</p>
<a id="more"></a>


<!-- ![授权流程](./支付宝小程序前端授权/authFlow.png) -->
<img src="/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E6%8E%88%E6%9D%83/authFlow.png" class="" title="[授权流程]">








<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>支付宝小程序</category>
      </categories>
      <tags>
        <tag>支付宝小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始进阶全栈之数据库（一）</title>
    <url>/2021/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%BF%9B%E9%98%B6%E5%85%A8%E6%A0%88%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="数据库能做什么"><a href="#数据库能做什么" class="headerlink" title="数据库能做什么"></a>数据库能做什么</h1><a id="more"></a>

<ul>
<li><p>存储大量数据，方便检索和访问</p>
</li>
<li><p>保持数据信息的一致、完整</p>
</li>
<li><p>共享和安全</p>
</li>
<li><p>通过组合分析，产生新的有用的信息</p>
</li>
</ul>
<h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>只要是在客观世界存在的，可以被描述出来的都是实体</p>
<h2 id="数据库（DB）"><a href="#数据库（DB）" class="headerlink" title="数据库（DB）"></a>数据库（DB）</h2><p>数据库就是数据的仓库，可以存放结构化的数据</p>
<h2 id="数据库管理系统（DBMS）"><a href="#数据库管理系统（DBMS）" class="headerlink" title="数据库管理系统（DBMS）"></a>数据库管理系统（DBMS）</h2><p>是一种系统软件，提供操作数据库的环境，可以通过数据库管理系统对数据进行插入，修改，删除和查询等操作</p>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>结构化查询语言，专门用来和数据库进行交流的语言，几乎所有DBMS都支持SQL</p>
<h2 id="SQL规范"><a href="#SQL规范" class="headerlink" title="SQL规范"></a>SQL规范</h2><ul>
<li>SQL语句不区分大小写，建议SQL关键字大写，表名和列表小写</li>
<li>命令用分号结尾</li>
<li>命令可以缩进和换行，一种类型的关键字放在一行</li>
<li>可以写单行和多行注释，#是单行注释 /***/是多行注释</li>
</ul>
<h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><ul>
<li>表是数据库中包含所有数据的数据库对象，也是其他对象的基础</li>
<li>表定义是一个列的集合，数据在表中是按行和列的格式组织的，用来存放数据</li>
<li>行也称为记录，用于存放一个个实体，列称为字段，用来描述实体的某一个属性</li>
</ul>
<h1 id="MYSQL简介"><a href="#MYSQL简介" class="headerlink" title="MYSQL简介"></a>MYSQL简介</h1><h2 id="MYSQL特点"><a href="#MYSQL特点" class="headerlink" title="MYSQL特点"></a>MYSQL特点</h2><ul>
<li>开源免费</li>
<li>性能高</li>
<li>安装使用简单</li>
</ul>
<h1 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h1><ul>
<li>为了实现数据完整性，需要检验数据库表中的每行和每列数据是否符合要求</li>
<li>在创建表的时候，应该保证以后的数据是正确的，错误的数据不允许输入</li>
</ul>
<h2 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h2><h3 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h3><ul>
<li>tinyint  (1字节)</li>
<li>smallint  （2自字节）</li>
<li>mediumint  (3字节)</li>
<li>int      (4字节)</li>
<li>bigint   （8字节）</li>
</ul>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li>float   </li>
<li>double</li>
</ul>
<h3 id="定点"><a href="#定点" class="headerlink" title="定点"></a>定点</h3><ul>
<li>decimal  (字符串或数字型数值转换成大浮点数)</li>
</ul>
<h3 id="日期时间型"><a href="#日期时间型" class="headerlink" title="日期时间型"></a>日期时间型</h3><ul>
<li>year</li>
<li>timestamp   (时间戳)</li>
<li>time</li>
<li>date</li>
<li>datetime</li>
</ul>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul>
<li>set   (集合)</li>
<li>enum  (枚举)</li>
<li>blob  (可以存二进制)</li>
<li>text</li>
<li>varchar</li>
<li>char</li>
</ul>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>默认值是指如果用户没有指定的情况下会记录的此字段之前指定预设的值</p>
<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><p>我们可以约定某个字段不能不输入，必须提供一个非空的值</p>
<h1 id="实例完整性"><a href="#实例完整性" class="headerlink" title="实例完整性"></a>实例完整性</h1><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合就称为表的主键，主键表的数据不能重复</p>
<blockquote>
<p>如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为组合键</p>
</blockquote>
<p><strong>主键选择标准</strong></p>
<ol>
<li>最少性:尽量选择单个键作为主键</li>
<li>稳定性: 由于主键是用来在两个表之间建立连接的，所以不能经常更新，最好就不更新</li>
</ol>
<h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>唯一约束是指某个字段值是唯一的，在所有的记录中不能有重复的值</p>
<h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><ul>
<li>当表中没有合适的列作为主键时，可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条几率</li>
<li>标识列的值是自动生成的，不能再该列上输入数据</li>
</ul>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>一个表的外键必须引用另一个表的主键</p>
<ul>
<li>主表没有记录，子表中不能添加对应的记录</li>
<li>修改和删除主标记录不能让子表记录孤立，必须相应修改和删除</li>
</ul>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>全栈之路</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始进阶全栈之手撕promise</title>
    <url>/2021/10/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%BF%9B%E9%98%B6%E5%85%A8%E6%A0%88%E4%B9%8B%E6%89%8B%E6%92%95promise/</url>
    <content><![CDATA[<p>从0开始用ts实现promise</p>
<a id="more"></a>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><code>npm init -y</code> 初始化npm</li>
<li><code>npm i @rollup/plugin-node-resolve rollup rollup-plugin-typescript2 typescript -D</code> 安装必要依赖</li>
<li>创建<code>rollup.config.js</code>，并进行配置</li>
<li><code>npx tsc --init</code> 初始化ts开发</li>
</ul>
<h1 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h1><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ol>
<li><p>如果你的函数的参数是一个函数,那么你的函数可以称为高阶函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果一个函数里面返回了一个函数，那么也是高阶函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>柯里化函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> utils = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(val) ==<span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="string">'String'</span>,<span class="string">'Number'</span>,<span class="string">'Boolean'</span>].forEach(<span class="function"><span class="params">type</span>=&gt;</span>&#123;</span><br><span class="line">    utils[<span class="string">`is`</span>+type] = isType(type)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(utils.isString(<span class="string">'hello'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(utils.isNumber(<span class="number">111</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>柯里化的功能可以让函数功能更具体</p>
</blockquote>
</li>
</ol>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><ul>
<li>promise可以解决多个异步并行执行，最终得到所有的结果</li>
<li>异步嵌套问题</li>
</ul>
<h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.每个promise都有三个状态   pending 等待态   resolve 标识变成成功态fulfilled    reject 标识变成失败态 REJECTED</span></span><br><span class="line"><span class="comment">// 2.每个promise需要有一个then方法，传入两个参数，一个是成功的回调  另一个是失败的回调</span></span><br><span class="line"><span class="comment">// 3.new promise 会立即执行</span></span><br><span class="line"><span class="comment">// 4.当promise抛出异常后 也会走失败态</span></span><br><span class="line"><span class="comment">// 5.状态不可逆 一旦成功就不能失败 一旦失败就不能成功</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resovle(<span class="string">'ok'</span>) <span class="comment">// success</span></span><br><span class="line">    <span class="comment">// reject('not ok') // fail</span></span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>, data) <span class="comment">// resolve进这里</span></span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fail'</span>, err)  <span class="comment">// reject 几这里</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无论成功还是失败 都可以返回结果(1.出错了了走错误  2.返回一个普通值(不是promise的值)，就会作为下一次then的成功结果 3.是promise的情况(会采用返回的promise的状态)用promise解析后的结果传递给下一个then)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通值  调用 then方法会返回一个全新的promise(不能返回this)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resovle(<span class="string">'ok'</span>) <span class="comment">// success</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// reject(100) // fail</span></span><br><span class="line">        setTimeOut(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(<span class="number">100</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">101</span></span><br><span class="line">&#125;)</span><br><span class="line">promise2.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'=='</span>)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err,<span class="string">'---'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://promisesaplus.com/" target="_blank" rel="noopener">promise规范</a></p>
</blockquote>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>全栈之路</category>
        <category>promise</category>
      </categories>
      <tags>
        <tag>全栈之路</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-141-环形链表</title>
    <url>/2021/12/LeetCode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点<code>head</code>，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是 -1，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环，则返回<code>true</code>。 否则，返回<code>false</code>。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59a8bc5551b4bac8f9ad1fd88ee9cce~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出： true</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eae6cbfc4ed14d138c63f740d0e72508~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出： true</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c78ba43a94674a44b2cc6072568822a5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出： false</span><br><span class="line">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示</p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 104]</code></li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个<strong>有效索引</strong> 。</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad1b8658f5424ff3804e813fc98f6ccf~tplv-k3u1fbpfcp-watermark.image?" alt="1.gif"></p>
<p>定义两个指针：慢指针每次走一个节点，快指针每次走两个节点，最终相遇。</p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head||!head.next) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> fast = head</span><br><span class="line">    <span class="keyword">while</span>(fast&amp;&amp;fast.next)&#123;</span><br><span class="line">        slow=slow.next</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        <span class="keyword">if</span>(fast==slow) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年度总结</title>
    <url>/2021/12/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>盛年不重来，一日难再晨，及时当勉励，岁月不待人</p>
<a id="more"></a>

<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bc73b90fea84812bca810544a723a69~tplv-k3u1fbpfcp-watermark.image?" alt="1.jpeg"></p>
<p>放下手机，盖好被子，闭上眼睛，慢慢回味这一年的过往，做一个甜甜的梦来勉励2021年奋斗的自己。</p>
<p>2021年可以说是我毕业以来极具有丰富色彩的一年。</p>
<p>这一年，我换了工作，在收入上提前完成了我的三年目标。</p>
<p>这一年，我开始逐渐的从一名求学者慢慢转变为阐述者。</p>
<p>这一年，女儿一岁半了。</p>
<p>这一年，我有了第一次pr。</p>
<p>………………</p>
<h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>工作由纯前端开发转变为全栈开发，一开始多少会有些不适应(同时开着前后端的项目加上界面navicat等多个程序间互相切换眼睛有点看不过来，开发的时候要开始考虑一些逻辑是放在客户端处理还是服务端处理，以及后端代码规范与前端规范的一些区别)，加之工作上要处理的业务逻辑很多都与行业强相关，刚接触这个行业的我举步维艰。</p>
<p>虽然凭借之前大学里有了一部分的后端知识储备再加上针对性的学习我很快上手了后端部分的开发，但是业务上的逻辑还好有老陈、赵兄以及诸多同事们的慷慨解答，多亏了大家没有因为我一开始的不了解而放弃我，我才能在较短的时间内适应了这份工作。但是还是要继续保持谦虚好学的态度，多向大家学习。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b99a1228884f9f9a08a9f64d902a77~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p>感谢同事和领导们在工作上的支持，希望新的一年我能在业务上能提出更加成熟的方案，为公司的产品提供稳定高效可靠的代码。</p>
<h2 id="学习上"><a href="#学习上" class="headerlink" title="学习上"></a>学习上</h2><p>开始将学到的东西记录下来 (在自己github搭建的博客平台上输出了<code>20</code>篇)</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e276d35efbd14c32af9dcc2d92e2bd7e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67f0b7e4eecb483492750275cf53c82d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p>经不住似水流年，逃不过此间少年。工作了两年，虽然代码写了不少，但也没有什么大的成就。草木一生，人生一世，作为一名开发者，总得给这个世界留下点什么吧。</p>
<p>直到一次偶然的机会参与了开源项目 <a href="https://github.com/haoziqaq/varlet" target="_blank" rel="noopener">varlet</a> ，在此项目中提了人生的第一个pr，从此遍打开了我新世界的大门。</p>
<p>积极拥抱vue3，正在筹备基于<code>vue3+varlet</code>的移动端模板的开源项目:<a href="https://github.com/qytayh/varlet-ui-pro" target="_blank" rel="noopener">varlet-ui-pro</a></p>
<p>新的一年里，我讲继续秉持勤奋好学的态度，不断学习前沿知识，并及时补充自己的知识短板，比如:</p>
<ul>
<li>看看<code>vite</code></li>
<li>了解一下<code>vue3</code>新的语法糖</li>
<li>对前端流行框架的源码实现加强研究</li>
</ul>
<h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><p>很幸运在大学还没毕业的时候就与老婆修成正果，今年女儿已经一岁半了。小朋友的脾气很大，经常半夜哭醒，还好有我贤惠的老婆贴心照顾，所以特别感谢老婆辛苦的付出以及对我工作上的支持。</p>
<p>如果有条件的话，大家在桌子上摆点绿植吧，同为开发的大家要记得爱护好自己的眼睛👁，毕竟这是除了手以外我们依赖的用来吃饭的家伙。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc9540bad9154a5e8b1225b98acaa45e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p>今年遇到了一帮不错的朋友，可以一起交流技术，一起搓jio(虽然不是生活的全部，但是真的很放松)，一起做喜欢的事情。</p>
<h2 id="物质上"><a href="#物质上" class="headerlink" title="物质上"></a>物质上</h2><p>提前一年完成了之前定下的收入水平三年要达成目标。</p>
<p>把陪伴了我一个大学的笔记本电脑还有台式机处理掉了(基本告别游戏了呜呜呜~)。</p>
<p>人生的第一台<code>macbook</code>也光荣下岗卖给了二手贩子</p>
<p><code>iphone13</code>出来了啊，<code>12</code>降价不少啊，那就跟老婆一人一个<code>12mini</code>吧，真香~</p>
<p>双十一买了好多东西啊，感觉花了不少钱呢，到货后发现没有几件自己的东西，基本都是孩子的奶粉尿布玩具</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62124bacf7d4ac08c00b86ddd691fa0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h2 id="2022年新展望"><a href="#2022年新展望" class="headerlink" title="2022年新展望"></a>2022年新展望</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95baf0f76ab24782b1f3c882d48c3e40~tplv-k3u1fbpfcp-watermark.image?" alt="2.jpeg"><br>2021年是充实的一年，遇到了一些有趣的人，可以跟他们一起很快乐得学习进步。在新的一年里，我想延续今年学习中满满的干劲，在此指定2022年的计划:</p>
<ul>
<li>刷完力扣150道算法题</li>
<li>专业能力达到P6</li>
<li>拥抱vue3，投入一部分时间到开源项目中</li>
<li>冲击本地大厂</li>
</ul>
<p>并将在 <a href="https://juejin.cn/user/1609340752780712" target="_blank" rel="noopener">掘金</a> 以及 <a href="https://qytayh.github.io/">个人博客</a> 中同步更新学习进度，欢迎小伙伴们点赞关注一起学习进步~</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>别忘了答应自己要做的事，别忘了答应自己要去的地方。</p>
<p>别让那些琐碎的蠢事，破坏了你的好心情。别害怕梦想和现实的距离。只有想不到，没有做不到。2021再见，2022你好。</p>
<p>只管努力就好了，答案在2022年</p>
<!-- markdownlint-disable MD041 MD002--> 
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-142-环形链表II</title>
    <url>/2021/12/LeetCode-142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起。</p>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回<code>null</code>。</p>
<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是<code>-1</code>，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<blockquote>
<p>不允许修改链表。</p>
</blockquote>
<p><strong>示例 1：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d17014971ee6406993710bca9ed811c2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出： 返回索引为 1 的链表节点</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/301fb8f91b554b87b62fb76a0f9ea3b3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出： 返回索引为 0 的链表节点</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/340038c2494145918acf742dfc99f69d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出： 返回 null</span><br><span class="line">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71f0be3117b448caa09bfcd06b7dde18~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p>从上图中，我们不难得出，两指针相遇时</p>
<ul>
<li>快指针走过的节点为 <code>A+N(B+C)+B</code></li>
<li>慢指针走过的节点为 <code>A+B</code></li>
<li>因为有快指针速度是慢指针的<code>2</code>倍</li>
<li>所以 <code>A+N(B+C)+B=2(A+B)</code><br>简化等式得到 <code>A =(N-1)(B+C)+C</code><blockquote>
<p><code>B+C</code>为一个环，我们可以忽略，因此可以得到<code>A=C</code>,只要在快慢指针相遇时从头结点开始有个指针向下走，跟慢指针相遇的节点就是我们要输出的<code>pos</code>节点</p>
</blockquote>
</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">null</span> </span><br><span class="line">    <span class="keyword">let</span> fast = head </span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> pos = head </span><br><span class="line">    <span class="keyword">while</span> (fast&amp;&amp;fast.next)&#123; </span><br><span class="line">        slow = slow.next </span><br><span class="line">        fast = fast.next.next </span><br><span class="line">        <span class="keyword">if</span>(slow==fast) &#123;</span><br><span class="line">            <span class="keyword">while</span> (slow)&#123; </span><br><span class="line">                <span class="keyword">if</span>(slow==pos)  <span class="keyword">return</span> pos </span><br><span class="line">                slow = slow.next</span><br><span class="line">                pos = pos.next </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_202-快乐数</title>
    <url>/2021/12/LeetCode-202-%E5%BF%AB%E4%B9%90%E6%95%B0/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p><a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p>
<p>快乐数」定义为：</p>
<p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果 可以变为  1，那么这个数就是快乐数。<br>如果 n 是快乐数就返回 true ；不是，则返回 false 。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例一</span><br><span class="line">输入： n &#x3D; 19</span><br><span class="line">输出： true</span><br><span class="line">解释： 12 + 92 &#x3D; 82</span><br><span class="line">82 + 22 &#x3D; 68</span><br><span class="line">62 + 82 &#x3D; 100</span><br><span class="line">12 + 02 + 02 &#x3D; 1</span><br></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例二</span><br><span class="line">输入： n &#x3D; 2</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示： <code>1 &lt;= n &lt;= 231 - 1</code></p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>从题目中我们可以得出：</p>
<ul>
<li>给定范围内的数一定是或者不是快乐数</li>
<li>快乐数最终会等于1</li>
<li>不快乐则会无限循环(爱滴魔力转圈圈<del>~</del>)</li>
</ul>
<p>所以我们的解法思路大概为：<code>通过循环看看这个数是会变为1还是进入死循环，变为1则快乐，死循环则不快乐</code></p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isHappy = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nArr = [] <span class="comment">// 建立一个用于存放数字的平方和的数组</span></span><br><span class="line">    <span class="keyword">while</span>(!nArr.includes(n))&#123; <span class="comment">// 如果数组中出现过了算出的平方和 则说明进入循环 跳出</span></span><br><span class="line">        <span class="keyword">const</span> sum = getSum(n)</span><br><span class="line">        nArr.push(n)</span><br><span class="line">        n = sum</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> n ==<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getSum = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>)</span><br><span class="line">        n = <span class="built_in">Math</span>.floor(n/<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过换下链表的方式解题"><a href="#通过换下链表的方式解题" class="headerlink" title="通过换下链表的方式解题"></a>通过换下链表的方式解题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isHappy = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> slow = n</span><br><span class="line">    <span class="keyword">let</span> fast = next(n)</span><br><span class="line">    <span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">        slow = next(slow)</span><br><span class="line">        fast = next(next(fast))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast==<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>)</span><br><span class="line">        n = <span class="built_in">Math</span>.floor(n/<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
<!-- markdownlint-disable MD041 MD002--> 
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-206-反转链表</title>
    <url>/2021/12/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<p><strong>示例一:</strong></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8205a093a8854a81b24bc36a571b8b3e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4,5]</span><br><span class="line">输出： [5,4,3,2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例二:</strong></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/591a722d12574a97924a45f206a5e876~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2]</span><br><span class="line">输出： [2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例三:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; []</span><br><span class="line">输出： []</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示</p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>
<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d13536358394445c9fa6ebaefa7a6bca~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<ul>
<li>最后一项的<code>next</code>一定是<code>null</code>，因为当前的第一项为结果的最后一项，因此有<code>head.next=null</code></li>
</ul>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71795b5ce939484ba50aa2869992b47f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<ul>
<li>我们接下来通过修改next的指向来解题(第二项的<code>next</code>原本指向<code>3</code>,我们将其指向<code>2</code>)</li>
</ul>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f65d82ec6b4b4920bf62ee89a6ba7e91~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<ul>
<li>后面的逻辑就跟第二步一样了</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head||!head.next) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> current = head.next</span><br><span class="line">    head.next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span> (current)&#123;</span><br><span class="line">        <span class="keyword">let</span> b = current.next</span><br><span class="line">        current.next = head</span><br><span class="line">        head = current</span><br><span class="line">        current = b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-24-两两交换链表中的节点</title>
    <url>/2021/12/LeetCode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起。</p>
<p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，两两交换其中相邻的结点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b99322cdfdeb42768ecde9689ec74238~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4]</span><br><span class="line">输出： [2,1,4,3]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; []</span><br><span class="line">输出： []</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1]</span><br><span class="line">输出： [1]</span><br></pre></td></tr></table></figure>


<blockquote>
<p>提示：</p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li><p>先理解题目要求：</p>
<ul>
<li>将链表分为n个长度为2的小链表</li>
<li>每个小链表进行翻转</li>
</ul>
</li>
<li><p>理解了题目要要求那就好办了，我们可以先定义一个虚拟头结点，从虚拟头结点向后找两个节点并记录第二个节点的后置节点</p>
</li>
<li><p>将第一个节点指向后置节点，第二个节点指向第一个节点，并将第一个节点当做下一次交换的虚拟头节点的位置</p>
</li>
<li><p>循环上面操作</p>
</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> vnode = <span class="keyword">new</span> ListNode(<span class="number">-1</span>, head), pre = vnode;</span><br><span class="line">  <span class="keyword">while</span> (pre.next &amp;&amp; pre.next.next) &#123;</span><br><span class="line">   <span class="keyword">let</span> cur = pre.next</span><br><span class="line">   <span class="keyword">let</span> last = pre.next.next</span><br><span class="line">   cur.next = last.next</span><br><span class="line">   last.next= cur</span><br><span class="line">   pre.next = last</span><br><span class="line">   pre = cur</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vnode.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-25-K个一组翻转链表</title>
    <url>/2021/12/LeetCode-25-K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起。</p>
<p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，每<code>k</code>个节点一组进行翻转，请你返回翻转后的链表。</p>
<p><code>k</code>是一个正整数，它的值小于或等于链表的长度。</p>
<p>如果节点总数不是<code>k</code>的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/977d2e02162c40dcae481e239ff46c3a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class="line">输出： [2,1,4,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/410927d8dbb641cebefe9cbac317a9d8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 3</span><br><span class="line">输出：[3,2,1,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 1</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1], k &#x3D; 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>列表中节点的数量在范围 <code>sz</code> 内</li>
<li><code>1 &lt;= sz &lt;= 5000</code></li>
<li><code>0 &lt;= Node.val &lt;= 1000</code></li>
<li><code>1 &lt;= k &lt;= sz</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote>
<p>在解此题前，期待你已经解出了<a href="https://juejin.cn/post/7038607426685239310" target="_blank" rel="noopener"><code>206_反转链表</code></a>和<a href="https://juejin.cn/post/7039725859254566942" target="_blank" rel="noopener"><code>92_ 反转链表II</code></a></p>
</blockquote>
<ul>
<li>此题在92题的基础上加上了多次翻转</li>
<li>第一步，从head开始向后反转<code>k</code>个节点</li>
<li>反转结束后head节点指向第<code>k+1</code>个节点</li>
<li>重复上面步骤</li>
<li>若节点个数不足<code>k</code>个，则不翻转</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseKGroup = <span class="function"><span class="keyword">function</span> (<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">  <span class="keyword">let</span> vnode = <span class="keyword">new</span> ListNode(<span class="number">-1</span>, head);</span><br><span class="line">  <span class="keyword">let</span> pre = vnode;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    pre.next = reverse(pre.next, k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; (i &lt; k) &amp;&amp; pre; i++) &#123;</span><br><span class="line">      pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pre) <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> vnode.next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pre = head;</span><br><span class="line">  <span class="keyword">let</span> con = n;</span><br><span class="line">  <span class="keyword">let</span> cur = head;</span><br><span class="line">  <span class="keyword">while</span> (--n&amp;&amp;pre) &#123;</span><br><span class="line">    pre = pre.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!pre) <span class="keyword">return</span> head;</span><br><span class="line">  pre = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span> (con--) &#123;</span><br><span class="line">    [cur.next, pre, cur] = [pre, cur, cur.next];</span><br><span class="line">  &#125;</span><br><span class="line">  head.next = cur;</span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-19-删除链表中的倒数第N个结点</title>
    <url>/2021/12/LeetCode-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起。</p>
<p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/submissions/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，删除链表的倒数第<code>n</code>个结点，并且返回链表的头结点。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b39515d5d003460aa1c82fedf4e66992~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4,5], n &#x3D; 2</span><br><span class="line">输出： [1,2,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1], n &#x3D; 1</span><br><span class="line">输出： []</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2], n &#x3D; 1</span><br><span class="line">输出： [1]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表中结点的数目为 <code>sz</code></li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>定义两个指针，快指针比慢指针快<code>n</code></li>
<li>当快指针到达尾结点时，慢指针刚好到达要删除的结点</li>
<li>将慢指针的下个节点指向要删除节点的后置节点便可完成删除</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> vnode = <span class="keyword">new</span> ListNode(<span class="number">-1</span>,head)</span><br><span class="line">    <span class="keyword">let</span> slow = vnode</span><br><span class="line">    <span class="keyword">let</span> fast = vnode</span><br><span class="line">    <span class="keyword">while</span>(n--) fast =fast.next</span><br><span class="line">    <span class="keyword">if</span>(!fast) <span class="keyword">return</span> vnode.next</span><br><span class="line">    <span class="keyword">while</span>(fast.next)&#123;</span><br><span class="line">        fast=fast.next</span><br><span class="line">        slow= slow.next</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next</span><br><span class="line">    <span class="keyword">return</span> vnode.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-61-旋转链表</title>
    <url>/2021/12/LeetCode-61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起。</p>
<p><a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点<code>head</code>，旋转链表，将链表每个节点向右移动<code>k</code>个位置。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac0fa47051d241488dc2d67fa1e8aa0f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class="line">输出： [4,5,1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbacc2c873a841d2a208020f5ceabb7f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [0,1,2], k &#x3D; 4</span><br><span class="line">输出： [2,0,1]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 500]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>0 &lt;= k &lt;= 2 * 109</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>将尾结点指向<code>head</code></li>
<li>将尾结点的前置节点指向<code>null</code></li>
<li>重复<code>k</code>次上面的动作</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rotateRight = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> list = head</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        list = doRotate(list)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doRotate = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur.next&amp;&amp;cur.next.next)&#123;</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!cur.next) <span class="keyword">return</span> cur</span><br><span class="line">    cur.next.next = head</span><br><span class="line">    <span class="keyword">let</span> z = cur.next</span><br><span class="line">    cur.next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遇到了一些问题"><a href="#遇到了一些问题" class="headerlink" title="遇到了一些问题"></a>遇到了一些问题</h2><p>使用如上的解法，看着没有毛病，但是在<code>k</code>的值特别大时，会超时</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/866d9284080b44b49a1a37b5fc7df295~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><ul>
<li>我们先获取到链表的长度<code>i</code></li>
<li>用<code>k</code>对<code>i</code>取余得到我们要旋转的最小次数<code>con</code></li>
<li>进行<code>con</code>次旋转</li>
</ul>
<h2 id="最终解题代码"><a href="#最终解题代码" class="headerlink" title="最终解题代码"></a>最终解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rotateRight = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span> (cur.next)&#123;</span><br><span class="line">        cur = cur.next</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> con = k%i</span><br><span class="line">    <span class="keyword">let</span> list = head</span><br><span class="line">    <span class="keyword">while</span>(con--)&#123;</span><br><span class="line">        list = doRotate(list)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doRotate = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur.next&amp;&amp;cur.next.next)&#123;</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!cur.next) <span class="keyword">return</span> cur</span><br><span class="line">    cur.next.next = head</span><br><span class="line">    <span class="keyword">let</span> z = cur.next</span><br><span class="line">    cur.next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-82-删除排序链表中的重复元素II</title>
    <url>/2021/12/LeetCode-82-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>存在一个按升序排列的链表，给你这个链表的头节点<code>head</code>，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现的数字。</p>
<p>返回同样按升序排列的结果链表。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c70e3d36ddd4093996ef0b9b478b2a3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,3,4,4,5]</span><br><span class="line">输出： [1,2,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71bc22ed0f64433f815977fe9a65ca39~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,1,1,2,3]</span><br><span class="line">输出： [2,3]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表中节点数目在范围 <code>[0, 300]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>题目数据保证链表已经按升序排列</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们先找到有重复元素的第一个节点</li>
<li>从有重复元素的节点向后找到第一个与之不重复的节点</li>
<li>将有重复元素节点第一个元素的前置节点指向第一个与之不重复的节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> vnode = <span class="keyword">new</span> ListNode(<span class="number">-1</span>,head)</span><br><span class="line">    <span class="keyword">let</span> pre = vnode</span><br><span class="line">    <span class="keyword">let</span> cur = vnode.next</span><br><span class="line">    <span class="keyword">while</span>(cur&amp;&amp;cur.next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.val==cur.next.val)&#123;</span><br><span class="line">            <span class="keyword">let</span> fast = cur.next</span><br><span class="line">            <span class="keyword">while</span>(fast.next&amp;&amp;cur.val==fast.next.val)&#123;</span><br><span class="line">                fast= fast.next</span><br><span class="line">            &#125;</span><br><span class="line">            cur = fast.next</span><br><span class="line">            pre.next = fast.next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-92-反转链表II</title>
    <url>/2021/12/LeetCode-92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起。</p>
<p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你单链表的头指针<code>head</code>和两个整数<code>left</code>和<code>right</code>，其中<code>left&lt;=right</code>。请你反转从位置<code>left</code>到位置<code>right</code>的链表节点，返回反转后的链表。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e44a8a40c8e4042920b8869546542b0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4,5], left &#x3D; 2, right &#x3D; 4</span><br><span class="line">输出：[1,4,3,2,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [5], left &#x3D; 1, right &#x3D; 1</span><br><span class="line">输出：[5]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示:</p>
<ul>
<li>链表中节点数目为 <code>n</code></li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>-500 &lt;= Node.val &lt;= 500</code></li>
<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e3e732f53f4f9a8c2a70516d2b450d~tplv-k3u1fbpfcp-watermark.image?" alt="2.gif"></p>
<ul>
<li>找到开始反转的节点<code>left</code>,记录下反转的前驱节点<code>con</code>以及反转开始的节点(也是反转部分的尾结点)<code>tail</code></li>
<li>开始反转操作</li>
<li>反转到<code>right</code>，此时反转的链表最后的一个节点(也是反转部分的头结点)为<code>pre</code>，后置节点<code>cur</code></li>
<li>将我们一开始记录的前驱节点<code>con</code>指向<code>pre</code>，反转部分的尾结点<code>tail</code>指向<code>cur</code>便可完成解题</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseBetween = <span class="function"><span class="keyword">function</span>(<span class="params">head, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head||left == right) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> count = right - left +<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> vnode = <span class="keyword">new</span> ListNode(<span class="number">-1</span>,head)</span><br><span class="line">    <span class="keyword">let</span> pre = vnode</span><br><span class="line">    <span class="keyword">let</span> cur = pre.next</span><br><span class="line">    <span class="keyword">while</span> (--left)&#123;</span><br><span class="line">        pre = pre.next</span><br><span class="line">    &#125;</span><br><span class="line">    pre.next = reverseList(pre.next,count)</span><br><span class="line">    <span class="keyword">return</span> vnode.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head,n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> pre =<span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span> (n--)&#123;</span><br><span class="line">       [cur.next,pre,cur] = [pre,cur,cur.next]</span><br><span class="line">    &#125;</span><br><span class="line">    head.next = cur</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-86-分隔链表</title>
    <url>/2021/12/LeetCode-86-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点<code>head</code>和一个特定值<code>x</code>，请你对链表进行分隔，使得所有小于<code>x</code>的节点都出现在 大于或等于<code>x</code>的节点之前。</p>
<p>你应当保留两个分区中每个节点的初始相对位置。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f26ebcd7a39b4f0a87d65a410d02b1ba~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,4,3,2,5,2], x &#x3D; 3</span><br><span class="line">输出：[1,2,2,4,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [2,1], x &#x3D; 2</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 200]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>-200 &lt;= x &lt;= 200</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>将链表分成两个链表，分别为小于<code>x</code>的小链表和大于等于<code>x</code>的大链表</li>
<li>将小链表与大链表连接即可完成解题</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> partition = <span class="function"><span class="keyword">function</span>(<span class="params">head, x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head||!head.next) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> vnodeBig = <span class="keyword">new</span> ListNode(<span class="number">-1</span>,head)</span><br><span class="line">    <span class="keyword">let</span> vnodeSmall = <span class="keyword">new</span> ListNode(<span class="number">-1</span>,head)</span><br><span class="line">    <span class="keyword">let</span> big = vnodeBig</span><br><span class="line">    <span class="keyword">let</span> small = vnodeSmall</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.val&lt;x)&#123;</span><br><span class="line">            small.next = head</span><br><span class="line">            small = small.next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            big.next =head</span><br><span class="line">            big = big.next</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">    big.next = <span class="literal">null</span></span><br><span class="line">    small.next = vnodeBig.next</span><br><span class="line">    <span class="keyword">return</span> vnodeSmall.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-83-删除排序链表中的重复元素</title>
    <url>/2021/12/LeetCode-83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>存在一个按升序排列的链表，给你这个链表的头节点<code>head</code>，请你删除所有重复的元素，使每个元素只出现一次。</p>
<p>返回同样按升序排列的结果链表。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/001afd9c8c514668ac04fe37f9e9a8e4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,1,2]</span><br><span class="line">输出： [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c68c58a1c33f41c28d54a7df37ebc326~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表中节点数目在范围<code>[0, 300]</code>内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>题目数据保证链表已经按升序排列</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>因为链表是有序的，所以重复的元素一定是相连的</li>
<li>我们只需要比较相邻的两个节点的值是否相等</li>
<li>如果相等，则左节点指向右节点的后置节点完成删除</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur.next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.val == cur.next.val)&#123;</span><br><span class="line">            cur.next = cur.next.next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur = cur.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>es6基础</title>
    <url>/2021/01/es6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="ECMAScript-6-简介"><a href="#ECMAScript-6-简介" class="headerlink" title="ECMAScript 6 简介"></a>ECMAScript 6 简介</h2><ul>
<li>JavaScript 三大组成部分<ul>
<li>ECMAScript </li>
<li>DOM</li>
<li>BOM </li>
</ul>
</li>
<li>ECMAScript 发展历史 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources</a></li>
<li>ECMAScript 包含内容：JS 中的数据类型及相关操作，流程控制，运算符及相关运算……<a id="more"></a>

</li>
</ul>
<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><ol>
<li><p>let 和 var 的差异</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>:</span><br><span class="line">    <span class="number">1.</span>  <span class="keyword">var</span>可以重复声明</span><br><span class="line">    <span class="number">2.</span>  作用域：全局作用域和函数作用域</span><br><span class="line">    <span class="number">3.</span>  会进行预解析</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>:</span><br><span class="line">    <span class="number">1.</span>  同一作用域下不能重复声明   </span><br><span class="line">    <span class="number">2.</span>  作用域： 全局作用域 和 块级作用域  &#123;&#125;</span><br><span class="line">    <span class="number">3.</span>  不进行预解析</span><br></pre></td></tr></table></figure>
</li>
<li><p>const 常量</p>
<ul>
<li>声明时必须赋值</li>
<li>常量不能重新赋值</li>
<li>不能重复声明</li>
<li>块级作用域</li>
<li>const 不会被预解析</li>
</ul>
</li>
</ol>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lis.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//以上for循环等效于</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">2</span>;</span></span><br><span class="line"><span class="actionscript">        lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><ul>
<li><p>对象的解构赋值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    d:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a,b&#125; = obj </span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="comment">//let a = obj.a</span></span><br><span class="line"><span class="comment">//let b = obj.b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let &#123;a,b,c&#125; = obj</span></span><br><span class="line"><span class="comment">// console.log(a,b,c) //1,2,undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的解构赋值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">let</span> [e,f]=arr</span><br><span class="line"><span class="built_in">console</span>.log(e,f)<span class="comment">//a b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//如何快速交换a,b的值</span></span><br><span class="line">[a,b]=[b,a]</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串的解构赋值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">let</span> [e,f] = str</span><br><span class="line"><span class="built_in">console</span>.log(e,f)<span class="comment">//a b</span></span><br><span class="line"><span class="comment">//let nub = 123 无法解构</span></span><br><span class="line"><span class="comment">//let [c,d] = nub</span></span><br><span class="line"><span class="comment">//console.log(c,d)//报错</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><ul>
<li><p>对象展开</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    c:<span class="number">3</span>,</span><br><span class="line">    d:<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,...c&#125; = obj3</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">//1 2 &#123;c: 3, d: 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = obj</span><br><span class="line">obj4.a=<span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;a:10,b:2&#125;</span></span><br><span class="line"><span class="keyword">let</span> obj5 = &#123;...obj&#125;</span><br><span class="line">obj5.a=<span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组展开</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line"><span class="comment">//将arr插入arr2的'b'之后</span></span><br><span class="line"><span class="keyword">let</span> arr3=[<span class="string">"a"</span>,<span class="string">"b"</span>,...arr,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="keyword">let</span> [a,b,...c] = arr</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">// 1  2 [3,4]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Set-对象"><a href="#Set-对象" class="headerlink" title="Set 对象"></a>Set 对象</h2><p>构造函数：用来构建某一类型的对象 - 对象的实例化<br>    <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="string">"a"</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(s.size); <span class="comment">//去重后的长度  相当于length</span></span><br><span class="line">s.delete(<span class="string">"a"</span>)  <span class="comment">//删除某一项 console.log(s.delete("a") ) true 删除不成功返回false</span></span><br><span class="line"><span class="comment">//s.add(7)//可以添加</span></span><br><span class="line"><span class="comment">//s.add(5)//添加不了 自动去重</span></span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="number">1</span>))<span class="comment">//true</span></span><br><span class="line">arr = [...s]</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1, 2, 3, 4, 5, 6]  //去重</span></span><br><span class="line"><span class="comment">//s.clear();//清空所有值  Set(0) &#123;&#125;    console.log(s.clear()) undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br></pre></td></tr></table></figure></p>
<h2 id="Map-对象"><a href="#Map-对象" class="headerlink" title="Map 对象"></a>Map 对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    [<span class="string">"a"</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="string">"b"</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="string">"c"</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="string">"d"</span>,<span class="number">4</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(arr)</span><br><span class="line"><span class="comment">// m.clear()</span></span><br><span class="line"><span class="comment">// console.log(m.delete("a"))</span></span><br><span class="line"><span class="comment">// console.log(m.get("b"))</span></span><br><span class="line"><span class="comment">// console.log(m.set("e",5))</span></span><br><span class="line">m.set(<span class="string">"e"</span>,<span class="number">5</span>).set(<span class="string">"a"</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clear() 清空所有值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">delete(key) 删除某一项</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        true || false 是否删除成功(没有这个值才会出现删除不成功)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">get(key)   获取某一项的具体值</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        key对应的value  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">has(key)   是否包含某一项</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        true || false  是否包含这个值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set(key,val)  设置一个值</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        key   数据的key值</span></span><br><span class="line"><span class="comment">        val   数据的value值</span></span><br><span class="line"><span class="comment">    返回值：</span></span><br><span class="line"><span class="comment">        map对象本身</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="函数新增扩展"><a href="#函数新增扩展" class="headerlink" title="函数新增扩展"></a>函数新增扩展</h2><ol>
<li><p>箭头函数</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    箭头函数：</span></span><br><span class="line"><span class="comment">    形参 =&gt; 返回值</span></span><br><span class="line"><span class="comment">    let fun = nub =&gt; nub*2</span></span><br><span class="line"><span class="comment">    console.log(fun(10))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    (形参,形参) =&gt; 返回值</span></span><br><span class="line"><span class="comment">    let fun2 = (nub,nub2) =&gt; nub*nub2</span></span><br><span class="line"><span class="comment">    console.log(fun2(10,3))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ()=&gt; 返回值</span></span><br><span class="line"><span class="comment">    let fun3 = () =&gt; "返回值"</span></span><br><span class="line"><span class="comment">    console.log(fun3())</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        执行语句</span></span><br><span class="line"><span class="comment">        // return 返回值</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    let fun4 = ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        console.log("天气不错")</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //箭头函数没有不定参</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    function fun5()&#123;</span></span><br><span class="line"><span class="comment">        console.log(arguments) //可以正常输出</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    let fun5 = ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        console.log(arguments) //arguments is not defined</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    fun5(1,2,3,4)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>rest 参数  剩余参数</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg) <span class="comment">//[1,2,3,4]</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数默认值设置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="function">(<span class="params">a=<span class="number">10</span>,b=<span class="number">2</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a*b)</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure>


</li>
</ol>
<blockquote>
<p>箭头函数本身没有this,调用箭头函数的this时,指向其声明时所在作用域的this</p>
</blockquote>
<h2 id="数组新增方法"><a href="#数组新增方法" class="headerlink" title="数组新增方法"></a>数组新增方法</h2><ul>
<li><p>Array.from(),Array.isArray()</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line"><span class="javascript"><span class="built_in">Array</span>.from()  把一个类数组转换成真正的数组  或者 lis=[...lis]</span></span><br><span class="line">        类数组：有下标有length</span><br><span class="line">    返回值：</span><br><span class="line">        转换之后的新数组</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">Array</span>.isArray()  判断是不是数组</span></span><br><span class="line">*/</span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#list li"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(lis))  <span class="comment">//false</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = []</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//基本用法</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//lis = Array.from(lis) </span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    lis = <span class="built_in">Array</span>.from(lis,<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(item,index,<span class="keyword">this</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> index</span></span><br><span class="line"><span class="actionscript">    &#125;,arr)  <span class="comment">//arr为this指向 存在时不能使用箭头函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(lis))  <span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis) <span class="comment">//[0,1,2,3]</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Array.of() </p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"a"</span>))<span class="comment">//[1, 2, 3, 4, "a"]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>Array.from(),Array.isArray(),Array.of()  都是Array这个构造函数下的方法</p>
</blockquote>
<ul>
<li><p>find()、findIndex()、includes()</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//find() 查找数组中满足要求的第一个值</span></span><br><span class="line"><span class="comment">//findIndex()  查找数组中满足要求的第一个值的索引</span></span><br><span class="line"><span class="comment">//includes()  判断数组中是否存在某值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]<span class="comment">//['a','b','c','d']</span></span><br><span class="line"><span class="comment">//arr.indexOf('a')</span></span><br><span class="line"><span class="comment">//let val = arr.find((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   if(item&gt;3)&#123;</span></span><br><span class="line"><span class="comment">//        return true</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line">val =arr.find(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(val)  <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;=<span class="number">3</span>))  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">2</span>))  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">8</span>))  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">// false 从第二位开始检索</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>flat()、flatMap()  数组扁平化方法</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    [<span class="string">"小明"</span>,<span class="string">"18"</span>],</span><br><span class="line">    [<span class="string">"小刚"</span>,<span class="string">"18"</span>],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>,</span><br><span class="line">            [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">]</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat())  <span class="comment">//向下提取一层 ["小明", "18", "小刚", "18", Array(2)]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="number">3</span>)) <span class="comment">//向下提取三层 ["小明", "18", "小刚", "18", 1, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>))  <span class="comment">//无限层</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [</span><br><span class="line">    [<span class="string">"小明"</span>,<span class="string">"18"</span>],</span><br><span class="line">    [<span class="string">"小刚"</span>,<span class="string">"18"</span>],</span><br><span class="line">]</span><br><span class="line"><span class="comment">//flatMap  只处理一层</span></span><br><span class="line"><span class="keyword">let</span> newArr = arr2.flatMap(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index)</span><br><span class="line">    item = item.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index==<span class="number">0</span>  <span class="comment">//只输出姓名</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>
</li>
<li><p>fill()  数据填充</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.fill(<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//["a", "a", "a", "a", "a"]</span></span><br><span class="line"></span><br><span class="line">arr.fill(<span class="string">"a"</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[0,1,2,3,"a"]</span></span><br><span class="line"></span><br><span class="line">arr.fill(<span class="string">"a"</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[0, "a", 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">arr.fill(<span class="string">"a"</span>,<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[0, "a", "a", "a", "a"] 不会改变原数组长度</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="字符串新增方法"><a href="#字符串新增方法" class="headerlink" title="字符串新增方法"></a>字符串新增方法</h2><ul>
<li>includes()  与数组中includes使用方法相同</li>
<li>startsWith endsWith()  判断字符串是否以某个字符串开头 或结尾  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Joker is very smart!'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'Joker'</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'Joker'</span>,<span class="number">4</span>)) <span class="comment">//false  从第四位开始查找</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'smart!'</span>))  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'smart!'</span>,<span class="number">4</span>))  <span class="comment">//false    只看前四位</span></span><br></pre></td></tr></table></figure></li>
<li>repeat()   将字符串进行重复  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'aaa'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">3</span>))  <span class="comment">// aaaaaaaaa</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    今年<span class="tag">&lt;<span class="name">strong</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>就要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>18<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>岁了，终于要上<span class="tag">&lt;<span class="name">strong</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>了。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p = <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = <span class="string">"小明"</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = <span class="number">18</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> school = <span class="string">"大学"</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    //p.innerHTML = '今年<span class="tag">&lt;<span class="name">strong</span>&gt;</span>'+name+'<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>就要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>'+age+'<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>岁了，终于要上<span class="tag">&lt;<span class="name">strong</span>&gt;</span>'+school+'<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>了。'</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//等同于</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    p.innerHTML = `今年<span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>就要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;age&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>岁了，终于要上<span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;school&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>了。`</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>模板字符串可以换行</p>
</blockquote>
<p>${}  差值表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">`a的值为<span class="subst">$&#123;a()&#125;</span>,d<span class="subst">$&#123; d&gt;<span class="number">8</span>?<span class="string">'大于'</span>:<span class="string">'小于等于'</span>&#125;</span>8`</span></span><br></pre></td></tr></table></figure>

<h2 id="对象新增方法"><a href="#对象新增方法" class="headerlink" title="对象新增方法"></a>对象新增方法</h2><ul>
<li><p>简洁表示法</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="comment">//let obj = &#123;</span></span><br><span class="line"><span class="comment">//    a:a,</span></span><br><span class="line"><span class="comment">//    b:b,</span></span><br><span class="line"><span class="comment">//    c:function()&#123;</span></span><br><span class="line"><span class="comment">//          console.log(a)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// 可以写成</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    c()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性名表达式</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"小明"</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [name]:<span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line">obj[name]=<span class="number">111</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象合并</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    c:<span class="number">3</span>,</span><br><span class="line">    d:<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//let obj3 = &#123;...obj,...obj2&#125;</span></span><br><span class="line"><span class="comment">//Object.assign(obj2,obj)  //将后面的对象合并到前面的对象中</span></span><br><span class="line">obj2=<span class="built_in">Object</span>.assign(&#123;&#125;,obj2,obj)  <span class="comment">//将后面的对象合并到前面的空目标对象中</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>比较</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">1</span>,<span class="string">'1'</span>)) <span class="comment">//fasle</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    规则：</span></span><br><span class="line"><span class="comment">        1.两个值都是undefined</span></span><br><span class="line"><span class="comment">        2.两个值都是null</span></span><br><span class="line"><span class="comment">        3.两个值都是true 或两个值都是false</span></span><br><span class="line"><span class="comment">        4.两个值都是由相同个数的字符串按照相同的顺序组成的字符串</span></span><br><span class="line"><span class="comment">        5.两个值都指向同一个对象</span></span><br><span class="line"><span class="comment">        6.两个值都是数字并且：</span></span><br><span class="line"><span class="comment">                都是正零  +0</span></span><br><span class="line"><span class="comment">                都是负零  -0</span></span><br><span class="line"><span class="comment">                都是NAN</span></span><br><span class="line"><span class="comment">        以上几种时候比较结果为true </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>1-5条等同于 <code>===</code>，<br><code>-0===+0    true</code> ; <code>Object.is(-0,+0)  false</code><br><code>NaN===NaN  false</code>; <code>Object.is(NaN,NaN)  true</code></p>
</blockquote>
</li>
</ul>
<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><ul>
<li><p>Babel 是一个 JavaScript 编译器</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'babel.min.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> a = <span class="number">1</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> b = <span class="number">2</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> obj = &#123;</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    c()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">let</span> obj2 = &#123;</span></span><br><span class="line">    d:4,</span><br><span class="line">    ...obj,</span><br><span class="line">    e:5</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




</li>
</ul>
<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript还不会?看完这篇就行了</title>
    <url>/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/</url>
    <content><![CDATA[<h1 id="TypeScript究竟是什么呢？"><a href="#TypeScript究竟是什么呢？" class="headerlink" title="TypeScript究竟是什么呢？"></a>TypeScript究竟是什么呢？</h1><a id="more"></a>

<ul>
<li><p>JavaScript that scales</p>
</li>
<li><p>静态类型风格的类型系统</p>
</li>
<li><p>从es6到es10甚至是esnext的语法支持</p>
</li>
<li><p>兼容各种浏览器、各种系统、各种服务器，完全开源</p>
</li>
</ul>
<blockquote>
<p> <a href="https://tslang.cn" target="_blank" rel="noopener">ts官网</a></p>
</blockquote>
<h2 id="为什么要使用TS"><a href="#为什么要使用TS" class="headerlink" title="为什么要使用TS"></a>为什么要使用TS</h2><ul>
<li><p>程序更容易理解</p>
<blockquote>
<p>函数或者方法输入输出的类型参数，外部条件等<br>动态语言的约束：需要手动调试等过程<br>有了TS:代码本事就可以回答上述问题</p>
</blockquote>
</li>
<li><p>效率更高</p>
<blockquote>
<p>在不同的代码块和定义中进行跳转<br>代码自动补全<br>丰富的接口提示</p>
</blockquote>
</li>
<li><p>更少的错误</p>
<blockquote>
<p>编译期间能够发现大部分错误<br>杜绝一些常见错误</p>
</blockquote>
</li>
<li><p>非常好的包容性</p>
<blockquote>
<p>完全兼容JavaScript<br>第三方库可以单独编写类型文件</p>
</blockquote>
</li>
</ul>
<h2 id="一些缺点："><a href="#一些缺点：" class="headerlink" title="一些缺点："></a>一些缺点：</h2><ul>
<li><p>增加了一些学习成本</p>
</li>
<li><p>短时间内增加了一些开发成本</p>
</li>
</ul>
<h1 id="安装TypeScript"><a href="#安装TypeScript" class="headerlink" title="安装TypeScript"></a>安装TypeScript</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<h1 id="原始数据类型和any类型"><a href="#原始数据类型和any类型" class="headerlink" title="原始数据类型和any类型"></a>原始数据类型和any类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone:boolen = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> age:<span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> firstName:<span class="built_in">string</span> = <span class="string">'Joker'</span></span><br><span class="line"><span class="keyword">let</span> message:<span class="built_in">string</span> = <span class="string">`Hello <span class="subst">$&#123;firstName&#125;</span>!`</span></span><br><span class="line"><span class="keyword">let</span> u:<span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n:<span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num:<span class="built_in">number</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> notSure:<span class="built_in">any</span> = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">'Maybe a string'</span></span><br><span class="line">notSure = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">notSure.myName</span><br><span class="line">notSure.getName()</span><br><span class="line"><span class="comment">// 如果有明确类型要避免使用any，any可以任意调用方法和属性很有可能出现错误，就失去了类型检查的作用</span></span><br></pre></td></tr></table></figure>

<h1 id="数组和元祖"><a href="#数组和元祖" class="headerlink" title="数组和元祖"></a>数组和元祖</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrOfNumber:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arrOfNumber.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖</span></span><br><span class="line"><span class="keyword">let</span> user:[<span class="built_in">string</span>,<span class="built_in">number</span>] = [<span class="string">'Joker'</span>,<span class="number">666</span>]</span><br><span class="line">user.push(<span class="string">'123'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h1><blockquote>
<ul>
<li>对对象的形状（shape)进行描述</li>
<li>Duck Typing(鸭子类型)</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line">  readonly id:<span class="built_in">number</span>;<span class="comment">//只读属性</span></span><br><span class="line">  name:<span class="built_in">string</span>;</span><br><span class="line">  age:<span class="built_in">number</span>;</span><br><span class="line">  tel?:<span class="built_in">number</span>;  <span class="comment">//可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Joker:IPerson = &#123;</span><br><span class="line">  id:<span class="number">1</span>,</span><br><span class="line">  name:<span class="string">'Joker'</span>,</span><br><span class="line">  age:<span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="function-函数"><a href="#function-函数" class="headerlink" title="function 函数"></a>function 函数</h1><blockquote>
<p>在js中function是一等公民</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// z 为可选参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> z === <span class="string">'number'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum = （x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span>):<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> z === <span class="string">'number'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ISum &#123;</span><br><span class="line">  (x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span>):<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add2:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span> = add</span><br><span class="line"><span class="keyword">let</span> add3:ISum = add</span><br></pre></td></tr></table></figure>

<h2 id="类型推论-联合类型和类型断言"><a href="#类型推论-联合类型和类型断言" class="headerlink" title="类型推论 联合类型和类型断言"></a>类型推论 联合类型和类型断言</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'str'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// union types</span></span><br><span class="line"><span class="keyword">let</span> numberOrString:<span class="built_in">number</span>|<span class="built_in">string</span>  <span class="comment">//连盒类型</span></span><br><span class="line">numberOrString=<span class="string">'abc'</span></span><br><span class="line">numberOrString=<span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">input:<span class="built_in">string</span>:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = input <span class="keyword">as</span> <span class="built_in">string</span> <span class="comment">// 类型断言</span></span><br><span class="line">  <span class="keyword">if</span>(str.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.length</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">number</span> = input <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">number</span>.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type guard</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength2</span>(<span class="params">input:<span class="built_in">string</span>:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> input ===<span class="string">'string'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> input.length</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类Class"><a href="#类Class" class="headerlink" title="类Class"></a>类Class</h1><h2 id="js中的类"><a href="#js中的类" class="headerlink" title="js中的类"></a>js中的类</h2><ul>
<li><p>类(Class):定义了一切事物的抽象特点</p>
</li>
<li><p>对象（Object):类的实例</p>
</li>
<li><p>面向对象(OOP)三大特性:封装、继承、多态</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is running!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">'japan'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.run())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Pig <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  bark()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is barking!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tlp = <span class="keyword">new</span> Pig(<span class="string">'tlp'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(tlp.run())</span><br><span class="line"><span class="built_in">console</span>.log(tlp.bark())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  <span class="keyword">static</span> categories = [<span class="string">'cat'</span>]</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> maomao = <span class="keyword">new</span> Cat(<span class="string">'maomao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(maomao.run())</span><br><span class="line"><span class="built_in">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>


<h2 id="TS中的类"><a href="#TS中的类" class="headerlink" title="TS中的类"></a>TS中的类</h2><ul>
<li><p>Public:修饰的属性是共有的</p>
</li>
<li><p>Private:修饰的属性或者方法是私有的</p>
</li>
<li><p>Protected:修饰的属性或方法是受保护的</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal&#123;</span><br><span class="line">  readonly name:<span class="built_in">string</span> <span class="comment">//只读</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> eat()&#123; <span class="comment">// 仅在本事和</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'eat'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> run()&#123;  <span class="comment">// 本身和子类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is running!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">'japan'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.run())  <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Pig <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  bark()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is barking!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tlp = <span class="keyword">new</span> Pig(<span class="string">'tlp'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(tlp.eat())  <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">  <span class="keyword">static</span> categories = [<span class="string">'cat'</span>]</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.run() <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> maomao = <span class="keyword">new</span> Cat(<span class="string">'maomao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(maomao.run())</span><br><span class="line"><span class="built_in">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>

<h1 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h1><ul>
<li><p>继承的困境</p>
</li>
<li><p>类可以使用implements来实现接口</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Radio &#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>):<span class="built_in">void</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Battery &#123;</span><br><span class="line">  checkBatteryStatus():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RadioWithBattery <span class="keyword">extends</span> Radio &#123;</span><br><span class="line">  checkBatteryStatus():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Radio &#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CellPhone <span class="keyword">implements</span> Radio,Battery&#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  checkBatteryStatus()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MobilePhone <span class="keyword">implements</span> RadioWithBattery&#123;</span><br><span class="line">  switchRadio(trigger:<span class="built_in">boolean</span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  checkBatteryStatus()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left=<span class="number">10</span>,</span><br><span class="line">  Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Direction.Up) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Down) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction[<span class="number">0</span>]) <span class="comment">// 'Up'</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Left) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Right) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Direction &#123; <span class="comment">// 加上const 变成常量枚举可以提升性能  只有常量值可以使用const</span></span><br><span class="line">  Up = <span class="string">'Up'</span>,</span><br><span class="line">  Down = <span class="string">'Down'</span>,</span><br><span class="line">  Left = <span class="string">'Left'</span>,</span><br><span class="line">  Right = <span class="string">'Right'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> value = <span class="string">'Up'</span></span><br><span class="line"><span class="keyword">if</span>(value === Direction.Up)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'go up'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>在定义函数接口或类的时候不预先指定类型，在使用的时候再指定</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str:<span class="built_in">string</span>=<span class="string">'str'</span></span><br><span class="line"><span class="keyword">const</span> result0 = echo(str)</span><br><span class="line"><span class="keyword">const</span> result1 = echo(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">const</span> result2 = echo(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>,<span class="title">U</span>&gt;(<span class="params">tuple:[T,U]</span>):[<span class="title">U</span>,<span class="title">T</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [tuple[<span class="number">1</span>],tuple[<span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result3 = swap([<span class="string">'abc'</span>,<span class="number">123</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束泛型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T[]</span>):<span class="title">T</span>[]</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = echoWithArr([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IWithLength&#123;</span><br><span class="line">  length:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">IWithLength</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> str = echoWithLength(<span class="string">'str'</span>)</span><br><span class="line"><span class="keyword">const</span> obj = echoWithLength(&#123;length:<span class="number">10</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> arr2 = echoWithLength([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Queue&lt;T&gt;&#123;</span><br><span class="line">  <span class="keyword">private</span> data = []</span><br><span class="line">  push(item:T)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  pop():T&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> KeyPair&lt;T,U&gt; &#123;</span><br><span class="line">  key:T,</span><br><span class="line">  value:U</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> kp1:KeyPair&lt;<span class="built_in">number</span>,<span class="built_in">string</span>&gt; = &#123;key:<span class="number">1</span>,value:<span class="string">'str'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> kp2:KeyPair&lt;<span class="built_in">string</span>,<span class="built_in">number</span>&gt; = &#123;key:<span class="string">'str'</span>,value:<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>


<h1 id="类型别名-字面量和交叉类型"><a href="#类型别名-字面量和交叉类型" class="headerlink" title="类型别名,字面量和交叉类型"></a>类型别名,字面量和交叉类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span> </span><br><span class="line"><span class="keyword">const</span> result = sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PlusType = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> sum2:PlusType</span><br><span class="line"><span class="keyword">const</span> result = sum2(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StrOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> result3:StrOrNumber = <span class="string">'123'</span></span><br><span class="line">result3 = <span class="number">123</span></span><br><span class="line">result3 = <span class="literal">true</span> <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str:<span class="string">'name'</span> = <span class="string">'name'</span></span><br><span class="line"><span class="keyword">const</span> str2:<span class="string">'name'</span> = <span class="string">'name1'</span>  <span class="comment">//error</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">number</span>:<span class="number">1</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Direction = <span class="string">'Up'</span>|<span class="string">'Down'</span>|<span class="string">'Left'</span>|<span class="string">'Right'</span></span><br><span class="line"><span class="keyword">let</span> toWards:Direction = <span class="string">'Down'</span> <span class="comment">// 只能四个里面的一个值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IName &#123;</span><br><span class="line">  name:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> TPerson = IName &amp; &#123;age:<span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person:TPerson = &#123;name:<span class="string">'123'</span>,age:<span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h1><p>一般是<code>.d.ts</code>结尾，只是实现了类型的定义并未实现真正代码功能</p>
<h1 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.getTime()</span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/abc/</span></span><br><span class="line">reg.test(<span class="string">'abc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//build-in object</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dom and Bom</span></span><br><span class="line"><span class="keyword">let</span> body = <span class="built_in">document</span>.body</span><br><span class="line"><span class="keyword">let</span> allLis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line">allLis.keys()</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Utility Types</span></span><br><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  name:<span class="built_in">string</span>,</span><br><span class="line">  age:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Joker:IPerson = &#123;name:<span class="string">'Joker'</span>,age:<span class="number">25</span>&#125;</span><br><span class="line"><span class="keyword">type</span> TPartical = Partical&lt;IPerson&gt; <span class="comment">//将所有参数变为可选</span></span><br><span class="line"><span class="keyword">let</span> Joker2:IPerson = &#123;name:<span class="string">'Joker'</span>&#125;</span><br><span class="line"><span class="keyword">type</span> TOmit = Omit&lt;IPerson,<span class="string">'name'</span>&gt; <span class="comment">// 忽略一个选项</span></span><br><span class="line"><span class="keyword">let</span> Joker3:IPerson = &#123;age:<span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure>




<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS进阶之--装饰器</title>
    <url>/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h1><p><code>装饰器-Decorators</code> 在 <code>TypeScript</code> 中是一种可以在不修改类代码的基础上通过添加标注的方式来对类型进行扩展的一种方式</p>
<a id="more"></a>


<ul>
<li>减少代码量</li>
<li>提高代码扩展性、可读性和维护性</li>
</ul>
<blockquote>
<p>在 <code>TypeScript</code> 中，装饰器只能在类中使用</p>
</blockquote>
<h1 id="装饰器语法"><a href="#装饰器语法" class="headerlink" title="装饰器语法"></a>装饰器语法</h1><p>装饰器的使用极其的简单</p>
<ul>
<li>装饰器本质就是一个函数</li>
<li>通过特定语法在特定的位置调用装饰器函数即可对数据（类、方法、甚至参数等）进行扩展</li>
</ul>
<p><strong>启用装饰器特性</strong></p>
<ul>
<li><code>experimentalDecorators: true</code></li>
</ul>
<blockquote>
<p><code>tsconfig.json</code>中进行配置</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *    target:被装饰的方法所属的类</span></span><br><span class="line"><span class="comment">  *    被装饰的方法的名称</span></span><br><span class="line"><span class="comment">  *    descriptor: 描述符</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="comment">// 把原始的方法提取出来</span></span><br><span class="line">  <span class="keyword">let</span> fn = descriptor.value</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = fn(a,b)  <span class="comment">// 原先方法行为</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'日志：'</span>,&#123;</span><br><span class="line">      name,</span><br><span class="line">      a,</span><br><span class="line">      b,</span><br><span class="line">      result</span><br><span class="line">    &#125;) <span class="comment">// 扩展行为</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> M &#123;</span><br><span class="line">  <span class="meta">@log</span></span><br><span class="line">  <span class="keyword">static</span> add(a:<span class="built_in">number</span>,b:<span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="装饰器细节"><a href="#装饰器细节" class="headerlink" title="装饰器细节"></a>装饰器细节</h1><p><code>装饰器</code> 是一个函数，它可以通过 <code>@装饰器函数</code> 这种特殊的语法附加在 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 上，对它们进行包装，然后返回一个包装后的目标对象（<code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> ），<strong>装饰器工作在类的构建阶段，而不是使用阶段</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d1</span>(<span class="params">target:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,target)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d11</span>(<span class="params">target:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d3</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name,descriptor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d4</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name,descriptor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d5</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span>,index: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// name为当前参数所在的方法的名称</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> target,name,index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@d1</span> </span><br><span class="line"><span class="meta">@d11</span>  <span class="comment">// 多个装饰器时 或 @d1 @d11</span></span><br><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d2</span></span><br><span class="line">  a: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d2</span></span><br><span class="line">  <span class="keyword">static</span> property1: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d3</span></span><br><span class="line">  <span class="keyword">get</span> b() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d3</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> c() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d4</span></span><br><span class="line">  <span class="keyword">public</span> method1(<span class="meta">@d5</span> x: <span class="built_in">number</span>,<span class="meta">@d5</span> y:<span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@d4</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> method2() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>目标</p>
<ul>
<li>应用于类的构造函数</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数（也只有一个参数）<ul>
<li>类的构造函数作为其唯一的参数</li>
</ul>
</li>
</ul>
<h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>目标</p>
<ul>
<li>应用于类的属性上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数<ul>
<li>静态方法：类的构造函数 (装饰<code>static property1</code>那么为<code>MyClass</code>)</li>
<li>实例方法：类的原型对象 (装饰的<code>a: number;</code>那么为<code>new MyClass()</code>实例后的对象)</li>
</ul>
</li>
<li>第二个参数<ul>
<li>属性名称</li>
</ul>
</li>
</ul>
<h2 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h2><p>目标</p>
<ul>
<li>应用于类的访问器（getter、setter）上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数 (同属性装饰器)<ul>
<li>静态方法：类的构造函数</li>
<li>实例方法：类的原型对象</li>
</ul>
</li>
<li>第二个参数<ul>
<li>属性名称</li>
</ul>
</li>
<li>第三个参数<ul>
<li>方法描述符对象</li>
</ul>
</li>
</ul>
<h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>目标</p>
<ul>
<li>应用于类的方法上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数<ul>
<li>静态方法：类的构造函数</li>
<li>实例方法：类的原型对象</li>
</ul>
</li>
<li>第二个参数<ul>
<li>方法名称</li>
</ul>
</li>
<li>第三个参数<ul>
<li>方法描述符对象</li>
</ul>
</li>
</ul>
<h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><p>目标</p>
<ul>
<li>应用在参数上</li>
</ul>
<p>参数</p>
<ul>
<li>第一个参数<ul>
<li>静态方法：类的构造函数</li>
<li>实例方法：类的原型对象</li>
</ul>
</li>
<li>第二个参数<ul>
<li>方法名称</li>
</ul>
</li>
<li>第三个参数<ul>
<li>参数在函数参数列表中的索引</li>
</ul>
</li>
</ul>
<h1 id="装饰器执行顺序"><a href="#装饰器执行顺序" class="headerlink" title="装饰器执行顺序"></a>装饰器执行顺序</h1><p>实例装饰器</p>
<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>
<p>静态装饰器</p>
<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>
<p>类</p>
<p>​        类</p>
<h1 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h1><p>如果我们需要给装饰器执行过程中传入一些参数的时候，就可以使用装饰器工厂来实现</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">callback: <span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value = descriptor.value</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = value(x,y)</span><br><span class="line">      callback(&#123;</span><br><span class="line">        <span class="keyword">type</span>,</span><br><span class="line">        a,</span><br><span class="line">        b,</span><br><span class="line">        result</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> M&#123;</span><br><span class="line">  <span class="meta">@log</span>(<span class="function"><span class="keyword">function</span>(<span class="params">result:<span class="built_in">any</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1111'</span>,result)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">static</span> add(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@log</span>(<span class="function"><span class="keyword">function</span>(<span class="params">result:<span class="built_in">any</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'222'</span>,result)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">static</span> sub(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v1 = M.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1);</span><br><span class="line"><span class="keyword">let</span> v2 = M.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v2);</span><br></pre></td></tr></table></figure>


<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><p>在 <code>装饰器</code> 函数中 ，我们可以拿到 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 的基本信息，如它们的名称，描述符 等，但是我们想获取更多信息就需要通过另外的方式来进行：<code>元数据</code></p>
<h2 id="什么是元数据？"><a href="#什么是元数据？" class="headerlink" title="什么是元数据？"></a>什么是元数据？</h2><p><code>元数据</code> ：用来描述数据的数据，在我们的程序中，<code>对象</code>、<code>类</code> 等都是数据，它们描述了某种数据，另外还有一种数据，它可以用来描述 <code>对象</code>、<code>类</code>，这些用来描述数据的数据就是 <code>元数据</code></p>
<blockquote>
<p>比如一首歌曲本身就是一组数据，同时还有一组用来描述歌曲的歌手、格式、时长的数据，那么这组数据就是歌曲数据的元数据</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用元数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L</span>(<span class="params"><span class="keyword">type</span>?:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">    target.prototype.type = <span class="keyword">type</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">type</span>?: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class="line">    <span class="keyword">let</span> value = descriptor.value</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = value(x,y)</span><br><span class="line">      <span class="keyword">let</span> _type = <span class="keyword">type</span></span><br><span class="line">      <span class="keyword">if</span>(!_type)&#123;</span><br><span class="line">        _type = <span class="keyword">typeof</span> target ====<span class="string">'function'</span>?target.prototype.type : target.type</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(&#123;</span><br><span class="line">        _type,</span><br><span class="line">        a,</span><br><span class="line">        b,</span><br><span class="line">        result</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@L</span>(<span class="string">'log'</span>)</span><br><span class="line"><span class="keyword">class</span> M&#123;</span><br><span class="line">  <span class="meta">@log</span>(<span class="string">'local'</span>)</span><br><span class="line">  <span class="keyword">static</span> add(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@log</span>()</span><br><span class="line">  <span class="keyword">static</span> sub(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v1 = M.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1);</span><br><span class="line"><span class="keyword">let</span> v2 = M.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v2);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>会添加额外的属性</p>
</blockquote>
<h2 id="定义元数据"><a href="#定义元数据" class="headerlink" title="定义元数据"></a>定义元数据</h2><p>使用 <a href="https://www.npmjs.com/package/reflect-metadata" target="_blank" rel="noopener">reflect-metadata</a></p>
<p>首先，需要安装 <code>reflect-metadata</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install reflect-metadata</span><br></pre></td></tr></table></figure>

<p>我们可以 <code>类</code>、<code>方法</code> 等数据定义元数据</p>
<ul>
<li>元数据会被附加到指定的 <code>类</code>、<code>方法</code> 等数据之上，但是又不会影响 <code>类</code>、<code>方法</code> 本身的代码</li>
</ul>
<p>设置</p>
<p><code>Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)</code></p>
<ul>
<li>metadataKey：meta 数据的 key</li>
<li>metadataValue：meta 数据的 值</li>
<li>target：meta 数据附加的目标</li>
<li>propertyKey：对应的 property key</li>
</ul>
<p>调用方式</p>
<ul>
<li><p>通过  <code>Reflect.defineMetadata</code> 方法调用来添加 元数据</p>
</li>
<li><p>通过 <code>@Reflect.metadata</code> 装饰器来添加 元数据</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Reflect</span>.metadata(<span class="string">"n"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">    <span class="meta">@Reflect</span>.metadata(<span class="string">"n"</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> method1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Reflect</span>.metadata(<span class="string">"n"</span>, <span class="number">4</span>)</span><br><span class="line">  	<span class="keyword">public</span> method2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">1</span>, A);</span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">2</span>, A, <span class="string">'method1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> A();</span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">3</span>, obj);</span><br><span class="line">Reflect.defineMetadata(<span class="string">'n'</span>, <span class="number">4</span>, obj, <span class="string">'method2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Reflect.getMetadata(<span class="string">'n'</span>, A));</span><br><span class="line"><span class="built_in">console</span>.log(Reflect.getMetadata(<span class="string">'n'</span>, A, ));</span><br></pre></td></tr></table></figure>
<p>获取</p>
<p><code>Reflect.getMetadata(metadataKey, target, propertyKey)</code></p>
<p>参数的含义与 <code>defineMetadata</code> 对应</p>
<h2 id="使用元数据的-log-装饰器"><a href="#使用元数据的-log-装饰器" class="headerlink" title="使用元数据的 log 装饰器"></a>使用元数据的 log 装饰器</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span></span><br><span class="line"><span class="comment">// function L(type?:string)&#123;</span></span><br><span class="line"><span class="comment">//   return function(target:Function)&#123;</span></span><br><span class="line"><span class="comment">//     Reflect.defineMetadata("type", type, target);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">type</span>?: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">Function</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class="line">    <span class="keyword">let</span> value = descriptor.value</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = value(x,y)</span><br><span class="line">      <span class="keyword">let</span> _type = <span class="keyword">type</span></span><br><span class="line">      <span class="keyword">if</span>(!_type)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> target ====<span class="string">'function'</span>)&#123;</span><br><span class="line">          _type = Reflect.getMetadata(<span class="string">"type"</span>, target);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          _type = Reflect.getMetadata(<span class="string">'type'</span>,target.<span class="keyword">constructor</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(<span class="params">&#123;</span></span><br><span class="line"><span class="params">        _type,</span></span><br><span class="line"><span class="params">        a,</span></span><br><span class="line"><span class="params">        b,</span></span><br><span class="line"><span class="params">        result</span></span><br><span class="line"><span class="params">      &#125;</span>);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @L('log')</span></span><br><span class="line"><span class="meta">@Reflect</span>.metadata(<span class="string">'type'</span>,<span class="string">'storage'</span>)</span><br><span class="line"><span class="keyword">class</span> M&#123;</span><br><span class="line">  <span class="meta">@log</span>(<span class="string">'local'</span>)</span><br><span class="line">  <span class="keyword">static</span> add(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@log</span>()</span><br><span class="line">  <span class="keyword">static</span> sub(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v1 = M.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1);</span><br><span class="line"><span class="keyword">let</span> v2 = M.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v2);</span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>基于高德地图jsapi的二次封装</title>
    <url>/2021/08/%E5%9F%BA%E4%BA%8E%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEjsapi%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>针对vue、uni等项目的一些常用地图api的二次封装</p>
<a id="more"></a>

<h1 id="申请key"><a href="#申请key" class="headerlink" title="申请key"></a>申请key</h1><p>第一步我们要做地图肯定要有这地图对应的key，还不知道怎么生成的话可以点这个查看—–&gt;<a href="http://baidu.physton.com/?q=%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E7%9A%84key" target="_blank" rel="noopener">如何生成高德地图的key</a></p>
<h1 id="使用AMapLoader加载高德地图的js"><a href="#使用AMapLoader加载高德地图的js" class="headerlink" title="使用AMapLoader加载高德地图的js"></a>使用AMapLoader加载高德地图的js</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm i @amap/amap-jsapi-loader</span><br></pre></td></tr></table></figure>
<blockquote>
<p>是的，你没有看错，就用cnpm！npm安装会有各种报错</p>
</blockquote>
<h1 id="修改map-js"><a href="#修改map-js" class="headerlink" title="修改map.js"></a>修改map.js</h1><p>在<code>map.js</code>中，我们修改<code>key</code>为自己的<code>key</code>，并按自己需要去修改插件数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AMapLoader <span class="keyword">from</span> <span class="string">'@amap/amap-jsapi-loader'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置地图所需要的插件</span></span><br><span class="line"><span class="keyword">const</span> mapPlugin = [</span><br><span class="line">  <span class="comment">// 'AMap.ToolBar',</span></span><br><span class="line">  <span class="comment">// 'AMap.Scale',</span></span><br><span class="line">  <span class="comment">// 'AMap.AdvancedInfoWindow',</span></span><br><span class="line">  <span class="comment">// 'AMap.Geolocation',</span></span><br><span class="line">  <span class="comment">// 'AMap.Transfer',</span></span><br><span class="line">  <span class="comment">// 'AMap.StationSearch',</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 地图key</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">'your key'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题id</span></span><br><span class="line"><span class="keyword">const</span> styleId = <span class="string">'your styleId'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认城市号</span></span><br><span class="line"><span class="keyword">const</span> defaultCityCode = <span class="string">'城市号'</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(opt) &#123;</span><br><span class="line">    <span class="keyword">this</span>.map = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.initMap(opt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 销毁地图</span></span><br><span class="line">  destroy() &#123;</span><br><span class="line">    <span class="keyword">this</span>.map.destroy();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化地图</span></span><br><span class="line">  initMap(&#123; domId, geolocation &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      AMapLoader.load(&#123;</span><br><span class="line">        key: key, <span class="comment">// 申请好的Web端开发者Key，首次调用 load 时必填</span></span><br><span class="line">        plugins: mapPlugin, <span class="comment">// 需要使用的的插件列表，如比例尺'AMap.Scale'等</span></span><br><span class="line">        AMapUI: &#123;</span><br><span class="line">          <span class="comment">// 是否加载 AMapUI，缺省不加载</span></span><br><span class="line">          plugins: [], <span class="comment">// 需要加载的 AMapUI ui插件</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">AMap</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.map = <span class="keyword">new</span> AMap.Map(domId, &#123;</span><br><span class="line">            mapStyle: <span class="string">`amap://styles/<span class="subst">$&#123;styleId&#125;</span>`</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">if</span> (geolocation) &#123;</span><br><span class="line">            <span class="comment">// 初始化定位</span></span><br><span class="line">            <span class="keyword">this</span>.initGetLocation();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (mapPlugin.length &gt; <span class="number">0</span>) &#123; <span class="comment">// 加载插件</span></span><br><span class="line">            <span class="keyword">this</span>.initMapPlugin(mapPlugin);</span><br><span class="line">          &#125;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(e);</span><br><span class="line">          reject();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取当前定位</span></span><br><span class="line">  getLocation() &#123;</span><br><span class="line">    <span class="keyword">this</span>.geolocation.getCurrentPosition();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化定位组件</span></span><br><span class="line">  initGetLocation() &#123;</span><br><span class="line">    <span class="keyword">this</span>.map.plugin(<span class="string">'AMap.Geolocation'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.geolocation = <span class="keyword">new</span> AMap.Geolocation(&#123;</span><br><span class="line">        enableHighAccuracy: <span class="literal">false</span>, <span class="comment">//是否使用高精度定位，默认:true</span></span><br><span class="line">        timeout: <span class="number">1000</span>, <span class="comment">//超过10秒后停止定位，默认：无穷大</span></span><br><span class="line">        maximumAge: <span class="number">0</span>, <span class="comment">//定位结果缓存0毫秒，默认：0</span></span><br><span class="line">        convert: <span class="literal">true</span>, <span class="comment">//自动偏移坐标，偏移后的坐标为高德坐标，默认：true</span></span><br><span class="line">        showButton: <span class="literal">false</span>, <span class="comment">//显示定位按钮，默认：true</span></span><br><span class="line">        showMarker: <span class="literal">true</span>, <span class="comment">//定位成功后在定位到的位置显示点标记，默认：true</span></span><br><span class="line">        showCircle: <span class="literal">true</span>, <span class="comment">//定位成功后用圆圈表示定位精度范围，默认：true</span></span><br><span class="line">        panToLocation: <span class="literal">true</span>, <span class="comment">//定位成功后将定位到的位置作为地图中心点，默认：true</span></span><br><span class="line">        zoomToAccuracy: <span class="literal">false</span>, <span class="comment">//定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.map.addControl(<span class="keyword">this</span>.geolocation);</span><br><span class="line">      <span class="keyword">this</span>.getLocation();<span class="comment">// 初始化完成默认调用一次获取定位</span></span><br><span class="line">      AMap.event.addListener(<span class="keyword">this</span>.geolocation, <span class="string">'complete'</span>, onComplete =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(onComplete, <span class="string">'定位成功'</span>);</span><br><span class="line">        <span class="keyword">this</span>.currentLocation = onComplete; <span class="comment">//  存储当前定位</span></span><br><span class="line">      &#125;); <span class="comment">//返回定位信息</span></span><br><span class="line"></span><br><span class="line">      AMap.event.addListener(geolocation, <span class="string">'error'</span>, onError =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(onError, <span class="string">'定位失败'</span>);</span><br><span class="line">      &#125;); <span class="comment">//返回 定位失败</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加载插件</span></span><br><span class="line">  initMapPlugin(l) &#123;</span><br><span class="line">    l.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> f = v.split(<span class="string">'.'</span>)[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">this</span>.map.addControl(<span class="keyword">new</span> AMap[f]());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 画线</span></span><br><span class="line">  pathLine(pointList, pathOption) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * pointList 为线所要经过的点 格式为</span></span><br><span class="line"><span class="comment">     * [</span></span><br><span class="line"><span class="comment">          &#123;</span></span><br><span class="line"><span class="comment">            name: "轨迹名",</span></span><br><span class="line"><span class="comment">            path: [</span></span><br><span class="line"><span class="comment">              [100.340417, 27.376994],</span></span><br><span class="line"><span class="comment">              [108.426354, 37.827452],</span></span><br><span class="line"><span class="comment">              [113.392174, 31.208439],</span></span><br><span class="line"><span class="comment">              [124.905846, 42.232876],</span></span><br><span class="line"><span class="comment">            ],</span></span><br><span class="line"><span class="comment">          &#125;,</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">     * pathOption 为线条参数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> pathLineStyle = &#123;</span><br><span class="line">      strokeStyle: <span class="string">'red'</span>,</span><br><span class="line">      lineWidth: <span class="number">6</span>,</span><br><span class="line">      dirArrowStyle: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">Object</span>.assign(pathLineStyle, pathOption);</span><br><span class="line">    AMapUI.load([<span class="string">'ui/misc/PathSimplifier'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">PathSimplifier</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> pathSimplifierIns = <span class="keyword">new</span> PathSimplifier(&#123;</span><br><span class="line">        zIndex: <span class="number">100</span>,</span><br><span class="line">        map: that.map, <span class="comment">//所属的地图实例</span></span><br><span class="line">        getPath: <span class="function"><span class="keyword">function</span>(<span class="params">pathData, pathIndex</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//返回轨迹数据中的节点坐标信息，[AMap.LngLat, AMap.LngLat...] 或者 [[lng|number,lat|number],...]</span></span><br><span class="line">          <span class="keyword">return</span> pathData.path;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// getHoverTitle: function(pathData, pathIndex, pointIndex) &#123;</span></span><br><span class="line">        <span class="comment">//   //返回鼠标悬停时显示的信息</span></span><br><span class="line">        <span class="comment">//   if (pointIndex &gt;= 0) &#123;</span></span><br><span class="line">        <span class="comment">//     //鼠标悬停在某个轨迹节点上</span></span><br><span class="line">        <span class="comment">//     return (</span></span><br><span class="line">        <span class="comment">//       pathData.name + '，点:' + pointIndex + '/' + pathData.path.length</span></span><br><span class="line">        <span class="comment">//     );</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">//   //鼠标悬停在节点之间的连线上</span></span><br><span class="line">        <span class="comment">//   return pathData.name + '，点数量' + pathData.path.length;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        renderOptions: &#123;</span><br><span class="line">          <span class="comment">//轨迹线的样式</span></span><br><span class="line">          pathLineStyle,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      pathSimplifierIns.setData(pointList);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义兴趣点</span></span><br><span class="line">  drawMarker(marker) &#123;</span><br><span class="line">    <span class="comment">// marker可传单个点 可传点数组</span></span><br><span class="line">    <span class="keyword">this</span>.map.add(marker);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取自定义内容标记</span></span><br><span class="line">  getMarker(position, opt, extData, fn) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * position 为位置信息 必传</span></span><br><span class="line"><span class="comment">     * opt 为用户自定义覆盖物 可传</span></span><br><span class="line"><span class="comment">     * icon: '//vdata.amap.com/icons/b18/1/2.png', // 添加 Icon 图标 URL</span></span><br><span class="line"><span class="comment">     * size: new AMap.Size(40, 50),    // 图标尺寸</span></span><br><span class="line"><span class="comment">     * image: '//webapi.amap.com/theme/v1.3/images/newpc/way_btn2.png',  // Icon的图像</span></span><br><span class="line"><span class="comment">     * imageOffset: new AMap.Pixel(0, -60),  // 图像相对展示区域的偏移量，适于雪碧图等</span></span><br><span class="line"><span class="comment">     * imageSize: new AMap.Size(40, 50)   // 根据所设置的大小拉伸或压缩图片</span></span><br><span class="line"><span class="comment">     * zoom: 13</span></span><br><span class="line"><span class="comment">     * content:'&lt;div class="marker-route marker-marker-bus-from"&gt;&lt;/div&gt;'</span></span><br><span class="line"><span class="comment">     * 更多配置 https://lbs.amap.com/api/javascript-api/reference/overlay#marker</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      position, <span class="comment">// 基点位置</span></span><br><span class="line">      offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-17</span>, <span class="number">-42</span>), <span class="comment">// 相对于基点的</span></span><br><span class="line">      clickable: <span class="literal">true</span>,</span><br><span class="line">      extData: extData,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (opt) &#123;</span><br><span class="line">      option = &#123; ...option, ...opt &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> marker = <span class="keyword">new</span> AMap.Marker(option);</span><br><span class="line">    marker.on(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">      <span class="comment">// 注册marker的点击事件</span></span><br><span class="line">      <span class="comment">// console.log(e.target.getExtData());</span></span><br><span class="line">      <span class="keyword">this</span>.map.setZoomAndCenter(<span class="number">10</span>, e.target.getPosition()); <span class="comment">// 点击marker点后以 marker点为中心</span></span><br><span class="line">      <span class="comment">// marker点 点击</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.lastSelectedMarker) &#123;</span><br><span class="line">        <span class="comment">// 如果存在上个点击点 将上个点击点的icon恢复默认大小</span></span><br><span class="line">        <span class="keyword">const</span> &#123; image &#125; = <span class="keyword">this</span>.lastSelectedMarker.w.icon.Ce;</span><br><span class="line">        <span class="keyword">const</span> icon = <span class="keyword">this</span>.getMarkerIcon(&#123; image &#125;);</span><br><span class="line">        <span class="keyword">this</span>.lastSelectedMarker.setIcon(icon);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> &#123; image &#125; = e.target.w.icon.Ce;</span><br><span class="line">      <span class="keyword">const</span> newIcon = <span class="keyword">this</span>.getMarkerIcon(&#123;</span><br><span class="line">        image,</span><br><span class="line">        setOffset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-18</span>, <span class="number">-50</span>),</span><br><span class="line">        size: <span class="keyword">new</span> AMap.Size(<span class="number">52</span>, <span class="number">52</span>), <span class="comment">// 图标尺寸</span></span><br><span class="line">        imageSize: <span class="keyword">new</span> AMap.Size(<span class="number">48</span>, <span class="number">48</span>),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      e.target.setIcon(newIcon);</span><br><span class="line">      fn(extData);</span><br><span class="line">      <span class="keyword">this</span>.lastSelectedMarker = e.target;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> marker;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成marker的图片icon</span></span><br><span class="line">  getMarkerIcon(opt) &#123;</span><br><span class="line">    <span class="comment">// opt 必须包含image属性</span></span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      size: <span class="keyword">new</span> AMap.Size(<span class="number">40</span>, <span class="number">40</span>), <span class="comment">// 图标尺寸</span></span><br><span class="line">      imageSize: <span class="keyword">new</span> AMap.Size(<span class="number">36</span>, <span class="number">36</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AMap.Icon(&#123; ...option, ...opt &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化 拖拽选址</span></span><br><span class="line">  initPositionPicker([fnSuc, fnFail], position) &#123;</span><br><span class="line">    <span class="comment">// [fnSuc, fnFail], position</span></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 入参说明</span></span><br><span class="line"><span class="comment">     * fn数组 为拖拽事件处理 必传</span></span><br><span class="line"><span class="comment">     * position 为start的中线点 可不传</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    AMapUI.loadUI([<span class="string">'misc/PositionPicker'</span>], PositionPicker =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.positionPicker = <span class="keyword">new</span> PositionPicker(&#123;</span><br><span class="line">        mode: <span class="string">'dragMap'</span>, <span class="comment">//设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'</span></span><br><span class="line">        map: <span class="keyword">this</span>.map, <span class="comment">//依赖地图对象</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//<span class="doctag">TODO:</span>事件绑定、结果处理等</span></span><br><span class="line">      <span class="keyword">this</span>.positionPicker.on(<span class="string">'success'</span>, positionResult =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(positionResult, <span class="string">'拖拽 success'</span>);</span><br><span class="line">        <span class="comment">// fnSuc(positionResult)</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.positionPicker.on(<span class="string">'fail'</span>, positionResult =&gt; &#123;</span><br><span class="line">        <span class="comment">// 海上或海外无法获得地址信息</span></span><br><span class="line">        <span class="built_in">console</span>.log(positionResult, <span class="string">'拖拽err'</span>);</span><br><span class="line">        <span class="comment">// fnFail()</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.positionPicker.start(</span><br><span class="line">        position ? position : <span class="keyword">this</span>.currentLocation.position</span><br><span class="line">      ); <span class="comment">// 开启定位  默认以当前点为中心点  有传入 就以传入的为中心点</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加搜索框输入提示</span></span><br><span class="line">  initAutoComplete() &#123;</span><br><span class="line">    AMap.plugin(<span class="string">'AMap.Autocomplete'</span>, ()=&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;citycode&#125; = <span class="keyword">this</span>.currentLocation.addressComponent  <span class="comment">// 获取当前定位的城市的城市号</span></span><br><span class="line">      <span class="keyword">this</span>.autoComplete = <span class="keyword">new</span> AMap.Autocomplete(&#123;</span><br><span class="line">        city:citycode?citycode:defaultCityCode</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在我们需要使用地图的地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Map</span></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">"@/common/script/map"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;<span class="attr">domId</span>:<span class="string">"dom的id"</span>,<span class="attr">geolocation</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取定位 (可以放在你点击获取当前定位的按钮上)</span></span><br><span class="line"><span class="keyword">this</span>.map.getLocation()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入提示 </span></span><br><span class="line"><span class="keyword">this</span>.map.initAutoComplete()  <span class="comment">// 注册输入提示</span></span><br><span class="line">  <span class="comment">// 在需要触发的方法里面  this.place为 需要进行模糊匹配的内容</span></span><br><span class="line">  <span class="keyword">this</span>.map.autoComplete.search(<span class="keyword">this</span>.place,(status,res)=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(status,res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 画自定义点 content </span></span><br><span class="line">drawMarker() &#123;</span><br><span class="line">  <span class="keyword">const</span> content =<span class="string">'&lt;div&gt;1&lt;/div&gt;'</span></span><br><span class="line">  <span class="keyword">const</span> marker = <span class="keyword">this</span>.map.getMarker([<span class="number">116.39</span>, <span class="number">39.9</span>],&#123;content&#125;);</span><br><span class="line">  <span class="keyword">this</span>.map.drawMarker(marker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画自定义点 icon</span></span><br><span class="line">drawMarker()&#123;</span><br><span class="line">  <span class="keyword">const</span> icon = <span class="keyword">this</span>.map.getMarkerIcon(&#123; <span class="attr">image</span>: <span class="string">'you image url'</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> marker = <span class="keyword">this</span>.map.getMarker(</span><br><span class="line">      [<span class="number">120.3</span>, <span class="number">31.3</span>],</span><br><span class="line">      &#123; icon &#125;,</span><br><span class="line">      extData,</span><br><span class="line">      callback <span class="comment">// 传递给marker点 点击触发的回调方法</span></span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">this</span>.map.drawMarker(marker);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画自定义线</span></span><br><span class="line">drawPath() &#123;</span><br><span class="line">  <span class="keyword">this</span>.map.pathLine(</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"轨迹0"</span>,</span><br><span class="line">        path: [</span><br><span class="line">          [<span class="number">100.340417</span>, <span class="number">27.376994</span>],</span><br><span class="line">          [<span class="number">108.426354</span>, <span class="number">37.827452</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &#123;</span><br><span class="line">      strokeStyle: <span class="string">"green"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">this</span>.map.pathLine([</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"轨迹0"</span>,</span><br><span class="line">      path: [</span><br><span class="line">        [<span class="number">108.426354</span>, <span class="number">37.827452</span>],</span><br><span class="line">        [<span class="number">113.392174</span>, <span class="number">31.208439</span>],</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">this</span>.map.pathLine(</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"轨迹0"</span>,</span><br><span class="line">        path: [</span><br><span class="line">          [<span class="number">113.392174</span>, <span class="number">31.208439</span>],</span><br><span class="line">          [<span class="number">124.905846</span>, <span class="number">42.232876</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &#123;</span><br><span class="line">      strokeStyle: <span class="string">"pink"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拖拽定位 初始化 第一次初始化会默认开启拖拽</span></span><br><span class="line"><span class="keyword">this</span>.map.initPositionPicker([sucCallBack,failCallBack])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束拖拽</span></span><br><span class="line"><span class="keyword">this</span>.map.positionPicker.stop();</span><br></pre></td></tr></table></figure>


<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>地图</category>
        <category>jsapi</category>
      </categories>
      <tags>
        <tag>地图</tag>
        <tag>jsapi</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始进阶全栈之数据库(二)</title>
    <url>/2021/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%BF%9B%E9%98%B6%E5%85%A8%E6%A0%88%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93(%E4%BA%8C)/</url>
    <content><![CDATA[<p>本篇主要介绍nodejs中的orm框架 —&gt; Sequelize</p>
<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>基于Promise的ORM(Object Relation Mapping)，是一种数据库中间件支持多种数据库、事务、关联等</p>
<blockquote>
<p>中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功<br>能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。目前，它并没有很严格的定义，但是普遍接受IDC的定义：中间件是一种独立的系统软件服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。从这个意义上可以用一个等式来表示中间件：中间件=平台+通信，这也就限定了只有用于分布式系统中才能叫中间件，同时也把它与支撑软件和实用软件区分开来。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i sequelize mysql2 -S</span><br></pre></td></tr></table></figure>

<h1 id="orm和sql的对照关系"><a href="#orm和sql的对照关系" class="headerlink" title="orm和sql的对照关系"></a>orm和sql的对照关系</h1><table>
<thead>
<tr>
<th>sql</th>
<th>orm</th>
</tr>
</thead>
<tbody><tr>
<td>select</td>
<td>findAll(<code>查询多条</code>),findOne(<code>获取第一个条目</code>),findByPk(<code>findById不支持了</code>),findOrCreate(<code>查询,不存在就新建一个</code>),findAndCountAll(<code>分页查询/查询多条并统计数量</code>)</td>
</tr>
<tr>
<td>update</td>
<td>update</td>
</tr>
<tr>
<td>insert</td>
<td>create</td>
</tr>
<tr>
<td>delete</td>
<td>destroy</td>
</tr>
</tbody></table>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table>
<thead>
<tr>
<th>orm</th>
<th>sql</th>
</tr>
</thead>
<tbody><tr>
<td>Sequelize.STRING</td>
<td>VARCHAR(255)</td>
</tr>
<tr>
<td>Sequelize.STRING(1234)</td>
<td>VARCHAR(1234)</td>
</tr>
<tr>
<td>Sequelize.TEXT</td>
<td>TEXT</td>
</tr>
<tr>
<td>Sequelize.TEXT(‘tiny’)</td>
<td>TINYTEXT</td>
</tr>
<tr>
<td>Sequelize.CITEXT</td>
<td>CITEXT  仅 PostgreSQL 和 SQLite.</td>
</tr>
<tr>
<td>Sequelize.TSVECTOR</td>
<td>TSVECTOR  仅 PostgreSQL.</td>
</tr>
<tr>
<td>Sequelize.BOOLEAN</td>
<td>TINYINT(1)</td>
</tr>
<tr>
<td>Sequelize.INTEGER</td>
<td>INTEGER</td>
</tr>
<tr>
<td>Sequelize.BIGINT</td>
<td>BIGINT</td>
</tr>
<tr>
<td>Sequelize.BIGINT(11)</td>
<td>BIGINT(11)</td>
</tr>
<tr>
<td>Sequelize.FLOAT</td>
<td>FLOAT</td>
</tr>
<tr>
<td>Sequelize.FLOAT(11)</td>
<td>FLOAT(11)</td>
</tr>
<tr>
<td>Sequelize.FLOAT(11, 10)</td>
<td>FLOAT(11,10)</td>
</tr>
<tr>
<td>Sequelize.REAL</td>
<td>REAL  仅 PostgreSQL.</td>
</tr>
<tr>
<td>Sequelize.REAL(11)</td>
<td>REAL(11)  仅 PostgreSQL.</td>
</tr>
<tr>
<td>Sequelize.REAL(11, 12)</td>
<td>REAL(11,12) 仅 PostgreSQL.</td>
</tr>
<tr>
<td>Sequelize.DOUBLE</td>
<td>DOUBLE</td>
</tr>
<tr>
<td>Sequelize.DOUBLE(11)</td>
<td>DOUBLE(11)</td>
</tr>
<tr>
<td>Sequelize.DOUBLE(11, 10)</td>
<td>DOUBLE(11,10)</td>
</tr>
<tr>
<td>Sequelize.DATE</td>
<td>DATETIME 适用于 mysql / sqlite, 带时区的TIMESTAMP 适用于 postgres</td>
</tr>
<tr>
<td>Sequelize.DATE(6)</td>
<td>DATETIME(6) 适用于 mysql 5.6.4+. 支持6位精度的小数秒</td>
</tr>
<tr>
<td>Sequelize.DATEONLY</td>
<td>不带时间的 DATE</td>
</tr>
</tbody></table>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ol>
<li><p>建立连接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(db.database, db.user, db.password, &#123; <span class="comment">//表名 用户名 密码</span></span><br><span class="line">    host: db.host, <span class="comment">//地址</span></span><br><span class="line">    port: db.port, <span class="comment">//端口</span></span><br><span class="line">    dialect: <span class="string">'mysql'</span>, <span class="comment">//数据库类型：'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql'</span></span><br><span class="line">    pool: &#123; <span class="comment">// 连接池配置</span></span><br><span class="line">        max: <span class="number">5</span>,</span><br><span class="line">        min: <span class="number">0</span>,</span><br><span class="line">        acquire: <span class="number">30000</span>,</span><br><span class="line">        idle: <span class="number">10000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    timezone: <span class="string">'+08:00'</span> <span class="comment">//时区转换</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义模型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>,&#123;</span><br><span class="line">    id: &#123;</span><br><span class="line">        type: Sequelize.STRING(<span class="number">255</span>),</span><br><span class="line">        primaryKey: <span class="literal">true</span>, <span class="comment">//主键</span></span><br><span class="line">        autoIncrement: <span class="literal">true</span>,  <span class="comment">// 自增长</span></span><br><span class="line">        allowNull:<span class="literal">false</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: Sequelize.STRING,</span><br><span class="line">        defaultValue: <span class="string">'name1'</span>, <span class="comment">//设置默认值</span></span><br><span class="line">        comment: <span class="string">"姓名"</span>  <span class="comment">//注释</span></span><br><span class="line">    &#125;</span><br><span class="line">    role: Sequelize.INTEGER(<span class="number">11</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步数据库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 严重：force := true 会强制删除表及数据后重建,请一定慎用！！！</span></span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">false</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制同步：创建表之前先删除已存在的表</span></span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>避免自动生成时间戳字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>,&#123;&#125;,&#123;</span><br><span class="line">    timestamps:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定表名</p>
</li>
</ol>
<ul>
<li>freezeTableName:true  </li>
<li>tableName:’xxx’ </li>
</ul>
<blockquote>
<p>前者以modelName作为表名，后者则按其值作为表名<br>蛇形命名 underscored:true<br>默认驼峰 命名</p>
</blockquote>
<ol start="6">
<li>实例用法</li>
</ol>
<ul>
<li>更新<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jane = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">"Jane"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(jane.name); <span class="comment">// "Jane"</span></span><br><span class="line">jane.name = <span class="string">"Ada"</span>;</span><br><span class="line"><span class="comment">// 数据库中的名称仍然是 "Jane"</span></span><br><span class="line"><span class="keyword">await</span> jane.save();</span><br><span class="line"><span class="comment">// 现在该名称已在数据库中更新为 "Ada"！</span></span><br></pre></td></tr></table></figure></li>
<li>删除<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jane = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">"Jane"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(jane.name); <span class="comment">// "Jane"</span></span><br><span class="line"><span class="keyword">await</span> jane.destroy();</span><br><span class="line"><span class="comment">// 现在该条目已从数据库中删除</span></span><br></pre></td></tr></table></figure></li>
<li>重载<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jane = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">"Jane"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(jane.name); <span class="comment">// "Jane"</span></span><br><span class="line">jane.name = <span class="string">"Ada"</span>;</span><br><span class="line"><span class="comment">// 数据库中的名称依然是 "Jane"</span></span><br><span class="line"><span class="keyword">await</span> jane.reload();</span><br><span class="line"><span class="built_in">console</span>.log(jane.name); <span class="comment">// "Jane"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>reload 调用生成一个 SELECT 查询,以从数据库中获取最新数据.</p>
</blockquote>
</li>
</ul>
<ol start="7">
<li><p>UUID</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">id: &#123;</span><br><span class="line">    type: Sequelize.UUID,</span><br><span class="line">    primaryKey: <span class="literal">true</span>, <span class="comment">//主键</span></span><br><span class="line">    autoIncrement: <span class="literal">true</span>,  <span class="comment">// 自增长</span></span><br><span class="line">    allowNull:<span class="literal">false</span>,</span><br><span class="line">    defaultValue: Sequelize.UUIDV1,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Getters &amp; Setters</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义为属性的一部分</span></span><br><span class="line">name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">get</span>() &#123; </span><br><span class="line">        <span class="keyword">const</span> fname = <span class="keyword">this</span>.getDataValue(<span class="string">"name"</span>);</span><br><span class="line">        <span class="keyword">const</span> price = <span class="keyword">this</span>.getDataValue(<span class="string">"price"</span>);</span><br><span class="line">        <span class="keyword">const</span> stock = <span class="keyword">this</span>.getDataValue(<span class="string">"stock"</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;fname&#125;</span>(价格：￥<span class="subst">$&#123;price&#125;</span> 库存：<span class="subst">$&#123;stock&#125;</span>kg)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义为模型选项 options中</span></span><br><span class="line">&#123;</span><br><span class="line">    getterMethods: &#123;</span><br><span class="line">        amount() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getDataValue(<span class="string">"stock"</span>) + <span class="string">"kg"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    setterMethods: &#123;</span><br><span class="line">        amount(val) &#123;</span><br><span class="line">            <span class="keyword">const</span> idx = val.indexOf(<span class="string">'kg'</span>);</span><br><span class="line">            <span class="keyword">const</span> v = val.slice(<span class="number">0</span>, idx);</span><br><span class="line">            <span class="keyword">this</span>.setDataValue(<span class="string">'stock'</span>, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过模型实例触发setterMethods</span></span><br><span class="line">Fruit.findAll().then(<span class="function"><span class="params">fruits</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(fruits));</span><br><span class="line">     <span class="comment">// 修改amount，触发setterMethods</span></span><br><span class="line">    fruits[<span class="number">0</span>].amount = <span class="string">'150kg'</span>; </span><br><span class="line">    fruits[<span class="number">0</span>].save(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="基本增删改查"><a href="#基本增删改查" class="headerlink" title="基本增删改查"></a>基本增删改查</h1><ol>
<li><p>增</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = User.create(&#123;</span><br><span class="line">    name:<span class="string">"joker"</span>,</span><br><span class="line">    role:<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">consoole.log(<span class="string">'create'</span>,res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = User.update(</span><br><span class="line">    &#123;<span class="attr">role</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">where</span>:&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">)</span><br><span class="line">consoole.log(<span class="string">'update'</span>,res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查</p>
<ul>
<li>单条<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findOne(&#123; </span><br><span class="line">attributes: [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'role'</span>], <span class="comment">// 指定需要返回的字段</span></span><br><span class="line">where: &#123;</span><br><span class="line">    id: id</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>多条<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Op = Sequelize.Op</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = User.findAll(</span><br><span class="line">    &#123;<span class="attr">where</span>:&#123;<span class="attr">role</span>:&#123;[Op.lt]:<span class="number">3</span>,[Op.gt]:<span class="number">1</span>&#125;&#125;&#125;</span><br><span class="line">)</span><br><span class="line">consoole.log(<span class="string">'findAll'</span>,res)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>删</p>
<ul>
<li>方式1<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.destroy(&#123;</span><br><span class="line">    where: &#123;</span><br><span class="line">        id: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>方式2<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findOne(&#123;</span><br><span class="line">    where: &#123;</span><br><span class="line">        id: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">result.destroy()</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<h1 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h1><h2 id="查询特定属性"><a href="#查询特定属性" class="headerlink" title="查询特定属性"></a>查询特定属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'foo'</span>, <span class="string">'bar'</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以使用嵌套数组来<strong>重命名</strong>属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'foo'</span>, [<span class="string">'bar'</span>, <span class="string">'baz'</span>], <span class="string">'qux'</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>添加聚合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取帽子数量</span></span><br><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: &#123;</span><br><span class="line">    include: [</span><br><span class="line">      [sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'hats'</span>)), <span class="string">'n_hats'</span>]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="排除某些属性"><a href="#排除某些属性" class="headerlink" title="排除某些属性"></a>排除某些属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: &#123; <span class="attr">exclude</span>: [<span class="string">'baz'</span>] &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAndCountAll(&#123;</span><br><span class="line">    limit:<span class="number">10</span>,<span class="comment">//每页10条</span></span><br><span class="line">    offset:x*<span class="number">10</span>,<span class="comment">//第x页*每页个数</span></span><br><span class="line">    where:&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="查询-不存在就新建一个"><a href="#查询-不存在就新建一个" class="headerlink" title="查询,不存在就新建一个"></a>查询,不存在就新建一个</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findOrCreate(&#123;</span><br><span class="line">    where: &#123;&#125;,</span><br><span class="line">    defaults: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张三'</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'李四'</span>&#125;]</span><br><span class="line">Model.bulkCreate(data, &#123;</span><br><span class="line">    raw: <span class="literal">true</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res)</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">    order:[</span><br><span class="line">        [<span class="string">'id'</span>,<span class="string">'DESC'</span>]</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>DESC表示降序,默认ASC升序<br><a href="https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84" target="_blank" rel="noopener">更多用法</a></p>
</blockquote>
<h2 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h2><ul>
<li><p>count</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="keyword">await</span> User.count(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    age: &#123;</span><br><span class="line">      [Op.gt]: <span class="number">25</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 统计年龄大于25的人数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>max, min</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> User.max(<span class="string">'age'</span>); <span class="comment">// 最大年龄</span></span><br><span class="line"><span class="keyword">await</span> User.min(<span class="string">'age'</span>); <span class="comment">// 最小年龄</span></span><br><span class="line"><span class="keyword">await</span> User.min(<span class="string">'age'</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.gt]: <span class="number">5</span> &#125; &#125; &#125;); <span class="comment">// 大于五岁的最小年龄</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sum</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> User.sum(<span class="string">'age'</span>); <span class="comment">// 年龄总和</span></span><br><span class="line"><span class="keyword">await</span> User.sum(<span class="string">'age'</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.gt]: <span class="number">5</span> &#125; &#125; &#125;); <span class="comment">// 大于五岁的年龄总和</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h1><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ModelA.belongsTo(ModelB,&#123;</span><br><span class="line">    <span class="comment">// onDelete: 'RESTRICT',  // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL</span></span><br><span class="line">    <span class="comment">// onUpdate: 'RESTRICT', // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL</span></span><br><span class="line">    <span class="comment">// 一对一关联的默认值, ON DELETE 为 SET NULL 而 ON UPDATE 为 CASCADE</span></span><br><span class="line">    <span class="comment">// foreignKey: 'aId',</span></span><br><span class="line">    <span class="comment">// as:"mobelb"</span></span><br><span class="line">&#125;)</span><br><span class="line">ModelB.hasOne(ModelA,&#123;</span><br><span class="line">    <span class="comment">// foreignKey: 'aId',</span></span><br><span class="line">    <span class="comment">// as:"mobela"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">ModelA.findAll(&#123;</span><br><span class="line">    where:&#123;&#125;,</span><br><span class="line">    include:&#123;</span><br><span class="line">        model: ModelB,</span><br><span class="line">        <span class="keyword">as</span>: <span class="string">'mobelb'</span></span><br><span class="line">        where: &#123;&#125;，</span><br><span class="line">        required: <span class="literal">false</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">ModelA.findAll(&#123;</span><br><span class="line">    where:&#123;</span><br><span class="line">        <span class="string">'$mobelb.id$'</span>: &#123; <span class="comment">// 跨表查询</span></span><br><span class="line">          [Sequelize.Op.substring]: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    include: [</span><br><span class="line">        <span class="string">'mobelb'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ModelA.belongsTo(ModelB)</span><br><span class="line">ModelB.hasMany(ModelA)</span><br></pre></td></tr></table></figure>

<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ModelA.belongToMany(ModelB)</span><br><span class="line">ModelB.hasMany(ModelA)</span><br></pre></td></tr></table></figure>

<h1 id="常用符号运算符"><a href="#常用符号运算符" class="headerlink" title="常用符号运算符"></a>常用符号运算符</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[Op.eq]: <span class="number">3</span>,                              <span class="comment">// = 3</span></span><br><span class="line">[Op.ne]: <span class="number">20</span>,                             <span class="comment">// != 20</span></span><br><span class="line">[Op.is]: <span class="literal">null</span>,                           <span class="comment">// IS NULL</span></span><br><span class="line">[Op.not]: <span class="literal">true</span>,                          <span class="comment">// IS NOT TRUE</span></span><br><span class="line">[Op.or]: [<span class="number">5</span>, <span class="number">6</span>],                         <span class="comment">// (someAttribute = 5) OR (someAttribute = 6)</span></span><br><span class="line"><span class="comment">// 使用方言特定的列标识符 (以下示例中使用 PG):</span></span><br><span class="line">[Op.col]: <span class="string">'user.organization_id'</span>,        <span class="comment">// = "user"."organization_id"</span></span><br><span class="line"><span class="comment">// 数字比较</span></span><br><span class="line">[Op.gt]: <span class="number">6</span>,                              <span class="comment">// &gt; 6</span></span><br><span class="line">[Op.gte]: <span class="number">6</span>,                             <span class="comment">// &gt;= 6</span></span><br><span class="line">[Op.lt]: <span class="number">10</span>,                             <span class="comment">// &lt; 10</span></span><br><span class="line">[Op.lte]: <span class="number">10</span>,                            <span class="comment">// &lt;= 10</span></span><br><span class="line">[Op.between]: [<span class="number">6</span>, <span class="number">10</span>],                   <span class="comment">// BETWEEN 6 AND 10</span></span><br><span class="line">[Op.notBetween]: [<span class="number">11</span>, <span class="number">15</span>],               <span class="comment">// NOT BETWEEN 11 AND 15</span></span><br><span class="line"><span class="comment">// 其它操作符</span></span><br><span class="line">[Op.all]: sequelize.literal(<span class="string">'SELECT 1'</span>), <span class="comment">// &gt; ALL (SELECT 1)</span></span><br><span class="line">[Op.in]: [<span class="number">1</span>, <span class="number">2</span>],                         <span class="comment">// IN [1, 2]</span></span><br><span class="line">[Op.notIn]: [<span class="number">1</span>, <span class="number">2</span>],                      <span class="comment">// NOT IN [1, 2]</span></span><br><span class="line">[Op.like]: <span class="string">'%hat'</span>,                       <span class="comment">// LIKE '%hat'</span></span><br><span class="line">[Op.notLike]: <span class="string">'%hat'</span>,                    <span class="comment">// NOT LIKE '%hat'</span></span><br><span class="line">[Op.startsWith]: <span class="string">'hat'</span>,                  <span class="comment">// LIKE 'hat%'</span></span><br><span class="line">[Op.endsWith]: <span class="string">'hat'</span>,                    <span class="comment">// LIKE '%hat'</span></span><br><span class="line">[Op.substring]: <span class="string">'hat'</span>,                   <span class="comment">// LIKE '%hat%'</span></span><br><span class="line">[Op.iLike]: <span class="string">'%hat'</span>,                      <span class="comment">// ILIKE '%hat' (不区分大小写) (仅 PG)</span></span><br><span class="line">[Op.notILike]: <span class="string">'%hat'</span>,                   <span class="comment">// NOT ILIKE '%hat'  (仅 PG)</span></span><br><span class="line">[Op.regexp]: <span class="string">'^[h|a|t]'</span>,                 <span class="comment">// REGEXP/~ '^[h|a|t]' (仅 MySQL/PG)</span></span><br><span class="line">[Op.notRegexp]: <span class="string">'^[h|a|t]'</span>,              <span class="comment">// NOT REGEXP/!~ '^[h|a|t]' (仅 MySQL/PG)</span></span><br><span class="line">[Op.iRegexp]: <span class="string">'^[h|a|t]'</span>,                <span class="comment">// ~* '^[h|a|t]' (仅 PG)</span></span><br><span class="line">[Op.notIRegexp]: <span class="string">'^[h|a|t]'</span>,             <span class="comment">// !~* '^[h|a|t]' (仅 PG)</span></span><br><span class="line">[Op.any]: [<span class="number">2</span>, <span class="number">3</span>],                        <span class="comment">// ANY ARRAY[2, 3]::INTEGER (仅 PG)</span></span><br><span class="line">[Op.match]: Sequelize.fn(<span class="string">'to_tsquery'</span>, <span class="string">'fat &amp; rat'</span>) <span class="comment">// 匹配文本搜索字符串 'fat' 和 'rat' (仅 PG)</span></span><br><span class="line"><span class="comment">// 在 Postgres 中, Op.like/Op.iLike/Op.notLike 可以结合 Op.any 使用:</span></span><br><span class="line">[Op.like]: &#123; [Op.any]: [<span class="string">'cat'</span>, <span class="string">'hat'</span>] &#125;  <span class="comment">// LIKE ANY ARRAY['cat', 'hat']</span></span><br></pre></td></tr></table></figure>

<h1 id="一些踩过的坑"><a href="#一些踩过的坑" class="headerlink" title="一些踩过的坑"></a>一些踩过的坑</h1><h2 id="在查询结果中添加自定义属性"><a href="#在查询结果中添加自定义属性" class="headerlink" title="在查询结果中添加自定义属性"></a>在查询结果中添加自定义属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rlt.rows[i] =rlt.rows[i].toJSON()  <span class="comment">// 先进行toJSON 操作  然后才能赋值</span></span><br><span class="line">rlt.rows[i].xxx = <span class="string">'xxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不这么做的表现，当然 返回给前端的数据中也没有此字段</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rlt.rows[i]) <span class="comment">// 读取不到 midWayPortsArr </span></span><br><span class="line"><span class="built_in">console</span>.log(rlt.rows[i].xxx) <span class="comment">// 可以获取到</span></span><br><span class="line"><span class="built_in">console</span>.log(rlt.rows[i].hasOwnProperty(<span class="string">'xxx'</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rlt.rows[i]) <span class="comment">// 读取不到 midWayPortsArr </span></span><br><span class="line"><span class="built_in">console</span>.log(rlt.rows[i].midWayPortsArr) <span class="comment">// 可以获取到</span></span><br><span class="line"><span class="built_in">console</span>.log(rlt.rows[i].hasOwnProperty(<span class="string">'midWayPortsArr'</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<!-- markdownlint-disable MD041 MD002--> ]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>全栈之路</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>2022/01/99_9%的人都不知道的箭头函数不能当做构造函数的秘密/index</title>
    <url>/2022/01/99_9%25%E7%9A%84%E4%BA%BA%E9%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E5%BD%93%E5%81%9A%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%A7%98%E5%AF%86/index/</url>
    <content><![CDATA[<h2 id="一句话答案"><a href="#一句话答案" class="headerlink" title="一句话答案"></a>一句话答案</h2><p>因为箭头函数没有<code>[[Construct]]</code>这个内部槽。</p>
<a id="more"></a>

<h2 id="进一步解释"><a href="#进一步解释" class="headerlink" title="进一步解释"></a>进一步解释</h2><p>函数对象是一个支持<code>[[Call]]</code>、<code>[[Construct]]</code>内部方法的对象。每个支持[[Construct]]的对象必须支持[[Call]]，也就是说，每个构造函数必须是一个函数对象。因此，构造函数也可以被称为 <em>构造函数函数</em> 或 <em>构造函数对象</em>。<br>所以，想要对某个对象使用 <code>new</code>，就得确保该对象具有<code>[[Construct]]</code>这个内部方法。而箭头函数没有<code>[[Construct]]</code>。</p>
<h2 id="为什么没有-Construct"><a href="#为什么没有-Construct" class="headerlink" title="为什么没有[[Construct]]"></a>为什么没有<code>[[Construct]]</code></h2><p>因为箭头函数设计之初，就是为了设计一种更简短的函数并且不绑定 <code>this</code>。所以箭头函数不为参数 <code>super</code>、<code>this</code> 或 <code>new.target</code> 定义本地绑定。箭头函数中的 <code>this</code>、<code>super</code>、<code>arguments</code> 及 <code>new.target</code> 这些值由外围最近一层非箭头函数决定。</p>
<p>而这样的一个函数设计者认为没有必要委托给能够<code>[[Construct]]</code>的目标函数。所以箭头函数没有 <code>[[Construct]]</code>。  </p>
<p>同时因为没有构造原型的需求，所以箭头函数不存在 <code>prototype</code> 属性。</p>
<h2 id="相关论据"><a href="#相关论据" class="headerlink" title="相关论据"></a>相关论据</h2><p><img src="1.png" alt="image.png"></p>
<p><img src="2.png" alt="image.png"></p>
<p><img src="3.png" alt="image.png"></p>
<p><img src="4.png" alt="image.png"></p>
<blockquote>
<p>以上为个人的一些见解，欢迎各位大佬拍砖</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[Varlet]实战篇_这不就跑起来了/index</title>
    <url>/2022/01/%5BVarlet%5D%E5%AE%9E%E6%88%98%E7%AF%87_%E8%BF%99%E4%B8%8D%E5%B0%B1%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/index/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>相信已经有不少小伙伴们已经实现了自己<code>cli</code>工具的<code>gen</code>命令了。</p>
<p>接下来我们来讲讲如何实现一个<code>dev</code>命令，并通过<code>dev</code>命令来启动项目。</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>有了前面几篇的铺垫，到这里相信同学们已经知道接下来我要做什么了。</p>
<p>我们回到<code>src/index.ts</code>,写下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">program.command(<span class="string">'dev'</span>).description(<span class="string">'Run varlet development environment'</span>).action(dev)</span><br></pre></td></tr></table></figure>

<p>用来接收一个<code>dev</code>命令，而具体要做的处理，我们一样放在<code>src/commands/dev</code>中,对外暴露一个<code>dev</code>方法。</p>
<h2 id="dev要做的事"><a href="#dev要做的事" class="headerlink" title="dev要做的事"></a>dev要做的事</h2><p>我们先手动将运行环境切换为<code>dev</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">process.env.NODE_ENV = <span class="string">'development'</span></span><br></pre></td></tr></table></figure>

<p>然后我们需要确保输入名称的地方存在项目文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SRC_DIR = resolve(process.cwd(), <span class="string">'src'</span>)</span><br><span class="line">ensureDirSync(SRC_DIR)</span><br></pre></td></tr></table></figure>

<p>当完成以上工作后，就可以启动项目了。</p>
<h2 id="startServer"><a href="#startServer" class="headerlink" title="startServer"></a>startServer</h2><p>我们用一个<code>startServer</code>函数来处理启动的业务逻辑。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> server</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> startServer = <span class="keyword">async</span> () =&gt;&#123;</span><br><span class="line">  server = <span class="keyword">await</span> createServer()</span><br><span class="line">  <span class="keyword">await</span> server.listen()</span><br><span class="line">  server.printUrls()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，我们就可以将服务启动起来了。</p>
<p><img src="1.png" alt="image.png"></p>
<p>我们访问一下<code>http://localhost:3000/</code></p>
<p><img src="2.png" alt="image.png"></p>
<p>肯定会有同学们疑惑了，我服务不是起来了吗，怎么访问不到呢？</p>
<p>其实啊很简单,因为我们没有进行站点的构建，所以没法访问对应的站点资源。</p>
<p>举个例子，我们在<code>cli</code>创建的的项目根目录，新建一个<code>index.html</code>，然后看看浏览器这边是不是就可以正常显示了呢。</p>
<p>既然知道了这个问题，那我们接下来就来完成站点的构建。</p>
<h2 id="站点构建"><a href="#站点构建" class="headerlink" title="站点构建"></a>站点构建</h2><p>我们定义一个<code>buildSiteEntry</code>函数用于处理站点构建。</p>
<p><img src="3.png" alt="image.png"></p>
<p>从<code>varlet-cli</code>的源码中，我们可以看出<code>buildSiteEntry</code>一共做了三件事</p>
<p><strong>1</strong> 构建移动端站点的路由</p>
<p><strong>2</strong> 构建pc端站点的路由</p>
<p><strong>3</strong> 生成站点资源 </p>
<p>本文我们以<code>1</code>为例进行剖析，对<code>2</code>感兴趣的小伙伴们可以访问我们的<a href="https://github.com/varletjs/varlet/blob/dev/packages/varlet-cli/src/compiler/compileSiteEntry.ts" target="_blank" rel="noopener">代码仓库</a>进行查看。</p>
<p><img src="4.png" alt="image.png"></p>
<p>从图中我们可以分析出来，我们需要将每个组件下<code>example</code>的<code>index.vue</code>作为页面，添加到路由中。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取src目录下的文件</span></span><br><span class="line"><span class="keyword">const</span> dir: <span class="built_in">string</span>[] = <span class="keyword">await</span> readdir(<span class="string">'src'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接页面地址</span></span><br><span class="line"><span class="keyword">const</span> buildPath = <span class="function">(<span class="params">filename: <span class="built_in">string</span></span>) =&gt;</span> resolve(<span class="string">'src'</span>, filename, <span class="string">'example'</span>, <span class="string">'index.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在对应地址</span></span><br><span class="line"><span class="keyword">const</span> existPath = <span class="function">(<span class="params">filename: <span class="built_in">string</span></span>) =&gt;</span> pathExistsSync(buildPath(filename))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过slash转换`/`</span></span><br><span class="line"><span class="keyword">const</span> slashPath = <span class="function">(<span class="params">filename: <span class="built_in">string</span></span>) =&gt;</span> slash(buildPath(filename))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成地址</span></span><br><span class="line"><span class="keyword">const</span> examplePaths = dir.filter(existPath).map(slashPath)</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt="image.png"></p>
<p>从上面我们拿到了所有的页面地址，接下来就是填充<code>route</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> routes = examplePaths.map(</span><br><span class="line">    (examplePath) =&gt; <span class="string">`</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    path: '<span class="subst">$&#123;<span class="string">'/'</span> + examplePath.match(<span class="regexp">//</span>([-\w]+)<span class="regexp">/example/i</span>ndex.vue<span class="regexp">/)?.[1]&#125;',</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    /</span><span class="regexp">/ @ts-ignore</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    component: () =&gt; import('$&#123;examplePath&#125;')</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  &#125;\</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  )</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  const source = `export default [\</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  $&#123;routes.join(',')&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">]`</span></span></span></span><br></pre></td></tr></table></figure>

<p><img src="6.png" alt="image.png"></p>
<p>至此我们就完成了路由的动态创建，接下来就是文件写入了。</p>
<p>我们创建一个<code>outputFileSyncOnChange</code>用于处理问文件写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const outputFileSyncOnChange &#x3D; (path: string, code: string) &#x3D;&gt; &#123;</span><br><span class="line">  ensureFileSync(path)</span><br><span class="line">  const content &#x3D; readFileSync(path, &#39;utf-8&#39;)</span><br><span class="line">  if (content !&#x3D;&#x3D; code) &#123;</span><br><span class="line">    outputFileSync(path, code)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来 我们调用<code>outputFileSyncOnChange</code>函数，将路由写入到文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outputFileSyncOnChange(resolve(process.cwd(), &#39;.varlet&#x2F;mobile.routes.ts&#39;), source)</span><br></pre></td></tr></table></figure>

<p>接下来就是站点文件的生成。</p>
<p>我们将<code>site</code>文件夹(存放的站点文件)拷贝到当前运行的目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy(resolve(__dirname, &#39;..&#x2F;..&#x2F;site&#39;), resolve(process.cwd(), &#39;.varlet&#x2F;site&#39;))</span><br></pre></td></tr></table></figure>

<p>接下来，我们添加一些<code>vite</code>的配置</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inlineConfig =  &#123;</span><br><span class="line">  root: resolve(process.cwd(), <span class="string">'.varlet/site'</span>),</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions:[<span class="string">'.vue'</span>, <span class="string">'.tsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.jsx'</span>, <span class="string">'.js'</span>, <span class="string">'.less'</span>, <span class="string">'.css'</span>],</span><br><span class="line">    alias: &#123;<span class="string">'@config'</span>:  resolve(process.cwd(), <span class="string">'.varlet/site.config.json'</span>),</span><br><span class="line">      <span class="string">'@pc-routes'</span>:  resolve(process.cwd(), <span class="string">'.varlet/pc.routes.ts'</span>),</span><br><span class="line">      <span class="string">'@mobile-routes'</span>: resolve(process.cwd(), <span class="string">'.varlet/mobile.routes.ts'</span>) &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(&#123;</span><br><span class="line">      include: [<span class="regexp">/.vue$/</span>, <span class="regexp">/.md$/</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">    md(&#123; style: <span class="string">'highlight.style'</span> &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server = <span class="keyword">await</span> createServer(inlineConfig)</span><br></pre></td></tr></table></figure>


<p>然后我们通过<code>you-cli-name dev</code>重新跑一遍。</p>
<p><img src="7.png" alt="image.png"></p>
<p>这不就跑起来了嘛<del>~</del></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就是<code>dev</code>命令的相关内容了，跟<code>varlet-cli</code>的<code>dev</code>相比有一些删减。</p>
<blockquote>
<p>更详细的内容请移步我们的<a href="https://github.com/varletjs/varlet" target="_blank" rel="noopener">代码仓库</a>,欢迎star &amp;&amp; pr</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[Varlet]实战篇：gen个项目/index</title>
    <url>/2022/01/%5BVarlet%5D%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%9Agen%E4%B8%AA%E9%A1%B9%E7%9B%AE/index/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>到这里，相信小伙伴们已经对<code>cli</code>搭建要使用的工具有了一定了解。如果对相应的工具比较陌生，可以移步本<a href="https://juejin.cn/column/7047326390311452679" target="_blank" rel="noopener">专栏</a> 的前几篇内容。里面有相应介绍。</p>
<p>从这篇开始，我们将一步步得实现<code>cli</code>中的一些功能。</p>
<a id="more"></a>

<h2 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h2><p>在<code>varlet-cli</code>中，我们使用<code>gen</code>作为我们的构建命令，先介绍一下什么是<code>gen</code>。</p>
<p><code>gen</code>为<code>generate</code>的简写，用法与我们熟知的<code>vuecli</code>的<code>create</code>类似，用来创建一个组件库项目。</p>
<p>当然，小伙伴们也可以使用各种自己喜欢的命令名~本篇我们依旧以<code>gen</code>作为我们的构建命令。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>我们先将项目的目录结构调整一下。</p>
<p><img src="1.png" alt="image.png"></p>
<ul>
<li><p><code>generators</code>:用于存放<code>gen</code>命令构建出项目的模板文件</p>
</li>
<li><p><code>site</code>:用于存放文档站点</p>
</li>
<li><p><code>src</code>:不用多说，<code>cli</code>的核心部分都在这里了</p>
</li>
</ul>
<blockquote>
<p>因为本文以<code>cli</code>的搭建为主，<code>generators</code>和<code>site</code>部分的代码我们不做过多笔墨，有兴趣的小伙伴们可以前往我们的 <a href="https://github.com/varletjs/varlet" target="_blank" rel="noopener">代码仓库</a>查看</p>
</blockquote>
<h2 id="老朋友commander"><a href="#老朋友commander" class="headerlink" title="老朋友commander"></a>老朋友commander</h2><p>在之前的<a href="https://juejin.cn/post/7049371534380498951" target="_blank" rel="noopener">《进阶篇：好用的工具(上)》</a>中我们已经对<code>commander</code>的基本使用做了介绍，接下来就是让它发挥实力的时候了。</p>
<h3 id="Step1-引用"><a href="#Step1-引用" class="headerlink" title="Step1.引用"></a>Step1.引用</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Command &#125;  <span class="keyword">from</span> <span class="string">"commander"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> Command()</span><br><span class="line"></span><br><span class="line">program.version(<span class="built_in">require</span>(<span class="string">'../package.json'</span>).version, <span class="string">'-v, --version'</span>)</span><br><span class="line"></span><br><span class="line">program.parse()</span><br></pre></td></tr></table></figure>

<h3 id="创建gen命令"><a href="#创建gen命令" class="headerlink" title="创建gen命令"></a>创建gen命令</h3><p>我们在<code>src/commands/gen</code>中暴露一个<code>gen</code>方法用来处理<code>gen</code>命令</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">gen</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">   <span class="comment">// some code do gen action</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们在入口文件中使用这个<code>gen</code>方法。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; gen &#125; <span class="keyword">from</span> <span class="string">'./commands/gen'</span></span><br><span class="line"></span><br><span class="line">program.command(<span class="string">'gen &lt;name&gt;'</span>).description(<span class="string">'Generate cli application'</span>).action(gen)</span><br></pre></td></tr></table></figure>

<h2 id="gen要做啥"><a href="#gen要做啥" class="headerlink" title="gen要做啥"></a>gen要做啥</h2><p>既然命令已经有了，我们要先明确<code>gen</code>要做的事情：</p>
<ul>
<li>接收用户输入的项目名称</li>
<li>检测当前目录中是否已经存在同名目录，有则提示，无则继续流程</li>
<li>提示用户选择模板</li>
<li>将用户选择的模板拷贝到目的目录</li>
<li>提示用户创建完成</li>
</ul>
<p>接下来我们将按上面的步骤逐步实现<code>gen</code></p>
<h2 id="同名检测"><a href="#同名检测" class="headerlink" title="同名检测"></a>同名检测</h2><p>我们接受用户输入的<code>name</code>，并拼接最终路径，通过<code>fs-extra</code>的<code>pathExistsSync</code>方法判读该路径是否存在。</p>
<p>如果存在则提示并终止程序。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dest = resolve(process.cwd(), name)</span><br><span class="line"><span class="keyword">if</span>(pathExistsSync(dest))&#123;</span><br><span class="line">    logger.warning(<span class="string">`<span class="subst">$&#123;name&#125;</span> already exists and cannot be recreated...`</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们在<code>write-cli</code>项目的同级目录试一下<code>gen</code></p>
</blockquote>
<p><img src="2.png" alt="image.png"></p>
<h2 id="选择模板"><a href="#选择模板" class="headerlink" title="选择模板"></a>选择模板</h2><p>我们使用<code>inquirer</code>来编辑交互</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ret = <span class="keyword">await</span> inquirer.prompt([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Please select your component library programming style'</span>,</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">'list'</span>,</span><br><span class="line">    choices: [<span class="string">'sfc'</span>, <span class="string">'tsx'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> choice = ret[<span class="string">'Please select your component library programming style'</span>]</span><br></pre></td></tr></table></figure>

<p>这里的<code>choice</code>就是用户选择的模板类似</p>
<p><img src="3.png" alt="image.png"></p>
<h2 id="拷贝模板"><a href="#拷贝模板" class="headerlink" title="拷贝模板"></a>拷贝模板</h2><p>我们先定义模板所在目录，然后拿到项目的基本文件目录以及模板目录，然后将其拷贝到定义项目的目录中。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GENERATORS_DIR = resolve(__dirname, <span class="string">'../../generators'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = resolve(GENERATORS_DIR, choice)</span><br><span class="line"><span class="keyword">const</span> base = resolve(GENERATORS_DIR, <span class="string">'base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> copy(base, dest)</span><br><span class="line"><span class="keyword">await</span> copy(generator, dest)</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt="image.png"></p>
<p>这样我们就完成了项目的创建。</p>
<h2 id="提示完成"><a href="#提示完成" class="headerlink" title="提示完成"></a>提示完成</h2><p>但是这样突然就完成了是不是有些不太友好呢，接下来我们来加入提示。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">logger.success(<span class="string">'Application generated successfully!'</span>)</span><br><span class="line">logger.info(<span class="string">`\</span></span><br><span class="line"><span class="string">  cd <span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string">  yarn</span></span><br><span class="line"><span class="string">  yarn dev`</span>)</span><br><span class="line">  logger.success(<span class="string">`\</span></span><br><span class="line"><span class="string">=======================</span></span><br><span class="line"><span class="string">  Good luck have fun</span></span><br><span class="line"><span class="string">=======================\</span></span><br><span class="line"><span class="string">      `</span>)</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt="image.png"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就是<code>gen</code>命令的相关内容了，跟<code>varlet-cli</code>的<code>gen</code>相比删减了一些不影响正常创建的内容。</p>
<blockquote>
<p>请参考<a href="https://github.com/varletjs/varlet/blob/dev/packages/varlet-cli/package.json" target="_blank" rel="noopener">相关依赖版本</a>,更详细的<a href="https://github.com/varletjs/varlet/blob/dev/packages/varlet-cli/src/commands/gen.ts" target="_blank" rel="noopener">gen</a>,本文中用到的<a href="https://github.com/varletjs/varlet/blob/dev/packages/varlet-cli/src/shared/logger.ts" target="_blank" rel="noopener">logger</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[Varlet]开篇：Hello Varlet/index</title>
    <url>/2022/01/%5BVarlet%5D%E5%BC%80%E7%AF%87%EF%BC%9AHello%20Varlet/index/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>耗子君QAQ的这篇 <a href="https://juejin.cn/post/7012564452545396750" target="_blank" rel="noopener">组件库设计 | 如何开发一个组件库CLI</a> 中大致讲了组件库 cli 的开发思路以及使用到的相关工具。</p>
<p>受篇幅的影响可能不是很详细，所以经过 <code>varlet core team</code> 商量后，我们决定以专栏的形式来将组件库的实现尽可能的介绍清楚。</p>
<p>如果你是对组件库实现原理十分好奇的人，本专栏对你应该会有所启发。如果你想快速具备开发组件库的能力，并不想对底层实现刨根问底，你可以尝试使用 <a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/cli" target="_blank" rel="noopener">Varlet-Cli</a> 直接开始组件库开发。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>学习一门技术的最好方法，就是在实践中使用它。</p>
<p>本专栏将以 <a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/cli" target="_blank" rel="noopener">Varlet-Cli</a> 展开主要介绍如何从<code>0</code>到<code>1</code>开发一个组件库的实战过程。</p>
<p>本专栏将按基础篇、进阶篇、实战篇、总结篇进行编排：</p>
<ul>
<li><p>基础篇：你将学到 cli 开发过程中常用的关于 node 的一些基本概念。</p>
</li>
<li><p>进阶篇：你将学会使用 cli 开发中常用的工具，并开始能尝试做一些简单的 cli 。</p>
</li>
<li><p>实战篇：这一部分我们将以 <a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/cli" target="_blank" rel="noopener">Varlet-Cli</a> 为例，挑选出核心部分的代码实现进行讲解。</p>
</li>
<li><p>总结篇：总结本专栏的重要知识点。</p>
</li>
</ul>
<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>笔者是 <code>varlet core team</code> 中的一员，目前在团队中主要负责对 pr 的 review，有较大 change 时负责协调团队里人员进行修改，新 feature 的跟进，以及该专栏的持续输出。</p>
<p>本专栏，讲述我参与开源的过程中以及看完 <a href="https://github.com/varletjs/varlet" target="_blank" rel="noopener">varlet</a> 源码后的一些收获以及感悟。</p>
<p>如果这个专栏可以给你们带来一些灵感或者带来一些帮助，那这个专栏的目的就达到了。</p>
<h2 id="Varlet组件库相关链接，希望多多鼓励和支持"><a href="#Varlet组件库相关链接，希望多多鼓励和支持" class="headerlink" title="Varlet组件库相关链接，希望多多鼓励和支持"></a>Varlet组件库相关链接，希望多多鼓励和支持</h2><p><a href="https://github.com/varletjs/varlet" target="_blank" rel="noopener">Github仓库</a></p>
<p><a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/home" target="_blank" rel="noopener">中文文档</a></p>
<p><a href="https://varlet.gitee.io/varlet-ui/#/en-US/home" target="_blank" rel="noopener">英文文档</a></p>
<p><a href="https://juejin.cn/user/1046390801697319" target="_blank" rel="noopener">耗子君QAQ主页</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果这个系列你能掌握，我们诚邀你加入我们的核心团队。</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[Varlet]进阶篇：好用的工具(上)/index</title>
    <url>/2022/01/%5BVarlet%5D%E8%BF%9B%E9%98%B6%E7%AF%87%EF%BC%9A%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7(%E4%B8%8A)/index/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<code>cli</code>的开发工程中，我们用上了一些好用的工具，这极大的提升了我们的开发效率。</p>
<p>在本篇中，我将对这些好用的工具进行介绍。</p>
<blockquote>
<p><strong>注意：以下所有示例均以 Macos 环境为例</strong></p>
</blockquote>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>我们先新建一个空项目，然后打开命令行进入到该项目中</li>
<li>执行<code>npm init</code>完成项目初始化</li>
<li>此时我们的工程中应该有一个<code>package.json</code>文件， 在该文件中增加<code>bin</code>配置，如下图所示</li>
</ul>
<p><img src="1.png" alt="image.png"></p>
<ul>
<li>其中，<code>write-cli</code>是cli工具的名称，对应的 value 值是文件入口</li>
<li>编辑<code>index.js</code>，内容如下：<br><img src="2.png" alt="image.png"></li>
</ul>
<p><strong>这里的第一行非常重要！！！</strong><br><strong>这里的第一行非常重要！！！</strong><br><strong>这里的第一行非常重要！！！</strong></p>
<p>用来指明运行环境</p>
<p>然后我们通过<code>npm link</code>进行本地安装，然后再执行<code>write-cli</code>,就可以看到运行效果了</p>
<p><img src="3.png" alt="image.png"></p>
<h2 id="commander"><a href="#commander" class="headerlink" title="commander"></a>commander</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>commander</code>是<code>nodejs</code>命令行操作的完整解决方案，提供了用户命令行输入和参数解析强大功能。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install commander</span><br></pre></td></tr></table></figure>

<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; Command &#125; &#x3D; require(&#39;commander&#39;);</span><br><span class="line">const program &#x3D; new Command()</span><br><span class="line">program.version(require(&#39;.&#x2F;package&#39;).version, &#39;-v, --version&#39;)</span><br><span class="line">program.parse();</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt="image.png"></p>
<p>当你出现这样的信息时，说明你已经掌握了<code>commander</code>的基本用法</p>
<h3 id="create原来如此简单"><a href="#create原来如此简单" class="headerlink" title="create原来如此简单"></a>create原来如此简单</h3><p>相信不少小伙伴们都用过<code>Vue CLI</code>或者<code>create-react-app</code>这些著名的<code>cli</code>工具，里面肯定少不了创建项目的命令<code>create</code>，我们就一起来看看<code>create</code>是如何工作的吧</p>
<p><img src="5.png" alt="image.png"></p>
<p>一些解释：</p>
<ul>
<li>我们通过<code>.command()</code>类配置<code>create</code>命令。第一个参数为命令名称。命令参数跟在名称后面</li>
<li>尖括号表示参数可为必选(方括号为可选)</li>
<li><code>description</code>为命令的描述</li>
<li><code>action</code>处理子级命令</li>
</ul>
<blockquote>
<p>具体的<code>create</code>的代码实现,将会在后续的篇幅中更详细的讲解</p>
</blockquote>
<h2 id="inquirer"><a href="#inquirer" class="headerlink" title="inquirer"></a>inquirer</h2><p>我们在使用<code>cli</code>中不可避免的会有一些命令行交互。</p>
<p>在上文提到的两个出色的脚手架的使用中以及我们<code>npm init</code>时都出现了一些用户交互。</p>
<p>因此在我们的<code>cli</code>项目中要使用这样的交互的话，就不得不介绍一下<code>inquirer</code>了。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install inquirer</span><br></pre></td></tr></table></figure>

<h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><p>我们以<a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/cli" target="_blank" rel="noopener">varlet-cli</a>为例来实现选择的交互</p>
<p><img src="6.png" alt="image.png"></p>
<p>我们来改写一下<code>create</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> create = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'Please select your component library programming style'</span>,</span><br><span class="line">        type: <span class="string">'list'</span>,</span><br><span class="line">        choices: [<span class="string">'sfc'</span>, <span class="string">'tsx'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次执行<code>write-cli create hello</code>，相信聪明的你已经跑出来了跟上图一样的界面界面了。</p>
<p>看到这里，相信有小伙伴们会有新的疑问了，如何捕获用户的输入或者选择呢。</p>
<p>不急，我们慢慢往下看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">inquirer.prompt([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Please input some text'</span>,</span><br><span class="line">    type: <span class="string">'input'</span> <span class="comment">// 供用户输入</span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>然后我们从官方的文档中的</p>
<p><code>inquirer.prompt(questions, answers) -&gt; promise</code></p>
<p>我们可以看出，用户的输入以<code>promise</code>的形式返回</p>
<p>因此我们使用<code>async await</code>来接收用户的输入</p>
<p>这样我们就完成了捕获</p>
<p><img src="7.png" alt="image.png"></p>
<h2 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h2><p>我们可以通过<code>chalk</code>来是我们的命令行颜色变得丰富多彩。</p>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install chalk</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>在本文中为了方便演示 我们使用4.1.2版本</strong></p>
</blockquote>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>我们举几个栗子🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> log = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line">log(chalk.magenta(<span class="string">'Hello'</span>) + <span class="string">' Varlet'</span> + chalk.red(<span class="string">'!'</span>));</span><br><span class="line"></span><br><span class="line">log(chalk.blue.bgYellow.bold(<span class="string">'Hello Varlet!'</span>));</span><br><span class="line"></span><br><span class="line">log(chalk.green(<span class="string">'Hello'</span>, <span class="string">'Varlet!'</span>, <span class="string">'Jokerrr'</span>, <span class="string">'bar'</span>, <span class="string">'biz'</span>, <span class="string">'baz'</span>));</span><br></pre></td></tr></table></figure>
<p><img src="8.png" alt="image.png"></p>
<p>在<code>cli</code>中我们会将不同的提示信息用不同的色彩区分开进行输出。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上为我们用到的一部分工具库，还有一些同样好用的库我将在《进阶篇：好用的工具(下)》中继续介绍，敬请期待。</p>
<blockquote>
<p>参考文档 <a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander</a>,<a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">inquirer</a>,<a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a>,</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[Varlet]基础篇：Node知识储备/index</title>
    <url>/2022/01/%5BVarlet%5D%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9ANode%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/index/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>cli</code> 是在 <code>Node</code> 上开发的，因此我们需要掌握一些必要的前置知识。</p>
<p>本文内容主要对这些必要的前置知识进行讲解。</p>
<blockquote>
<p><strong>注意：以下所有示例均以 Macos 环境为例</strong></p>
</blockquote>
<a id="more"></a>

<h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>该模块提供了一些用于处理文件路径的小工具，用于处理目录的对象，提高用户开发效率，让我们一起来快速的认识path对象的一些常用方法吧！</p>
<h3 id="path-relative"><a href="#path-relative" class="headerlink" title="path.relative()"></a>path.relative()</h3><p>该方法接受两个参数，这两个参数都应该是绝对路径。</p>
<p>该方法返回第二个路径相对于第一个路径的那个相对路径。</p>
<blockquote>
<p><code>path.relative(from:string,to:string):string</code> <br> 如果 <code>from</code> 或 <code>to</code> 不是字符串，则抛出 <code>TypeError</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(path.relative(<span class="string">'/write-cli/folder/aaa'</span>, <span class="string">'/write-cli/anotherFolder/bbb'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//   ../../anotherFolder/bbb</span></span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt="image.png"></p>
<p>上面代码中，如果当前目录是<code>&#39;/write-cli/folder/aaa&#39;</code>，进入<code>path.relative</code>返回的相对路径，就会到达<code>&#39;/write-cli/anotherFolder/bbb&#39;</code>。</p>
<p>如果<code>path.relative</code>方法的两个参数相同，则返回一个空字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(path.relative(<span class="string">'/write-cli/folder/aaa'</span>, <span class="string">'/write-cli/folder/aaa'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// ''</span></span><br></pre></td></tr></table></figure>

<h3 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve"></a>path.resolve</h3><p>方法将相对路径解析为绝对路径。</p>
<p>它可以接受多个参数，依次表示所要进入的路径，直到将最后一个参数转为绝对路径。</p>
<blockquote>
<p><code>path.resolve([...paths]:Arrary&lt;string&gt;):string</code> <br>如果任何参数不是字符串，则抛出 <code>TypeError</code></p>
</blockquote>
<p>如果根据参数无法得到绝对路径，就以当前所在路径作为基准。除了根目录，该方法的返回值都不带尾部的斜杠。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">path.resolve([<span class="keyword">from</span> ...], to)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'folder/aaa'</span>, <span class="string">'/tmp/file/'</span>,<span class="string">'..'</span>, <span class="string">'a/../subfile'</span>))</span><br></pre></td></tr></table></figure>

<p>上述实例其实类似于做了如下操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd folder/aaa</span><br><span class="line">cd /tmp/file/</span><br><span class="line">cd ..</span><br><span class="line">cd a/../subfile</span><br></pre></td></tr></table></figure>

<p>更多栗子🌰🌰🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz'</span>);</span><br><span class="line"><span class="comment">// 返回: '/foo/bar/baz'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'/tmp/file/'</span>);</span><br><span class="line"><span class="comment">// 返回: '/tmp/file'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'wwwroot'</span>, <span class="string">'static_files/png/'</span>, <span class="string">'../gif/image.gif'</span>);</span><br><span class="line"><span class="comment">// 如果当前工作目录是 /home/myself/node，</span></span><br><span class="line"><span class="comment">// 则返回 '/home/myself/node/wwwroot/static_files/gif/image.gif'</span></span><br></pre></td></tr></table></figure>

<h3 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a>path.join</h3><p>该方法用于连接路径。</p>
<p>主要用途在于，会正确使用特定于平台的分隔符作为定界符将所有给定的 <code>path</code> 片段连接在一起，然后规范化生成的路径。</p>
<p>Linux/Macos 系统是 ‘/‘，Windows系统是 ‘&#39;。</p>
<blockquote>
<p><code>path.join([...path]:Array&lt;string&gt;):string</code> <br> 如果任何路径片段不是字符串，则抛出 <code>TypeError</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.join(<span class="string">'/foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz/asdf'</span>, <span class="string">'quux'</span>, <span class="string">'..'</span>);</span><br><span class="line"><span class="comment">// 返回: '/foo/bar/baz/asdf'</span></span><br><span class="line"></span><br><span class="line">path.join(<span class="string">'foo'</span>, &#123;&#125;, <span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">// 抛出 'TypeError: Path must be a string. Received &#123;&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="path-parse"><a href="#path-parse" class="headerlink" title="path.parse"></a>path.parse</h3><p>该方法可以返回路径各部分的信息。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">path.parse(path:<span class="built_in">string</span>):&#123;</span><br><span class="line">    dir:<span class="built_in">string</span>,</span><br><span class="line">    root:<span class="built_in">string</span>,</span><br><span class="line">    base:<span class="built_in">string</span>,</span><br><span class="line">    name:<span class="built_in">string</span>,</span><br><span class="line">    ext:<span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个例子🌰</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.parse(&#39;&#x2F;Users&#x2F;joker&#x2F;Documents&#x2F;write-cli&#x2F;folder&#x2F;aaa&#x2F;a.js&#39;)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  root: &#39;&#x2F;&#39;,</span><br><span class="line">  dir: &#39;&#x2F;Users&#x2F;joker&#x2F;Documents&#x2F;write-cli&#x2F;folder&#x2F;aaa&#39;,</span><br><span class="line">  base: &#39;a.js&#39;,</span><br><span class="line">  ext: &#39;.js&#39;,</span><br><span class="line">  name: &#39;a&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h3><p>该方法可以返回对应的扩展名。</p>
<p>如果 <code>path</code> 的最后一部分中没有 <code>.</code>，或者除了 <code>path</code> 的基本名称的第一个字符之外没有 <code>.</code> 个字符，则返回空字符串。</p>
<blockquote>
<p><code>path.extname(path:string):string</code><br>如果<code>path</code>不是字符串，则抛出 <code>TypeError</code></p>
</blockquote>
<p>举几个例子🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.extname(<span class="string">'index.html'</span>);</span><br><span class="line"><span class="comment">// 返回: '.html'</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'index.coffee.md'</span>);</span><br><span class="line"><span class="comment">// 返回: '.md'</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'index.'</span>);</span><br><span class="line"><span class="comment">// 返回: '.'</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'index'</span>);</span><br><span class="line"><span class="comment">// 返回: ''</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'.index'</span>);</span><br><span class="line"><span class="comment">// 返回: ''</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'.index.md'</span>);</span><br><span class="line"><span class="comment">// 返回: '.md'</span></span><br></pre></td></tr></table></figure>

<h3 id="dirname"><a href="#dirname" class="headerlink" title="_dirname"></a>_dirname</h3><p>总是指向被执行 js 文件的绝对路径。</p>
<p>所以当你在 <code>/write-cli/folder/aaa/a.js</code> 文件中写了 <code>__dirname</code>， 它的值就是 <code>/write-cli/folder/aaa/</code></p>
<blockquote>
<p>常跟 path 一起使用的的还有一个非常好用的库<code>slash</code>,这个将在后面的篇幅中介绍。</p>
</blockquote>
<h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><p><code>process</code>是<code>node</code>的全局模块,提供l有关当前 Node.js 进程的信息并可以对其进行控制。</p>
<h3 id="process-env"><a href="#process-env" class="headerlink" title="process.env"></a>process.env</h3><p>这个大家应该很熟悉了,<code>process.env</code>属性返回一个包含用户环境信息的对象。</p>
<p>在<code>process.env</code>中新增一个属性，会将属性值转换成字符串。</p>
<p>平时工作中我们用的比较多的一般是以下几种</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'production'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'生产环境'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'非生产环境'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseUrl = process.env.VUE_APP_BASE_URL</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>在 cli 的的开发中，我们也将在多处使用以上的用法。</p>
<h3 id="process-exit"><a href="#process-exit" class="headerlink" title="process.exit()"></a>process.exit()</h3><p>该方法可以用来立即退出进程。</p>
<p>如果程序出现异常，必须退出不可，那么我们可以约定一个<code>exitCode</code>用来作为异常退出的退出码，同时抛出一个未被捕获的error，来终止进程。</p>
<blockquote>
<p><code>process.exit(exitCode=0:number)</code></p>
</blockquote>
<h3 id="process-exitCode"><a href="#process-exitCode" class="headerlink" title="process.exitCode"></a>process.exitCode</h3><p>当进程正常退出或通过<code>process.exit()</code>退出而不指定代码时，<code>0</code>将作为进程的默认退出码。</p>
<p>如果有<code>process.exit(exitCode)</code>将覆盖 <code>process.exitCode</code> 的任何先前设置。</p>
<p>举个栗子🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun()&#123;</span><br><span class="line">  ......</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun()&#123;</span><br><span class="line">  ......</span><br><span class="line">  process.exitCode = <span class="number">1</span></span><br><span class="line">  ......</span><br><span class="line">  process.exitCode = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">fun()&#123;</span><br><span class="line">  ......</span><br><span class="line">  process.exitCode = <span class="number">2</span></span><br><span class="line">  ......</span><br><span class="line">  exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="process-stdout"><a href="#process-stdout" class="headerlink" title="process.stdout"></a>process.stdout</h3><p><code>process.stdout</code> 属性返回连接到 <code>stdout</code> (文件描述符 <code>1</code>) 的流。</p>
<p>例如，要将 <code>process.stdin</code> 复制到 <code>process.stdout</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; stdin, stdout &#125; <span class="keyword">from</span> <span class="string">'process'</span>;</span><br><span class="line"></span><br><span class="line">stdin.pipe(stdout);</span><br></pre></td></tr></table></figure>


<h3 id="process-cwd"><a href="#process-cwd" class="headerlink" title="process.cwd()"></a>process.cwd()</h3><p><code>process.cwd()</code> 方法返回 Node.js 进程的当前工作目录。</p>
<blockquote>
<p><code>process.cwd():string</code></p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上内容同学们暂时记不住不要紧，后面实战篇用到的时候可以到这边来边实战边加强记忆。</p>
<p>本文参考了 <a href="http://nodejs.cn/api" target="_blank" rel="noopener">Node.js 文档</a></p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]101_对称二叉树/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,2,2,3,4,4,3]</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,2,2,null,3,null,3]</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[1, 1000]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们采用递归</li>
<li>判断如果两个节点都为空，那么对称</li>
<li>只有一个节点为空，不对称</li>
<li>我们毕竟左子树的右节点和右子树的左节点，同时比较左子树的左节点和右子树的右节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> check = <span class="function">(<span class="params">l,r</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l&amp;&amp;!r) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span>(l&amp;&amp;!r||!l&amp;&amp;r) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> l.val==r.val&amp;&amp;check(l.left,r.right)&amp;&amp;check(l.right,r.left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> check(root,root)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[Varlet]进阶篇：好用的工具(下)/index</title>
    <url>/2022/01/%5BVarlet%5D%E8%BF%9B%E9%98%B6%E7%AF%87%EF%BC%9A%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7(%E4%B8%8B)/index/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上篇<a href="https://juejin.cn/post/7049371534380498951/" target="_blank" rel="noopener">《进阶篇：好用的工具(上)》</a>中，我们已经介绍了一部分工具。</p>
<p>在这文中，我们将介绍剩下的那些工具。</p>
<blockquote>
<p><strong>注意：以下所有示例均以 Macos 环境为例</strong></p>
</blockquote>
<a id="more"></a>

<h2 id="execa"><a href="#execa" class="headerlink" title="execa"></a>execa</h2><p>通过这个工具，我们可以在代码里执行命令行指令。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install execa</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> execa = <span class="built_in">require</span>(<span class="string">'execa'</span>)</span><br><span class="line"></span><br><span class="line">execa(<span class="string">'git'</span>,[<span class="string">'--version'</span>]).stdout.pipe(process.stdout);</span><br><span class="line">execa(<span class="string">'node'</span>,[<span class="string">'-v'</span>]).stdout.pipe(process.stdout);</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt="image.png"></p>
<blockquote>
<p>有关Node知识的一些介绍可以看一下<a href="https://juejin.cn/post/7048086492870082597" target="_blank" rel="noopener">《基础篇：Node知识储备》</a><br><strong>在本文中为了方便演示 我们使用5.1.1版本</strong></p>
</blockquote>
<p>我们甚至可以用来做一些<code>git</code>操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execa(&#39;git&#39;,[&#39;clone&#39;,&#39;https:&#x2F;&#x2F;github.com&#x2F;varletjs&#x2F;varlet.git&#39;]).stdout.pipe(process.stdout);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>讲到这里，相信聪明的你已经想到了一个最简单的实现<code>cli</code>的方式，那就是通过命令行直接从远端将项目模板拉过来</p>
</blockquote>
<p>对应的git命令可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b [branch] [repo url] [folderName&#x2F;user input]</span><br><span class="line"></span><br><span class="line">execa(&#39;git&#39;,[&#39;clone&#39;,&#39;-b&#39;,&#39;dev&#39;,&#39;https:&#x2F;&#x2F;github.com&#x2F;varletjs&#x2F;varlet.git&#39;,&#39;niubi&#39;]);</span><br></pre></td></tr></table></figure>

<h2 id="ora"><a href="#ora" class="headerlink" title="ora"></a>ora</h2><p>在项目创建的过程中，难免会遇到等待的情况。</p>
<p>以上面我们执行<code>git clone</code>为例，详细不少小伙伴们已经尝试过了，是不是发现在<code>clone</code>的过程中一点提示都没有，体验上非常的不友好。</p>
<p>这个时候我们就可以使用<code>ora</code>来加上一个过程动画。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install ora</span><br></pre></td></tr></table></figure>

<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>我们依旧以上面<code>git clone</code>为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> execa = <span class="built_in">require</span>(<span class="string">"execa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">`Loading，please wait for a moment`</span>).start();</span><br><span class="line"><span class="keyword">await</span> execa(<span class="string">'git'</span>,[<span class="string">'clone'</span>,<span class="string">'-b'</span>,<span class="string">'dev'</span>,<span class="string">'https://github.com/varletjs/varlet.git'</span>,<span class="string">'niubi'</span>])</span><br><span class="line">spinner.succeed(<span class="string">'Loaded succeed'</span>)</span><br></pre></td></tr></table></figure>
<p>当你的命令行中出现如下的这样一个小东西的时候，说明你的<code>ora</code>已经成功运作了</p>
<p><img src="2.png" alt="image.png"></p>
<p>加载完成提示</p>
<p><img src="3.png" alt="image.png"></p>
<h2 id="fs-extra"><a href="#fs-extra" class="headerlink" title="fs-extra"></a>fs-extra</h2><p><code>node</code>本身提供了<code>fs</code>模块，但用起来多有不便。</p>
<p>相比较而言<code>fs-extra</code>这个库用起来就方便多了，添加了未包含在原生<code>fs</code>模块中的文件系统方法，并向<code>fs</code>方法添加了promise支持。不过需要使用<code>node</code>的版本为<strong>10.12.0</strong>版本或以上。</p>
<blockquote>
<p>在祖师爷的<code>vue-next</code>中也使用了此库</p>
</blockquote>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install fs-extra</span><br></pre></td></tr></table></figure>

<h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><h4 id="copy-复制"><a href="#copy-复制" class="headerlink" title="copy 复制"></a>copy 复制</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.copy(<span class="string">'myfile.js'</span>, <span class="string">'mynewfile.js'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt="image.png"></p>
<h4 id="ensureDir-创建目录"><a href="#ensureDir-创建目录" class="headerlink" title="ensureDir 创建目录"></a>ensureDir 创建目录</h4><p>确保目录的存在。如果目录结构不存在,就创建一个。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.ensureDir(<span class="string">'./src'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt="image.png"></p>
<h4 id="createWriteStream-可写流"><a href="#createWriteStream-可写流" class="headerlink" title="createWriteStream 可写流"></a>createWriteStream 可写流</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> writer =  fs.createWriteStream(<span class="string">'./myfile.txt'</span>)</span><br><span class="line">writer.write(<span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt="image.png"></p>
<p>这个时候就有细心的小伙伴发现了，我们改变要写的内容，每次都会将全部内容重写，那如何才能接在已有的内容后继续写入呢？</p>
<p>别急，这不就来了嘛~</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> writer =  fs.createWriteStream(<span class="string">'./myfile.txt'</span>,&#123; <span class="attr">flags</span>:<span class="string">'a'</span> &#125;)</span><br><span class="line">writer.write(<span class="string">' Varlet'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="7.png" alt="image.png"></p>
<h4 id="outputFile-写入文件"><a href="#outputFile-写入文件" class="headerlink" title="outputFile 写入文件"></a>outputFile 写入文件</h4><p>这个方法乍一看与<code>writeFile</code>类似，区别在于，当要写入的文件不存在时，该方法会创建一个目标文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.outputFile(<span class="string">'mynewfile.txt'</span>, <span class="string">'hello varlet!'</span>)</span><br><span class="line">fs.outputFile(<span class="string">'anotherfile.txt'</span>, <span class="string">'hello varlet!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="8.png" alt="image.png"></p>
<h4 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove 删除"></a>remove 删除</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.remove(<span class="string">'anotherfile.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success!"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="9.png" alt="image.png"></p>
<h4 id="pathExists-路径检查"><a href="#pathExists-路径检查" class="headerlink" title="pathExists 路径检查"></a>pathExists 路径检查</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.pathExists(<span class="string">'index.js'</span>, (err, exists) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(exists);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.pathExists(<span class="string">'anotherfile.txt'</span>, (err, exists) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(exists);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="10.png" alt="image.png"></p>
<h4 id="readdir-读取文件目录"><a href="#readdir-读取文件目录" class="headerlink" title="readdir 读取文件目录"></a>readdir 读取文件目录</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.readdir(<span class="string">'src'</span>,(err,files)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(files)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="11.png" alt="image.png"></p>
<h2 id="slash"><a href="#slash" class="headerlink" title="slash"></a>slash</h2><p>用于转换 Windows 反斜杠路径转换为正斜杠路径 <code>\ =&gt; /</code></p>
<h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install slash</span><br></pre></td></tr></table></figure>

<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = path.join(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">// Unix    =&gt; foo/bar</span></span><br><span class="line"><span class="comment">// Windows =&gt; foo\bar</span></span><br><span class="line"></span><br><span class="line">slash(string);</span><br><span class="line"><span class="comment">// Unix    =&gt; foo/bar</span></span><br><span class="line"><span class="comment">// Windows =&gt; foo/bar</span></span><br></pre></td></tr></table></figure>

<h2 id="hash-sum"><a href="#hash-sum" class="headerlink" title="hash-sum"></a>hash-sum</h2><p>超快的独特哈希生成器。</p>
<blockquote>
<p>祖师爷的<code>vue-next</code>中我们也可以看到此库的身影</p>
</blockquote>
<h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i hash-sum -S</span><br></pre></td></tr></table></figure>

<h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hash = <span class="built_in">require</span>(<span class="string">'hash-sum'</span>);</span><br><span class="line"></span><br><span class="line">hash(value)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在<code>varlet-cli</code>中我们用它来处理<code>style scoped</code></p>
</blockquote>
<h2 id="chokidar"><a href="#chokidar" class="headerlink" title="chokidar"></a>chokidar</h2><p>我们使用<code>chokidar</code>来监控文件变化</p>
<h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install chokidar</span><br></pre></td></tr></table></figure>

<h3 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chokidar.watch(<span class="string">'.'</span>).on(<span class="string">'all'</span>, (event, path) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event, path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="12.png" alt="image.png"></p>
<blockquote>
<p>详细已经有聪明的小伙伴联想到了<code>dev</code>模式下，我们完成文件的改动会完成服务的重启，其实正是利用了这个工具库</p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上，有关<code>cli</code>用到的工具的介绍先告一段落， 更多的用法可以见各工具的官方文档。</p>
<blockquote>
<p>参考文档 <a href="https://github.com/sindresorhus/execa" target="_blank" rel="noopener">execa</a>,<a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">ora</a>,<a href="https://github.com/paulmillr/chokidar" target="_blank" rel="noopener">chokidar</a>,<a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="noopener">fs-extra</a>,<a href="https://github.com/bevacqua/hash-sum" target="_blank" rel="noopener">hash-sum</a>,<a href="https://github.com/sindresorhus/slash" target="_blank" rel="noopener">slash</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]100_相同的树/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两棵二叉树的根节点 <code>p</code> 和 <code>q</code> ，编写一个函数来检验这两棵树是否相同。</p>
<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： p &#x3D; [1,2,3], q &#x3D; [1,2,3]</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： p &#x3D; [1,2], q &#x3D; [1,null,2]</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="3.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： p &#x3D; [1,2,1], q &#x3D; [1,1,2]</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>两棵树上的节点数目都在范围 <code>[0, 100]</code> 内</li>
<li><code>-104 &lt;= Node.val &lt;= 104</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>作为暴力解的爱好者，这题我们依旧使用暴力解的方式</li>
<li>将两棵树转字符串进行比较</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(p)==<span class="built_in">JSON</span>.stringify(q)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt="image.png"></p>
<p>看到这个执行结果，我人都麻了<del>~</del></p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]1046_最后一块石头的重量/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D1046_%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/last-stone-weight/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有一堆石头，每块石头的重量都是正整数。</p>
<p>每一回合，从中选出两块 <strong>最重的</strong> 石头，然后将它们一起粉碎。假设石头的重量分别为 <code>x</code> 和 <code>y</code>，且 <code>x &lt;= y</code>。那么粉碎的可能结果如下：</p>
<ul>
<li>如果 <code>x == y</code>，那么两块石头都会被完全粉碎；</li>
<li>如果 <code>x != y</code>，那么重量为 <code>x</code> 的石头将会完全粉碎，而重量为 <code>y</code> 的石头新重量为 <code>y-x</code>。</li>
</ul>
<p>最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 <code>0</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： [2,7,4,1,8,1]</span><br><span class="line">输出： 1</span><br><span class="line">解释：</span><br><span class="line">先选出 7 和 8，得到 1，所以数组转换为 [2,4,1,1,1]，</span><br><span class="line">再选出 2 和 4，得到 2，所以数组转换为 [2,1,1,1]，</span><br><span class="line">接着是 2 和 1，得到 1，所以数组转换为 [1,1,1]，</span><br><span class="line">最后选出 1 和 1，得到 0，最终数组转换为 [1]，这就是最后剩下那块石头的重量。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= stones.length &lt;= 30</code></li>
<li><code>1 &lt;= stones[i] &lt;= 1000</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>对传入的数组进行排序</li>
<li>如果数组长度大于<code>1</code>，说明还要进行粉碎操作</li>
<li>对最大的两个取出做减法，如果结果不为<code>0</code>则将结果塞回数组中</li>
<li>递归操作，直到数组的长度为<code>1</code></li>
<li>如果第一项有值则输出值否则输出<code>0</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastStoneWeight = <span class="function"><span class="keyword">function</span>(<span class="params">stones</span>) </span>&#123;</span><br><span class="line">    stones.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">    <span class="keyword">if</span>(stones.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> r = stones.pop() - stones.pop()</span><br><span class="line">        <span class="keyword">if</span>(r) stones.push(r)</span><br><span class="line">        <span class="keyword">return</span> lastStoneWeight(stones)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stones[<span class="number">0</span>]||<span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]103_二叉树的锯齿形层序遍历/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D103_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>
<p>例如：</p>
<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回锯齿形层序遍历如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>相信看过<a href="https://juejin.cn/post/7048239759767896094" target="_blank" rel="noopener">剑指 Offer 32 - II. 从上到下打印二叉树 II</a>和<a href="https://juejin.cn/post/7048252673753088031" target="_blank" rel="noopener">107_二叉树的层序遍历 II</a>的小伙伴看到这题的时候心理已经有了答案</li>
<li>我们采用前序遍历</li>
<li>在二叉树的每一层构建一个数组</li>
<li>利用前序遍历的特点依次将偶数行节点<code>push</code>到这一层的数组中</li>
<li>将奇数行节点<code>unshift</code>到这一层的数组中</li>
<li>最后我们通过<code>reverse()</code>将结果反转输出</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zigzagLevelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pmap</span>(<span class="params">node,i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>(!arr[i]) arr[i] = []</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>)&#123;</span><br><span class="line">             arr[i].unshift(node.val)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             arr[i].push(node.val)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left) pmap(node.left,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(node.right) pmap(node.right,i+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    pmap(root,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当你快乐时，你要想，这快乐不是永恒的；当你痛苦时，你要想，这痛苦也不是永恒的。</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]1021_删除最外层的括号/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D1021_%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有效括号字符串为空 <code>&quot;&quot;</code>、<code>&quot;(&quot; + A + &quot;)&quot;</code> 或 <code>A + B</code> ，其中 <code>A</code> 和 <code>B</code> 都是有效的括号字符串，<code>+</code> 代表字符串的连接。</p>
<ul>
<li>例如，<code>&quot;&quot;</code>，<code>&quot;()&quot;</code>，<code>&quot;(())()&quot;</code> 和 <code>&quot;(()(()))&quot;</code> 都是有效的括号字符串。</li>
</ul>
<p>如果有效字符串 <code>s</code> 非空，且不存在将其拆分为 <code>s = A + B</code> 的方法，我们称其为<strong>原语（primitive）</strong> ，其中 <code>A</code> 和 <code>B</code> 都是非空有效括号字符串。</p>
<p>给出一个非空有效字符串 <code>s</code>，考虑将其进行原语化分解，使得：<code>s = P_1 + P_2 + ... + P_k</code>，其中 <code>P_i</code> 是有效括号字符串原语。</p>
<p>对 <code>s</code> 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 <code>s</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;(()())(())&quot;</span><br><span class="line">输出：&quot;()()()&quot;</span><br><span class="line">解释：</span><br><span class="line">输入字符串为 &quot;(()())(())&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot;，</span><br><span class="line">删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; &#x3D; &quot;()()()&quot;。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;(()())(())(()(()))&quot;</span><br><span class="line">输出：&quot;()()()()(())&quot;</span><br><span class="line">解释：</span><br><span class="line">输入字符串为 &quot;(()())(())(()(()))&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;，</span><br><span class="line">删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; &#x3D; &quot;()()()()(())&quot;。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;()()&quot;</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：</span><br><span class="line">输入字符串为 &quot;()()&quot;，原语化分解得到 &quot;()&quot; + &quot;()&quot;，</span><br><span class="line">删除每个部分中的最外层括号后得到 &quot;&quot; + &quot;&quot; &#x3D; &quot;&quot;。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s[i]</code> 为 <code>&#39;(&#39;</code> 或 <code>&#39;)&#39;</code></li>
<li><code>s</code> 是一个有效括号字符串</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们用<code>双指针</code>和<code>栈</code>的思路</li>
<li>用<code>count</code>记录剩余没有完成配对的括号数，有<code>(</code>就<code>count++</code>，<code>)</code>就<code>count--</code></li>
<li>一个慢指针用来记录第一个<code>(</code>的位置，快指针向后寻找</li>
<li>当满足<code>count==0</code>时，快慢指针所在位置为最外层括号</li>
<li>截取中间的字符串，然后将慢指针放到快指针的下一个</li>
<li>循环上述操作</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> removeOuterParentheses = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span>(s.length&lt;=<span class="number">2</span>) <span class="keyword">return</span> str</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[j]==<span class="string">'('</span>)&#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[j]==<span class="string">')'</span>)&#123;</span><br><span class="line">            count--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>&amp;&amp;j!=l)&#123;</span><br><span class="line">            str += s.slice(l+<span class="number">1</span>,j)</span><br><span class="line">            l=<span class="built_in">parseInt</span>(j)+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]105_从前序与中序遍历序列构造二叉树/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D105_%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一棵树的前序遍历 <code>preorder</code> 与中序遍历 <code>inorder</code>。请构造二叉树并返回其根节点。</p>
<p><strong>示例 1:</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: preorder &#x3D; [-1], inorder &#x3D; [-1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>
<li><code>inorder.length == preorder.length</code></li>
<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>
<li><code>preorder</code> 和 <code>inorder</code> 均无重复元素</li>
<li><code>inorder</code> 均出现在 <code>preorder</code></li>
<li><code>preorder</code> 保证为二叉树的前序遍历序列</li>
<li><code>inorder</code> 保证为二叉树的中序遍历序列</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li><p>我们需要知道前序遍历与中序遍历的特点：</p>
<ul>
<li>前序遍历的结果为 <strong>根 | 左 | 右</strong></li>
<li>中序遍历的结果为 <strong>左 | 根 | 右</strong></li>
</ul>
</li>
<li><p>所以我们可以很明确的知道根节点一定是前序的第一项</p>
</li>
<li><p>然后在中序遍历数组中我们可以通过根节点将左右子树分割开</p>
</li>
<li><p>分割前序数组中的左右子树</p>
</li>
<li><p>递归左右子树</p>
</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!inorder.length) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">let</span> mid = inorder.indexOf(preorder[<span class="number">0</span>])</span><br><span class="line">  root.left = buildTree(preorder.slice(<span class="number">1</span>,mid+<span class="number">1</span>),inorder.slice(<span class="number">0</span>,mid))</span><br><span class="line">  root.right = buildTree(preorder.slice(mid+<span class="number">1</span>),inorder.slice(mid+<span class="number">1</span>,inorder.length))</span><br><span class="line">  <span class="keyword">return</span>  root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]107_二叉树的层序遍历 II/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D107_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20II/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>
<p>例如：</p>
<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回其自底向上的层序遍历为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>本题与 <a href="https://juejin.cn/post/7048239759767896094" target="_blank" rel="noopener">剑指 Offer 32 - II. 从上到下打印二叉树 II</a> 几乎一样</li>
<li>我们采用前序遍历</li>
<li>在二叉树的每一层构建一个数组</li>
<li>利用前序遍历的特点依次将节点<code>push</code>到这一层的数组中</li>
<li>最后我们通过<code>reverse()</code>将结果反转输出</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pmap</span>(<span class="params">node,i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>(!arr[i]) arr[i] = []</span><br><span class="line">        arr[i].push(node.val)</span><br><span class="line">        <span class="keyword">if</span>(node.left) pmap(node.left,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(node.right) pmap(node.right,i+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    pmap(root,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> arr.reverse()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当你快乐时，你要想，这快乐不是永恒的；当你痛苦时，你要想，这痛苦也不是永恒的。</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]110_平衡二叉树/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D110_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<blockquote>
<p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p>
</blockquote>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [3,9,20,null,null,15,7]</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,2,2,3,3,null,null,4,4]</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; []</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数在范围 <code>[0, 5000]</code> 内</li>
<li><code>-104 &lt;= Node.val &lt;= 104</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>在求树的高度的同时，验证每个节点是否是平衡二叉树</li>
<li>递归到最下层的时候，求左子树的深度<code>l</code>，右子树的深度<code>r</code></li>
<li>如果<code>Math.abs(l - r) &lt; 1</code>，则返回当前子树的深度，供上层计算。 否则将判断结果标记为false，表明不是平衡二叉树。</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isBalanced = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">true</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> l = dfs(node.left)</span><br><span class="line">        <span class="keyword">let</span> r = dfs(node.right)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(r-l)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            res = <span class="literal">false</span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(l,r)+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当你快乐时，你要想，这快乐不是永恒的；当你痛苦时，你要想，这痛苦也不是永恒的。</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]104_二叉树的最大深度/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D104_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p><strong>说明:</strong>  叶子节点是指没有子节点的节点。</p>
<p><strong>示例：</strong></p>
<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回它的最大深度 3 。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用递归</li>
<li>一个节点的深度等于1加左节点和右节点深度的较大者</li>
<li>返回以该节点为根的二叉树的最大深度</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> left = maxDepth(root.left)</span><br><span class="line">    <span class="keyword">const</span> right = maxDepth(root.right)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(left,right)+<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]112_路径总和/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D112_%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/path-sum/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum &#x3D; 22</span><br><span class="line">输出：true</span><br><span class="line">解释：等于目标和的根节点到叶节点路径如上图所示。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [1,2,3], targetSum &#x3D; 5</span><br><span class="line">输出：false</span><br><span class="line">解释：树中存在两条根节点到叶子节点的路径：</span><br><span class="line">(1 --&gt; 2): 和为 3</span><br><span class="line">(1 --&gt; 3): 和为 4</span><br><span class="line">不存在 sum &#x3D; 5 的根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [], targetSum &#x3D; 0</span><br><span class="line">输出： false</span><br><span class="line">解释： 由于树是空的，所以不存在根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用递归</li>
<li>如果当前节点存在<code>left</code>或<code>right</code>子节点，则将<code>targetSum</code>减去当前节点的值，并将结果带入下一次递归</li>
<li>如果当前节点是否为尾结点 是的话判断是否满足当前的<code>targetSum</code>等于当前根节点的<code>val</code>,是的话则存在，否则不存在</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, targetSum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!root)  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span>(!root.left&amp;&amp;!root.right) <span class="keyword">return</span>  root.val ==targetSum</span><br><span class="line">  <span class="keyword">return</span> hasPathSum(root.left,targetSum-root.val) || hasPathSum(root.right,targetSum-root.val)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>不用期待命运在某个瞬间被突然扭转，那些改变我们人生的能量，都在普普通通的每一天里积累。</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]1124_表现良好的最长时间段/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D1124_%E8%A1%A8%E7%8E%B0%E8%89%AF%E5%A5%BD%E7%9A%84%E6%9C%80%E9%95%BF%E6%97%B6%E9%97%B4%E6%AE%B5/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/longest-well-performing-interval/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一份工作时间表 <code>hours</code>，上面记录着某一位员工每天的工作小时数。</p>
<p>我们认为当员工一天中的工作小时数大于 <code>8</code> 小时的时候，那么这一天就是「<strong>劳累的一天</strong>」。</p>
<p>所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格 <strong>大于</strong>「不劳累的天数」。</p>
<p>请你返回「表现良好时间段」的最大长度。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： hours &#x3D; [9,9,6,0,6,6,9]</span><br><span class="line">输出： 3</span><br><span class="line">解释： 最长的表现良好时间段是 [9,9,6]。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： hours &#x3D; [6,6,6]</span><br><span class="line">输出： 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= hours.length &lt;= 104</code></li>
<li><code>0 &lt;= hours[i] &lt;= 16</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用 <strong>前缀和</strong> 来解题(可能有小伙伴要问了，这个前缀和是啥，顾名思义，钱💰坠落到河里就是前缀和 <em>认真脸</em>)</li>
<li>回归正题，这个前缀和就是数组前 <code>n</code>项的和</li>
<li>我们先将输入的数组调整一下，大于<code>8</code>的转换成<code>1</code>否则为<code>-1</code></li>
<li>计算转换后的数组的前缀和数组</li>
<li>前缀和数组中两项的差为，转换后数组对应位置两项极其之间数据的和</li>
<li>表现良好的时间段为和大于<code>1</code>的时间段</li>
<li>题目要的正是两项极其之间数据的和大于<code>1</code>的最大距离</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> longestWPI = <span class="function"><span class="keyword">function</span>(<span class="params">hours</span>) </span>&#123;</span><br><span class="line">    hours = hours.map(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v&gt;<span class="number">8</span>?<span class="number">1</span>:<span class="number">-1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(!hours.includes(<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> pre_sums = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;hours.length;i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> a = hours[i]</span><br><span class="line">        <span class="keyword">const</span> b = pre_sums[i]==<span class="literal">undefined</span>?<span class="number">0</span>:pre_sums[i]</span><br><span class="line">        pre_sums[i+<span class="number">1</span>] = a+b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> len =<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;pre_sums.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;pre_sums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre_sums[j]-pre_sums[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                len = <span class="built_in">Math</span>.max(len,j-i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]1249_移除无效的括号/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D1249_%E7%A7%BB%E9%99%A4%E6%97%A0%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/minimum-remove-to-make-valid-parentheses/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个由 <code>&#39;(&#39;</code>、<code>&#39;)&#39;</code> 和小写字母组成的字符串 <code>s</code>。</p>
<p>你需要从字符串中删除最少数目的 <code>&#39;(&#39;</code> 或者 <code>&#39;)&#39;</code> （可以删除任意位置的括号)，使得剩下的「括号字符串」有效。</p>
<p>请返回任意一个合法字符串。</p>
<p>有效「括号字符串」应当符合以下 <strong>任意一条</strong> 要求：</p>
<ul>
<li>空字符串或只包含小写字母的字符串</li>
<li>可以被写作 <code>AB</code>（<code>A</code> 连接 <code>B</code>）的字符串，其中 <code>A</code> 和 <code>B</code> 都是有效「括号字符串」</li>
<li>可以被写作 <code>(A)</code> 的字符串，其中 <code>A</code> 是一个有效的「括号字符串」</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;lee(t(c)o)de)&quot;</span><br><span class="line">输出：&quot;lee(t(c)o)de&quot;</span><br><span class="line">解释：&quot;lee(t(co)de)&quot; , &quot;lee(t(c)ode)&quot; 也是一个可行答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;a)b(c)d&quot;</span><br><span class="line">输出： &quot;ab(c)d&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;))((&quot;</span><br><span class="line">输出： &quot;&quot;</span><br><span class="line">解释： 空字符串也是有效的</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;(a(b(c)d)&quot;</span><br><span class="line">输出： &quot;a(b(c)d)&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^5</code></li>
<li><code>s[i]</code> 可能是 <code>&#39;(&#39;</code>、<code>&#39;)&#39;</code> 或英文小写字母</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>继续沿用<code>栈</code> 的思想</li>
<li>我们定一个<code>2</code>个数组用来存放出现的括号的索引</li>
<li>出现<code>(</code>就往存左括号的数组里<code>push</code></li>
<li>出现<code>)</code>时，如左括号数组里有，则左括号数组进行<code>pop</code>，否则右括号数组进行<code>push</code></li>
<li>合并两个数组，里面所有的元素为要排除的括号的索引</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minRemoveToMakeValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> strArr = s.split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">let</span> left = []</span><br><span class="line">    <span class="keyword">let</span> right = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>) left.push(<span class="built_in">parseInt</span>(i))</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left.length) &#123;</span><br><span class="line">                left.pop()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right.push(<span class="built_in">parseInt</span>(i))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [...left,...right]</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    strArr.forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr.includes(i))&#123;</span><br><span class="line">            str+=v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]138_复制带随机指针的链表/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D138_%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个长度为<code>n</code>的链表，每个节点包含一个额外增加的随机指针<code>random</code>，该指针可以指向链表中的任何节点或空节点。</p>
<p>构造这个链表的深拷贝。深拷贝应该正好由<code>n</code>个全新节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的<code>next</code>指针和<code>random</code>指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</p>
<p>例如，如果原链表中有<code>X</code>和<code>Y</code>两个节点，其中<code>X.random --&gt; Y</code>。那么在复制链表中对应的两个节点<code>x</code>和<code>y</code>，同样有<code>x.random --&gt; y</code>。</p>
<p>返回复制链表的头节点。</p>
<p>用一个由<code>n</code>个节点组成的链表来表示输入/输出中的链表。每个节点用一个<code>[val, random_index]</code>表示：</p>
<ul>
<li><code>val</code>：一个表示<code>Node.val</code>的整数。</li>
<li><code>random_index</code>：随机指针指向的节点索引（范围从<code>0</code>到<code>n-1</code>）；如果不指向任何节点，则为<code>null</code>。</li>
</ul>
<p>你的代码只接受原链表的头节点<code>head</code>作为传入参数。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [[1,1],[2,1]]</span><br><span class="line">输出： [[1,1],[2,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="3.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [[3,null],[3,0],[3,null]]</span><br><span class="line">输出： [[3,null],[3,0],[3,null]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; []</span><br><span class="line">输出： []</span><br><span class="line">解释： 给定的链表为空（空指针），因此返回 null。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>
<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>遍历一遍链表将链表每个节点的指针和值进行记录</li>
<li>再一次遍历链表，就可以从已记录的数组中拿到对应的<code>next</code>和<code>random</code></li>
<li>设置已记录的数组中对应的<code>next</code>和<code>random</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> copyRandomList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        map.set(cur,<span class="keyword">new</span> Node(cur.val))</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        map.get(cur).next = map.get(cur.next)||<span class="literal">null</span></span><br><span class="line">        map.get(cur).random = map.get(cur.random)||<span class="literal">null</span></span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(head)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]124_二叉树中的最大路径和/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D124_%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p>
<p><strong>路径和</strong> 是路径中各节点值的总和。</p>
<p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,2,3]</span><br><span class="line">输出： 6</span><br><span class="line">解释： 最优路径是 2 -&gt; 1 -&gt; 3 ，路径和为 2 + 1 + 3 &#x3D; 6</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [-10,9,20,null,null,15,7]</span><br><span class="line">输出： 42</span><br><span class="line">解释： 最优路径是 15 -&gt; 20 -&gt; 7 ，路径和为 15 + 20 + 7 &#x3D; 42</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目范围是 <code>[1, 3 * 104]</code></li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们转变一下思路，先求出每个节点的路径最大值</li>
<li>当前节点路径的最大值等于当前节点的值加上左右大于0的节点值的最大值</li>
<li>根据当前节点路径的最大值与最大路径和的大小来更新当前节点路径的最大值</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="built_in">Number</span>.MIN_SAFE_INTEGER</span><br><span class="line">    <span class="keyword">const</span> mmap = <span class="function">(<span class="params">node</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> left = mmap(node.left)</span><br><span class="line">        <span class="keyword">const</span> right = mmap(node.right)</span><br><span class="line">        <span class="keyword">const</span> m = node.val + (left&gt;<span class="number">0</span>?left:<span class="number">0</span>)+ (right&gt;<span class="number">0</span>?right:<span class="number">0</span>);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(m,max)</span><br><span class="line">        <span class="keyword">return</span> node.val+<span class="built_in">Math</span>.max(left&gt;<span class="number">0</span>?left:<span class="number">0</span>,right&gt;<span class="number">0</span>?right:<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    mmap(root)</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]142_环形链表II/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D142_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起。</p>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回<code>null</code>。</p>
<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是<code>-1</code>，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<blockquote>
<p>不允许修改链表。</p>
</blockquote>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出： 返回索引为 1 的链表节点</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出： 返回索引为 0 的链表节点</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="3.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出： 返回 null</span><br><span class="line">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="4.png" alt="image.png"></p>
<p>从上图中，我们不难得出，两指针相遇时</p>
<ul>
<li>快指针走过的节点为 <code>A+N(B+C)+B</code></li>
<li>慢指针走过的节点为 <code>A+B</code></li>
<li>因为有快指针速度是慢指针的<code>2</code>倍</li>
<li>所以 <code>A+N(B+C)+B=2(A+B)</code><br>简化等式得到 <code>A =(N-1)(B+C)+C</code><blockquote>
<p><code>B+C</code>为一个环，我们可以忽略，因此可以得到<code>A=C</code>,只要在快慢指针相遇时从头结点开始有个指针向下走，跟慢指针相遇的节点就是我们要输出的<code>pos</code>节点</p>
</blockquote>
</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">null</span> </span><br><span class="line">    <span class="keyword">let</span> fast = head </span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> pos = head </span><br><span class="line">    <span class="keyword">while</span> (fast&amp;&amp;fast.next)&#123; </span><br><span class="line">        slow = slow.next </span><br><span class="line">        fast = fast.next.next </span><br><span class="line">        <span class="keyword">if</span>(slow==fast) &#123;</span><br><span class="line">            <span class="keyword">while</span> (slow)&#123; </span><br><span class="line">                <span class="keyword">if</span>(slow==pos)  <span class="keyword">return</span> pos </span><br><span class="line">                slow = slow.next</span><br><span class="line">                pos = pos.next </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]141_环形链表/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D141_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点<code>head</code>，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是 -1，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环，则返回<code>true</code>。 否则，返回<code>false</code>。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出： true</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出： true</span><br><span class="line">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="3.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出： false</span><br><span class="line">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示</p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 104]</code></li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个<strong>有效索引</strong> 。</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="4.gif" alt="1.gif"></p>
<p>定义两个指针：慢指针每次走一个节点，快指针每次走两个节点，最终相遇。</p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head||!head.next) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> fast = head</span><br><span class="line">    <span class="keyword">while</span>(fast&amp;&amp;fast.next)&#123;</span><br><span class="line">        slow=slow.next</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        <span class="keyword">if</span>(fast==slow) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]144_二叉树的前序遍历/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D144_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> **遍历。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,null,2,3]</span><br><span class="line">输出： [1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; []</span><br><span class="line">输出： []</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1]</span><br><span class="line">输出： [1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,2]</span><br><span class="line">输出： [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<p><img src="3.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,null,2]</span><br><span class="line">输出： [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>前序遍历 <code>根 -&gt; 左 -&gt; 右</code></li>
<li>处理好边界</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr =[]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fomap</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span></span><br><span class="line">        arr.push(n.val)</span><br><span class="line">        <span class="keyword">if</span>(n.left) fomap(n.left)</span><br><span class="line">        <span class="keyword">if</span>(n.right)fomap(n.right)</span><br><span class="line">    &#125;</span><br><span class="line">    fomap(root)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]143_重排链表/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D143_%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/reorder-list/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个单链表 <code>L</code> 的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L0 → L1 → … → Ln - 1 → Ln</span><br></pre></td></tr></table></figure>

<p>请将其重新排列后变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</span><br></pre></td></tr></table></figure>

<p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4]</span><br><span class="line">输出： [1,4,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4,5]</span><br><span class="line">输出： [1,5,2,4,3]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表的长度范围为 <code>[1, 5 * 104]</code></li>
<li><code>1 &lt;= node.val &lt;= 1000</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们先遍历一次链表利用数组来存储每个节点</li>
<li>然后遍历数组正序的同时我们也倒序遍历</li>
<li>当没有到数组的中间位置的时候，正序的每个节点的<code>next</code>指向倒序遍历到的节点</li>
<li>倒序遍历到的节点的<code>next</code>指向正序的下一个元素的节点</li>
<li>最后我们输出数组的第<code>0</code>项</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reorderList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = head</span><br><span class="line">        head = head.next</span><br><span class="line">        a.next = <span class="literal">null</span></span><br><span class="line">        arr.push(a)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> i =<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> j =arr.length<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">      arr[i].next = arr[j]</span><br><span class="line">      <span class="keyword">if</span>(i+<span class="number">1</span>&lt;j)&#123;</span><br><span class="line">          arr[j].next = arr[i+<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      i++</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果我们总在等待绝对的一切就绪，那我们将永远无法开始。</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]145_二叉树的后序遍历/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D145_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，返回它的 <em>后序</em> 遍历。</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们首先要知道<em>后序遍历<em>的规则，输出顺序</em>左 -&gt; 右 -&gt; 根</em></li>
<li>按顺序进行遍历插入数组</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> after_order = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        after_order(root.left)</span><br><span class="line">        after_order(root.right)</span><br><span class="line">        res.push(root.val)</span><br><span class="line">    &#125;</span><br><span class="line">    after_order(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]1670_设计前中后队列/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D1670_%E8%AE%BE%E8%AE%A1%E5%89%8D%E4%B8%AD%E5%90%8E%E9%98%9F%E5%88%97/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/design-front-middle-back-queue/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请你设计一个队列，支持在前，中，后三个位置的<code>push</code>和<code>pop</code>操作。</p>
<p>请你完成<code>FrontMiddleBack</code>类：</p>
<ul>
<li><code>FrontMiddleBack()</code>初始化队列。</li>
<li><code>void pushFront(int val)</code>将<code>val</code>添加到队列的 最前面 。</li>
<li><code>void pushMiddle(int val)</code>将<code>val</code>添加到队列的 正中间 。</li>
<li><code>void pushBack(int val)</code>将<code>val</code>添加到队里的 最后面 。</li>
<li><code>int popFront()</code>将最前面的元素从队列中删除并返回值，如果删除之前队列为空，那么返回<code>-1</code>。</li>
<li><code>int popMiddle()</code>将正中间的元素从队列中删除并返回值，如果删除之前队列为空，那么返回<code>-1</code>。</li>
<li><code>int popBack()</code>将最后面的元素从队列中删除并返回值，如果删除之前队列为空，那么返回<code>-1</code>。</li>
</ul>
<p>请注意当有 <strong>两个</strong> 中间位置的时候，选择靠前面的位置进行操作。比方说：</p>
<ul>
<li>将<code>6</code>添加到<code>[1, 2, 3, 4, 5]</code>的中间位置，结果数组为<code>[1, 2, 6, 3, 4, 5]</code>。</li>
<li>从<code>[1, 2, 3, 4, 5, 6]</code>的中间位置弹出元素，返回<code>3</code>，数组变为<code>[1, 2, 4, 5, 6]</code>。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;FrontMiddleBackQueue&quot;, &quot;pushFront&quot;, &quot;pushBack&quot;, &quot;pushMiddle&quot;, &quot;pushMiddle&quot;, </span><br><span class="line">&quot;popFront&quot;, &quot;popMiddle&quot;, &quot;popMiddle&quot;, &quot;popBack&quot;, &quot;popFront&quot;]</span><br><span class="line">[[], [1], [2], [3], [4], [], [], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, null, null, 1, 3, 4, 2, -1]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">FrontMiddleBackQueue q &#x3D; new FrontMiddleBackQueue();</span><br><span class="line">q.pushFront(1);   &#x2F;&#x2F; [1]</span><br><span class="line">q.pushBack(2);    &#x2F;&#x2F; [1, 2]</span><br><span class="line">q.pushMiddle(3);  &#x2F;&#x2F; [1, 3, 2]</span><br><span class="line">q.pushMiddle(4);  &#x2F;&#x2F; [1, 4, 3, 2]</span><br><span class="line">q.popFront();     &#x2F;&#x2F; 返回 1 -&gt; [4, 3, 2]</span><br><span class="line">q.popMiddle();    &#x2F;&#x2F; 返回 3 -&gt; [4, 2]</span><br><span class="line">q.popMiddle();    &#x2F;&#x2F; 返回 4 -&gt; [2]</span><br><span class="line">q.popBack();      &#x2F;&#x2F; 返回 2 -&gt; []</span><br><span class="line">q.popFront();     &#x2F;&#x2F; 返回 -1 -&gt; [] （队列为空）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：<br><code>1 &lt;= val &lt;= 109</code><br>最多调用<code>1000</code>次<code>pushFront</code>，<code>pushMiddle</code>，<code>pushBack</code>，<code>popFront</code>，<code>popMiddle</code>和<code>popBack</code>。</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>期待你在解此题之前已经完成了 <a href="https://juejin.cn/post/7040841285153849357" target="_blank" rel="noopener">641_设计循环双端队列</a> 和 <a href="https://juejin.cn/post/7040836577735475213" target="_blank" rel="noopener">622_设计循环队列</a></p>
<ul>
<li><p><code>splice</code>方法的妙用：</p>
<ul>
<li><code>arr.splice(index,0,val)</code>在<code>index</code>处插入<code>val</code></li>
<li><code>arr.splice(index,1)</code> 删除<code>index</code></li>
</ul>
</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> FrontMiddleBackQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FrontMiddleBackQueue.prototype.pushFront = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr.splice(<span class="number">0</span>,<span class="number">0</span>,val)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FrontMiddleBackQueue.prototype.pushMiddle = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="keyword">this</span>.arr.length % <span class="number">2</span> ==<span class="number">0</span>? <span class="keyword">this</span>.arr.length/<span class="number">2</span>: (<span class="keyword">this</span>.arr.length<span class="number">-1</span>)/<span class="number">2</span></span><br><span class="line">   <span class="keyword">this</span>.arr.splice(mid,<span class="number">0</span>,val)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FrontMiddleBackQueue.prototype.pushBack = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr.push(val)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FrontMiddleBackQueue.prototype.popFront = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.arr.length) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">this</span>.arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">this</span>.arr.splice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FrontMiddleBackQueue.prototype.popMiddle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.arr.length) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="keyword">this</span>.arr.length % <span class="number">2</span> ==<span class="number">0</span>? <span class="keyword">this</span>.arr.length/<span class="number">2</span> <span class="number">-1</span>: (<span class="keyword">this</span>.arr.length<span class="number">-1</span>)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">this</span>.arr[mid]</span><br><span class="line">    <span class="keyword">this</span>.arr.splice(mid,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FrontMiddleBackQueue.prototype.popBack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.arr.length) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">this</span>.arr[<span class="keyword">this</span>.arr.length<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">this</span>.arr.splice(<span class="keyword">this</span>.arr.length<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FrontMiddleBackQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new FrontMiddleBackQueue()</span></span><br><span class="line"><span class="comment"> * obj.pushFront(val)</span></span><br><span class="line"><span class="comment"> * obj.pushMiddle(val)</span></span><br><span class="line"><span class="comment"> * obj.pushBack(val)</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.popFront()</span></span><br><span class="line"><span class="comment"> * var param_5 = obj.popMiddle()</span></span><br><span class="line"><span class="comment"> * var param_6 = obj.popBack()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]1753_移除石子的最大得分/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D1753_%E7%A7%BB%E9%99%A4%E7%9F%B3%E5%AD%90%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BE%97%E5%88%86/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/maximum-score-from-removing-stones/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你正在玩一个单人游戏，面前放置着大小分别为 <code>a</code>​​​​​​、<code>b</code> 和 <code>c</code>​​​​​​ 的 <strong>三堆</strong> 石子。</p>
<p>每回合你都要从两个 <strong>不同的非空堆</strong> 中取出一颗石子，并在得分上加 <code>1</code> 分。当存在 <strong>两个或更多</strong> 的空堆时，游戏停止。</p>
<p>给你三个整数 <code>a</code> 、<code>b</code> 和 <code>c</code> ，返回可以得到的 <strong>最大分数</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： a &#x3D; 2, b &#x3D; 4, c &#x3D; 6</span><br><span class="line">输出： 6</span><br><span class="line">解释： 石子起始状态是 (2, 4, 6) ，最优的一组操作是：</span><br><span class="line">- 从第一和第三堆取，石子状态现在是 (1, 4, 5)</span><br><span class="line">- 从第一和第三堆取，石子状态现在是 (0, 4, 4)</span><br><span class="line">- 从第二和第三堆取，石子状态现在是 (0, 3, 3)</span><br><span class="line">- 从第二和第三堆取，石子状态现在是 (0, 2, 2)</span><br><span class="line">- 从第二和第三堆取，石子状态现在是 (0, 1, 1)</span><br><span class="line">- 从第二和第三堆取，石子状态现在是 (0, 0, 0)</span><br><span class="line">总分：6 分 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： a &#x3D; 4, b &#x3D; 4, c &#x3D; 6</span><br><span class="line">输出： 7</span><br><span class="line">解释： 石子起始状态是 (4, 4, 6) ，最优的一组操作是：</span><br><span class="line">- 从第一和第二堆取，石子状态现在是 (3, 3, 6)</span><br><span class="line">- 从第一和第三堆取，石子状态现在是 (2, 3, 5)</span><br><span class="line">- 从第一和第三堆取，石子状态现在是 (1, 3, 4)</span><br><span class="line">- 从第一和第三堆取，石子状态现在是 (0, 3, 3)</span><br><span class="line">- 从第二和第三堆取，石子状态现在是 (0, 2, 2)</span><br><span class="line">- 从第二和第三堆取，石子状态现在是 (0, 1, 1)</span><br><span class="line">- 从第二和第三堆取，石子状态现在是 (0, 0, 0)</span><br><span class="line">总分：7 分 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： a &#x3D; 1, b &#x3D; 8, c &#x3D; 8</span><br><span class="line">输出： 8</span><br><span class="line">解释： 最优的一组操作是连续从第二和第三堆取 8 回合，直到将它们取空。</span><br><span class="line">注意，由于第二和第三堆已经空了，游戏结束，不能继续从第一堆中取石子。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= a, b, c &lt;= 105</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>这题感觉上是一道脑筋急转弯</li>
<li>我们将传入的数先进行排序</li>
<li>将两个较小的数相加得到<code>n</code>与第三个数进行比较</li>
<li>如果<code>n</code>不大于第三个数，那么最大得分就为<code>n</code></li>
<li>否则就是三数之和<code>/2</code>的整数部分</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maximumScore = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [a,b,c].sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">    <span class="keyword">let</span> n = arr[<span class="number">0</span>]+arr[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=arr[<span class="number">2</span>]) <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor((n+arr[<span class="number">2</span>])/<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]20_有效的括号/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D20_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串<code>s</code>，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ul>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;()&quot;</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;(]&quot;</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;([)]&quot;</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>&#39;()[]{}&#39;</code> 组成</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们用<strong>栈</strong>的思想，当出现<code>)</code>,<code>]</code>,<code>}</code>时，前一位一定会有与之对应的<code>(</code>,<code>[</code>,<code>{</code>才能满足题意</li>
<li>排除几个边界条件<ul>
<li>以<code>)</code>,<code>]</code>,<code>}</code>开头</li>
<li>从未出现过<code>)</code>,<code>]</code>,<code>}</code></li>
<li><code>s</code>长度为<code>1</code></li>
</ul>
</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.startsWith(<span class="string">')'</span>)||s.startsWith(<span class="string">']'</span>)||s.startsWith(<span class="string">'&#125;'</span>)||s.length&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(!s.includes(<span class="string">')'</span>)&amp;&amp;!s.includes(<span class="string">']'</span>)&amp;&amp;!s.includes(<span class="string">'&#125;'</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>([<span class="string">'('</span>,<span class="string">'['</span>,<span class="string">'&#123;'</span>].includes(s[i]))&#123;</span><br><span class="line">            arr.push(s[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> a = arr[arr.length<span class="number">-1</span>]+s[i]</span><br><span class="line">            <span class="keyword">if</span>(![<span class="string">'()'</span>,<span class="string">'[]'</span>,<span class="string">'&#123;&#125;'</span>].includes(a)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            arr.splice(arr.length<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.length==<span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]215_数组中的第K个最大元素/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D215_%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>k</code> 个最大的元素。</p>
<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4] 和 k &#x3D; 2</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k &#x3D; 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li><code>sort</code>解君愁</li>
<li>按降序排列</li>
<li>第<code>k</code>大元素的索引为<code>k-1</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> findKthLargest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a)[k<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]199_二叉树的右视图/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D199_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>
<p><strong>示例 1:</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,null,5,null,4]</span><br><span class="line">输出: [1,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,3]</span><br><span class="line">输出: [1,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: []</span><br><span class="line">输出: []</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li>二叉树的节点个数的范围是 <code>[0,100]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用层次遍历</li>
<li>记录下每次的右视图</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rightSideView = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">const</span> mmap = <span class="function">(<span class="params">node,step</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">if</span>(!res[step]) res[step] = node.val</span><br><span class="line">        mmap(node.right,step+<span class="number">1</span>)</span><br><span class="line">        mmap(node.left,step+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    mmap(root,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]1801_积压订单中的订单总数/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D1801_%E7%A7%AF%E5%8E%8B%E8%AE%A2%E5%8D%95%E4%B8%AD%E7%9A%84%E8%AE%A2%E5%8D%95%E6%80%BB%E6%95%B0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/number-of-orders-in-the-backlog/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个二维整数数组 <code>orders</code> ，其中每个 <code>orders[i] = [pricei, amounti, orderTypei]</code> 表示有 <code>amounti</code> 笔类型为 <code>orderTypei</code> 、价格为 <code>pricei</code> 的订单。</p>
<p>订单类型 <code>orderTypei</code> 可以分为两种：</p>
<ul>
<li><code>0</code> 表示这是一批采购订单 <code>buy</code></li>
<li><code>1</code> 表示这是一批销售订单 <code>sell</code></li>
</ul>
<p>注意，<code>orders[i]</code> 表示一批共计 <code>amounti</code> 笔的独立订单，这些订单的价格和类型相同。对于所有有效的 <code>i</code> ，由 <code>orders[i]</code> 表示的所有订单提交时间均早于 <code>orders[i+1]</code> 表示的所有订单。</p>
<p>存在由未执行订单组成的 <strong>积压订单</strong> 。积压订单最初是空的。提交订单时，会发生以下情况：</p>
<ul>
<li>如果该订单是一笔采购订单 <code>buy</code> ，则可以查看积压订单中价格 <strong>最低</strong> 的销售订单 <code>sell</code> 。如果该销售订单 <code>sell</code> 的价格 <strong>低于或等于</strong> 当前采购订单 <code>buy</code> 的价格，则匹配并执行这两笔订单，并将销售订单 <code>sell</code> 从积压订单中删除。否则，采购订单 <code>buy</code> 将会添加到积压订单中。</li>
<li>反之亦然，如果该订单是一笔销售订单 <code>sell</code> ，则可以查看积压订单中价格 <strong>最高</strong> 的采购订单 <code>buy</code> 。如果该采购订单 <code>buy</code> 的价格 <strong>高于或等于</strong> 当前销售订单 <code>sell</code> 的价格，则匹配并执行这两笔订单，并将采购订单 <code>buy</code> 从积压订单中删除。否则，销售订单 <code>sell</code> 将会添加到积压订单中。</li>
</ul>
<p>输入所有订单后，返回积压订单中的 <strong>订单总数</strong> 。由于数字可能很大，所以需要返回对 <code>109 + 7</code> 取余的结果。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： orders &#x3D; [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]</span><br><span class="line">输出： 6</span><br><span class="line">解释： 输入订单后会发生下述情况：</span><br><span class="line">- 提交 5 笔采购订单，价格为 10 。没有销售订单，所以这 5 笔订单添加到积压订单中。</span><br><span class="line">- 提交 2 笔销售订单，价格为 15 。没有采购订单的价格大于或等于 15 ，所以这 2 笔订单添加到积压订单中。</span><br><span class="line">- 提交 1 笔销售订单，价格为 25 。没有采购订单的价格大于或等于 25 ，所以这 1 笔订单添加到积压订单中。</span><br><span class="line">- 提交 4 笔采购订单，价格为 30 。前 2 笔采购订单与价格最低（价格为 15）的 2 笔销售订单匹配，从积压订单中删除这 2 笔销售订单。第 3 笔采购订单与价格最低的 1 笔销售订单匹配，销售订单价格为 25 ，从积压订单中删除这 1 笔销售订单。积压订单中不存在更多销售订单，所以第 4 笔采购订单需要添加到积压订单中。</span><br><span class="line">最终，积压订单中有 5 笔价格为 10 的采购订单，和 1 笔价格为 30 的采购订单。所以积压订单中的订单总数为 6 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： orders &#x3D; [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]</span><br><span class="line">输出： 999999984</span><br><span class="line">解释： 输入订单后会发生下述情况：</span><br><span class="line">- 提交 109 笔销售订单，价格为 7 。没有采购订单，所以这 109 笔订单添加到积压订单中。</span><br><span class="line">- 提交 3 笔采购订单，价格为 15 。这些采购订单与价格最低（价格为 7 ）的 3 笔销售订单匹配，从积压订单中删除这 3 笔销售订单。</span><br><span class="line">- 提交 999999995 笔采购订单，价格为 5 。销售订单的最低价为 7 ，所以这 999999995 笔订单添加到积压订单中。</span><br><span class="line">- 提交 1 笔销售订单，价格为 5 。这笔销售订单与价格最高（价格为 5 ）的 1 笔采购订单匹配，从积压订单中删除这 1 笔采购订单。</span><br><span class="line">最终，积压订单中有 (1000000000-3) 笔价格为 7 的销售订单，和 (999999995-1) 笔价格为 5 的采购订单。所以积压订单中的订单总数为 1999999991 ，等于 999999984 % (109 + 7) 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= orders.length &lt;= 105</code></li>
<li><code>orders[i].length == 3</code></li>
<li><code>1 &lt;= pricei, amounti &lt;= 109</code></li>
<li><code>orderTypei</code> 为 <code>0</code> 或 <code>1</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>首先我们要先理解题目的意思<ul>
<li>假设我们要买一批货，先比较目前我们目前摊位上在买的，如果在售卖的价钱低于买入价，则可以抵消数量，如果抵消完了还有的话，那就只能买进了</li>
<li>对应的，当我们要卖的时候先看之前买进的货 看有没有比要卖的价格一样或高的， 可以抵消，抵消完了还有的话，还是得卖</li>
</ul>
</li>
</ul>
<p>我们用最大优先队列维护要买进的货， 用最小优先队列维护卖出的货，方便拿出来抵消</p>
<p>优先队列直接使用lodash的 <a href="https://github.com/datastructures-js/priority-queue" target="_blank" rel="noopener">priority-queue</a></p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getNumberOfBacklogOrders = <span class="function"><span class="keyword">function</span>(<span class="params">orders</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mod = <span class="number">1000000007</span></span><br><span class="line">    <span class="keyword">let</span> buy = <span class="keyword">new</span> MaxPriorityQueue(&#123; <span class="attr">priority</span>: <span class="function">(<span class="params">bid</span>) =&gt;</span> bid.price &#125;)</span><br><span class="line">    <span class="keyword">let</span> sell = <span class="keyword">new</span> MinPriorityQueue(&#123; <span class="attr">priority</span>: <span class="function">(<span class="params">bid</span>) =&gt;</span> bid.price &#125;)</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [price,amount,orderType] <span class="keyword">of</span> orders)&#123;</span><br><span class="line">        <span class="keyword">if</span>(orderType==<span class="number">0</span>)&#123;<span class="comment">// buy</span></span><br><span class="line">            <span class="keyword">while</span>(!sell.isEmpty()&amp;&amp;sell.front().priority&lt;=price&amp;&amp;amount&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> head = sell.dequeue().element</span><br><span class="line">                <span class="keyword">if</span> (amount &lt; head.amount) &#123;</span><br><span class="line">                    sell.enqueue(&#123;<span class="attr">price</span>: head.price, <span class="attr">amount</span>: head.amount - amount&#125;)</span><br><span class="line">                    total -= amount</span><br><span class="line">                    amount = <span class="number">0</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    amount -= head.amount</span><br><span class="line">                    total -= head.amount</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                buy.enqueue(&#123;price, amount&#125;)</span><br><span class="line">                total += amount</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// sell</span></span><br><span class="line">            <span class="keyword">while</span> (!buy.isEmpty() &amp;&amp; buy.front().priority &gt;= price &amp;&amp; amount &gt; <span class="number">0</span>)  &#123;</span><br><span class="line">                <span class="keyword">let</span> head = buy.dequeue().element</span><br><span class="line">                <span class="keyword">if</span> (amount &lt; head.amount) &#123;</span><br><span class="line">                    buy.enqueue(&#123;<span class="attr">price</span>: head.price, <span class="attr">amount</span>: head.amount - amount&#125;)</span><br><span class="line">                    total -= amount</span><br><span class="line">                    amount = <span class="number">0</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    amount -= head.amount</span><br><span class="line">                    total -= head.amount</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sell.enqueue(&#123;price, amount&#125;)</span><br><span class="line">                total += amount</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total%mod</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]222_完全二叉树的节点个数/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D222_%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一棵 <strong>完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p>
<p><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin" target="_blank" rel="noopener">完全二叉树</a> 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 <code>h</code> 层，则该层包含 <code>1~ 2h</code> 个节点。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,2,3,4,5,6]</span><br><span class="line">输出： 6</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; []</span><br><span class="line">输出： 0</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1]</span><br><span class="line">输出： 1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目范围是<code>[0, 5 * 104]</code></li>
<li><code>0 &lt;= Node.val &lt;= 5 * 104</code></li>
<li>题目数据保证输入的树是 <strong>完全二叉树</strong></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用前序遍历</li>
<li>如果当前节点存在则加<code>1</code>并递归其左右子节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> countNodes = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span>  <span class="number">1</span> +  countNodes(root.left) + countNodes(root.right)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]264_丑数 II/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D264_%E4%B8%91%E6%95%B0%20II/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/ugly-number-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数 <code>n</code> ，请你找出并返回第 <code>n</code> 个 <strong>丑数</strong> 。</p>
<p><strong>丑数</strong> 就是只包含质因数 <code>2</code>、<code>3</code> 和/或 <code>5</code> 的正整数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： n &#x3D; 10</span><br><span class="line">输出： 12</span><br><span class="line">解释： [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] 是由前 10 个丑数组成的序列。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： n &#x3D; 1</span><br><span class="line">输出： 1</span><br><span class="line">解释： 1 通常被视为丑数。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 1690</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>从<code>1</code>开始，由于<code>1</code>是特殊的丑数</li>
<li>因为丑数是只包含<code>2</code>、<code>3</code>、<code>5</code>为因数，因此后续的丑数必然是由前面的丑数<code>*2/3/5</code>得到</li>
<li>我们维护三个指针分别计数，如果指针位置的丑数<code>*</code>指针的值等于当前的丑数，该指针加一</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nthUglyNumber = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> ret= [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> n2 =ret[a]*<span class="number">2</span></span><br><span class="line">        <span class="keyword">const</span> n3 =ret[b]*<span class="number">3</span></span><br><span class="line">        <span class="keyword">const</span> n5 =ret[c]*<span class="number">5</span></span><br><span class="line">        <span class="keyword">const</span> min = <span class="built_in">Math</span>.min(n2,n3,n5)</span><br><span class="line">        ret.push(min)</span><br><span class="line">        <span class="keyword">if</span>(min==n2) a++</span><br><span class="line">        <span class="keyword">if</span>(min==n3) b++</span><br><span class="line">        <span class="keyword">if</span>(min==n5) c++</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret[n<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]226_翻转二叉树/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D226_%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/invert-binary-tree/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>翻转一棵二叉树。</p>
<p><strong>示例：</strong></p>
<p>输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     7</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  7     2</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure>


<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用前序遍历</li>
<li>交换左右节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">let</span> temp = root.left</span><br><span class="line">    root.left =root.right</span><br><span class="line">    root.right = temp</span><br><span class="line">    invertTree(root.left)</span><br><span class="line">    invertTree(root.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]230_二叉搜索树中第K小的元素/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D230_%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数 <code>k</code> ，请你设计一个算法查找其中第 <code>k</code> 个最小元素（从 1 开始计数）。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">输出： 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3</span><br><span class="line">输出： 3</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数为 <code>n</code> 。</li>
<li><code>1 &lt;= k &lt;= n &lt;= 104</code></li>
<li><code>0 &lt;= Node.val &lt;= 104</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用中序遍历</li>
<li>因为搜索树的特性，我们可以获得一个升序数组</li>
<li>第<code>k</code>小就是数组的第<code>k-1</code>项</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kthSmallest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">const</span> mmap = <span class="function">(<span class="params">node</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">        mmap(node.left)</span><br><span class="line">        arr.push(node.val)</span><br><span class="line">        mmap(node.right)</span><br><span class="line">    &#125;</span><br><span class="line">    mmap(root)</span><br><span class="line">    <span class="keyword">return</span> arr[k<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]227_基本计算器 II/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D227_%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8%20II/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/basic-calculator-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p>
<p>整数除法仅保留整数部分。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;3+2*2&quot;</span><br><span class="line">输出： 7</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot; 3&#x2F;2 &quot;</span><br><span class="line">输出： 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot; 3+5 &#x2F; 2 &quot;</span><br><span class="line">输出： 5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= s.length &lt;= 3 * 105</code></li>
<li><code>s</code> 由整数和算符 <code>(&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;)</code> 组成，中间由一些空格隔开</li>
<li><code>s</code> 表示一个 <strong>有效表达式</strong></li>
<li>表达式中的所有整数都是非负整数，且在范围 <code>[0, 231 - 1]</code> 内</li>
<li>题目数据保证答案是一个 <strong>32-bit 整数</strong></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们将所有的数以及运算符先找出来</li>
<li>用<code>m</code>标记当前的运算符</li>
<li><code>last</code>记录上次操作的数(例如<code>1+2</code> 我们就记录<code>2</code>)</li>
<li>对每种运算符进行对应操作</li>
</ul>
<p><strong>温馨提示</strong></p>
<ul>
<li>我在实现中对减法使用了加负数的方式，方便回溯</li>
<li>遇到乘法或者除法要对上次的加减法回溯时，我们有 <code>sum-last+last本次的乘除操作</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s.replace(<span class="regexp">/\s*/g</span>,<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> num = s.split(<span class="regexp">/[^0-9]/</span>)</span><br><span class="line">    <span class="keyword">if</span>(num.length==<span class="number">1</span>) <span class="keyword">return</span> num[<span class="number">0</span>] </span><br><span class="line">    <span class="keyword">let</span> ml = s.replace(<span class="regexp">/[0-9]+/g</span>,<span class="string">""</span>).split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> m = <span class="string">'+'</span></span><br><span class="line">    <span class="keyword">let</span> last = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;=ml.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m==<span class="string">'+'</span>)&#123;</span><br><span class="line">                sum += <span class="built_in">parseInt</span>(num[i])</span><br><span class="line">                last = <span class="built_in">parseInt</span>(num[i])</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="string">'-'</span>)&#123;</span><br><span class="line">                sum -= <span class="built_in">parseInt</span>(num[i])</span><br><span class="line">                last = -<span class="built_in">parseInt</span>(num[i])</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="string">'*'</span>)&#123;</span><br><span class="line">                sum  = sum - last + <span class="built_in">parseInt</span>(num[i]) * last;</span><br><span class="line">                last =  <span class="built_in">parseInt</span>(num[i]) * last</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum  = sum - last + <span class="built_in">parseInt</span>(last/<span class="built_in">parseInt</span>(num[i]));</span><br><span class="line">                last =  <span class="built_in">parseInt</span>(last/<span class="built_in">parseInt</span>(num[i]))</span><br><span class="line">            &#125;</span><br><span class="line">            m = ml[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]295_数据流的中位数/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D295_%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/find-median-from-data-stream/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>
<p>例如，</p>
<p>[2,3,4] 的中位数是 3</p>
<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>
<p>设计一个支持以下两种操作的数据结构：</p>
<ul>
<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>
<li>double findMedian() - 返回目前所有元素的中位数。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addNum(1)</span><br><span class="line">addNum(2)</span><br><span class="line">findMedian() -&gt; 1.5</span><br><span class="line">addNum(3) </span><br><span class="line">findMedian() -&gt; 2</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>此题与<a href="https://juejin.cn/post/7050487547901771807" target="_blank" rel="noopener">面试题 17.20. 连续中值</a>思路一致</li>
<li>我们在往数组中添加值的时候需要按序添加</li>
<li>输出中位数时对数组长度为奇数或偶数分情况处理</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MedianFinder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MedianFinder.prototype.addNum = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="keyword">this</span>.arr.findIndex(<span class="function"><span class="params">v</span>=&gt;</span>v&gt;num)</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr.push(num)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.arr.unshift(num)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr.splice(i,<span class="number">0</span>,num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MedianFinder.prototype.findMedian = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.arr.length%<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr[(<span class="keyword">this</span>.arr.length<span class="number">-1</span>)/<span class="number">2</span>]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.arr[(<span class="keyword">this</span>.arr.length/<span class="number">2</span>)<span class="number">-1</span>]+<span class="keyword">this</span>.arr[<span class="keyword">this</span>.arr.length/<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>力扣上类似的题感觉开始多起来了~~</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]313_超级丑数/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D313_%E8%B6%85%E7%BA%A7%E4%B8%91%E6%95%B0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/super-ugly-number/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>超级丑数</strong> 是一个正整数，并满足其所有质因数都出现在质数数组 <code>primes</code> 中。</p>
<p>给你一个整数 <code>n</code> 和一个整数数组 <code>primes</code> ，返回第 <code>n</code> 个 <strong>超级丑数</strong> 。</p>
<p>题目数据保证第 <code>n</code> 个 <strong>超级丑数</strong> 在 <strong>32-bit</strong> 带符号整数范围内。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： n &#x3D; 12, primes &#x3D; [2,7,13,19]</span><br><span class="line">输出： 32 </span><br><span class="line">解释： 给定长度为 4 的质数数组 primes &#x3D; [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： n &#x3D; 1, primes &#x3D; [2,3,5]</span><br><span class="line">输出： 1</span><br><span class="line">解释： 1 不含质因数，因此它的所有质因数都在质数数组 primes &#x3D; [2,3,5] 中。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 106</code></li>
<li><code>1 &lt;= primes.length &lt;= 100</code></li>
<li><code>2 &lt;= primes[i] &lt;= 1000</code></li>
<li>题目数据 <strong>保证</strong> <code>primes[i]</code> 是一个质数</li>
<li><code>primes</code> 中的所有值都 <strong>互不相同</strong> ，且按 <strong>递增顺序</strong> 排列</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>本题思路与<a href="https://juejin.cn/post/7050861404366209060" target="_blank" rel="noopener">丑数II</a>核心思想类似</li>
<li>我们对<code>primes</code>中的所有值都各维护一个指针</li>
<li>依次找出对应的最小丑数并进行存储</li>
<li>完成<code>n</code>次遍历后找出要找的丑数</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nthSuperUglyNumber = <span class="function"><span class="keyword">function</span>(<span class="params">n, primes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> points = <span class="keyword">new</span> <span class="built_in">Array</span>(primes.length).fill(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> ret =  [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span>(ret.length&lt;n)&#123;</span><br><span class="line">        <span class="keyword">let</span> min = primes[<span class="number">0</span>]*ret[points[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;primes.length;i++)&#123;</span><br><span class="line">            min = <span class="built_in">Math</span>.min(min,primes[i]*ret[points[i]])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;primes.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min==primes[i]*ret[points[i]])&#123;</span><br><span class="line">                points[i]++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.push(min)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret[ret.length<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]347_前 K 个高频元素/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D347_%E5%89%8D%20K%20%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/index/</url>
    <content><![CDATA[<p>「这是我参与2022首次更文挑战的第2天，活动详情查看：<a href="https://juejin.cn/post/7052884569032392740" target="_blank" rel="noopener" title="https://juejin.cn/post/7052884569032392740">2022首次更文挑战</a>」</p>
<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1,1,1,2,2,3], k &#x3D; 2</span><br><span class="line">输出: [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1], k &#x3D; 1</span><br><span class="line">输出: [1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>k</code> 的取值范围是 <code>[1, 数组中不相同的元素的个数]</code></li>
<li>题目数据保证答案唯一，换句话说，数组中前 <code>k</code> 个高频元素的集合是唯一的</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>不管看到啥题目，不要慌，我们先想想暴力解如何解</p>
<ul>
<li>我们用<code>map</code>来记录每个元素出现的次数</li>
<li>将<code>map</code>转成数组</li>
<li>进行降序排序</li>
<li>截取数组的前<code>k</code>个项</li>
<li>提取元素</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> topKFrequent = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map  = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> nums)&#123;</span><br><span class="line">    map.set(k,map.has(k)?map.get(k)+<span class="number">1</span>:<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr = [...map]</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b[<span class="number">1</span>]-a[<span class="number">1</span>]).slice(<span class="number">0</span>,k).map(<span class="function"><span class="params">v</span>=&gt;</span>v[<span class="number">0</span>])</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用小顶堆"><a href="#使用小顶堆" class="headerlink" title="使用小顶堆"></a>使用小顶堆</h2><p>先简单的介绍一下堆，<strong>堆就是利用完全二叉树的结构来维护的一维数组</strong>。</p>
<p>堆可以分为大顶堆和小顶堆。</p>
<p><strong>大顶堆</strong>：每个结点的值都大于或等于其左右子结点的值。</p>
<p><strong>小顶堆</strong>：每个结点的值都小于或等于其左右子结点的值。</p>
<p>如果是排序，<strong>求升序</strong>用大顶堆，<strong>求降序</strong>用小顶堆。</p>
<p>一般我们说 <code>topK</code> 问题，就可以用大顶堆或小顶堆来实现，</p>
<ul>
<li><strong>最大的 K 个</strong>：小顶堆</li>
<li><strong>最小的 K 个</strong>：大顶堆</li>
</ul>
<p>在这题中，我们要求的是前<code>k</code>个高频，符合小顶堆的条件</p>
<ul>
<li>第一步我们还是用<code>map</code>来记录每个元素出现的次数</li>
<li>如果<code>map</code>的长度不够<code>k</code>个就直接返回所有的元素</li>
<li>否则我们遍历<code>map</code>，对小顶堆的长度不够<code>k</code>个时向里面添加数组</li>
<li>当小顶堆的长度达到<code>k</code>个后，我们需要毕竟堆顶的(相对低频)元素的次数是否大于当前遍历到的元素</li>
<li>如果小于当前遍历到的元素的次数，则将堆顶的元素推出，将当前元素入堆</li>
<li>遍历完成后返回所有的元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> topKFrequent = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map  = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> nums)&#123;</span><br><span class="line">    map.set(k,map.has(k)?map.get(k)+<span class="number">1</span>:<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(map.size&lt;=k) <span class="keyword">return</span> [...map.keys()]</span><br><span class="line">  <span class="keyword">const</span> minQueue = <span class="keyword">new</span> MinPriorityQueue()</span><br><span class="line">  map.forEach(<span class="function">(<span class="params">val,key</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(minQueue.size()&lt;k)&#123;</span><br><span class="line">      minQueue.enqueue(key,val)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(minQueue.front().priority&lt;val)&#123;</span><br><span class="line">        minQueue.dequeue()</span><br><span class="line">        minQueue.enqueue(key,val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="keyword">return</span> minQueue.toArray().map(<span class="function"><span class="params">v</span>=&gt;</span> v.element)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]373_查找和最小的K对数字/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D373_%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84K%E5%AF%B9%E6%95%B0%E5%AD%97/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个以升序排列的整数数组 <code>nums1</code> 和 <strong>*<em><code>nums2</code> *</em></strong>, 以及一个整数 <code>k</code> ****。</p>
<p>定义一对值 <code>(u,v)</code>，其中第一个元素来自 <code>nums1</code>，第二个元素来自 <code>nums2</code> ****。</p>
<p>请找到和最小的 <code>k</code> 个数对 <code>(u1,v1)</code>, <code>(u2,v2)</code> … <code>(uk,vk)</code> 。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,7,11], nums2 &#x3D; [2,4,6], k &#x3D; 3</span><br><span class="line">输出: [1,2],[1,4],[1,6]</span><br><span class="line">解释: 返回序列中的前 3 对数：</span><br><span class="line">     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,1,2], nums2 &#x3D; [1,2,3], k &#x3D; 2</span><br><span class="line">输出: [1,1],[1,1]</span><br><span class="line">解释: 返回序列中的前 2 对数：</span><br><span class="line">     [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,2], nums2 &#x3D; [3], k &#x3D; 3 </span><br><span class="line">输出: [1,3],[2,3]</span><br><span class="line">解释: 也可能序列中所有的数对都被返回:[1,3],[2,3]</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums1[i], nums2[i] &lt;= 109</code></li>
<li><code>nums1</code>, <code>nums2</code> 均为升序排列</li>
<li><code>1 &lt;= k &lt;= 1000</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>暴力解yyds</li>
<li>因为我们只要返回<code>k</code>对,因此先对两个数组的长度进行截取</li>
<li>舍掉超出<code>k</code>的部分</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kSmallestPairs = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = []</span><br><span class="line">    <span class="keyword">if</span>(nums1.length&gt;k) nums1.length=k</span><br><span class="line">    <span class="keyword">if</span>(nums2.length&gt;k) nums2.length=k</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;nums2.length;j++)&#123;</span><br><span class="line">            arr.push([nums1[i],nums2[j]])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a[<span class="number">0</span>]+a[<span class="number">1</span>]-b[<span class="number">0</span>]-b[<span class="number">1</span>]).slice(<span class="number">0</span>,k)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]331_验证二叉树的前序序列化/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D331_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E5%BA%8F%E5%88%97%E5%8C%96/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    _9_</span><br><span class="line">    &#x2F;   \</span><br><span class="line">   3     2</span><br><span class="line">  &#x2F; \   &#x2F; \</span><br><span class="line"> 4   1  #  6</span><br><span class="line">&#x2F; \ &#x2F; \   &#x2F; \</span><br><span class="line"># # # #   # #</span><br></pre></td></tr></table></figure>

<p>例如，上面的二叉树可以被序列化为字符串 <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>，其中 <code>#</code> 代表一个空节点。</p>
<p>给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。</p>
<p>每个以逗号分隔的字符或为一个整数或为一个表示 <code>null</code> 指针的 <code>&#39;#&#39;</code> 。</p>
<p>你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 <code>&quot;1,,3&quot;</code> 。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;1,#&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;9,#,#,1&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>


<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们用<code>#</code>来填充空节点因此在本题中我们可以认为</li>
<li>一个非空节点有两个子节点, 空节点(也就是<code>#</code>)没有子节点</li>
<li>我们定义一个计数器用来记录槽点的个数并默认为头节点的<code>1</code></li>
<li>我们对树进行遍历，每遍历到一个节点，我们将槽点的个数<code>-1</code></li>
<li>如果一个节点是数字，我们可以认为他需要两个槽点来放置子节点</li>
<li>如果是正确的二叉树的前序序列化，那么可以完成遍历并且最终槽点个数为<code>0</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValidSerialization = <span class="function"><span class="keyword">function</span>(<span class="params">preorder</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> odlist = preorder.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;odlist.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        num--</span><br><span class="line">        <span class="keyword">if</span>(odlist[i]!=<span class="string">'#'</span>) num+=<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num ==<span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]355_设计推特/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D355_%E8%AE%BE%E8%AE%A1%E6%8E%A8%E7%89%B9/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/design-twitter/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计一个简化版的推特(Twitter)，可以让用户实现发送推文，关注/取消关注其他用户，能够看见关注人（包括自己）的最近 <code>10</code> 条推文。</p>
<p>实现 <code>Twitter</code> 类：</p>
<ul>
<li><code>Twitter()</code> 初始化简易版推特对象</li>
<li><code>void postTweet(int userId, int tweetId)</code> 根据给定的 <code>tweetId</code> 和 <code>userId</code> 创建一条新推文。每次调用此函数都会使用一个不同的 <code>tweetId</code> 。</li>
<li><code>List getNewsFeed(int userId)</code> 检索当前用户新闻推送中最近 <code>10</code> 条推文的 ID 。新闻推送中的每一项都必须是由用户关注的人或者是用户自己发布的推文。推文必须 <strong>按照时间顺序由最近到最远排序</strong> 。</li>
<li><code>void follow(int followerId, int followeeId)</code> ID 为 <code>followerId</code> 的用户开始关注 ID 为 <code>followeeId</code> 的用户。</li>
<li><code>void unfollow(int followerId, int followeeId)</code> ID 为 <code>followerId</code> 的用户不再关注 ID 为 <code>followeeId</code> 的用户。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;Twitter&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;follow&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;unfollow&quot;, &quot;getNewsFeed&quot;]</span><br><span class="line">[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]</span><br><span class="line">输出</span><br><span class="line">[null, null, [5], null, null, [6, 5], null, [5]]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Twitter twitter &#x3D; new Twitter();</span><br><span class="line">twitter.postTweet(1, 5); &#x2F;&#x2F; 用户 1 发送了一条新推文 (用户 id &#x3D; 1, 推文 id &#x3D; 5)</span><br><span class="line">twitter.getNewsFeed(1);  &#x2F;&#x2F; 用户 1 的获取推文应当返回一个列表，其中包含一个 id 为 5 的推文</span><br><span class="line">twitter.follow(1, 2);    &#x2F;&#x2F; 用户 1 关注了用户 2</span><br><span class="line">twitter.postTweet(2, 6); &#x2F;&#x2F; 用户 2 发送了一个新推文 (推文 id &#x3D; 6)</span><br><span class="line">twitter.getNewsFeed(1);  &#x2F;&#x2F; 用户 1 的获取推文应当返回一个列表，其中包含两个推文，id 分别为 -&gt; [6, 5] 。推文 id 6 应当在推文 id 5 之前，因为它是在 5 之后发送的</span><br><span class="line">twitter.unfollow(1, 2);  &#x2F;&#x2F; 用户 1 取消关注了用户 2</span><br><span class="line">twitter.getNewsFeed(1);  &#x2F;&#x2F; 用户 1 获取推文应当返回一个列表，其中包含一个 id 为 5 的推文。因为用户 1 已经不再关注用户 2</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li>
<li><code>0 &lt;= tweetId &lt;= 104</code></li>
<li>所有推特的 ID 都互不相同</li>
<li><code>postTweet</code>、<code>getNewsFeed</code>、<code>follow</code> 和 <code>unfollow</code> 方法最多调用 <code>3 * 104</code> 次</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们用<code>followers</code>来记录每个用户关注的列表</li>
<li>关注时先判断是否以关注，没关注的话在关注列表进行<code>push</code></li>
<li>取关是类似的操作，找到取关索引，进行删除</li>
<li>我们用<code>news</code>来记录每个用户发的消息</li>
<li>在获取信息时，先找到对应的用户关注列表</li>
<li>根据关注列表拉到对应的消息</li>
<li>对消息进行整合排序，输出最新的10条</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Twitter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.followers =&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.news = &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>userId </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">tweetId</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Twitter.prototype.postTweet = <span class="function"><span class="keyword">function</span>(<span class="params">userId, tweetId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;tweetId,<span class="attr">time</span>:++<span class="keyword">this</span>.num&#125;</span><br><span class="line">    <span class="keyword">this</span>.news[userId]?<span class="keyword">this</span>.news[userId].push(obj):<span class="keyword">this</span>.news[userId]=[obj]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">userId</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Twitter.prototype.getNewsFeed = <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> followIds = <span class="keyword">this</span>.followers[userId]||[]</span><br><span class="line">    <span class="keyword">if</span>(!followIds.includes(userId)) followIds.push(userId)</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;followIds.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.news[followIds[i]]) &#123;</span><br><span class="line">            arr = [...arr,...this.news[followIds[i]]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b.time-a.time).slice(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b.time-a.time).slice(<span class="number">0</span>,<span class="number">10</span>).map(<span class="function"><span class="params">v</span>=&gt;</span> v.tweetId)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>followerId </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">followeeId</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Twitter.prototype.follow = <span class="function"><span class="keyword">function</span>(<span class="params">followerId, followeeId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.followers[followerId])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.followers[followerId].includes(followeeId))  &#123;</span><br><span class="line">            <span class="keyword">this</span>.followers[followerId].push(followeeId)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.followers[followerId]=[followeeId]</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>followerId </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">followeeId</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Twitter.prototype.unfollow = <span class="function"><span class="keyword">function</span>(<span class="params">followerId, followeeId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.followers[followerId]&amp;&amp;<span class="keyword">this</span>.followers[followerId].includes(followeeId))&#123;</span><br><span class="line">        <span class="keyword">this</span>.followers[followerId].splice(<span class="keyword">this</span>.followers[followerId].indexOf(followeeId),<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]445_两数相加II/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D445_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0II/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个 <strong>非空</strong> 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>
<p><strong>示例1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： l1 &#x3D; [7,2,4,3], l2 &#x3D; [5,6,4]</span><br><span class="line">输出： [7,8,0,7]</span><br></pre></td></tr></table></figure>

<p><strong>示例2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</span><br><span class="line">输出： [8,0,7]</span><br></pre></td></tr></table></figure>

<p><strong>示例3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： l1 &#x3D; [0], l2 &#x3D; [0]</span><br><span class="line">输出： [0]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li>链表的长度范围为<code>[1, 100]</code></li>
<li><code>0 &lt;= node.val &lt;= 9</code></li>
<li>输入数据保证链表代表的数字无前导 0</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们发现两个链表是倒序相加的</li>
<li>然后相加后的值大于等于<code>10</code>的，原节点记录个位上的数，十位上的数进入下一次求和的计算中</li>
<li>我们先将链表入栈</li>
<li>一边出栈一边做求和</li>
<li>然后构建节点</li>
<li>将新节点的next指向上一个构建的节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr1 =[]</span><br><span class="line">    <span class="keyword">let</span> arr2=[]</span><br><span class="line">    <span class="keyword">while</span>(l1||l2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1)&#123;</span><br><span class="line">            arr1.push(l1.val)</span><br><span class="line">            l1=l1.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l2)&#123;</span><br><span class="line">            arr2.push(l2.val||<span class="number">0</span>)</span><br><span class="line">            l2=l2.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(arr1.length||arr2.length||sum)&#123;</span><br><span class="line">        <span class="keyword">let</span> a =arr1.length?arr1.pop():<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> b =arr2.length?arr2.pop():<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> s = a+b +sum</span><br><span class="line">        sum = <span class="built_in">parseInt</span>(s / <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(s%<span class="number">10</span>)</span><br><span class="line">        node.next = head</span><br><span class="line">        head = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>生活，一半是回忆，一半是继续，把所有的不快给昨天，把所有的希望给明天，把所有的努力给今天！</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]589_N 叉树的前序遍历/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D589_N%20%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 N 叉树，返回其节点值的 <strong>前序遍历</strong> 。</p>
<p>N 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,null,3,2,4,null,5,6]</span><br><span class="line">输出： [1,3,5,6,2,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： root &#x3D; [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</span><br><span class="line">输出： [1,2,3,6,7,11,14,4,8,12,5,9,13,10]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>N 叉树的高度小于或等于 <code>1000</code></li>
<li>节点总数在范围 <code>[0, 10^4]</code> 内</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>N 叉树的前序遍历与二叉树类似，但是略有不同</li>
<li>如果该节点存在则存入数组 </li>
<li>如果该节点存在子节点则将每个子节点进入递归进行上面两步</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var preorder &#x3D; function(root) &#123;</span><br><span class="line">    let arr &#x3D; []</span><br><span class="line">    if(!root) return []</span><br><span class="line">    function fmap(node)&#123;</span><br><span class="line">        if(node) arr.push(node.val)</span><br><span class="line">        for(let i &#x3D;0;i&lt;node.children.length;i++)&#123;</span><br><span class="line">            fmap(node.children[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmap(root)</span><br><span class="line">    return arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>时间不会停下来等你，我们现在过的每一天，都是余生中最年轻的一天。</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]547_省份数量/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D547_%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F/index/</url>
    <content><![CDATA[<p>「这是我参与2022首次更文挑战的第7天，活动详情查看：<a href="https://juejin.cn/post/7052884569032392740" target="_blank" rel="noopener" title="https://juejin.cn/post/7052884569032392740">2022首次更文挑战</a>」</p>
<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起! </p>
<p><a href="https://leetcode-cn.com/problems/number-of-provinces/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有 <code>n</code> 个城市，其中一些彼此相连，另一些没有相连。如果城市 <code>a</code> 与城市 <code>b</code> 直接相连，且城市 <code>b</code> 与城市 <code>c</code> 直接相连，那么城市 <code>a</code> 与城市 <code>c</code> 间接相连。</p>
<p><strong>省份</strong> 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p>
<p>给你一个 <code>n x n</code> 的矩阵 <code>isConnected</code> ，其中 <code>isConnected[i][j] = 1</code> 表示第 <code>i</code> 个城市和第 <code>j</code> 个城市直接相连，而 <code>isConnected[i][j] = 0</code> 表示二者不直接相连。</p>
<p>返回矩阵中 <strong>省份</strong> 的数量。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： isConnected &#x3D; [[1,1,0],[1,1,0],[0,0,1]]</span><br><span class="line">输出： 2</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： isConnected &#x3D; [[1,0,0],[0,1,0],[0,0,1]]</span><br><span class="line">输出： 3</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 200</code></li>
<li><code>n == isConnected.length</code></li>
<li><code>n == isConnected[i].length</code></li>
<li><code>isConnected[i][j]</code> 为 <code>1</code> 或 <code>0</code></li>
<li><code>isConnected[i][i] == 1</code></li>
<li><code>isConnected[i][j] == isConnected[j][i]</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们创建一个<code>visit</code>数组长度与矩阵的长度相同，用来标记该城市是否已经被处理</li>
<li>遍历矩阵<code>isConnected</code>矩阵长度次</li>
<li>如果遍历到的城市被标记为未处理，那么就进入处理函数，并将省份数量<code>+1</code></li>
<li>处理函数接收一个数组索引</li>
<li>将该索引对应的城市数组标记为已处理</li>
<li>遍历这个城市数组，查看是否与其他城市有连接(<code>isConnected[i][i] == 1</code>)</li>
<li>如果存在有连接的并且还未被处理的城市，则进入处理</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> findCircleNum = <span class="function"><span class="keyword">function</span>(<span class="params">isConnected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> visit =  <span class="keyword">new</span> <span class="built_in">Array</span>(isConnected.length).fill(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        visit[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;isConnected.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isConnected[i][j]&amp;&amp;visit[j]==<span class="number">0</span>) connect(j) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(index&lt;isConnected.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[index]==<span class="number">0</span>)&#123;</span><br><span class="line">            count++</span><br><span class="line">            connect(index)</span><br><span class="line">        &#125;</span><br><span class="line">        index++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]622_设计循环队列/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D622_%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/design-circular-queue/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。</p>
<p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p>
<p>你的实现应该支持如下操作：</p>
<ul>
<li><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为<code>k</code>。</li>
<li><code>Front</code>: 从队首获取元素。如果队列为空，返回<code>-1</code>。</li>
<li><code>Rear</code>: 获取队尾元素。如果队列为空，返回<code>-1</code>。</li>
<li><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</li>
<li><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</li>
<li><code>isEmpty()</code>: 检查循环队列是否为空。</li>
<li><code>isFull()</code>: 检查循环队列是否已满。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyCircularQueue circularQueue &#x3D; new MyCircularQueue(3); &#x2F;&#x2F; 设置长度为 3</span><br><span class="line">circularQueue.enQueue(1);  &#x2F;&#x2F; 返回 true</span><br><span class="line">circularQueue.enQueue(2);  &#x2F;&#x2F; 返回 true</span><br><span class="line">circularQueue.enQueue(3);  &#x2F;&#x2F; 返回 true</span><br><span class="line">circularQueue.enQueue(4);  &#x2F;&#x2F; 返回 false，队列已满</span><br><span class="line">circularQueue.Rear();  &#x2F;&#x2F; 返回 3</span><br><span class="line">circularQueue.isFull();  &#x2F;&#x2F; 返回 true</span><br><span class="line">circularQueue.deQueue();  &#x2F;&#x2F; 返回 true</span><br><span class="line">circularQueue.enQueue(4);  &#x2F;&#x2F; 返回 true</span><br><span class="line">circularQueue.Rear();  &#x2F;&#x2F; 返回 4</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示</p>
<ul>
<li>所有的值都在<code>0</code>至<code>1000</code>的范围内；</li>
<li>操作数将在<code>1</code>至<code>1000</code>的范围内；</li>
<li>请不要使用内置的队列库。</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们定义一个数组，如果数组的长度与要求的队列长度长度相同则<code>isFull</code></li>
<li>如果数组的长度为<code>0</code>，则满足<code>isEmpty</code></li>
<li><code>enQueue</code>其实就是往数组中<code>push</code>元素</li>
<li><code>deQueue</code>其实就是移除数组的第一项元素</li>
<li><code>Rear</code>获取最后一项也就是获取数组的第<code>length-1</code>项</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MyCircularQueue = <span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.maxLen = k</span><br><span class="line">    <span class="keyword">this</span>.arr = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.enQueue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isFull()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.arr.push(value)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.deQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> [a,...args] = <span class="keyword">this</span>.arr</span><br><span class="line">    <span class="keyword">this</span>.arr = [...args]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.Front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.arr.length) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.Rear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.arr.length) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr[<span class="keyword">this</span>.arr.length<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr.length ==<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.isFull = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr.length ==<span class="keyword">this</span>.maxLen</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyCircularQueue(k)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.enQueue(value)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.deQueue()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.Front()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.Rear()</span></span><br><span class="line"><span class="comment"> * var param_5 = obj.isEmpty()</span></span><br><span class="line"><span class="comment"> * var param_6 = obj.isFull()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]641_设计循环双端队列/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D641_%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/design-circular-deque/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计实现双端队列。</p>
<p>你的实现需要支持以下操作：</p>
<ul>
<li><code>MyCircularDeque(k)</code>：构造函数,双端队列的大小为<code>k</code>。</li>
<li><code>insertFront()</code>：将一个元素添加到双端队列头部。 如果操作成功返回<code>true</code>。</li>
<li><code>insertLast()</code>：将一个元素添加到双端队列尾部。如果操作成功返回<code>true</code>。</li>
<li><code>deleteFront()</code>：从双端队列头部删除一个元素。 如果操作成功返回<code>true</code>。</li>
<li><code>deleteLast()</code>：从双端队列尾部删除一个元素。如果操作成功返回<code>true</code>。</li>
<li><code>getFront()</code>：从双端队列头部获得一个元素。如果双端队列为空，返回<code>-1</code>。</li>
<li><code>getRear()</code>：获得双端队列的最后一个元素。 如果双端队列为空，返回<code>-1</code>。</li>
<li><code>isEmpty()</code>：检查双端队列是否为空。</li>
<li><code>isFull()</code>：检查双端队列是否满了。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyCircularDeque circularDeque &#x3D; new MycircularDeque(3); &#x2F;&#x2F; 设置容量大小为3</span><br><span class="line">circularDeque.insertLast(1);			        &#x2F;&#x2F; 返回 true</span><br><span class="line">circularDeque.insertLast(2);			        &#x2F;&#x2F; 返回 true</span><br><span class="line">circularDeque.insertFront(3);			        &#x2F;&#x2F; 返回 true</span><br><span class="line">circularDeque.insertFront(4);			        &#x2F;&#x2F; 已经满了，返回 false</span><br><span class="line">circularDeque.getRear();  				&#x2F;&#x2F; 返回 2</span><br><span class="line">circularDeque.isFull();				        &#x2F;&#x2F; 返回 true</span><br><span class="line">circularDeque.deleteLast();			        &#x2F;&#x2F; 返回 true</span><br><span class="line">circularDeque.insertFront(4);			        &#x2F;&#x2F; 返回 true</span><br><span class="line">circularDeque.getFront();				&#x2F;&#x2F; 返回 4</span><br></pre></td></tr></table></figure>


<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们定义一个数组，如果数组的长度与要求的队列长度长度相同则<code>isFull</code></li>
<li>如果数组的长度为<code>0</code>，则满足<code>isEmpty</code></li>
<li><code>insertLast</code>其实就是往数组中第一项插入元素</li>
<li><code>insertLast</code>其实就是往数组中<code>push</code>元素</li>
<li><code>deleteFront</code>其实就是移除数组的第一项元素</li>
<li><code>deleteLast</code>其实就是移除数组的最后一项元素</li>
<li><code>getRear</code>获取最后一项也就是获取数组的第<code>length-1</code>项</li>
<li><code>getFront</code>获取数组第<code>0</code>项</li>
</ul>
<blockquote>
<p>提示：</p>
<ul>
<li>所有值的范围为<code>[1, 1000]</code></li>
<li>操作次数的范围为<code>[1, 1000]</code></li>
<li>请不要使用内置的双端队列库。</li>
</ul>
</blockquote>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MyCircularDeque = <span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.maxLen = k </span><br><span class="line">    <span class="keyword">this</span>.arr = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.insertFront = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isFull()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.arr = [value,...this.arr]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.insertLast = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isFull()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.arr.push(value)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.deleteFront = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> [a,...args] = <span class="keyword">this</span>.arr</span><br><span class="line">    <span class="keyword">this</span>.arr = [...args]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.deleteLast = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.arr = <span class="keyword">this</span>.arr.slice(<span class="number">0</span>,<span class="keyword">this</span>.arr.length<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.getFront = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.getRear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.arr.length) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr[<span class="keyword">this</span>.arr.length<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr.length == <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularDeque.prototype.isFull = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr.length == <span class="keyword">this</span>.maxLen</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularDeque object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyCircularDeque(k)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.insertFront(value)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.insertLast(value)</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.deleteFront()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.deleteLast()</span></span><br><span class="line"><span class="comment"> * var param_5 = obj.getFront()</span></span><br><span class="line"><span class="comment"> * var param_6 = obj.getRear()</span></span><br><span class="line"><span class="comment"> * var param_7 = obj.isEmpty()</span></span><br><span class="line"><span class="comment"> * var param_8 = obj.isFull()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]621_任务调度器/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D621_%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/task-scheduler" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个用字符数组<code>tasks</code>表示的<code>CPU</code>需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在<code>1</code>个单位时间内执行完。在任何一个单位时间，<code>CPU</code>可以完成一个任务，或者处于待命状态。</p>
<p>然而，两个<code>相同种类</code>的任务之间必须有长度为整数<code>n</code>的冷却时间，因此至少有连续<code>n</code>个单位时间内<code>CPU</code>在执行不同的任务，或者在待命状态。</p>
<p>你需要计算完成所有任务所需要的最短时间 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：tasks &#x3D; [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n &#x3D; 2</span><br><span class="line">输出：8</span><br><span class="line">解释：A -&gt; B -&gt; (待命) -&gt; A -&gt; B -&gt; (待命) -&gt; A -&gt; B</span><br><span class="line">     在本示例中，两个相同类型任务之间必须间隔长度为 n &#x3D; 2 的冷却时间，而执行一个任务只需要</span><br><span class="line">     一个单位时间，所以中间出现了（待命）状态。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：tasks &#x3D; [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n &#x3D; 0</span><br><span class="line">输出：6</span><br><span class="line">解释：在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n &#x3D; 0</span><br><span class="line">[&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]</span><br><span class="line">[&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;]</span><br><span class="line">[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]</span><br><span class="line">...</span><br><span class="line">诸如此类</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：tasks &#x3D; [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n &#x3D; 2</span><br><span class="line">输出：16</span><br><span class="line">解释：一种可能的解决方案是：</span><br><span class="line"></span><br><span class="line">A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; (待命) -&gt; (待命) -&gt; A -&gt; </span><br><span class="line">(待命) -&gt; (待命) -&gt; A</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= task.length &lt;= 104</code></li>
<li><code>tasks[i]</code> 是大写英文字母</li>
<li><code>n</code> 的取值范围为 <code>[0, 100]</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们用对象来存储每个字母出现的次数</li>
<li>那么我们从<code>A-&gt;A</code>的时间为需要等待的<code>n</code>加上一个A执行的<code>1</code></li>
<li>我们获取到出现次数最多的字母<code>A</code>出现了<code>max</code>次，跟<code>A</code>出现次数相同的字母还有<code>maxCount</code>个</li>
<li>因此我们有<code>(max-1)*(n+1)+maxCount</code></li>
</ul>
<p><strong>特殊情况：</strong></p>
<p>当<code>maxCount</code>大于<code>n+1</code>时，一次等待的间隔<code>n</code>无法满足我们的要求，我们只能依次执行，因此此时最小的时间间隔为数组的长度</p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> leastInterval = <span class="function"><span class="keyword">function</span>(<span class="params">tasks, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> tasks.length</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;tasks.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> k = tasks[i]</span><br><span class="line">        <span class="keyword">if</span>(!obj[k])&#123;</span><br><span class="line">            obj[k]=<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            obj[k]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> maxCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj[i]&gt;max)&#123;</span><br><span class="line">            max = obj[i]</span><br><span class="line">            maxCount=<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj[i]==max)&#123;</span><br><span class="line">            maxCount++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max((max<span class="number">-1</span>)*(n+<span class="number">1</span>)+maxCount,tasks.length)    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]451_根据字符出现频率排序/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D451_%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/index/</url>
    <content><![CDATA[<p>「这是我参与2022首次更文挑战的第5天，活动详情查看：<a href="https://juejin.cn/post/7052884569032392740" target="_blank" rel="noopener" title="https://juejin.cn/post/7052884569032392740">2022首次更文挑战</a>」</p>
<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">&quot;tree&quot;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">&quot;eert&quot;</span><br><span class="line"></span><br><span class="line">解释: &#39;e&#39;出现两次，&#39;r&#39;和&#39;t&#39;都只出现一次。</span><br><span class="line">因此&#39;e&#39;必须出现在&#39;r&#39;和&#39;t&#39;之前。此外，&quot;eetr&quot;也是一个有效的答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">解释: &#39;c&#39;和&#39;a&#39;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。</span><br><span class="line">注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">&quot;Aabb&quot;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">&quot;bbAa&quot;</span><br><span class="line"></span><br><span class="line">解释: 此外，&quot;bbaA&quot;也是一个有效的答案，但&quot;Aabb&quot;是不正确的。</span><br><span class="line">注意&#39;A&#39;和&#39;a&#39;被认为是两种不同的字符。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们使用<code>map</code>来存储所有的字符</li>
<li>如果该字符出现过，就将该字符出现的次数<code>+1</code></li>
<li>否则，设置该字符出现的次数为<code>1</code></li>
<li>将<code>map</code>转为<code>Array</code>类型进行排序(转换后每一项都是数组，第一个元素为字符第二个为出现的次数)</li>
<li>使用进行数组降序排序</li>
<li>拼接字符串，输出结果</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> frequencySort = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> z <span class="keyword">of</span> s)&#123;</span><br><span class="line">        map.set(z,(map.get(z)||<span class="number">0</span>)+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> arr = [...map].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b[<span class="number">1</span>] - a[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [k,v] <span class="keyword">of</span> arr)&#123;</span><br><span class="line">        res += k.repeat(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用大顶堆"><a href="#使用大顶堆" class="headerlink" title="使用大顶堆"></a>使用大顶堆</h2><ul>
<li>我们之前用<code>map</code>来存储的操作都与上方一致</li>
<li>排序使用大顶堆来完成</li>
<li>将<code>map</code>中的内容存入大顶堆后将大顶堆转化成数组(此时的数组已经是排好序的了)</li>
<li>遍历数组的内容，拿到字符串以及出现的次数</li>
<li>拼接字符串，输出结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> frequencySort = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> z <span class="keyword">of</span> s)&#123;</span><br><span class="line">        map.set(z,(map.get(z)||<span class="number">0</span>)+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> maxQueue = <span class="keyword">new</span> MaxPriorityQueue()</span><br><span class="line">    map.forEach(<span class="function">(<span class="params">val,key</span>)=&gt;</span>&#123;</span><br><span class="line">        maxQueue.enqueue(key,val)</span><br><span class="line">    &#125;)</span><br><span class="line">    maxQueue.toArray().forEach(<span class="function"><span class="params">v</span>=&gt;</span> res+= v.element.repeat(v.priority))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]636_函数的独占时间/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D636_%E5%87%BD%E6%95%B0%E7%9A%84%E7%8B%AC%E5%8D%A0%E6%97%B6%E9%97%B4/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/exclusive-time-of-functions/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有一个 <strong>单线程</strong> CPU 正在运行一个含有 <code>n</code> 道函数的程序。每道函数都有一个位于  <code>0</code> 和 <code>n-1</code> 之间的唯一标识符。</p>
<p>函数调用 <strong>存储在一个 <a href="https://baike.baidu.com/item/%E8%B0%83%E7%94%A8%E6%A0%88/22718047?fr=aladdin" target="_blank" rel="noopener">调用栈</a> 上</strong> ：当一个函数调用开始时，它的标识符将会推入栈中。而当一个函数调用结束时，它的标识符将会从栈中弹出。标识符位于栈顶的函数是<strong>当前正在执行的函数</strong> 。每当一个函数开始或者结束时，将会记录一条日志，包括函数标识符、是开始还是结束、以及相应的时间戳。</p>
<p>给你一个由日志组成的列表 <code>logs</code> ，其中 <code>logs[i]</code> 表示第 <code>i</code> 条日志消息，该消息是一个按 <code>&quot;{function_id}:{&quot;start&quot; | &quot;end&quot;}:{timestamp}&quot;</code> 进行格式化的字符串。例如，<code>&quot;0:start:3&quot;</code> 意味着标识符为 <code>0</code> 的函数调用在时间戳 <code>3</code> 的 <strong>起始开始执行</strong> ；而 <code>&quot;1:end:2&quot;</code> 意味着标识符为 <code>1</code> 的函数调用在时间戳 <code>2</code> 的 <strong>末尾结束执行</strong>。注意，函数可以 <strong>调用多次，可能存在递归调用</strong> 。</p>
<p>函数的 <strong>独占时间</strong> 定义是在这个函数在程序所有函数调用中执行时间的总和，调用其他函数花费的时间不算该函数的独占时间。</p>
<p>例如，如果一个函数被调用两次，一次调用执行 <code>2</code> 单位时间，另一次调用执行 <code>1</code> 单位时间，那么该函数的 <strong>独占时间</strong><code>2 + 1 = 3</code> 。</p>
<p>以数组形式返回每个函数的 <strong>独占时间</strong> ，其中第 <code>i</code> 个下标对应的值表示标识符 <code>i</code> 的函数的独占时间。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n &#x3D; 2, logs &#x3D; [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]</span><br><span class="line">输出：[3,4]</span><br><span class="line">解释：</span><br><span class="line">函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，于时间戳 1 的末尾结束执行。 </span><br><span class="line">函数 1 在时间戳 2 的起始开始执行，执行 4 个单位时间，于时间戳 5 的末尾结束执行。 </span><br><span class="line">函数 0 在时间戳 6 的开始恢复执行，执行 1 个单位时间。 </span><br><span class="line">所以函数 0 总共执行 2 + 1 &#x3D; 3 个单位时间，函数 1 总共执行 4 个单位时间。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n &#x3D; 1, logs &#x3D; [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;0:start:6&quot;,&quot;0:end:6&quot;,&quot;0:end:7&quot;]</span><br><span class="line">输出：[8]</span><br><span class="line">解释：</span><br><span class="line">函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，并递归调用它自身。</span><br><span class="line">函数 0（递归调用）在时间戳 2 的起始开始执行，执行 4 个单位时间。</span><br><span class="line">函数 0（初始调用）恢复执行，并立刻再次调用它自身。</span><br><span class="line">函数 0（第二次递归调用）在时间戳 6 的起始开始执行，执行 1 个单位时间。</span><br><span class="line">函数 0（初始调用）在时间戳 7 的起始恢复执行，执行 1 个单位时间。</span><br><span class="line">所以函数 0 总共执行 2 + 4 + 1 + 1 &#x3D; 8 个单位时间。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n &#x3D; 2, logs &#x3D; [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:6&quot;,&quot;1:end:6&quot;,&quot;0:end:7&quot;]</span><br><span class="line">输出：[7,1]</span><br><span class="line">解释：</span><br><span class="line">函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，并递归调用它自身。</span><br><span class="line">函数 0（递归调用）在时间戳 2 的起始开始执行，执行 4 个单位时间。</span><br><span class="line">函数 0（初始调用）恢复执行，并立刻调用函数 1 。</span><br><span class="line">函数 1在时间戳 6 的起始开始执行，执行 1 个单位时间，于时间戳 6 的末尾结束执行。</span><br><span class="line">函数 0（初始调用）在时间戳 7 的起始恢复执行，执行 1 个单位时间，于时间戳 7 的末尾结束执行。</span><br><span class="line">所以函数 0 总共执行 2 + 4 + 1 &#x3D; 7 个单位时间，函数 1 总共执行 1 个单位时间。</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n &#x3D; 2, logs &#x3D; [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:7&quot;,&quot;1:end:7&quot;,&quot;0:end:8&quot;]</span><br><span class="line">输出：[8,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： n &#x3D; 1, logs &#x3D; [&quot;0:start:0&quot;,&quot;0:end:0&quot;]</span><br><span class="line">输出： [1]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>1 &lt;= logs.length &lt;= 500</code></li>
<li><code>0 &lt;= function_id &lt; n</code></li>
<li><code>0 &lt;= timestamp &lt;= 109</code></li>
<li>两个开始事件不会在同一时间戳发生</li>
<li>两个结束事件不会在同一时间戳发生</li>
<li>每道函数都有一个对应 <code>&quot;start&quot;</code> 日志的 <code>&quot;end&quot;</code> 日志</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们先将函数的<code>id</code>,<code>类型</code>,<code>timestamp</code>，结构出来</li>
<li>如果类型是<code>start</code>，则入栈</li>
<li>如果类型是<code>end</code>出栈，计算耗时</li>
<li><code>end</code>出栈后，如果栈不为空，说明存在父级函数，需要把父级函数的消耗时间减去当前函数的消耗时间</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exclusiveTime = <span class="function"><span class="keyword">function</span>(<span class="params">n, logs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tasks = []</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span>  logs)&#123;</span><br><span class="line">        <span class="keyword">let</span> [id,type,time ] = logs[i].split(<span class="string">':'</span>)</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="string">'start'</span>)&#123;</span><br><span class="line">            tasks.push(&#123;id,type,time&#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> cost = time - tasks.pop().time + <span class="number">1</span></span><br><span class="line">            res[id] += cost</span><br><span class="line">            <span class="keyword">const</span> last = tasks[tasks.length<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span>(last)&#123;</span><br><span class="line">                res[last.id] -= cost</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]682_棒球比赛/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D682_%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/baseball-game/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p>
<p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表<code>ops</code>，其中<code>ops[i]</code>是你需要记录的第<code>i</code>项操作，<code>ops</code>遵循下述规则：</p>
<ul>
<li>整数<code>x</code> 表示本回合新获得分数<code>x</code></li>
<li><code>+</code>表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li>
<li><code>D</code>表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>
<li><code>C</code>表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>
</ul>
<p>请你返回记录中所有得分的总和。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：ops &#x3D; [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]</span><br><span class="line">输出：30</span><br><span class="line">解释：</span><br><span class="line">&quot;5&quot; - 记录加 5 ，记录现在是 [5]</span><br><span class="line">&quot;2&quot; - 记录加 2 ，记录现在是 [5, 2]</span><br><span class="line">&quot;C&quot; - 使前一次得分的记录无效并将其移除，记录现在是 [5].</span><br><span class="line">&quot;D&quot; - 记录加 2 * 5 &#x3D; 10 ，记录现在是 [5, 10].</span><br><span class="line">&quot;+&quot; - 记录加 5 + 10 &#x3D; 15 ，记录现在是 [5, 10, 15].</span><br><span class="line">所有得分的总和 5 + 10 + 15 &#x3D; 30</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：ops &#x3D; [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]</span><br><span class="line">输出：27</span><br><span class="line">解释：</span><br><span class="line">&quot;5&quot; - 记录加 5 ，记录现在是 [5]</span><br><span class="line">&quot;-2&quot; - 记录加 -2 ，记录现在是 [5, -2]</span><br><span class="line">&quot;4&quot; - 记录加 4 ，记录现在是 [5, -2, 4]</span><br><span class="line">&quot;C&quot; - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]</span><br><span class="line">&quot;D&quot; - 记录加 2 * -2 &#x3D; -4 ，记录现在是 [5, -2, -4]</span><br><span class="line">&quot;9&quot; - 记录加 9 ，记录现在是 [5, -2, -4, 9]</span><br><span class="line">&quot;+&quot; - 记录加 -4 + 9 &#x3D; 5 ，记录现在是 [5, -2, -4, 9, 5]</span><br><span class="line">&quot;+&quot; - 记录加 9 + 5 &#x3D; 14 ，记录现在是 [5, -2, -4, 9, 5, 14]</span><br><span class="line">所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 &#x3D; 27</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： ops &#x3D; [&quot;1&quot;]</span><br><span class="line">输出： 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= ops.length &lt;= 1000</code></li>
<li><code>ops[i]</code>为<code>C</code>、<code>D</code>、<code>+</code>，或者一个表示整数的字符串。整数范围是<code>[-3 * 104, 3 * 104]</code></li>
<li>对于<code>+</code>操作，题目数据保证记录此操作时前面总是存在两个有效的分数</li>
<li>对于<code>C</code>和<code>D</code>操作，题目数据保证记录此操作时前面总是存在一个有效的分数</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>两次循环，第一次循环将所有的非数字字符串按照规则转换成数字</li>
<li>第二次循环将转化后的数字进行求和输出</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calPoints = <span class="function"><span class="keyword">function</span>(<span class="params">ops</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    ops.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="string">'C'</span>)&#123;</span><br><span class="line">            arr.splice(arr.length<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v==<span class="string">'D'</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> a = arr[arr.length<span class="number">-1</span>]*<span class="number">2</span></span><br><span class="line">            arr.push(a)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(v==<span class="string">'+'</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> a = arr[arr.length<span class="number">-1</span>]+arr[arr.length<span class="number">-2</span>]</span><br><span class="line">            arr.push(a)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr.push(<span class="built_in">parseInt</span>(v))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    arr.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]662_二叉树最大宽度/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D662_%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与<strong>满二叉树（full binary tree）</strong> 结构相同，但一些节点为空。</p>
<p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的<code>null</code>节点也计入长度）之间的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">           1</span><br><span class="line">         &#x2F;   \</span><br><span class="line">        3     2</span><br><span class="line">       &#x2F; \     \  </span><br><span class="line">      5   3     9 </span><br><span class="line"></span><br><span class="line">输出: 4</span><br><span class="line">解释: 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F;  </span><br><span class="line">        3    </span><br><span class="line">       &#x2F; \       </span><br><span class="line">      5   3     </span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line">解释: 最大值出现在树的第 3 层，宽度为 2 (5,3)。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        3   2 </span><br><span class="line">       &#x2F;        </span><br><span class="line">      5      </span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line">解释: 最大值出现在树的第 2 层，宽度为 2 (3,2)。</span><br></pre></td></tr></table></figure>

<p><strong>示例 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        3   2</span><br><span class="line">       &#x2F;     \  </span><br><span class="line">      5       9 </span><br><span class="line">     &#x2F;         \</span><br><span class="line">    6           7</span><br><span class="line">输出: 8</span><br><span class="line">解释: 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong>  答案在32位有符号整数的表示范围内。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>本题我们用前序遍历</li>
<li>我们给每一层的节点从左向右添加下标(下标从<code>1</code>开始)</li>
<li>我们不难发现 左叶为头结点下标<code>i</code>的<code>2*i-1</code> ,右叶为头结点下标<code>i</code>的<code>2*i</code> </li>
<li>我们用数组记录下每一层的下标组成的数组</li>
<li>取数组中每层下标数组中首尾差值最大的为最大宽度</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> widthOfBinaryTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">const</span> mod = <span class="number">10000000007</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setIndex</span>(<span class="params">node,deep,i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>(!arr[deep]) arr[deep] = []</span><br><span class="line">        arr[deep].push(i)</span><br><span class="line">        setIndex(node.left,deep+<span class="number">1</span>,(<span class="number">2</span>*i <span class="number">-1</span>)%mod)</span><br><span class="line">        setIndex(node.right,deep+<span class="number">1</span>,(<span class="number">2</span>*i)%mod)</span><br><span class="line">    &#125;</span><br><span class="line">    setIndex(root,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> max=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i].length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max,arr[i].pop()-arr[i][<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]703_数据流中的第 K 大元素/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D703_%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E7%AC%AC%20K%20%E5%A4%A7%E5%85%83%E7%B4%A0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。</p>
<p>请实现 <code>KthLargest</code> 类：</p>
<ul>
<li><code>KthLargest(int k, int[] nums)</code> 使用整数 <code>k</code> 和整数流 <code>nums</code> 初始化对象。</li>
<li><code>int add(int val)</code> 将 <code>val</code> 插入数据流 <code>nums</code> 后，返回当前数据流中第 <code>k</code> 大的元素。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;KthLargest&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;]</span><br><span class="line">[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]</span><br><span class="line">输出：</span><br><span class="line">[null, 4, 5, 5, 8, 8]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">KthLargest kthLargest &#x3D; new KthLargest(3, [4, 5, 8, 2]);</span><br><span class="line">kthLargest.add(3);   &#x2F;&#x2F; return 4</span><br><span class="line">kthLargest.add(5);   &#x2F;&#x2F; return 5</span><br><span class="line">kthLargest.add(10);  &#x2F;&#x2F; return 5</span><br><span class="line">kthLargest.add(9);   &#x2F;&#x2F; return 8</span><br><span class="line">kthLargest.add(4);   &#x2F;&#x2F; return 8</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= 104</code></li>
<li><code>0 &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>-104 &lt;= val &lt;= 104</code></li>
<li>最多调用 <code>add</code> 方法 <code>104</code> 次</li>
<li>题目数据保证，在查找第 <code>k</code> 大元素时，数组中至少有 <code>k</code> 个元素</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们记录每次要返回的第<code>k</code>大元素</li>
<li>先将<code>nums</code>进行排序，截取<code>k</code>个大元素</li>
<li>在<code>add</code>时先<code>push</code>操作</li>
<li>然后重新快排，返回第<code>k</code>项</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> KthLargest = <span class="function"><span class="keyword">function</span>(<span class="params">k, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.l = k</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a)</span><br><span class="line">    nums.length = k</span><br><span class="line">    <span class="keyword">this</span>.arr = nums</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">KthLargest.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr.push(val)</span><br><span class="line">    <span class="keyword">this</span>.arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a)</span><br><span class="line">    <span class="keyword">this</span>.arr.length = <span class="keyword">this</span>.l</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr[<span class="keyword">this</span>.l<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]844_比较含退格的字符串/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D844_%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/backspace-string-compare/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定<code>s</code>和<code>t</code>两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。<code>#</code>代表退格字符。</p>
<p>如果相等，返回<code>true</code>；否则，返回<code>false</code>。</p>
<p>注意：如果对空文本输入退格字符，文本继续为空。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;ab#c&quot;, t &#x3D; &quot;ad#c&quot;</span><br><span class="line">输出： true</span><br><span class="line">解释： S 和 T 都会变成 “ac”。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;ab##&quot;, t &#x3D; &quot;c#d#&quot;</span><br><span class="line">输出： true</span><br><span class="line">解释： s 和 t 都会变成 “”。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;a##c&quot;, t &#x3D; &quot;#a#c&quot;</span><br><span class="line">输出： true</span><br><span class="line">解释： s 和 t 都会变成 “c”。</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： s &#x3D; &quot;a#c&quot;, t &#x3D; &quot;b&quot;</span><br><span class="line">输出： false</span><br><span class="line">解释： s 会变成 “c”，但 t 仍然是 “b”。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 200</code></li>
<li><code>s</code> 和 <code>t</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们先将两个字符串进行退格处理</li>
<li>遍历字符串，如果遇到<code>#</code>则将新字符串末尾的去掉，否则将遍历项加到新字符串末尾</li>
<li>比较处理后的字符串</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> backspaceCompare = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    s = transform(s)</span><br><span class="line">    t = transform(t)</span><br><span class="line">    <span class="keyword">return</span> s==t</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transform = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newstr = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> str)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'#'</span>)&#123;</span><br><span class="line">           newstr = newstr.slice(<span class="number">0</span>,newstr.length<span class="number">-1</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newstr = newstr + str[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newstr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]692_前K个高频单词/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D692_%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%8D%95%E8%AF%8D/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/top-k-frequent-words/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给一非空的单词列表，返回前 <em>k</em> 个出现次数最多的单词。</p>
<p>返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [&quot;i&quot;, &quot;love&quot;, &quot;leetcode&quot;, &quot;i&quot;, &quot;love&quot;, &quot;coding&quot;], k &#x3D; 2</span><br><span class="line">输出: [&quot;i&quot;, &quot;love&quot;]</span><br><span class="line">解析: &quot;i&quot; 和 &quot;love&quot; 为出现次数最多的两个单词，均为2次。</span><br><span class="line">注意，按字母顺序 &quot;i&quot; 在 &quot;love&quot; 之前。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [&quot;the&quot;, &quot;day&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;the&quot;, &quot;the&quot;, &quot;the&quot;, &quot;sunny&quot;, &quot;is&quot;, &quot;is&quot;], k &#x3D; 4</span><br><span class="line">输出: [&quot;the&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;day&quot;]</span><br><span class="line">解析: &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; 和 &quot;day&quot; 是出现次数最多的四个单词，</span><br><span class="line">出现次数依次为 4, 3, 2 和 1 次。</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li>假定 <em>k</em> 总为有效值， 1 ≤ <em>k</em> ≤ 集合元素数。</li>
<li>输入的单词均由小写字母组成。</li>
</ol>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们先分别统计每个单词出现的次数</li>
<li>对单词出现的次数进行排序</li>
<li>输出前<code>k</code>个</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> topKFrequent = <span class="function"><span class="keyword">function</span>(<span class="params">words, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;</span><br><span class="line">    words.forEach(<span class="function"><span class="params">v</span>=&gt;</span>map[v]?map[v]++:map[v]=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(map).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>map[b]-map[a]||a.localeCompare(b))</span><br><span class="line">    <span class="keyword">return</span> keys.slice(<span class="number">0</span>,k)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]859_亲密字符串/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D859_%E4%BA%B2%E5%AF%86%E5%AD%97%E7%AC%A6%E4%B8%B2/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/buddy-strings/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个字符串<code>s</code>和<code>goal</code>，只要我们可以通过交换<code>s</code>中的两个字母得到与<code>goal</code>相等的结果，就返回<code>true</code>；否则返回<code>false</code>。</p>
<p>交换字母的定义是：取两个下标<code>i</code>和<code>j</code>（下标从<code>0</code>开始）且满足<code>i!=j</code>，接着交换<code>s[i]</code>和<code>s[j]</code>处的字符。</p>
<ul>
<li>例如，在<code>abcd</code>中交换下标<code>0</code>和下标<code>2</code>的元素可以生成<code>cbad</code>。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;ab&quot;, goal &#x3D; &quot;ba&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：你可以交换 s[0] &#x3D; &#39;a&#39; 和 s[1] &#x3D; &#39;b&#39; 生成 &quot;ba&quot;，此时 s 和 goal 相等。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;ab&quot;, goal &#x3D; &quot;ab&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：你只能交换 s[0] &#x3D; &#39;a&#39; 和 s[1] &#x3D; &#39;b&#39; 生成 &quot;ba&quot;，此时 s 和 goal 不相等。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;aa&quot;, goal &#x3D; &quot;aa&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：你可以交换 s[0] &#x3D; &#39;a&#39; 和 s[1] &#x3D; &#39;a&#39; 生成 &quot;aa&quot;，此时 s 和 goal 相等。</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;aaaaaaabc&quot;, goal &#x3D; &quot;aaaaaaacb&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= s.length, goal.length &lt;= 2 * 104</code></li>
<li><code>s</code>和<code>goal</code>由小写英文字母组成</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>如果<code>s</code>和<code>goal</code>长度不同或<code>s</code>的长度只有<code>1</code>，都为<code>false</code></li>
<li>如果<code>s===goal</code>，那么<code>s</code>中有重复元素才能满足题意</li>
<li>如果<code>s!=goal</code>，则<code>s</code>和<code>goal</code>只能有2个不同的元素，并且需要满足元素交换位置后相同</li>
</ul>
<blockquote>
<p>这亲密字符串一点也不亲密👀 哈哈~😆</p>
</blockquote>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buddyStrings = <span class="function"><span class="keyword">function</span>(<span class="params">s, goal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length!=goal.length||s.length==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(s==goal)&#123;</span><br><span class="line">        <span class="keyword">let</span> arr = s.split(<span class="string">''</span>)</span><br><span class="line">        arr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">        <span class="keyword">return</span> s.length!= arr.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=goal[i]) arr.push(i) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr.length!=<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> [a,b]= arr</span><br><span class="line">    <span class="keyword">return</span> s[a]==goal[b]&amp;&amp;s[b]==goal[a]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]779_第K个语法符号/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D779_%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/k-th-symbol-in-grammar/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在第一行我们写上一个 <code>0</code>。接下来的每一行，将前一行中的<code>0</code>替换为<code>01</code>，<code>1</code>替换为<code>10</code>。</p>
<p>给定行数 <code>N</code> 和序数 <code>K</code>，返回第 <code>N</code> 行中第 <code>K</code>个字符。（<code>K</code>从1开始）</p>
<p><strong>例子:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: N &#x3D; 1, K &#x3D; 1</span><br><span class="line">输出: 0</span><br><span class="line"></span><br><span class="line">输入: N &#x3D; 2, K &#x3D; 1</span><br><span class="line">输出: 0</span><br><span class="line"></span><br><span class="line">输入: N &#x3D; 2, K &#x3D; 2</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">输入: N &#x3D; 4, K &#x3D; 5</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">第一行: 0</span><br><span class="line">第二行: 01</span><br><span class="line">第三行: 0110</span><br><span class="line">第四行: 01101001</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li><code>N</code> 的范围 <code>[1, 30]</code>.</li>
<li><code>K</code> 的范围 <code>[1, 2^(N-1)]</code>.</li>
</ol>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们先找到规律</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行: 0</span><br><span class="line">第二行: 0|1</span><br><span class="line">第三行: 01|10</span><br><span class="line">第四行: 0110|1001</span><br><span class="line">第五行：01101001|10010110</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>每一行的前一半等于上一行,有一半为上一行的取反</p>
<ul>
<li>因此我们要找的<code>k</code>如果在第<code>N</code>行的前一半，那就返回上一行的第<code>k</code>个数字</li>
<li>如果<code>k</code>在第<code>N</code>行的后一半，其实就是找上一行的第<code>k - len/2</code>个数字取反</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kthGrammar = <span class="function"><span class="keyword">function</span>(<span class="params">n, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="built_in">Math</span>.pow(<span class="number">2</span>,n<span class="number">-1</span>)</span><br><span class="line">  <span class="keyword">if</span>(k&gt;len/<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> q = kthGrammar(n<span class="number">-1</span>,k - len/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> q==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  kthGrammar(n<span class="number">-1</span>,k)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>生活，一半是回忆，一半是继续，把所有的不快给昨天，把所有的希望给明天，把所有的努力给今天！</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]725_分隔链表/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D725_%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/split-linked-list-in-parts/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个头结点为 <code>head</code> 的单链表和一个整数 <code>k</code> ，请你设计一个算法将链表分隔为 <code>k</code> 个连续的部分。</p>
<p>每部分的长度应该尽可能的相等：任意两部分的长度差距不能超过 1 。这可能会导致有些部分为 null 。</p>
<p>这 <code>k</code> 个部分应该按照在链表中出现的顺序排列，并且排在前面的部分的长度应该大于或等于排在后面的长度。</p>
<p>返回一个由上述 <code>k</code> 部分组成的数组。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3], k &#x3D; 5</span><br><span class="line">输出：[[1],[2],[3],[],[]]</span><br><span class="line">解释：</span><br><span class="line">第一个元素 output[0] 为 output[0].val &#x3D; 1 ，output[0].next &#x3D; null 。</span><br><span class="line">最后一个元素 output[4] 为 null ，但它作为 ListNode 的字符串表示是 [] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,2,3,4,5,6,7,8,9,10], k &#x3D; 3</span><br><span class="line">输出： [[1,2,3,4],[5,6,7],[8,9,10]]</span><br><span class="line">解释：</span><br><span class="line">输入被分成了几个连续的部分，并且每部分的长度相差不超过 1 。前面部分的长度大于等于后面部分的长度。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 1000]</code></li>
<li><code>0 &lt;= Node.val &lt;= 1000</code></li>
<li><code>1 &lt;= k &lt;= 50</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li><p>我们需要先拿到链表的长度</p>
</li>
<li><p>根据链表的长度和传入的<code>k</code>我们确定分割后每个链表的长度，以及有几个链表长度需要多<code>1</code></p>
</li>
<li><p>创建一个长度为<code>k</code>的数组</p>
</li>
<li><p>遍历数组，对数组的每一项进行填充操作，具体操作如下：</p>
<ul>
<li>令数组当前所在项为当前的节点</li>
<li>判断此分割的节点长度是否需要<code>+1</code></li>
<li>遍历到当前分割链表的最大长度后断开链表链接完成分割</li>
</ul>
</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> splitListToParts = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> cur = head</span><br><span class="line">  <span class="keyword">while</span> (cur)&#123;</span><br><span class="line">    cur = cur.next</span><br><span class="line">    len++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> space = <span class="built_in">Math</span>.floor(len/k)</span><br><span class="line">  <span class="keyword">let</span> more = len%k</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(k).fill(<span class="literal">null</span>)</span><br><span class="line">  cur = head</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;k&amp;&amp;cur;i++)&#123;</span><br><span class="line">    arr[i] = cur</span><br><span class="line">    <span class="keyword">let</span> l = space + (i&lt;more?<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;l;j++)&#123;</span><br><span class="line">      cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> temp = cur.next</span><br><span class="line">    cur.next =<span class="literal">null</span></span><br><span class="line">    cur = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]933_最近的请求次数/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D933_%E6%9C%80%E8%BF%91%E7%9A%84%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/number-of-recent-calls/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>写一个<code>RecentCounter</code>类来计算特定时间范围内最近的请求。</p>
<p>请你实现<code>RecentCounter</code>类：</p>
<ul>
<li><p><code>RecentCounter()</code>初始化计数器，请求数为<code>0</code>。</p>
</li>
<li><p><code>int ping(int t)</code>在时间<code>t</code>添加一个新请求，其中<code>t</code>表示以毫秒为单位的某个时间，并返回过去<code>3000</code>毫秒内发生的所有请求数（包括新请求）。确切地说，返回在<code>[t-3000, t]</code>内发生的请求数。</p>
</li>
</ul>
<p>保证每次对<code>ping</code>的调用都使用比之前更大的<code>t</code>值。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]</span><br><span class="line">[[], [1], [100], [3001], [3002]]</span><br><span class="line">输出：</span><br><span class="line">[null, 1, 2, 3, 3]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">RecentCounter recentCounter &#x3D; new RecentCounter();</span><br><span class="line">recentCounter.ping(1);     &#x2F;&#x2F; requests &#x3D; [1]，范围是 [-2999,1]，返回 1</span><br><span class="line">recentCounter.ping(100);   &#x2F;&#x2F; requests &#x3D; [1, 100]，范围是 [-2900,100]，返回 2</span><br><span class="line">recentCounter.ping(3001);  &#x2F;&#x2F; requests &#x3D; [1, 100, 3001]，范围是 [1,3001]，返回 3</span><br><span class="line">recentCounter.ping(3002);  &#x2F;&#x2F; requests &#x3D; [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= t &lt;= 109</code></li>
<li>保证每次对 <code>ping</code> 调用所使用的 <code>t</code> 值都 <strong>严格递增</strong></li>
<li>至多调用 <code>ping</code> 方法 <code>104</code> 次</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们用数组来存储每次<code>ping</code>的值</li>
<li>从从题目中我们不难得出是一个升序的数组</li>
<li>计算数组中在<code>[t-3000, t]</code>之间元素的个数</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> RecentCounter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">t</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">RecentCounter.prototype.ping = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr.push(t)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> [low,high] = [t<span class="number">-3000</span>,t]</span><br><span class="line">    <span class="keyword">this</span>.arr.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v&gt;=low&amp;&amp;v&lt;=high)&#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]946_验证栈序列/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D946_%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/validate-stack-sequences/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定<code>pushed</code>和<code>popped</code>两个序列，每个序列中的值都不重复，只有当它们可能是在最初空栈上进行的推入<code>push</code>和弹出<code>pop</code>操作序列的结果时，返回<code>true</code>；否则，返回<code>false</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]</span><br><span class="line">输出：true</span><br><span class="line">解释：我们可以按以下顺序执行：</span><br><span class="line">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class="line">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,3,5,1,2]</span><br><span class="line">输出： false</span><br><span class="line">解释： 1 不能在 2 之前弹出。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= pushed.length &lt;= 1000</code></li>
<li><code>0 &lt;= pushed[i] &lt;= 1000</code></li>
<li><code>pushed</code>的所有元素 互不相同</li>
<li><code>popped.length == pushed.length</code></li>
<li><code>popped</code>是<code>pushed</code>的一个排列</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>首先我们需要理解<strong>栈</strong>的特点：<strong>先进后出，后进先出</strong></li>
<li>遍历<code>pushed</code>数组，将遍历的项插入到新数组中</li>
<li>定义一个指针用于记录与<code>popped</code>比较到了什么位置</li>
<li>如果遍历过程中有遍历的项与<code>popped</code>的上述指针所在项相同，移除新数组尾项</li>
<li>将新数组从后往前与<code>popped</code>从指针所在位置往后进行比较</li>
<li>直到两个数组出现不同的项再去重复上面两步</li>
<li>如果新数组正好长度为<code>0</code>则说明满足题意</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> validateStackSequences = <span class="function"><span class="keyword">function</span>(<span class="params">pushed, popped</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">let</span> popindex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;pushed.length;i++)&#123;</span><br><span class="line">        arr.push(pushed[i])</span><br><span class="line">        <span class="keyword">while</span>(popindex&lt;popped.length&amp;&amp;arr[arr.length<span class="number">-1</span>]==popped[popindex])&#123;</span><br><span class="line">            arr.pop()</span><br><span class="line">            popindex++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.length==<span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]707_设计链表/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D707_%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/design-linked-list/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p>
<p>在链表类中实现这些功能：</p>
<ul>
<li>get(index)：获取链表中第 <code>index</code> 个节点的值。如果索引无效，则返回<code>-1</code>。</li>
<li>addAtHead(val)：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。</li>
<li>addAtTail(val)：将值为 <code>val</code> 的节点追加到链表的最后一个元素。</li>
<li>addAtIndex(index,val)：在链表中的第 <code>index</code> 个节点之前添加值为 <code>val</code> 的节点。如果 <code>index</code> 等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。</li>
<li>deleteAtIndex(index)：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyLinkedList linkedList &#x3D; new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2);   &#x2F;&#x2F;链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1);            &#x2F;&#x2F;返回2</span><br><span class="line">linkedList.deleteAtIndex(1);  &#x2F;&#x2F;现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1);            &#x2F;&#x2F;返回3</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>所有<code>val</code>值都在 <code>[1, 1000]</code> 之内。</li>
<li>操作次数将在 <code>[1, 1000]</code> 之内。</li>
<li>请不要使用内置的 LinkedList 库。</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们定义一个头节点<code>head</code>,以及用来存储链表长度的<code>length</code></li>
<li><code>get</code>方法中我们先对传入的<code>index</code>先进行处理如果在<code>0-length</code>之间则处理否则返回<code>-1</code>,遍历链表当到第<code>index</code>个时返回对应节点的<code>val</code></li>
<li>至于<code>addAtHead</code>和<code>addAtTail</code>我们可以统一放到<code>addAtIndex</code>中来处理</li>
<li><code>addAtIndex</code>函数中我们同样的需要先按题目要求对<code>index</code>处理，<code>index&lt;0</code>时让其等于<code>0</code></li>
<li>然后判断链表有无节点，没有节点的话将传入的作为头结点否则就遍历链表到index的前一位置执行插入操作</li>
<li>删除其实也是类似的操作，找到<code>index</code>所在节点的前置节点，将其<code>next</code>指向<code>index</code>后置节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyLinkedList = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> NodeList = <span class="function"><span class="keyword">function</span> (<span class="params">val,next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = val</span><br><span class="line">    <span class="keyword">this</span>.next = next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">if</span>(index&gt;=<span class="number">0</span>&amp;&amp;index&lt;<span class="keyword">this</span>.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">this</span>.head.val</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur  &amp;&amp; i &lt; index) &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.addAtHead = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.addAtTail = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.addAtIndex(<span class="keyword">this</span>.length, val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.addAtIndex = <span class="function"><span class="keyword">function</span>(<span class="params">index, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">if</span>(index&gt;<span class="keyword">this</span>.length) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(index&lt;=<span class="number">0</span>||<span class="keyword">this</span>.size==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">new</span> NodeList(val)</span><br><span class="line">       <span class="keyword">this</span>.head.next = cur</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (index-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            cur = cur.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> addNode = <span class="keyword">new</span> NodeList(val)</span><br><span class="line">        addNode.next = cur.next</span><br><span class="line">        cur.next = addNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length++</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.deleteAtIndex = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.head) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(index&gt;=<span class="number">0</span>&amp;&amp;index&lt;<span class="keyword">this</span>.length)&#123;</span><br><span class="line">        <span class="keyword">let</span> cur = <span class="keyword">this</span>.head</span><br><span class="line">       <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">this</span>.head = cur.next</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">let</span> pre =<span class="literal">null</span></span><br><span class="line">           <span class="keyword">let</span> i=<span class="number">0</span></span><br><span class="line">           <span class="keyword">while</span> (i&lt;index &amp;&amp; cur)&#123;</span><br><span class="line">               pre = cur</span><br><span class="line">               cur = cur.next</span><br><span class="line">               i++</span><br><span class="line">           &#125;</span><br><span class="line">           pre.next = cur.next</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">this</span>.length--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]968_监控二叉树/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D968_%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-cameras/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，我们在树的节点上安装摄像头。</p>
<p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p>
<p>计算监控树的所有节点所需的最小摄像头数量。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： [0,0,null,0,0]</span><br><span class="line">输出： 1</span><br><span class="line">解释： 如图所示，一台摄像头足以监控所有节点。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： [0,0,null,0,null,0,null,null,0]</span><br><span class="line">输出： 2</span><br><span class="line">解释： 需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ol>
<li>给定树的节点数的范围是 <code>[1, 1000]</code>。</li>
<li>每个节点的值都是 0。</li>
</ol>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们想要摄像头最少，那么就需要尽量往父节点装(装在父节点可以监视到两个子节点)</li>
<li>我们用<code>0</code>来表示没覆盖到的， <code>1</code>表示覆盖到的， <code>2</code>表示安装摄像头的位置</li>
<li>我们使用后续遍历</li>
<li>对父节点进行判断，如果节点安装了摄像头，首先数量<code>+1</code>,如果该节点的父节点存在且没被覆盖，则将其标为覆盖</li>
<li>如果该节点没被覆盖，我们先判断他有没有父节点，有的话将其父节点设为摄像头位，并将该节点标记为覆盖到</li>
<li>该节点为头结点，将其标记为摄像头位并数量<code>+1</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minCameraCover = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">preorder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left)&#123;</span><br><span class="line">            node.left.parent = node</span><br><span class="line">            preorder(node.left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right)&#123;</span><br><span class="line">            node.right.parent = node</span><br><span class="line">            preorder(node.right)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val==<span class="number">2</span>)&#123;</span><br><span class="line">            n++</span><br><span class="line">            <span class="keyword">if</span>(node.parent&amp;&amp;!node.parent.val) node.parent.val=<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.val==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.parent) node.parent.val = <span class="number">2</span>,node.val = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> node.val = <span class="number">2</span>,n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    preorder(root)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>时间不会停下来等你，我们现在过的每一天，都是余生中最年轻的一天。</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]860_柠檬水找零/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D860_%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/lemonade-change/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在柠檬水摊上，每一杯柠檬水的售价为<code>5</code>美元。顾客排队购买你的产品，（按账单<code>bills</code>支付的顺序）一次购买一杯。</p>
<p>每位顾客只买一杯柠檬水，然后向你付<code>5</code>美元、<code>10</code>美元或<code>20</code>美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付<code>5</code>美元。</p>
<p>注意，一开始你手头没有任何零钱。</p>
<p>给你一个整数数组<code>bills</code>，其中<code>bills[i]</code>是第<code>i</code>位顾客付的账。如果你能给每位顾客正确找零，返回<code>true</code>，否则返回<code>false</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：bills &#x3D; [5,5,5,10,20]</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。</span><br><span class="line">第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。</span><br><span class="line">第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。</span><br><span class="line">由于所有客户都得到了正确的找零，所以我们输出 true。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：bills &#x3D; [5,5,10,10,20]</span><br><span class="line">输出：false</span><br><span class="line">解释：</span><br><span class="line">前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。</span><br><span class="line">对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。</span><br><span class="line">对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。</span><br><span class="line">由于不是每位顾客都得到了正确的找零，所以答案是 false。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： bills &#x3D; [5,5,10]</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： bills &#x3D; [10,10]</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= bills.length &lt;= 105</code></li>
<li><code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code></li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote>
<p>没零钱还摆什么摊嘛🙄，支付宝微信支付了解一下?</p>
</blockquote>
<ul>
<li>当收到<code>10</code>时，必须有<code>5</code>，不然为<code>false</code></li>
<li>当收到<code>20</code>时，最起码要有<code>1</code>张<code>10</code>和<code>1</code>张<code>5</code>，或<code>3</code>张<code>5</code>，不然为<code>false</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lemonadeChange = <span class="function"><span class="keyword">function</span>(<span class="params">bills</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n5 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> n10 = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;bills.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> bill = bills[i]</span><br><span class="line">        <span class="keyword">if</span>(bill==<span class="number">5</span>)&#123;</span><br><span class="line">            n5++</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bill==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                n5--</span><br><span class="line">                n10++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n10&gt;<span class="number">0</span>&amp;&amp;n5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                n10--</span><br><span class="line">                n5--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n5&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">                n5 = n5<span class="number">-3</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]969_煎饼排序/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D969_%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/pancake-sorting/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组<code>arr</code>，请使用 煎饼翻转 完成对数组的排序。</p>
<p>一次煎饼翻转的执行过程如下：</p>
<ul>
<li>选择一个整数<code>k</code>，<code>1 &lt;= k &lt;= arr.length</code></li>
<li>反转子数组<code>arr[0...k-1]</code>（下标从<code>0</code>开始）</li>
</ul>
<p>例如，<code>arr = [3,2,1,4]</code>，选择<code>k = 3</code>进行一次煎饼翻转，反转子数组<code>[3,2,1]</code>，得到<code>arr = [1,2,3,4]</code>。</p>
<p>以数组形式返回能使<code>arr</code>有序的煎饼翻转操作所对应的<code>k</code>值序列。任何将数组排序且翻转次数在<code>10 * arr.length</code>范围内的有效答案都将被判断为正确。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[3,2,4,1]</span><br><span class="line">输出：[4,2,4,3]</span><br><span class="line">解释：</span><br><span class="line">我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。</span><br><span class="line">初始状态 arr &#x3D; [3, 2, 4, 1]</span><br><span class="line">第一次翻转后（k &#x3D; 4）：arr &#x3D; [1, 4, 2, 3]</span><br><span class="line">第二次翻转后（k &#x3D; 2）：arr &#x3D; [4, 1, 2, 3]</span><br><span class="line">第三次翻转后（k &#x3D; 4）：arr &#x3D; [3, 2, 1, 4]</span><br><span class="line">第四次翻转后（k &#x3D; 3）：arr &#x3D; [1, 2, 3, 4]，此时已完成排序。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： [1,2,3]</span><br><span class="line">输出： []</span><br><span class="line">解释： 输入已经排序，因此不需要翻转任何内容。</span><br><span class="line">请注意，其他可能的答案，如 [3，3] ，也将被判断为正确。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 100</code></li>
<li><code>1 &lt;= arr[i] &lt;= arr.length</code></li>
<li><code>arr</code> 中的所有整数互不相同（即，<code>arr</code> 是从 <code>1</code> 到 <code>arr.length</code> 整数的一个排列）</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>先找到最大数的索引<code>i</code>，进行翻转，将最大的数放置到数组首部，并记下第一次翻转的<code>k = i + 1</code></li>
<li>进行整体数组的翻转，将最大的数放置到数组的尾部，并记下此时的<code>k</code>等于数组长度<code>len</code></li>
<li>因为最大的数已经完成了翻转，我们下次翻转时不需要考虑尾部</li>
<li>将排除后的部分重复上面操作便可完成题解</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pancakeSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.length</span><br><span class="line">    <span class="keyword">if</span>(!len||len ==<span class="number">1</span>) <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">let</span> list = []</span><br><span class="line">    <span class="keyword">let</span> max = findMaxIndex(arr,len)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max&lt;len)&#123;</span><br><span class="line">                list.push(max+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,j=max;i&lt;=max;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                    [ arr[i],arr[j]] =[arr[j],arr[i]]</span><br><span class="line">                    &#125;</span><br><span class="line">                    j--</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,j=len<span class="number">-1</span>;i&lt;len;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                    [ arr[i],arr[j]] =[arr[j],arr[i]]</span><br><span class="line">                    &#125;</span><br><span class="line">                    j--</span><br><span class="line">                &#125;</span><br><span class="line">                list.push(len)</span><br><span class="line">            &#125;</span><br><span class="line">            len--</span><br><span class="line">            max = findMaxIndex(arr,len)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findMaxIndex = <span class="function"><span class="keyword">function</span>(<span class="params">arr,len</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;arr[max])&#123;</span><br><span class="line">            max = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]973_最接近原点的 K 个点/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D973_%E6%9C%80%E6%8E%A5%E8%BF%91%E5%8E%9F%E7%82%B9%E7%9A%84%20K%20%E4%B8%AA%E7%82%B9/index/</url>
    <content><![CDATA[<p>「这是我参与2022首次更文挑战的第4天，活动详情查看：<a href="https://juejin.cn/post/7052884569032392740" target="_blank" rel="noopener" title="https://juejin.cn/post/7052884569032392740">2022首次更文挑战</a>」</p>
<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/k-closest-points-to-origin/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>我们有一个由平面上的点组成的列表 <code>points</code>。需要从中找出 <code>K</code> 个距离原点 <code>(0, 0)</code> 最近的点。</p>
<p>（这里，平面上两点之间的距离是欧几里德距离。）</p>
<p>你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： points &#x3D; [[1,3],[-2,2]], K &#x3D; 1</span><br><span class="line">输出： [[-2,2]]</span><br><span class="line">解释：</span><br><span class="line">(1, 3) 和原点之间的距离为 sqrt(10)，</span><br><span class="line">(-2, 2) 和原点之间的距离为 sqrt(8)，</span><br><span class="line">由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。</span><br><span class="line">我们只需要距离原点最近的 K &#x3D; 1 个点，所以答案就是 [[-2,2]]。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： points &#x3D; [[3,3],[5,-1],[-2,4]], K &#x3D; 2</span><br><span class="line">输出： [[3,3],[-2,4]]</span><br><span class="line">（答案 [[-2,4],[3,3]] 也会被接受。）</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ol>
<li><code>1 &lt;= K &lt;= points.length &lt;= 10000</code></li>
<li><code>-10000 &lt; points[i][0] &lt; 10000</code></li>
<li><code>-10000 &lt; points[i][1] &lt; 10000</code></li>
</ol>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>话不多说，老规矩，先暴力解安排上。</p>
<ul>
<li>算距离为横坐标的平方+ 纵坐标的平方的和开根号</li>
<li>因为我们要求的是最近的点，所以开根号的步骤可以省略掉</li>
<li>用<code>map</code>来存点以及’距离’</li>
<li>将<code>map</code>转成数组，并按升序排列</li>
<li>截取数组的前<code>k</code>个就是要找的点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kClosest = <span class="function"><span class="keyword">function</span>(<span class="params">points, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map  = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> points)&#123;</span><br><span class="line">      map.set(i,<span class="built_in">Math</span>.pow(i[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">Math</span>.pow(i[<span class="number">1</span>],<span class="number">2</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr = [...map]</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a[<span class="number">1</span>]-b[<span class="number">1</span>]).slice(<span class="number">0</span>,k).map(<span class="function"><span class="params">v</span>=&gt;</span>v[<span class="number">0</span>])</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="大根堆"><a href="#大根堆" class="headerlink" title="大根堆"></a>大根堆</h2><p><strong>大顶堆</strong>：每个结点的值都大于或等于其左右子结点的值。</p>
<p>如果是排序，<strong>求升序</strong>用大顶堆，<strong>求降序</strong>用小顶堆。</p>
<p>本题要求的是最接近的也就是最小的<code>k</code>个，符合大顶堆。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kClosest = <span class="function"><span class="keyword">function</span>(<span class="params">points, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> map  = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> points)&#123;</span><br><span class="line">       map.set(i,<span class="built_in">Math</span>.pow(i[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">Math</span>.pow(i[<span class="number">1</span>],<span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.size&lt;=k) <span class="keyword">return</span> [...map.keys()]</span><br><span class="line">    <span class="keyword">const</span> maxQueue = <span class="keyword">new</span> MaxPriorityQueue(&#123; <span class="attr">priority</span>: <span class="function">(<span class="params">bid</span>) =&gt;</span> bid.value &#125;)</span><br><span class="line">    map.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(maxQueue.size()&lt;k)&#123;</span><br><span class="line">            maxQueue.enqueue(key,value)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxQueue.front().priority&gt;value)&#123;</span><br><span class="line">                maxQueue.dequeue()</span><br><span class="line">                maxQueue.enqueue(key,value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> maxQueue.toArray().map(<span class="function"><span class="params">v</span>=&gt;</span> v.element)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 10- I_ 斐波那契数列/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2010-%20I_%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项（即 <code>F(N)</code>）。斐波那契数列的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F(0) &#x3D; 0,   F(1) &#x3D; 1</span><br><span class="line">F(N) &#x3D; F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br></pre></td></tr></table></figure>

<p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： n &#x3D; 2</span><br><span class="line">输出： 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： n &#x3D; 5</span><br><span class="line">输出： 5</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 100</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>本题的重点在于进行<code>n-1</code>次<code>F(N) = F(N - 1) + F(N - 2)</code>操作</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><p><strong>方便理解版</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (n&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">      sum = (a + b)%<span class="number">1000000007</span></span><br><span class="line">      a =b</span><br><span class="line">      b = sum</span><br><span class="line">      n--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  a</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>尾递归版</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fibFun(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibFun = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">return</span> a</span><br><span class="line">  <span class="keyword">return</span> fibFun(b,(a+b)%<span class="number">1000000007</span>,n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 18_ 删除链表的节点/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2018_%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p>
<p>返回删除后的链表的头节点。</p>
<p><strong>注意：</strong> 此题对比原题有改动</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: head &#x3D; [4,5,1,9], val &#x3D; 5</span><br><span class="line">输出: [4,1,9]</span><br><span class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: head &#x3D; [4,5,1,9], val &#x3D; 1</span><br><span class="line">输出: [4,5,9]</span><br><span class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li>题目保证链表中节点的值互不相同</li>
<li>若使用 C 或 C++ 语言，你不需要 <code>free</code> 或 <code>delete</code> 被删除的节点</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>删除结点的关键在于找到这个节点让它的上个结点直接指向下个结点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">head, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">if</span>(head.val ==val)&#123;</span><br><span class="line">        head = head.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> fast = head.next</span><br><span class="line">    <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fast.val==val)&#123;</span><br><span class="line">            slow.next = fast.next</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line">        fast=fast.next</span><br><span class="line">        slow=slow.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 22_ 链表中倒数第k个节点/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2022_%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>
<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code>的节点。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure>


<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>此题与<a href="https://juejin.cn/post/7043782360219222047" target="_blank" rel="noopener">面试题 02.02. 返回倒数第 k 个节点</a> 类似</li>
<li>本题我们用双指针</li>
<li>定义一个快指针比慢指针快<code>k</code>个节点</li>
<li>当快指针到达尾结点时，慢指针所在节点为我们剩余链表的头结点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getKthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> fast =head</span><br><span class="line">    <span class="keyword">while</span>(k<span class="number">-1</span>)&#123;</span><br><span class="line">        fast = fast.next</span><br><span class="line">        k--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(fast.next)&#123;</span><br><span class="line">        fast=fast.next</span><br><span class="line">        slow = slow.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 40_ 最小的k个数/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2040_%20%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： arr &#x3D; [3,2,1], k &#x3D; 2</span><br><span class="line">输出： [1,2] 或者 [2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： arr &#x3D; [0,1,2,1], k &#x3D; 1</span><br><span class="line">输出： [0]</span><br></pre></td></tr></table></figure>

<p><strong>限制：</strong></p>
<ul>
<li><code>0 &lt;= k &lt;= arr.length &lt;= 10000</code></li>
<li><code>0 &lt;= arr[i] &lt;= 10000</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>拿到手一看 这不送分题么</li>
<li>看我<code>sort</code>快排解君愁</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getLeastNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">arr, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b).slice(<span class="number">0</span>, k);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 35_ 复杂链表的复制/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2035_%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/index/</url>
    <content><![CDATA[<p>这世上没有人能随随便便成功，世界总是在偷偷奖励自律的人</p>
<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [[1,1],[2,1]]</span><br><span class="line">输出： [[1,1],[2,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="3.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [[3,null],[3,0],[3,null]]</span><br><span class="line">输出： [[3,null],[3,0],[3,null]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; []</span><br><span class="line">输出： []</span><br><span class="line">解释： 给定的链表为空（空指针），因此返回 null。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<ul>
<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>
<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>
<li>节点数目不超过 1000 。</li>
</ul>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题与 <a href="https://juejin.cn/post/7040823587497836574" target="_blank" rel="noopener">138_复制带随机指针的链表</a> 相仿</p>
<blockquote>
<p>提示：</p>
<ul>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>
<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>
</ul>
</blockquote>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> copyRandomList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">   <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">   <span class="keyword">let</span> pre = head</span><br><span class="line">   <span class="keyword">while</span>(pre)&#123;</span><br><span class="line">       map.set(pre,<span class="keyword">new</span> Node(pre.val))</span><br><span class="line">       pre = pre.next</span><br><span class="line">   &#125;</span><br><span class="line">    pre = head</span><br><span class="line">   <span class="keyword">while</span>(head)&#123;</span><br><span class="line">       map.get(head).next = map.get(head.next)?map.get(head.next):<span class="literal">null</span></span><br><span class="line">       map.get(head).random = map.get(head.random)</span><br><span class="line">       head=head.next</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> map.get(pre)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 54_ 二叉搜索树的第k大节点/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2054_%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一棵二叉搜索树，请找出其中第 <code>k</code> 大的节点的值。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3</span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">     3   6</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   4</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<p><strong>限制：</strong></p>
<ul>
<li>1 ≤ k ≤ 二叉搜索树元素个数</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>做题之前，我们需要对<strong>二叉搜索子树</strong>有一个简单的认知：</p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>
<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>它的左、右子树也分别为二叉排序树</li>
</ul>
<p>因此我们只需要先进行中序遍历，就可以获得一个升序的数组，然后将倒数第<code>k</code>项输出即可</p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kthLargest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> list = nSort(root)</span><br><span class="line">  <span class="keyword">return</span> list[list.length-k]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">var</span> nSort = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line">  nSort(root.left)</span><br><span class="line">  arr.push(root.val)</span><br><span class="line">  nSort(root.right)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当前后左右都没有路时，命运一定是鼓励你向上飞了</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指Offer 26_ 树的子结构/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87Offer%2026_%20%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>
<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>
<p>例如:</p>
<p>给定的树 A:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">&#x2F; \</span><br><span class="line">4 5</span><br><span class="line">&#x2F; \</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure>
<p>给定的树 B：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">&#x2F;</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： A &#x3D; [1,2,3], B &#x3D; [3,1]</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： A &#x3D; [3,4,5,1,2], B &#x3D; [4,1]</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>

<p><strong>限制：</strong></p>
<ul>
<li><code>0 &lt;= 节点个数 &lt;= 10000</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>因为我们约定空树不是任意一个树的子结构，所以如果<code>A/B</code>不存在,直接返回<code>false</code></li>
<li>假设 <code>B</code> 的根节点与 <code>A</code> 相同，递归判断是否 <code>B</code> 的左右子树都在 <code>A</code> 中</li>
<li>否则递归判断 <code>A</code> 中是否有节点与 <code>B</code> 根节点相同，有的话执行上一步，否则输出<code>false</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isSubStructure = <span class="function"><span class="keyword">function</span>(<span class="params">A, B</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!A||!B) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span>(isPart(A,B)) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> isSubStructure(A.left,B)||isSubStructure(A.right,B)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isPart = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span>(!a||a.val!==b.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> isPart(a.left,b.left) &amp;&amp; isPart(a.right,b.right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]面试题 02_02_ 返回倒数第 k 个节点/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E9%9D%A2%E8%AF%95%E9%A2%98%2002_02_%20%E8%BF%94%E5%9B%9E%E5%80%92%E6%95%B0%E7%AC%AC%20k%20%E4%B8%AA%E8%8A%82%E7%82%B9/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/kth-node-from-end-of-list-lcci/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。</p>
<p><strong>注意：</strong> 本题相对原题稍作改动</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 1-&gt;2-&gt;3-&gt;4-&gt;5 和 k &#x3D; 2</span><br><span class="line">输出： 4</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<p>给定的 <em>k</em> 保证是有效的。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>此题与 <a href="https://juejin.cn/post/7043784099915366407/" target="_blank" rel="noopener">剑指 Offer 22. 链表中倒数第k个节点</a> 类似</p>
<ul>
<li>本题我们用双指针</li>
<li>定义一个快指针比慢指针快<code>k</code>个节点</li>
<li>当快指针到达尾结点时，慢指针所在节点为我们要找的节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kthToLast = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> fast =head</span><br><span class="line">    <span class="keyword">while</span>(k<span class="number">-1</span>)&#123;</span><br><span class="line">        fast = fast.next</span><br><span class="line">        k--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(fast.next)&#123;</span><br><span class="line">        fast=fast.next</span><br><span class="line">        slow = slow.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow.val</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]面试题 02_03_ 删除中间节点/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E9%9D%A2%E8%AF%95%E9%A2%98%2002_03_%20%E5%88%A0%E9%99%A4%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/delete-middle-node-lcci/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>若链表中的某个节点，既不是链表头节点，也不是链表尾节点，则称其为该链表的「中间节点」。</p>
<p>假定已知链表的某一个中间节点，请实现一种算法，将该节点从链表中删除。</p>
<p>例如，传入节点 <code>c</code>（位于单向链表 <code>a-&gt;b-&gt;c-&gt;d-&gt;e-&gt;f</code> 中），将其删除后，剩余链表为 <code>a-&gt;b-&gt;d-&gt;e-&gt;f</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 节点 5 （位于单向链表 4-&gt;5-&gt;1-&gt;9 中）</span><br><span class="line">输出： 不返回任何数据，从链表中删除传入的节点 5，使链表变为 4-&gt;1-&gt;9</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们直接改写这个节点 让他成为他自己的下个节点</li>
<li>让次节点的<code>val</code>等于下个节点的 <code>val</code></li>
<li>让次节点的<code>next</code>等于下个节点的 <code>next</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    node.val = node.next.val</span><br><span class="line">    node.next = node.next.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 32 - II_ 从上到下打印二叉树 II/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2032%20-%20II_%20%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91%20II/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p>
<p>例如:</p>
<p>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回其层次遍历结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ol>
<li><code>节点总数 &lt;= 1000</code></li>
</ol>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>这题其实与 <a href="https://juejin.cn/post/7047510915922526245" target="_blank" rel="noopener">662_二叉树最大宽度</a> 用类似的思路，可以对比观看</li>
<li>我们采用前序遍历</li>
<li>在二叉树的每一层构建一个数组</li>
<li>利用前序遍历的特点依次将节点<code>push</code>到这一层的数组中</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pmap</span>(<span class="params">node,i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>(!arr[i]) arr[i] = []</span><br><span class="line">        arr[i].push(node.val)</span><br><span class="line">        <span class="keyword">if</span>(node.left) pmap(node.left,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(node.right) pmap(node.right,i+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    pmap(root,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当你快乐时，你要想，这快乐不是永恒的；当你痛苦时，你要想，这痛苦也不是永恒的。</p>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]面试题 04_05_ 合法二叉搜索树/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E9%9D%A2%E8%AF%95%E9%A2%98%2004_05_%20%E5%90%88%E6%B3%95%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/legal-binary-search-tree-lcci/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个函数，检查一棵二叉树是否为二叉搜索树。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class="line">根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先我们先回顾一下<strong>二叉搜索树</strong></p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>
<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>它的左、右子树也分别为二叉排序树</li>
</ul>
<p>因此我们可以采用中序遍历，</p>
<ul>
<li>中序遍历可以获得 <code>左-&gt;根-&gt;右</code></li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="built_in">Number</span>.MIN_SAFE_INTEGER</span><br><span class="line">    <span class="keyword">const</span> mmap = <span class="function">(<span class="params">node</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">let</span> l = mmap(node.left)</span><br><span class="line">        <span class="keyword">if</span>(prev&gt;=node.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        prev = node.val</span><br><span class="line">        <span class="keyword">let</span> r = mmap(node.right)</span><br><span class="line">        <span class="keyword">return</span> l&amp;&amp;r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mmap(root)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]面试题 02_08_ 环路检测/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E9%9D%A2%E8%AF%95%E9%A2%98%2002_08_%20%E7%8E%AF%E8%B7%AF%E6%A3%80%E6%B5%8B/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle-lcci/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，如果它是有环链表，实现一个算法返回环路的<code>开头节点</code>。若环不存在，请返回 <code>null</code>。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出：tail connects to node index 1</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="2.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出：tail connects to node index 0</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="3.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出： no cycle</span><br><span class="line">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>


<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题可与 <a href="https://juejin.cn/post/7039700676150198308" target="_blank" rel="noopener">142_环形链表II</a> 对比观看</p>
<ul>
<li>我们可以定义两个指针一个快指针一个慢指针 快指针每次走2个节点 慢指针每次走一个节点</li>
<li>当快慢指针相遇时，第三个指针从head出发 每次一个节点</li>
<li>当第三个指针与慢指针相遇时，所在节点为题目要求的节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> fast = head</span><br><span class="line">    <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">        slow = slow.next</span><br><span class="line">        <span class="keyword">if</span>(!fast.next) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">            <span class="keyword">let</span> zz = head</span><br><span class="line">            <span class="keyword">while</span>(zz!=slow)&#123;</span><br><span class="line">                slow = slow.next</span><br><span class="line">                zz = zz.next</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> zz</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]面试题 17_20_ 连续中值/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E9%9D%A2%E8%AF%95%E9%A2%98%2017_20_%20%E8%BF%9E%E7%BB%AD%E4%B8%AD%E5%80%BC/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/continuous-median-lcci/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>随机产生数字并传递给一个方法。你能否完成这个方法，在每次产生新值时，寻找当前所有值的中间值（中位数）并保存。</p>
<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>
<p>例如，</p>
<p>[2,3,4] 的中位数是 3</p>
<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>
<p>设计一个支持以下两种操作的数据结构：</p>
<ul>
<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>
<li>double findMedian() - 返回目前所有元素的中位数。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addNum(1)</span><br><span class="line">addNum(2)</span><br><span class="line">findMedian() -&gt; 1.5</span><br><span class="line">addNum(3) </span><br><span class="line">findMedian() -&gt; 2</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们在往数组中添加值的时候需要按序添加</li>
<li>输出中位数时对数组长度为奇数或偶数分情况处理</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MedianFinder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MedianFinder.prototype.addNum = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="keyword">this</span>.arr.findIndex(<span class="function"><span class="params">v</span>=&gt;</span>v&gt;num)</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr.push(num)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.arr.unshift(num)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr.splice(i,<span class="number">0</span>,num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MedianFinder.prototype.findMedian = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.arr.length%<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr[(<span class="keyword">this</span>.arr.length<span class="number">-1</span>)/<span class="number">2</span>]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.arr[(<span class="keyword">this</span>.arr.length/<span class="number">2</span>)<span class="number">-1</span>]+<span class="keyword">this</span>.arr[<span class="keyword">this</span>.arr.length/<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]面试题02_04_分割链表/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E9%9D%A2%E8%AF%95%E9%A2%9802_04_%E5%88%86%E5%89%B2%E9%93%BE%E8%A1%A8/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/partition-list-lcci/" target="_blank" rel="noopener">题目</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点 <code>head</code> 和一个特定值 <strong><code>x</code> ，请你对链表进行分隔，使得所有 **小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p>
<p>你不需要 <strong>保留</strong> 每个分区中各节点的初始相对位置。</p>
<p><strong>示例 1：</strong></p>
<p><img src="1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [1,4,3,2,5,2], x &#x3D; 3</span><br><span class="line">输出：[1,2,2,4,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： head &#x3D; [2,1], x &#x3D; 2</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 200]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>-200 &lt;= x &lt;= 200</code></li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们创建两个链表，一个用来存放小于<code>x</code>的节点，一个用来存储<code>&gt;=x</code>的节点</li>
<li>遍历<code>head</code>，将对应的节点存入对应的链表</li>
<li>将小数链表的尾结点指向大数链表的头结点完成拼接</li>
<li>拼接后的链表就是我们题目要的链表</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> partition = <span class="function"><span class="keyword">function</span>(<span class="params">head, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> smallList = <span class="keyword">new</span> ListNode()</span><br><span class="line">  <span class="keyword">let</span> bigList = <span class="keyword">new</span> ListNode()</span><br><span class="line">  <span class="keyword">let</span> small = smallList</span><br><span class="line">  <span class="keyword">let</span> big = bigList</span><br><span class="line">  <span class="keyword">while</span>(head)&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(head.val)</span><br><span class="line">    <span class="keyword">if</span>(head.val&lt;x)&#123;</span><br><span class="line">      small.next = node</span><br><span class="line">      small = small.next</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      big.next = node</span><br><span class="line">      big = big.next</span><br><span class="line">    &#125;</span><br><span class="line">    head =head.next</span><br><span class="line">  &#125;</span><br><span class="line">  small.next = bigList.next</span><br><span class="line">  <span class="keyword">return</span> smallList.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]面试题03_04_化栈为队/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E9%9D%A2%E8%AF%95%E9%A2%9803_04_%E5%8C%96%E6%A0%88%E4%B8%BA%E9%98%9F/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks-lcci/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个<code>MyQueue</code>类，该类用两个栈来实现一个队列。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyQueue queue &#x3D; new MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(1);</span><br><span class="line">queue.push(2);</span><br><span class="line">queue.peek();  &#x2F;&#x2F; 返回 1</span><br><span class="line">queue.pop();   &#x2F;&#x2F; 返回 1</span><br><span class="line">queue.empty(); &#x2F;&#x2F; 返回 false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li>你只能使用标准的栈操作 – 也就是只有<code>push to top</code>, <code>peek/pop from top</code>,<code>size</code>和<code>is empty</code>操作是合法的。</li>
<li>你所使用的语言也许不支持栈。你可以使用<code>list</code>或者<code>deque</code>（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>
<li>假设所有操作都是有效的 （例如，一个空的队列不会调用<code>pop</code>或者<code>peek</code>操作）。</li>
</ul>
</blockquote>
<h2 id="解题思想"><a href="#解题思想" class="headerlink" title="解题思想"></a>解题思想</h2><p>看到这个题，相信看过我的题解的小伙伴们一定会非常的熟悉，这不就是 <a href="https://juejin.cn/post/7040836577735475213" target="_blank" rel="noopener"><strong>设计循环队列</strong></a> 的简化版嘛！</p>
<ul>
<li>我们用数组来解题</li>
<li><code>push</code>为常规数组操作</li>
<li><code>empty</code>判断数组长度是否为<code>0</code></li>
<li><code>peek</code>直接返回数组的第一个元素</li>
<li><code>pop</code>删除数组的第一个元素并将删除的元素返回</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MyQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Push element x to the back of queue. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr.push(x)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,...args] = <span class="keyword">this</span>.arr</span><br><span class="line">    <span class="keyword">this</span>.arr = [...args]</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the front element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns whether the queue is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.arr.length == <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyQueue()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.empty()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/[路飞][LeetCode]剑指 Offer 68 - I_ 二叉搜索树的最近公共祖先/index</title>
    <url>/2022/01/%5B%E8%B7%AF%E9%A3%9E%5D%5BLeetCode%5D%E5%89%91%E6%8C%87%20Offer%2068%20-%20I_%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/index/</url>
    <content><![CDATA[<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>
<p>谁能九层台，不用累土起!</p>
<p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">题目地址</a></p>
<a id="more"></a>


<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<p>例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]</p>
<p><img src="1.png" alt=""></p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>我们根据二叉搜索树的特点：<code>左&lt;根&lt;右</code></li>
<li>当根节点比两个都大时，我们递归左节点</li>
<li>当根节点比两个都小时，我们递归右节点</li>
<li>当根节点比一个大，另一个小时就是我们要找的最近公共祖先节点</li>
</ul>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">if</span>(root.val&lt;p.val&amp;&amp;root.val&lt;q.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.right,p,q)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;p.val&amp;&amp;root.val&gt;q.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.left,p,q)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如有任何问题或建议，欢迎留言讨论！</p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/愿世间再无人不懂作用域/index</title>
    <url>/2022/01/%E6%84%BF%E4%B8%96%E9%97%B4%E5%86%8D%E6%97%A0%E4%BA%BA%E4%B8%8D%E6%87%82%E4%BD%9C%E7%94%A8%E5%9F%9F/index/</url>
    <content><![CDATA[<h2 id="作用域是啥"><a href="#作用域是啥" class="headerlink" title="作用域是啥"></a>作用域是啥</h2><p>作用域几乎是最基本的功能了，可以用来存储变量，方便我们之后对这些变量进行访问或修改。</p>
<a id="more"></a>



<p><img src="1.gif" alt="675456E07FB54B9C2F705A5CF7A196CE.gif"></p>
<p>我们举个简单的栗子🌰来方便理解：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nubility = <span class="string">'Hello Varlet!'</span></span><br></pre></td></tr></table></figure>

<p>我们来解析一下浏览器拿到这串代码后做的事情</p>
<ul>
<li><p>编译器会查看作用域中是否已经存在一个<code>nubility</code>。如果有了，那么编译器会忽略<code>var</code>声明继续进行编译；否则将会要求作用域声明一个变量<code>nubility</code></p>
</li>
<li><p>接下来编译器会生成用来处理<code>nubility = &#39;Hello Varlet!&#39;</code>赋值操作的代码并交给引擎</p>
</li>
<li><p>引擎拿到代码后会先询问作用域中是否存在<code>nubility</code>这个变量。如果有，那么引擎就会用这个变量，否则则会继续上上一层作用域中继续查找该变量</p>
</li>
<li><p>如果作用域中找到了<code>nubility</code>这个变量，那么就会<code>&#39;Hello Varlet!&#39;</code>赋值给它，否则引擎将会抛出一个异常</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VM418:1 Uncaught ReferenceError: nubility is not defined</span><br></pre></td></tr></table></figure>

<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>我们先介绍一下词法作用域这个命名的来历。</p>
<p>编译器拿到我们编写的源代码后先将代码进行词法化，这个过程中会对源代码中的字符进行检查，如果是有状态的解析过程则会赋予单词语义。(也成为静态作用域)</p>
<blockquote>
<p>一句话总结：词法作用域就是定义在词法阶段的作用域。</p>
</blockquote>
<p>语义化就是，在我们编写代码时由我们的变量和块级作用域写在哪里决定的。</p>
<p>举个🌰</p>
<p><img src="2.png" alt="image.png"></p>
<ul>
<li><p>黄色的框包含全局并且只有一个标识符<code>a</code></p>
</li>
<li><p>蓝色的框为<code>a</code>创建的作用域，包含三个标识符<code>name</code>、<code>b</code>、<code>author</code></p>
</li>
<li><p>红色部分包含<code>b</code>创建的作用域，其中只有一个<code>score</code>标识符</p>
</li>
</ul>
<p>从这边我们可以看出这些对应的框由其作用域块代码的边写决定的，向下层逐级包含。</p>
<p>作用域的结构以及互相之间的位置关系可以给引擎提供用于查找标识符的位置信息。</p>
<p>我们一起来解析一下上面的代码</p>
<ul>
<li><p>引擎在执行<code>console.log(author,name,score)</code>时会查找<code>author,name,score</code>这三个变量的引用</p>
</li>
<li><p>先在<code>b</code>的作用域中查找，引擎在这里无法找到<code>author,name</code>,所以会向上一级<code>a</code>的作用域中继续查找</p>
</li>
<li><p>在<code>a</code>的作用域中，引擎找到了<code>author</code>和<code>name</code>，就使用了这里的引用</p>
</li>
</ul>
<blockquote>
<p>总结一下：作用域查找会在找到第一个匹配的标识符时停止查找</p>
</blockquote>
<p>在多级嵌套的作用域中，可以定义同名标识符，作用域的查找从运行时所在的最内层向外查找，找到第一个匹配的标识符为止。</p>
<p>⚠️⚠️⚠️⚠️⚠️⚠️</p>
<p>其实这也不是绝对的</p>
<p><img src="3.gif" alt="895625EE5560EB2873470B4A254502F9.gif"></p>
<p>😳😳😳可恶啊居然还有？先摆个烂歇会~</p>
<p><img src="4.gif" alt="C4D4506256984E0951AE70EF2D39C7AF.gif"></p>
<p>ok，时间到😋摆烂结束。接下来我们聊聊欺骗词法</p>
<p>js中有两种机制可以在运行时修改词法作用域，一个是<code>eval</code>另一个是<code>with</code>。社区中普遍认为这种机制会导致性能下降，因此我们不做过多介绍，本篇中仅以<code>eval</code>为例进行分析。</p>
<p>先介绍一下<code>eval</code>的功能：可以接收一个字符串作为参数，并将其中的内容作为书写在程序该位置的代码。</p>
<p>举个🌰：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">eval</span>(str)</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a(<span class="string">'var num = 2'</span>)</span><br></pre></td></tr></table></figure>

<p><code>eval</code>调用中的<code>var num = 2</code>，会被当做在<code>a</code>的作用域中来处理，对<code>a</code>的词法作用域进行了修改，从而遮蔽了外部的同名变量<code>num</code>，因此引擎在执行<code>console.log</code>时只会在<code>a</code>内部找到这个<code>num</code>.</p>
<h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>函数作用域是指：属于这个函数的全部变量都可以在整个函数的的范围内使用以及复用(包括嵌套的子作用域)。</p>
<p>在软件设计中，我们遵循最小暴露原则。也就是说我们可以使用内嵌作用域来对一些变量和函数进行私有化，从而避免污染全局。</p>
<p>举个🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  b = num + c(num)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>*num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>在这个例子中，变量<code>b</code>和函数<code>c</code>都应该是实现<code>a</code>具体操作的私有内容，放在全局的话可能会被有意或无意的被修改成非预期的方式，因此更合理的方式是将<code>b</code>和<code>c</code>隐藏咋函数<code>a</code>的内部.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*num</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  b = num + c(num)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>块级作用域是用来最小暴露原则进行拓展的工具，将代码从在函数内隐藏信息拓展为在块内隐藏信息。</p>
<p>举一个常见的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">996</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>i</code>其实只在<code>for</code>的循环内部使用，但是却污染到了整个函数作用域中，我们如果使用块级作用域可以使其只能在<code>for</code>的循环内部使用，这对保证变量不会被混乱的复用，以及提升代码的可维护性有很大的益处。</p>
<h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try/catch"></a>try/catch</h3><p><code>ES3</code>规范中<code>try/catch</code>的<code>catch</code>分句会创建一个块级作用域，其中声明的变量只在<code>catch</code>生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="literal">undefined</span>() <span class="comment">//随便执行一个能让他出错的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e) <span class="comment">//能正常执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e) <span class="comment">//VM20919:8 Uncaught ReferenceError: e is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6中提供了<code>let</code>关键字，可以将变量绑定到任意的作用域,通常是定义改变量所在的<code>{...}</code>中。</p>
<p>也就是说，<code>let</code>关键字可以为其声明的变量隐式创建块作用域。</p>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>除了<code>let</code>以外ES6还引入了<code>const</code>，同样可以用来创建块作用域变量，但其值时固定的。之后任何修改值的操作都会抛出错误。</p>
<p><img src="5.png" alt="image.png"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就是本人对于作用域的一些见解，如有任何问题或建议，欢迎留言讨论！</p>
<p>顺便推荐一下本人参与的开源项目 <a href="https://github.com/varletjs/varlet" target="_blank" rel="noopener">varlet</a> 欢迎大家star pr</p>
<p><img src="6.jpg" alt="F1854D82AA4684E53C033B8186B17A42.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>2022/01/咦_你竟是这样的let!!!/index</title>
    <url>/2022/01/%E5%92%A6_%E4%BD%A0%E7%AB%9F%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84let!!!/index/</url>
    <content><![CDATA[<p>直到<code>ECMAScript5.1</code>，<code>var</code>都垄断了香火传参(声明变量)的这门差事，凭借其皇后(声明变量唯一关键字)的身份混的那是一个是风生水起啊。</p>
<p><img src="1.png" alt="image.png"></p>
<p>不曾想从<code>ES6</code>之后，这天就变了，<code>let</code>和<code>const</code>成了各位老爷的新宠儿，自然而然地这<code>var</code>就搬进了冷宫。</p>
<blockquote>
<p>本文将主要讲述<code>let</code>是如何一步一步地在声明变量领域 <strong>‘夺权’</strong></p>
</blockquote>
<a id="more"></a>



<h2 id="昔日皇后-var"><a href="#昔日皇后-var" class="headerlink" title="昔日皇后 var"></a>昔日皇后 var</h2><p>在使用<code>var</code>声明变量时，变量会被自动的加到最近的上下文。</p>
<p>在函数中你那个，最接近函数的上下文就是函数的局部上下文。如果变量未经声明就被初始化，那么他会被添加到全局上下文中。</p>
<p>举个🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = add()</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// ReferenceError: sum is not defined</span></span><br></pre></td></tr></table></figure>
<p>因为我们将<code>sum</code>定义在<code>add</code>中，<code>sum</code>就成了<code>add</code>的局部变量，所以我们在函数外部就访问不到了。</p>
<p>我们让<code>var</code>娘娘暂作歇息(省略)，再看一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  sum = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = add()</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt="image.png"></p>
<p>我们可以看到，<code>add</code>被调用后，<code>sum</code>被添加到了全局上下文，即使<code>add</code>函数退出了，<code>sum</code>依旧可以被访问到。</p>
<p><strong>注意</strong>:在严格模式下，未经声明就初始化变量会报错。因为，各位老爷要养成先声明变量再初始化的习惯哦。</p>
<p><img src="3.png" alt="image.png"></p>
<p>另外，我们需要注意一下，<code>var</code>声明的变量会被拿到函数作用域或全局作用域的顶部，也就是作用域所有代码的最前面(毕竟身份摆在那),也就是常说的 <strong>变量提升</strong>。</p>
<p>这会导致很多合法但是奇怪的现象，我们看个🌰</p>
<p><img src="4.png" alt="image.png"></p>
<p><img src="5.png" alt="image.png"></p>
<p>通过变量提升我们会拿到未被初始化的<code>undefined</code>而不是<code>ReferenceError</code></p>
<h2 id="老爷们的新宠儿let"><a href="#老爷们的新宠儿let" class="headerlink" title="老爷们的新宠儿let"></a>老爷们的新宠儿let</h2><p><code>let</code>的出现，像是一阵清流，改变了这个现状。她与<code>var</code>功能是那般相似，但是又比<code>var</code>更通情达理。可以让我们将变量绑定到所在的任意块级作用域中。</p>
<p>这意味着，我们跟<code>let</code>相处时会更加的轻松(只需要一对{…}就可以创建一个作用域)</p>
<p><img src="6.png" alt="image.png"></p>
<p>我们回过头来再看一下变量提升的🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// ReferenceError: Cannot access 'b' before initialization</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b</span><br></pre></td></tr></table></figure>

<p>其实也很好理解，娘娘(<code>var</code>)么跑在前面是应该的，你个新来的妃子(<code>let</code>)凭证得到老爷们喜欢就跑前面去就有点没摆正自己位置了，必然得发宗人府去(<code>ReferenceError</code>)了</p>
<p>有了这个解释相信这个🌰也会变得很好理解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">  var a &#x3D; 1</span><br><span class="line">  let b &#x3D; 2</span><br><span class="line">&#125;</span><br><span class="line">console.log(a) &#x2F;&#x2F; 1</span><br><span class="line">console.log(b) &#x2F;&#x2F; ReferenceError: b is not defined</span><br></pre></td></tr></table></figure>

<p>娘娘(<code>var</code>)只要在皇宫里(函数上下文内)都是没问题的，妃子(<code>let</code>)只能在自己的寝宫里(块级作用域内)</p>
<p>从这个🌰中我们可以看出，<code>let</code>的行为非常适合在循环中声明迭代变量。使用<code>var</code>声明的迭代变量会泄漏到循环外部。</p>
<p><img src="7.png" alt="image.png"></p>
<p><code>for</code>循环头部的<code>let b</code>不仅为循环本身声明了一个<code>b</code>，而是为循环的每一次迭代都更新声明了一个新的<code>b</code>。这意味着<code>loop</code>迭代内部创建的闭包封闭是每次迭代中的变量，也正如我们的期望一样。</p>
<p>而<code>var</code>在外层作用域中只有一个<code>a</code>，这个<code>a</code>被封闭进去，而不是每次迭代都会有一个新的<code>a</code>。因此最后我们输出的i也正是外层作用域中的<code>a</code>。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><code>let</code>固然得到不少老爷们的喜爱，<code>var</code>相信也有老爷对其恋恋不忘藕断丝连。</p>
<p>但是我就不一样了，小孩子才做我选择，我全都要！！！！</p>
<p>于是<code>varlet</code>就来了~~</p>
<p><a href="https://github.com/varletjs/varlet" target="_blank" rel="noopener"><code>varlet</code></a>是一个基于 <code>Vue3</code> 开发的 Material 风格移动端组件库，欢迎小伙伴们<code>star</code>&amp;&amp;<code>pr</code></p>
]]></content>
  </entry>
</search>
