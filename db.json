{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"themes/melody/source/baidu_verify_U661pkRu5P.html","path":"baidu_verify_U661pkRu5P.html","modified":1,"renderable":1},{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":1,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":1,"renderable":1},{"_id":"themes/melody/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/katex.js","path":"js/katex.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596618336000},{"_id":"themes/melody/.eslintrc","hash":"cfcd1b454efdd6cc1a0d43be7bc79027b84531f7","modified":1590041553000},{"_id":"themes/melody/.eslintignore","hash":"55f36fe3be2270ae2746eddbb2982e4e1472bc31","modified":1590041553000},{"_id":"themes/melody/.gitignore","hash":"7ed73f0edfb682b12a42070fd2730d5d712ec2fa","modified":1590041553000},{"_id":"themes/melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1590041553000},{"_id":"themes/melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1590041553000},{"_id":"themes/melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1590041553000},{"_id":"themes/melody/CHANGELOG.md","hash":"45ebf7c7497934beee0d3ffa06b2925964364076","modified":1590041553000},{"_id":"themes/melody/README.md","hash":"79b8e7b89fc91455fe9275369c8065a32461837a","modified":1590041553000},{"_id":"themes/melody/_config.yml","hash":"90ab7a366ebddfbfdcc62c7dcb10ca5e8c595f3b","modified":1594565577000},{"_id":"themes/melody/package.json","hash":"06b4838a97c8625ed544097f2438ee7c2848da63","modified":1590041553000},{"_id":"themes/melody/stylus_format.json","hash":"2fbe63b06901d202773457d7ce658ab6aa85d02b","modified":1590041553000},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590041553000},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"66c3f31c24530922420b92f5fd827f69197ee0e2","modified":1590041553000},{"_id":"themes/melody/.vscode/launch.json","hash":"3098e8e395a33fa130747d2fd104a21278f266a6","modified":1590041553000},{"_id":"themes/melody/.vscode/settings.json","hash":"089087413f5b54ef1847f83e101d0e186c7b359d","modified":1590041553000},{"_id":"themes/melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1590041553000},{"_id":"themes/melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1590041553000},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1590041553000},{"_id":"themes/melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1590041553000},{"_id":"themes/melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1590041553000},{"_id":"themes/melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1590041553000},{"_id":"themes/melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1590041553000},{"_id":"themes/melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1590041553000},{"_id":"themes/melody/layout/post.pug","hash":"949550f3b7195124b2ca5f34e3bdab6fd08de0d4","modified":1590041553000},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1590041553000},{"_id":"themes/melody/layout/page.pug","hash":"64f1a6564f674a6bbc9dbcb371ae6e23c1335221","modified":1590041553000},{"_id":"themes/melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1590041553000},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1590041553000},{"_id":"themes/melody/scripts/replace-config.js","hash":"7476015a4e091203c3048c5377ec5d67439520fa","modified":1590041553000},{"_id":"themes/melody/source/baidu_verify_U661pkRu5P.html","hash":"a52d22a7a2455a87a5afb76f32a70da20f3f6048","modified":1594534634000},{"_id":"themes/melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1590041553000},{"_id":"source/gallery/index.md","hash":"cc2c609a159e195c8739c802d6851fba1405758a","modified":1590045284000},{"_id":"source/categories/index.md","hash":"df36239f3e6260a7571d45566a094e093ab0dd2c","modified":1590045224000},{"_id":"source/tags/index.md","hash":"70d483629567d1bf57c43b17cdc5addf68062a05","modified":1590045215000},{"_id":"source/404/index.md","hash":"abbc08d1d73ac27786d8df7a82fde7490b7a60e4","modified":1590041767000},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590041553000},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1590041553000},{"_id":"themes/melody/layout/includes/config.pug","hash":"b55265d49832decb34d57f222deb64f04cc9aa12","modified":1590041553000},{"_id":"themes/melody/layout/includes/head.pug","hash":"cdabb5841dc42a58b6e06df9bc4f5acf90bc8419","modified":1590041553000},{"_id":"themes/melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1590041553000},{"_id":"themes/melody/layout/includes/header.pug","hash":"006f86f19256eecc05c6cc6e66d5c0c79ddfcc63","modified":1590041553000},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1590041553000},{"_id":"themes/melody/layout/includes/nav.pug","hash":"3f1fe059784df45f923587b81cc972659ed22e01","modified":1590041553000},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"128c448f5bab71f59912516edff9d476ff6b8afe","modified":1590041553000},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"211b8ecfdb7b5dd836c87436def410a52dfa5ecd","modified":1590041553000},{"_id":"themes/melody/layout/includes/layout.pug","hash":"58856b5048fb64e7dab75a6ae32cc2a0ad94de4f","modified":1590041553000},{"_id":"themes/melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1590041553000},{"_id":"themes/melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1590041553000},{"_id":"themes/melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1590041553000},{"_id":"source/_posts/2021/.DS_Store","hash":"d5d605d9de955111dd711553d5bd819294cfea1f","modified":1631084279000},{"_id":"themes/melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1590041553000},{"_id":"themes/melody/source/img/avatar.png","hash":"71c75ea1031b43efe08fcb69c4fa75624de9d6df","modified":1590809495000},{"_id":"themes/melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1590041553000},{"_id":"themes/melody/source/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1590041553000},{"_id":"themes/melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1590041553000},{"_id":"themes/melody/source/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1590041553000},{"_id":"themes/melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1590041553000},{"_id":"themes/melody/source/js/scroll.js","hash":"467f883ca2ace0c0fb46ae24919223560a6fb72c","modified":1590041553000},{"_id":"themes/melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1590041553000},{"_id":"themes/melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1590041553000},{"_id":"themes/melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1590041553000},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590041553000},{"_id":"themes/melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1590041553000},{"_id":"themes/melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1590041553000},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1590041553000},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1590041553000},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"6c16214e5945142e5f3b58e7694397e26f28849d","modified":1590041553000},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1590041553000},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1590041553000},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"9115ffd74549d356c18d4e2ad0a85d7b320b8c6e","modified":1590041553000},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1590041553000},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1590041553000},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"940c000ececf7f7596bf8c452dda9b92a5df7710","modified":1590041553000},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"f90bfc1cbe21e799a8784129e1a34bd59404e3df","modified":1590041553000},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1590041553000},{"_id":"themes/melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1590041553000},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1590041553000},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1590041553000},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1590041553000},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1590041553000},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1594484818000},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1590041553000},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1590041553000},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1590041553000},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1590041553000},{"_id":"themes/melody/source/css/_global/index.styl","hash":"2a6195ce7e822362633ebf403c9438b42fa126bb","modified":1590041553000},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1590041553000},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"1ecd4f12d643b1679b3bcb37768890f70c5f98bd","modified":1594566559000},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1590041553000},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1590041553000},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1590041553000},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1590041553000},{"_id":"themes/melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1590041553000},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1590041553000},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1590041553000},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"73488de3f36369c29ecd5e0be9661bb2b508548c","modified":1590041553000},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"d2f6050bf6ef80523ed9a5a0f058fa5dbaf72ea8","modified":1590041553000},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1590041553000},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1590041553000},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"e8315401a6c791d00617c031be01f45df70fe7fd","modified":1590041553000},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"9fd88cc878a156e8b275c8dcb95717ca5ceea83a","modified":1590041553000},{"_id":"source/_posts/2020/05/Vue中Watch和Computed的差异.md","hash":"6b2d2eedfbe733c704d55a67e68989d08b712e2c","modified":1594480898000},{"_id":"source/_posts/2020/05/git常用命令.md","hash":"076d2f3ca8e73161650f77051a56647f925bd68d","modified":1594480889000},{"_id":"source/_posts/2020/05/hexo简单使用说明.md","hash":"0c4f745e339efe68728ffa03f4053766e69d147c","modified":1594480894000},{"_id":"source/_posts/2020/05/不好好工作会怎么样呢.md","hash":"bd69ce155e199bb379b50d83760b62b1cb5bfb63","modified":1594480864000},{"_id":"source/_posts/2020/05/从零开始手撸vue源码.md","hash":"5b423389eb453ea02c8d828d9d4e6909596acba4","modified":1594480869000},{"_id":"source/_posts/2020/05/在vue中使用graphql.md","hash":"db4cad87e984220b6f2f7bc14919bc76a155b36e","modified":1596720153000},{"_id":"source/_posts/2020/05/爬取豆瓣电影top250.md","hash":"7ce5485cfaba5022096c186f60ddbcc2148329d0","modified":1594480874000},{"_id":"source/_posts/2020/11/将uni-request进行axios化封装.md","hash":"8dadcac52674aa1cc0f778e865c5bf9cf7fd650a","modified":1604564828000},{"_id":"source/_posts/2020/07/HTML中常用的meta便签.md","hash":"b9ef3ada9e3a62491c71b462dd1e0ea0292424f1","modified":1596501277000},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理.md","hash":"8cf1710353f95ee493fbf6312496e17300da762b","modified":1594566645000},{"_id":"source/_posts/2020/07/Vue中v-if和v-for的优先级.md","hash":"161761fe2103b0b9c1628dac36790a68c8210b76","modified":1594480721000},{"_id":"source/_posts/2020/07/Vue组件data为何要函数形式.md","hash":"29ebb12cc746e3be8a0ab0a32ab96b65adb91aed","modified":1594480716000},{"_id":"source/_posts/2020/07/vue-router源码实现.md","hash":"4c642c20de7ec00065eefb2737f21b675e75083c","modified":1594480701000},{"_id":"source/_posts/2020/07/前端面试题(一).md","hash":"e4846b09b53a0acf827a26fe39dd60a0eb9385c2","modified":1595378048000},{"_id":"source/_posts/2020/07/前端面试题(二).md","hash":"42c7ef0f99da32c4ff51a10d824f1ee6a63b67bf","modified":1596462059000},{"_id":"source/_posts/2020/07/实现vue弹窗组件(一).md","hash":"31f299ff5cbb943ed93d606f27b25a00e498d678","modified":1594537104000},{"_id":"source/_posts/2020/07/实现vue弹窗组件(二).md","hash":"ac816a548c475d95ee78a0df5595ca1204f2851b","modified":1594537090000},{"_id":"source/_posts/2020/07/实现一个简易Vuex.md","hash":"167ed9de5666319c2b722d96e4288a6e5bfbbe27","modified":1594556298000},{"_id":"source/_posts/2020/06/Vue中路由守卫.md","hash":"b62d980198102b0f843f1092b037f93c3cec33de","modified":1594480831000},{"_id":"source/_posts/2020/12/BFC布局.md","hash":"68dde59a177883a1d7e9f509f7c26e3e4282c6c5","modified":1607668446000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答.md","hash":"3e973aeb121ff59a52ce05efcafaa5d726875446","modified":1594480669000},{"_id":"source/_posts/2020/12/圣杯布局-双飞翼布局.md","hash":"6c25820329bdded3792cf828574bc884f84fb4b6","modified":1607656156000},{"_id":"source/_posts/2020/06/Vue组件化.md","hash":"c0473c3a269a4628723bdf4db972fd4c9647f745","modified":1596029101000},{"_id":"source/_posts/2020/06/在vue项目中动态加载js.md","hash":"2b1eb35d6aaaf729694b0f95c7ee2e749f6b9387","modified":1594480816000},{"_id":"source/_posts/2020/06/必备知识之Vue-Cli.md","hash":"8ac67738ea640cac328e729437813c1ae700c2ee","modified":1594480812000},{"_id":"source/_posts/2020/06/Vue统一状态管理——Vuex.md","hash":"201c989195c6d1b5b8eae35382735d796e785f71","modified":1594538999000},{"_id":"source/_posts/2020/06/自己动手封装一个Vue表单组件.md","hash":"bc71c8732622a23cc24aeb66c0cc5ba7446b6e67","modified":1594480823000},{"_id":"source/_posts/2021/01/mac电脑也能模拟ie浏览器了.md","hash":"eba9cae915beea71445b379cf11aeff9d4ca9891","modified":1611716512000},{"_id":"source/_posts/2021/01/仿写new运算符.md","hash":"edb3e46043464f9befdbbfee9d353e9746bf5b67","modified":1611716501000},{"_id":"source/_posts/2021/01/es6基础.md","hash":"9d85fe0d0b08629ce247e5354caa4ad5d015cec3","modified":1610334432000},{"_id":"source/_posts/2021/01/面向对象.md","hash":"355c5557ebe275fc5882a0ce17bfde1021b46005","modified":1611813073000},{"_id":"source/_posts/2020/08/flutter中区分开发环境与正式环境.md","hash":"4fd4c796e5828189d48aba8df0f1aa82cd772793","modified":1623201227000},{"_id":"source/_posts/2020/08/JS从入门到放弃——数据类型.md","hash":"9c5e495079f2315c45b01d54f8deb9da643e8008","modified":1596722261000},{"_id":"source/_posts/2020/08/flutter中验证码倒计时.md","hash":"2f964a8e5d384c0162e6bf656b7386fcbb4d32d3","modified":1597025774000},{"_id":"source/_posts/2020/08/在flutter中优雅的封装网络请求.md","hash":"715d5c56c84fe75ce90c5b90ddcaf041e7249d6e","modified":1623201217000},{"_id":"source/_posts/2020/08/在vue中对axios进行二次封装.md","hash":"d747908aec2668648e9bcdeaf310ae7d2478ae55","modified":1623201204000},{"_id":"source/_posts/2021/09/从零开始进阶全栈之NODE基础api.md","hash":"dae0ce1d4d41f5701acf78b27168bce6fb4ec566","modified":1632146746000},{"_id":"source/_posts/2021/09/从零开始进阶全栈之koa源码.md","hash":"d1ef1c1c513f9a97d1c6bbe2f72ec8ce0406caa1","modified":1632320556000},{"_id":"source/_posts/2021/09/从零开始进阶全栈之数据库(一).md","hash":"dd01a421b552156f5119a24761384beea43f172b","modified":1631973445000},{"_id":"source/_posts/2021/03/nodejs文件操作.md","hash":"c2ecd4e21758be254f86828e258aaa27d0d27bf4","modified":1615883800000},{"_id":"source/_posts/2021/08/Browserslist.md","hash":"7b438e3c65372b15431e0e583424308be5c2aa5d","modified":1629181785000},{"_id":"source/_posts/2021/09/从零开始进阶全栈之数据库(二).md","hash":"2ea738e248d148da4b60117ea553119f801adfb6","modified":1631973467000},{"_id":"source/_posts/2021/08/TS装饰器之防抖节流.md","hash":"fe589a100482122a2146e9740cc0a4ef84bfa72a","modified":1630417340000},{"_id":"source/_posts/2021/08/JavaScript基础之变量提升.md","hash":"62c14019e91768c0f9ab731b864aca2fbf776aae","modified":1630201640000},{"_id":"source/_posts/2021/08/TS进阶之-装饰器.md","hash":"3e731e58e42eb2656f94d3d448f240d4639427f9","modified":1628583478000},{"_id":"source/_posts/2021/08/TypeScript还不会-看完这篇就行了.md","hash":"07fd437386484175836685e905a91fe38e9f1366","modified":1628577815000},{"_id":"source/_posts/2021/08/webpack基础.md","hash":"4890cbd0d3f505e0b24bfd7eba98b2185c8c438f","modified":1629084946000},{"_id":"source/_posts/2021/08/webpack进行前端开发工程环境搭建.md","hash":"c51fcadfb58133c69539e776e8f2878069fc7502","modified":1629190274000},{"_id":"source/_posts/2021/08/websocket从入门到入土.md","hash":"6691fcc4e41d57422bc1a2059ae19ebfbdd92e9a","modified":1629365640000},{"_id":"source/_posts/2021/08/支付宝小程序父子组件相互调用.md","hash":"8f03191d947c55b8aa2fcc2eb07e2b3104d18cda","modified":1630035557000},{"_id":"source/_posts/2021/08/基于高德地图jsapi的二次封装.md","hash":"63f3e3a7c1c134999728b738cbb08dd97abaede8","modified":1630986664000},{"_id":"source/_posts/2021/08/支付宝小程序前端授权.md","hash":"c7c56ad0b0f214efdd3f555fe31f725e7474bbc1","modified":1628820300000},{"_id":"source/_posts/2021/10/从零开始进阶全栈之手撕promise.md","hash":"3cbcc7720b02eb752d6988a0d2ad9f32596e68b3","modified":1634197903000},{"_id":"source/_posts/2021/12/2021年度总结.md","hash":"5bf2b94a9cef0d330b898a78ca799ab7307c77aa","modified":1638407109000},{"_id":"source/_posts/2021/12/LeetCode-202-快乐数.md","hash":"82f4e559c536c2fda54e617275842e16ceb2da2f","modified":1639583237092},{"_id":"source/_posts/2021/12/LeetCode-141-环形链表.md","hash":"d7edcf6190956de97bb02d902a0e295ed662f5e8","modified":1639582636349},{"_id":"source/_posts/2021/12/LeetCode-19-删除链表中的倒数第N个结点.md","hash":"7061d15e47c406cce834bb60d5430cbabface7cf","modified":1639583103317},{"_id":"source/_posts/2021/12/LeetCode-142-环形链表II.md","hash":"8205f3a369a7241c159b1860d2a541f2ca6b5dcc","modified":1639582472356},{"_id":"source/_posts/2021/12/LeetCode-24-两两交换链表中的节点.md","hash":"af93250731cbee98257c7bba8d4a021aca0b1a74","modified":1639583068902},{"_id":"source/_posts/2021/12/LeetCode-25-K个一组翻转链表.md","hash":"522b4d196c47229c04d8422c4175e2cc4bf98468","modified":1639583063008},{"_id":"source/_posts/2021/12/LeetCode-83-删除排序链表中的重复元素.md","hash":"911234478b8ea75082651d80e3510de3071480f1","modified":1639583219212},{"_id":"source/_posts/2021/12/LeetCode-61-旋转链表.md","hash":"bc5c98852501328c407ba00e82c3f29a584f0ece","modified":1639583058562},{"_id":"source/_posts/2021/12/LeetCode-206-反转链表.md","hash":"56e07641b69b264c8f40d8f34ff0166635c56660","modified":1639582636352},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1590041553000},{"_id":"themes/melody/source/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1590041553000},{"_id":"source/_posts/2021/12/LeetCode-92-反转链表II.md","hash":"9c232aea9aa0d5ebbaedbba9744f30c4b7070e30","modified":1639582636338},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1590041553000},{"_id":"source/_posts/2020/05/hexo简单使用说明/result@2.png","hash":"bace9f44f9a2609b57a0a64766111a80b14019d1","modified":1593525659000},{"_id":"source/_posts/2020/05/不好好工作会怎么样呢/1.jpg","hash":"ac013581bdb990cbaa962fc28dc44e61186348f9","modified":1590151863000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/2.jpg","hash":"a582a8f5351bab4da908fbd37ac4a6dbb977508f","modified":1594474883000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/1.jpg","hash":"7704949da37c2a6487103e2fcce74106b586ab2d","modified":1594474872000},{"_id":"source/_posts/2020/07/实现一个简易Vuex/2.png","hash":"e5803a74292787034a12df8b4cd83b01ec578789","modified":1594544191000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/5.jpg","hash":"58ab274aadd8d0830e0c22fce0cf8fa783461166","modified":1594475197000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/3.jpg","hash":"181206d38725b0eb121e757666818ff85c409df8","modified":1594474954000},{"_id":"source/_posts/2020/12/BFC布局/1.png","hash":"b8defc8e8ad6faa6dfa7c641b6bd5864dbdb1520","modified":1607658594000},{"_id":"source/_posts/2020/12/BFC布局/2.png","hash":"a95e7a2c11cc0986bf20c03dc1f7ae1313ac004f","modified":1607658943000},{"_id":"source/_posts/2020/12/BFC布局/3.png","hash":"51e270d9d8cc9d03b83224c6982d11091485fb1f","modified":1607667150000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/6.jpg","hash":"a8707899b44a99df3302cdd89263dae0fc707773","modified":1594475276000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/8.jpg","hash":"5c6fc0df779c76042143203b7c53a0ff0a787c91","modified":1594475582000},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1590041553000},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1590041553000},{"_id":"source/_posts/2020/05/从零开始手撸vue源码/3-1.png","hash":"fd21c58451f89bb20094ad67cd6526c079511b6c","modified":1590368525000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/4.jpg","hash":"b7db996343f36cde62067ac6b876f307f84dd4fc","modified":1594475078000},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/7.jpg","hash":"09969b7e4e244e8e67532c4673ee24b7df02029f","modified":1594475400000},{"_id":"source/_posts/2020/05/从零开始手撸vue源码/2-1.png","hash":"5d95bdd0f110e57e71c2a37700b258805a037719","modified":1590210475000},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/4.png","hash":"af7384383e3367f2de1568205d2b078beaefe358","modified":1594458443000},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/2.png","hash":"e83f006ec24245da531153e6d414f3fa94d4f219","modified":1594457393000},{"_id":"source/_posts/2020/07/实现一个简易Vuex/1.png","hash":"77c5073cff8a572f04a11c81bf379ca15a76ff57","modified":1594539169000},{"_id":"source/_posts/2021/08/支付宝小程序前端授权/authFlow.png","hash":"506ef63e3cc1d2f060e9bb38d7fd5b60598e2ef4","modified":1628215917000},{"_id":"source/_posts/2020/05/在vue中使用graphql/1.png","hash":"ea7cb48b237c8f4a8f013ae3f324488ba0dbd8c5","modified":1590396410000},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/1.png","hash":"1f9618d214ef7cf310885f96a551a6cd28161e37","modified":1594457181000},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/3.png","hash":"e4cd08fb247580290de63cc8be6e9090045aafb8","modified":1594458194000},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1590041553000},{"_id":"source/_posts/2020/05/不好好工作会怎么样呢/1.mp4","hash":"3ac91fcb128d7571dcd3181cc675d6f19633d847","modified":1590151668000},{"_id":"public/search.xml","hash":"d00dbdf049df5eb7063b0db82b4849a9ea7b4394","modified":1639583243083},{"_id":"public/baidusitemap.xml","hash":"1e1cf64285a34e78aabd8a1ab36b2c677f5e9095","modified":1639583243083},{"_id":"public/gallery/index.html","hash":"d6c5a6c47e5d1ff6195639ab2edc6dc7326281b2","modified":1639583243083},{"_id":"public/categories/index.html","hash":"bb1e53654d50989c4db26643c11b4265cb17aecd","modified":1639583243083},{"_id":"public/404/index.html","hash":"ca73ee5007564981345f2377a302144d768e6263","modified":1639583243083},{"_id":"public/2021/12/LeetCode-83-删除排序链表中的重复元素/index.html","hash":"5d0b0b787240493f08d91aab9fc4db45e62d2c9c","modified":1639583243083},{"_id":"public/2021/12/LeetCode-19-删除链表中的倒数第N个结点/index.html","hash":"609a8902c895bc7f8ff4229447d7e775cdfe5659","modified":1639583243083},{"_id":"public/2021/12/LeetCode-142-环形链表II/index.html","hash":"b9fdbac9fd53263d7f2acc27b61b2fd9827511f4","modified":1639583243083},{"_id":"public/2021/12/LeetCode-24-两两交换链表中的节点/index.html","hash":"4a2c748a55b44fd8d5893cddc08fbf3945610bd1","modified":1639583243083},{"_id":"public/2021/12/LeetCode-25-K个一组翻转链表/index.html","hash":"33ee4771ecb877d91ed28c5ff8eb245fcf70e00f","modified":1639583243083},{"_id":"public/2021/12/LeetCode-92-反转链表II/index.html","hash":"eea36ce79fa580accc8675551d0647427973aa3d","modified":1639583243083},{"_id":"public/tags/index.html","hash":"ee8e2576768e818c7bb77b8cfa1ff3f1cf3d2383","modified":1639583243083},{"_id":"public/2021/12/2021年度总结/index.html","hash":"bc13a70ae59e2156551a3d1291f47e8d20234fb1","modified":1639583243083},{"_id":"public/2021/12/LeetCode-206-反转链表/index.html","hash":"114065bc81ad791943968da19c51bca3e91fb144","modified":1639583243083},{"_id":"public/2021/12/LeetCode-141-环形链表/index.html","hash":"04e9b0275ee5d05357986ed651c7aaa1bd78692d","modified":1639583243083},{"_id":"public/2021/08/Browserslist/index.html","hash":"3037f54a09f2e49b2e0aee602f6937184bdebd0f","modified":1639583243083},{"_id":"public/2021/08/支付宝小程序前端授权/index.html","hash":"fdc6cb2f0675bdb2975083240b6209837c91d2a5","modified":1639583243083},{"_id":"public/2021/01/仿写new运算符/index.html","hash":"050e30b7fe41ae7b2b3f89395ca35af8c31bc7a6","modified":1639583243083},{"_id":"public/2021/01/mac电脑也能模拟ie浏览器了/index.html","hash":"52a37204d5ae53c71e528b3c91ef87a05d58eb44","modified":1639583243083},{"_id":"public/2020/07/HTML中常用的meta便签/index.html","hash":"31c66c5144357950e089b93f0ff21a50f0939f5a","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/index.html","hash":"e7778f4b6bc32fe796809841fbe00e364fee7489","modified":1639583243083},{"_id":"public/2020/07/Vue中v-if和v-for的优先级/index.html","hash":"57789676307d18e85be1eb6d30bdef3b0d1db2b2","modified":1639583243083},{"_id":"public/2020/06/在vue项目中动态加载js/index.html","hash":"f1d3aa4696957822d22d41e4df773a556985ceab","modified":1639583243083},{"_id":"public/2020/05/Vue中Watch和Computed的差异/index.html","hash":"adaea14b19abf910afc4f3adcbd4c87bbbc27570","modified":1639583243083},{"_id":"public/2020/05/git常用命令/index.html","hash":"28187cd057e0226ac8f9386da73f5e651346ebba","modified":1639583243083},{"_id":"public/2020/05/不好好工作会怎么样呢/index.html","hash":"6d033611831caadad863f8d443a3a4a88eff4350","modified":1639583243083},{"_id":"public/2020/05/hexo简单使用说明/index.html","hash":"d5bc69fedf7d5400e4961266e8cad4fcb8c7dad4","modified":1639583243083},{"_id":"public/2020/05/爬取豆瓣电影top250/index.html","hash":"599d6c12a70cee0a3c5df88df792f46fee56b498","modified":1639583243083},{"_id":"public/archives/index.html","hash":"45ce1e40015bea835e8e7d9e8e1ca3c6afacb1aa","modified":1639583243083},{"_id":"public/archives/page/3/index.html","hash":"5e2fc8d25532586cbcefecea3efe849676dbece9","modified":1639583243083},{"_id":"public/archives/page/4/index.html","hash":"d40451f086f0bade271e0f3869cd3490d5fac6f1","modified":1639583243083},{"_id":"public/archives/page/2/index.html","hash":"5f9f73c1161d87df886bae5a51cde5a4bf87d197","modified":1639583243083},{"_id":"public/archives/page/6/index.html","hash":"0e65f23d85a14611d18e59f2d17a55a849d25964","modified":1639583243083},{"_id":"public/archives/page/5/index.html","hash":"3cdf218f431b2ad4663d9806cfbaa8ad076943fb","modified":1639583243083},{"_id":"public/archives/2020/index.html","hash":"353674bca20ca83a51da25186822cda1b52b1ebe","modified":1639583243083},{"_id":"public/archives/2020/page/3/index.html","hash":"98a9ce2286f5f7885933aea9ed993d381c569716","modified":1639583243083},{"_id":"public/archives/2020/page/2/index.html","hash":"5eb4a172f2d505011e008e9168d8069a342c81e4","modified":1639583243083},{"_id":"public/archives/page/7/index.html","hash":"ef894d178e83b01587dd7fb0d87e43716c7d55c1","modified":1639583243083},{"_id":"public/archives/2020/page/4/index.html","hash":"8d5d469bbac4c615ab2a8032de18f2059c1a54ae","modified":1639583243083},{"_id":"public/archives/2020/06/index.html","hash":"37ddd5c90e3762c4420104544b6e3210faa1f5c0","modified":1639583243083},{"_id":"public/archives/2020/05/index.html","hash":"926a024d7045bb243ae7c4dfe97f84574836d1c9","modified":1639583243083},{"_id":"public/archives/2020/07/index.html","hash":"4b4a48be60d2b8271d5b31e39e161086e814b3a0","modified":1639583243083},{"_id":"public/archives/2020/07/page/2/index.html","hash":"df932de4d81443e45bf809081331155fddce443a","modified":1639583243083},{"_id":"public/archives/2020/08/index.html","hash":"846f520bee2c397f2ab6813c68ee3fd362c50c41","modified":1639583243083},{"_id":"public/archives/2020/12/index.html","hash":"f5c7438363e58ea07a4241fde2fb14117759716b","modified":1639583243083},{"_id":"public/archives/2021/index.html","hash":"0e794821bf2c567e6dfda3f911d127cf415f6d3e","modified":1639583243083},{"_id":"public/archives/2020/11/index.html","hash":"b5637df0ef95ded04196527fcc6e43934238e0fd","modified":1639583243083},{"_id":"public/archives/2021/page/2/index.html","hash":"e4c0d7c476b23d11408abeca00ae37c9246b3216","modified":1639583243083},{"_id":"public/archives/2021/page/4/index.html","hash":"1ee7225cebfd81f45780eceb304f88b681404edf","modified":1639583243083},{"_id":"public/archives/2021/03/index.html","hash":"23c77585847a75869cca3af4687c00f3214fc3b7","modified":1639583243083},{"_id":"public/archives/2021/page/3/index.html","hash":"cca97c58587144e9b9ab2b3f221e492714310783","modified":1639583243083},{"_id":"public/archives/2021/08/index.html","hash":"83b53ed54d748c6170c11ac65a152d614e222474","modified":1639583243083},{"_id":"public/archives/2021/08/page/2/index.html","hash":"221477720c65402f6688d96373181d62e91ff4d1","modified":1639583243083},{"_id":"public/archives/2021/01/index.html","hash":"470b0098cdc2ad2a4d0835719c2a48aadaa28fb9","modified":1639583243083},{"_id":"public/archives/2021/10/index.html","hash":"2385f0f81530b1e73dc628f71df7219d0ac07c33","modified":1639583243083},{"_id":"public/archives/2021/12/index.html","hash":"45ae260a5f7fd270b8835280dafc3df07b39d379","modified":1639583243083},{"_id":"public/archives/2021/12/page/2/index.html","hash":"5bb60e8adabb419167d0d8aa728f39c493026041","modified":1639583243083},{"_id":"public/archives/2021/09/index.html","hash":"2639a82093d3a185c07b3b573372cf099ca25773","modified":1639583243083},{"_id":"public/page/3/index.html","hash":"ec938caa2af7d896af49eb45cacdea2397359944","modified":1639583243083},{"_id":"public/page/7/index.html","hash":"b9d7d3dbdc02104ddfd1ebdacc3f752021390d03","modified":1639583243083},{"_id":"public/tags/git/index.html","hash":"de64efdce84ec980ce89b0b4c5c0ceaa900a9d9f","modified":1639583243083},{"_id":"public/tags/hexo/index.html","hash":"3a645c46fa7caa5f486f33564c58bd02b78a537f","modified":1639583243083},{"_id":"public/tags/闲谈/index.html","hash":"b65d4edbf2b724551d2b9c91c08e7a5e930cd6a9","modified":1639583243083},{"_id":"public/tags/vue/index.html","hash":"9c94b7ff96dd1105ca441c46d3450942457ba93e","modified":1639583243083},{"_id":"public/tags/vue/page/2/index.html","hash":"b77a46b1dafaa652278943b7db56e52b2b28b9c6","modified":1639583243083},{"_id":"public/tags/graphql/index.html","hash":"c483d1947d7dde6630083e8c2a709fad04e293c4","modified":1639583243083},{"_id":"public/tags/python/index.html","hash":"a4127d6f85bf598231256b4de56de186b5591d67","modified":1639583243083},{"_id":"public/tags/爬虫/index.html","hash":"c8e484b2e4c7b2dca26d6f8468d8e4ec26199d76","modified":1639583243083},{"_id":"public/tags/uni-app/index.html","hash":"11f9febc062b9879f7422f5fca5f16871d8d6173","modified":1639583243083},{"_id":"public/tags/网络请求/index.html","hash":"c16d92b48719f3afff0894b32e6223733dbb3d03","modified":1639583243083},{"_id":"public/tags/面试题/index.html","hash":"62de891dbae541c88b84e199e820fcce94ede4bf","modified":1639583243083},{"_id":"public/tags/css/index.html","hash":"22e0707174e55cf907886d361c64ce695c67d129","modified":1639583243083},{"_id":"public/tags/前端/index.html","hash":"1ab446ad9ff22065cd9a972b087ffd4f0933b005","modified":1639583243083},{"_id":"public/tags/前端面试/index.html","hash":"60b8691979521e883ab585cea776f42ebbf075b1","modified":1639583243083},{"_id":"public/tags/ie/index.html","hash":"05f7f8797a2cfc834046023c4e00b596bcc1a7d8","modified":1639583243083},{"_id":"public/tags/全栈之路/index.html","hash":"fd5bc89a5f8bc46a2a10bd548feb621b9a31ebcb","modified":1639583243083},{"_id":"public/tags/webpack/index.html","hash":"65c9b480da1fb9423415edfc1530c8d2d2327788","modified":1639583243083},{"_id":"public/tags/数据库/index.html","hash":"e37a58a42c58d8ba1eaf025f6c6ca0146c281ddf","modified":1639583243083},{"_id":"public/tags/TypeScript/index.html","hash":"02dfbc224b7359bcae8d7ecef3abb3809850c6b6","modified":1639583243083},{"_id":"public/tags/node/index.html","hash":"197b1e1683474dd48bd981c62fcbcca97b9ebee9","modified":1639583243083},{"_id":"public/tags/flutter/index.html","hash":"efdad2d43de144fe0e4090ad2867f9014d1eadcd","modified":1639583243083},{"_id":"public/tags/JavaScript/index.html","hash":"a2d10662a875b444255e30ae13ad883bf73cae4c","modified":1639583243083},{"_id":"public/tags/websocket/index.html","hash":"3a810f0d6c3731a55f83c2c8932ca0446c0a899b","modified":1639583243083},{"_id":"public/tags/支付宝小程序/index.html","hash":"fa4d87287a0d0f980fba5aee0aeba45137519ca2","modified":1639583243083},{"_id":"public/tags/年度总结/index.html","hash":"95d6f2c84f6af12e8b22f2b59155b66e24f571be","modified":1639583243083},{"_id":"public/tags/LeetCode/index.html","hash":"fa4d991e3fb44b77e2a322face72b0ada116b4e3","modified":1639583243083},{"_id":"public/tags/算法/index.html","hash":"acd791978ce013e334c83bd48ef98f7685d8cec6","modified":1639583243083},{"_id":"public/tags/地图/index.html","hash":"9cd23b382eb56b3c5f8fcbdc449499b643fa370b","modified":1639583243083},{"_id":"public/tags/jsapi/index.html","hash":"715b18b5b430507de20878b3d422eb0f18eadc4c","modified":1639583243083},{"_id":"public/tags/promise/index.html","hash":"beedd52abbdb2734239eba18b80fc8c2cbb4c124","modified":1639583243083},{"_id":"public/categories/vue/index.html","hash":"05f742fb0382bdc2a8b723ec41f823fa052a8cd3","modified":1639583243083},{"_id":"public/categories/hexo/index.html","hash":"90f7ec296942b81ccb9f9d3923420cdfff137cfe","modified":1639583243083},{"_id":"public/categories/git/index.html","hash":"79efef1336478b03f1c14288a330b7bf61499b0e","modified":1639583243083},{"_id":"public/categories/闲谈/index.html","hash":"a45c83fcfc84328963e0fd8b57da401dad524481","modified":1639583243083},{"_id":"public/categories/python/index.html","hash":"6adbf0f831d07d0ba36222bb80e5fcc49319077e","modified":1639583243083},{"_id":"public/categories/vue/page/2/index.html","hash":"dbf3412d5ae9009664822daa2231cf7add5bb288","modified":1639583243083},{"_id":"public/categories/uni-app/index.html","hash":"2eb2af45cd105f1bb1136255eabae3936df2d75e","modified":1639583243083},{"_id":"public/categories/前端面试/index.html","hash":"decb443d1c4190898cd0b0aac48024e95be35e5d","modified":1639583243083},{"_id":"public/categories/面试题/index.html","hash":"1107d4bfc3812621d21e13643ba1f74244096248","modified":1639583243083},{"_id":"public/categories/vue/graphql/index.html","hash":"f4c2553cb42975de9ba01872aabae63eca331721","modified":1639583243083},{"_id":"public/categories/爬虫/index.html","hash":"443cf1216ba21ba48f4e5e477581c1573b11635a","modified":1639583243083},{"_id":"public/categories/uni-app/网络请求/index.html","hash":"44fe38374963ad5fbbf67e804650e145fcabc0b8","modified":1639583243083},{"_id":"public/categories/css/index.html","hash":"a720452c14c703890e79d7ef3dafa23bfca400a7","modified":1639583243083},{"_id":"public/categories/前端/index.html","hash":"95421d22fd889bbc9ea607213b39e6c8bd2320a4","modified":1639583243083},{"_id":"public/categories/JavaScript/index.html","hash":"0cd785ddd1f89c77b5b7b84c2d4af1d65f1d0794","modified":1639583243083},{"_id":"public/categories/flutter/index.html","hash":"83d2ac19cb4d51f99b5748da00b9cc59c4e24011","modified":1639583243083},{"_id":"public/categories/node/index.html","hash":"dca19552bce157505a6fd9cfbd98bcd1f6c06a79","modified":1639583243083},{"_id":"public/categories/全栈之路/index.html","hash":"7c41fb860d9623d8457f410f83be221412e84ed4","modified":1639583243083},{"_id":"public/categories/vue/网络请求/index.html","hash":"c222d4cbfcf077e6e66e09044180f537c50b66fb","modified":1639583243083},{"_id":"public/categories/webpack/index.html","hash":"c98e9ef2f27e02d506baaab5de7e8fc5573d5e05","modified":1639583243083},{"_id":"public/categories/前端/ie/index.html","hash":"1c513170addfc56f76ad154376840aaf5198eba2","modified":1639583243083},{"_id":"public/categories/数据库/index.html","hash":"eecc4b3008354ab7cc3b548f41a5e5478ab8b815","modified":1639583243083},{"_id":"public/categories/TypeScript/index.html","hash":"3c473b4abd9c1ea48328da187a53420cbfbdf7fe","modified":1639583243083},{"_id":"public/categories/websocket/index.html","hash":"9e886a72fc28a8add93264dfaaa07d04409795e0","modified":1639583243083},{"_id":"public/categories/flutter/网络请求/index.html","hash":"21fcde1cd2445115418f0ae3ae0aa3d759208867","modified":1639583243083},{"_id":"public/categories/支付宝小程序/index.html","hash":"dc70e641b55c501c3485853482dc23da3db2495a","modified":1639583243083},{"_id":"public/categories/年度总结/index.html","hash":"7d49a6f1dc3224bcb012acea488f3c2ed9737acd","modified":1639583243083},{"_id":"public/categories/算法/index.html","hash":"5dcbeac140ddf6b0491f6940828d611158783ba0","modified":1639583243083},{"_id":"public/categories/全栈之路/node/index.html","hash":"e5c61724252af507a5780403f3d12b0c37d8fc9f","modified":1639583243083},{"_id":"public/categories/地图/index.html","hash":"ce1108cc39586cfc6a9376c2713317166fd49be0","modified":1639583243083},{"_id":"public/categories/算法/LeetCode/index.html","hash":"ada588a9cab5aa25f2f98a6cb3a755ef8e212a1b","modified":1639583243083},{"_id":"public/categories/全栈之路/promise/index.html","hash":"b4d8339b5416bba5f1027d80e4b1b22c533e2a57","modified":1639583243083},{"_id":"public/categories/地图/jsapi/index.html","hash":"6a78f0a1faeffea741889f8fe1523b662a651f9e","modified":1639583243083},{"_id":"public/2021/12/LeetCode-61-旋转链表/index.html","hash":"6082ac83bfa507e95858859d56ddc0d79e561cc6","modified":1639583243083},{"_id":"public/2021/12/LeetCode-202-快乐数/index.html","hash":"9241757506862d353298881f703e8530f6f6cfc0","modified":1639583243083},{"_id":"public/2021/10/从零开始进阶全栈之手撕promise/index.html","hash":"b4adb4df781310aa4874a117c49e277bb15c13b2","modified":1639583243083},{"_id":"public/2021/09/从零开始进阶全栈之koa源码/index.html","hash":"a6f4fc56dfac2417915032d09561f26629b5103d","modified":1639583243083},{"_id":"public/2021/09/从零开始进阶全栈之NODE基础api/index.html","hash":"25db3eefacb079b659b5167ef8ddfcbcb3268286","modified":1639583243083},{"_id":"public/2021/09/从零开始进阶全栈之数据库(二)/index.html","hash":"3f278304cdf1167534e2625ac42868863699e217","modified":1639583243083},{"_id":"public/2021/09/从零开始进阶全栈之数据库(一)/index.html","hash":"4a74de80af0dca31a79aea31cacac611718b0aa9","modified":1639583243083},{"_id":"public/2021/08/TS装饰器之防抖节流/index.html","hash":"c48a201be9f0bdca7494e89f7dcb1ce409c851a5","modified":1639583243083},{"_id":"public/2021/08/JavaScript基础之变量提升/index.html","hash":"a3f82011bbf84514eef34343d39cd3633a39b43d","modified":1639583243083},{"_id":"public/2021/08/基于高德地图jsapi的二次封装/index.html","hash":"77e51313c2e411dfd5c9c75ddf709dbe408d602c","modified":1639583243083},{"_id":"public/2021/08/支付宝小程序父子组件相互调用/index.html","hash":"825a99f33c13c686a36d53dab1fd5b5dd9bcdfde","modified":1639583243083},{"_id":"public/2021/08/websocket从入门到入土/index.html","hash":"6523565120626ef0c4b363f253f162b44517c0a4","modified":1639583243083},{"_id":"public/2021/08/webpack进行前端开发工程环境搭建/index.html","hash":"294f3c1578dae49d79d1a4a7e6ac30977c63e516","modified":1639583243083},{"_id":"public/2021/08/webpack基础/index.html","hash":"689f482093500e6ae9d98556c5ce84143dd21f1b","modified":1639583243083},{"_id":"public/2021/08/TS进阶之-装饰器/index.html","hash":"be6d4b5b2d2275d909659a196d70ea7fbb13c57b","modified":1639583243083},{"_id":"public/2021/08/TypeScript还不会-看完这篇就行了/index.html","hash":"94eb5abb5c88e9527c4b4dc8ffdc7f766319f8cc","modified":1639583243083},{"_id":"public/2021/03/nodejs文件操作/index.html","hash":"144e6389444b0c56115ba54a12c00857230d1936","modified":1639583243083},{"_id":"public/2021/01/面向对象/index.html","hash":"14fe032457548ad638f80239da73b08888870939","modified":1639583243083},{"_id":"public/2021/01/es6基础/index.html","hash":"d2865e8b2b02f7d681a4224e24485627a0b023ed","modified":1639583243083},{"_id":"public/2020/12/BFC布局/index.html","hash":"77c90b59446850a83eab3d0c3383740da04b4c08","modified":1639583243083},{"_id":"public/2020/12/圣杯布局-双飞翼布局/index.html","hash":"553e0c4401e23c0833d57fb715811be119269bdf","modified":1639583243083},{"_id":"public/2020/11/将uni-request进行axios化封装/index.html","hash":"22b1205507218210bb9bc0dfd8f2b84ee5749317","modified":1639583243083},{"_id":"public/2020/08/flutter中区分开发环境与正式环境/index.html","hash":"55360ed8e216a8cbfe58cfc65522bffdbe5eb7b2","modified":1639583243083},{"_id":"public/2020/08/flutter中验证码倒计时/index.html","hash":"be43127ff896586da78d3839921bfc3ef09c478e","modified":1639583243083},{"_id":"public/2020/08/JS从入门到放弃——数据类型/index.html","hash":"632dacfd1060d2037eb4c11967a0c03ee90aebc0","modified":1639583243083},{"_id":"public/2020/08/在flutter中优雅的封装网络请求/index.html","hash":"f97fbc067140eb7e18ad5ea6abf80a20a17a9030","modified":1639583243083},{"_id":"public/2020/08/在vue中对axios进行二次封装/index.html","hash":"14b4425cdcf78f86958de12428ba6d17ea4bfd44","modified":1639583243083},{"_id":"public/2020/07/前端面试题(二)/index.html","hash":"3538ddbb743935cff0a783361a319d04626d5628","modified":1639583243083},{"_id":"public/2020/07/前端面试题(一)/index.html","hash":"39afbd1ac29eba745f8d8bc8c72d302a5a72f04d","modified":1639583243083},{"_id":"public/2020/07/实现一个简易Vuex/index.html","hash":"b34cdb22468a70f5de57d70977869dfbc1aaba46","modified":1639583243083},{"_id":"public/2020/07/Vue中key的作用和工作原理/index.html","hash":"04215816b9e516676f41963b3bf30dfd044a2c1a","modified":1639583243083},{"_id":"public/2020/07/Vue组件data为何要函数形式/index.html","hash":"d3141684d42dcf3a0a8b47d2cfe93ca5165a09ff","modified":1639583243083},{"_id":"public/2020/07/vue-router源码实现/index.html","hash":"7c7ca2bfbd5b2af1f22ec06ce9634621d43c51a7","modified":1639583243083},{"_id":"public/2020/07/实现vue弹窗组件(二)/index.html","hash":"279b8a2e8f00147a2136fe1ed0ff36b1c8d0aa89","modified":1639583243083},{"_id":"public/2020/07/实现vue弹窗组件(一)/index.html","hash":"cec322c3fd10762281e9b4d728d7c2a4286dc3ad","modified":1639583243083},{"_id":"public/2020/06/Vue组件化/index.html","hash":"9a801d415f18ec42c0165d0386687f7a7a451569","modified":1639583243083},{"_id":"public/2020/06/Vue统一状态管理——Vuex/index.html","hash":"3daa1f5140dabc70d82d6d7d6011a0b3390bbd15","modified":1639583243083},{"_id":"public/2020/06/自己动手封装一个Vue表单组件/index.html","hash":"78e8ebaf404aa50c6a6aebd9b2c07e8d8bb9b740","modified":1639583243083},{"_id":"public/2020/06/Vue中路由守卫/index.html","hash":"6a7e343e0362aab0a5024b5436d3eacb2cb94f78","modified":1639583243083},{"_id":"public/2020/05/在vue中使用graphql/index.html","hash":"48ecd9d079f7a82f07d273f09a4821ca4143d8a1","modified":1639583243083},{"_id":"public/2020/05/从零开始手撸vue源码/index.html","hash":"7db202c08e159e2396e0b167d6d9baa86cd5994f","modified":1639583243083},{"_id":"public/2020/06/必备知识之Vue-Cli/index.html","hash":"fe22a85d379e394772bda773b415e59d7baaef9b","modified":1639583243083},{"_id":"public/index.html","hash":"a98b62f3e0fa077072b84bacf447de5246d9b68c","modified":1639583243083},{"_id":"public/page/2/index.html","hash":"ff06a345c0754e3419de2d9b86f99ea7013cdd9f","modified":1639583243083},{"_id":"public/page/4/index.html","hash":"b64f94a9502bba1fa743f861d684b47139a1f591","modified":1639583243083},{"_id":"public/page/5/index.html","hash":"78b06cd09f12a24d14e055efe0c65b8388f4da84","modified":1639583243083},{"_id":"public/page/6/index.html","hash":"3bc54df4d72248c42c2128f09a228726f374dcea","modified":1639583243083},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639583243083},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1639583243083},{"_id":"public/img/avatar.png","hash":"71c75ea1031b43efe08fcb69c4fa75624de9d6df","modified":1639583243083},{"_id":"public/2020/05/hexo简单使用说明/result@2.png","hash":"bace9f44f9a2609b57a0a64766111a80b14019d1","modified":1639583243083},{"_id":"public/2020/05/不好好工作会怎么样呢/1.jpg","hash":"ac013581bdb990cbaa962fc28dc44e61186348f9","modified":1639583243083},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1639583243083},{"_id":"public/2020/07/实现一个简易Vuex/2.png","hash":"e5803a74292787034a12df8b4cd83b01ec578789","modified":1639583243083},{"_id":"public/2020/12/BFC布局/1.png","hash":"b8defc8e8ad6faa6dfa7c641b6bd5864dbdb1520","modified":1639583243083},{"_id":"public/2020/12/BFC布局/3.png","hash":"51e270d9d8cc9d03b83224c6982d11091485fb1f","modified":1639583243083},{"_id":"public/2020/12/BFC布局/2.png","hash":"a95e7a2c11cc0986bf20c03dc1f7ae1313ac004f","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/1.jpg","hash":"7704949da37c2a6487103e2fcce74106b586ab2d","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/2.jpg","hash":"a582a8f5351bab4da908fbd37ac4a6dbb977508f","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/3.jpg","hash":"181206d38725b0eb121e757666818ff85c409df8","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/6.jpg","hash":"a8707899b44a99df3302cdd89263dae0fc707773","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/8.jpg","hash":"5c6fc0df779c76042143203b7c53a0ff0a787c91","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/5.jpg","hash":"58ab274aadd8d0830e0c22fce0cf8fa783461166","modified":1639583243083},{"_id":"public/2020/05/从零开始手撸vue源码/3-1.png","hash":"fd21c58451f89bb20094ad67cd6526c079511b6c","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/4.jpg","hash":"b7db996343f36cde62067ac6b876f307f84dd4fc","modified":1639583243083},{"_id":"public/2020/07/苹果手机自定义siri回答/7.jpg","hash":"09969b7e4e244e8e67532c4673ee24b7df02029f","modified":1639583243083},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639583243083},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1639583243083},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1639583243083},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1639583243083},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1639583243083},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1639583243083},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1639583243083},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1639583243083},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639583243083},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1639583243083},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1639583243083},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1639583243083},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1639583243083},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1639583243083},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1639583243083},{"_id":"public/js/scroll.js","hash":"467f883ca2ace0c0fb46ae24919223560a6fb72c","modified":1639583243083},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1639583243083},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1639583243083},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1639583243083},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1639583243083},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1639583243083},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1639583243083},{"_id":"public/baidu_verify_U661pkRu5P.html","hash":"a52d22a7a2455a87a5afb76f32a70da20f3f6048","modified":1639583243083},{"_id":"public/css/index.css","hash":"4ede462447daf111bf43518d4cf894b74b7f16ac","modified":1639583243083},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1639583243083},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1639583243083},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1639583243083},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1639583243083},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1639583243083},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1639583243083},{"_id":"public/2020/05/从零开始手撸vue源码/2-1.png","hash":"5d95bdd0f110e57e71c2a37700b258805a037719","modified":1639583243083},{"_id":"public/2020/07/Vue中key的作用和工作原理/4.png","hash":"af7384383e3367f2de1568205d2b078beaefe358","modified":1639583243083},{"_id":"public/2020/07/Vue中key的作用和工作原理/2.png","hash":"e83f006ec24245da531153e6d414f3fa94d4f219","modified":1639583243083},{"_id":"public/assets/js/DPlayer.min.js","hash":"5c9a959619baaf88cb459b638a718f08f98e1659","modified":1639583243083},{"_id":"public/2021/08/支付宝小程序前端授权/authFlow.png","hash":"506ef63e3cc1d2f060e9bb38d7fd5b60598e2ef4","modified":1639583243083},{"_id":"public/2020/07/实现一个简易Vuex/1.png","hash":"77c5073cff8a572f04a11c81bf379ca15a76ff57","modified":1639583243083},{"_id":"public/2020/05/在vue中使用graphql/1.png","hash":"ea7cb48b237c8f4a8f013ae3f324488ba0dbd8c5","modified":1639583243083},{"_id":"public/2020/07/Vue中key的作用和工作原理/3.png","hash":"e4cd08fb247580290de63cc8be6e9090045aafb8","modified":1639583243083},{"_id":"public/2020/07/Vue中key的作用和工作原理/1.png","hash":"1f9618d214ef7cf310885f96a551a6cd28161e37","modified":1639583243083},{"_id":"public/2020/05/不好好工作会怎么样呢/1.mp4","hash":"3ac91fcb128d7571dcd3181cc675d6f19633d847","modified":1639583243083}],"Category":[{"name":"git","_id":"ckx7pj51600061r0q4a9kgcdg"},{"name":"hexo","_id":"ckx7pj51j000b1r0qbfqlcge6"},{"name":"闲谈","_id":"ckx7pj51v000h1r0qbca69716"},{"name":"vue","_id":"ckx7pj523000n1r0q25ug5izo"},{"name":"python","_id":"ckx7pj52r000z1r0q4g3tei7r"},{"name":"uni-app","_id":"ckx7pj53100191r0qdfgk8dvp"},{"name":"前端面试","_id":"ckx7pj532001h1r0q024b8qql"},{"name":"面试题","_id":"ckx7pj53d001o1r0q6rbqef8d"},{"name":"graphql","parent":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53h001v1r0q2z8y3t64"},{"name":"爬虫","_id":"ckx7pj53n002c1r0q6oa8fxla"},{"name":"网络请求","parent":"ckx7pj53100191r0qdfgk8dvp","_id":"ckx7pj53n002k1r0q8khjdjlg"},{"name":"css","_id":"ckx7pj53q00311r0q8r576zhb"},{"name":"前端","_id":"ckx7pj53u003h1r0qa0ymbrti"},{"name":"JavaScript","_id":"ckx7pj53x003s1r0q2znz8fex"},{"name":"flutter","_id":"ckx7pj54000401r0q8ghg2pl0"},{"name":"node","_id":"ckx7pj549004x1r0qdgm4dp05"},{"name":"网络请求","parent":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj54a00531r0q3fo9czqo"},{"name":"全栈之路","_id":"ckx7pj54c005c1r0qbqgo595n"},{"name":"webpack","_id":"ckx7pj54d005i1r0q1zo1blev"},{"name":"ie","parent":"ckx7pj53u003h1r0qa0ymbrti","_id":"ckx7pj54f005n1r0q25ec3xs6"},{"name":"数据库","_id":"ckx7pj54m005x1r0q8hdwclje"},{"name":"TypeScript","_id":"ckx7pj54m00641r0q08ko39v4"},{"name":"websocket","_id":"ckx7pj54u006r1r0qezn69ou5"},{"name":"网络请求","parent":"ckx7pj54000401r0q8ghg2pl0","_id":"ckx7pj54v006w1r0q5jrs7yrl"},{"name":"支付宝小程序","_id":"ckx7pj54v00701r0q2jbbdnva"},{"name":"年度总结","_id":"ckx7pj54w00781r0qb2wxaa1y"},{"name":"算法","_id":"ckx7pj54w007e1r0q0gceb22d"},{"name":"node","parent":"ckx7pj54c005c1r0qbqgo595n","_id":"ckx7pj54x007v1r0qc7mi42wk"},{"name":"地图","_id":"ckx7pj54z008f1r0qhq21dqw8"},{"name":"LeetCode","parent":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj551008j1r0q0616158j"},{"name":"promise","parent":"ckx7pj54c005c1r0qbqgo595n","_id":"ckx7pj553008p1r0qachn0vem"},{"name":"jsapi","parent":"ckx7pj54z008f1r0qhq21dqw8","_id":"ckx7pj556009y1r0q5xhchb4x"}],"Data":[],"Page":[{"title":"Gallery","date":"2020-05-21T06:14:56.000Z","type":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2020-05-21 14:14:56\ntype: \"gallery\"\n---\n","updated":"2020-05-21T07:14:44.000Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"ckx7pj4pz00001r0qf7jgcgzw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---","updated":"2020-05-21T07:13:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckx7pj4q400011r0qbpgkfvjo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---","updated":"2020-05-21T07:13:35.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckx7pj4qv00021r0qf16xfel5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2020-05-21T06:15:37.000Z","_content":"\n\n404 Page Not Found","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-05-21 14:15:37\n---\n\n\n404 Page Not Found","updated":"2020-05-21T06:16:07.000Z","path":"404/index.html","comments":1,"layout":"page","_id":"ckx7pj4qy00031r0qb31p39z7","content":"<p>404 Page Not Found</p>\n","site":{"data":{}},"excerpt":"","more":"<p>404 Page Not Found</p>\n"}],"Post":[{"title":"git常用命令","date":"2020-05-29T01:20:12.000Z","description":"记录下工作中经常使用的git命令","_content":"\n日常工作中的git高频命令\n\n<!-- more -->\n## 日常工作中常用的几条git命令\n\n1. 查看所有本地分支和远程分支\n\n    `git branch -a`\n\n2. 下载一个项目和它的整个代码历史\n\n    `git clone [url]`\n\n3. 列出所有远程分支\n\n    `git branch -r`\n\n4. 切换到指定分支\n\n    `git checkout [branch-name]`\n\n5. 合并指定分支到当前分支\n\n    `git merge [branch]`\n\n6. 新建一个分支，但依然停留在当前分支\n\n    `git branch [branch-name]`\n\n7. 新建一个分支，并切换到该分支\n\n    `git checkout -b [branch]`\n\n8. 显示所有远程仓库\n\n    `git remote -v`\n\n9. 取回远程仓库的变化\n\n    `git pull`\n\n10. 添加当前目录的所有文件到暂存区\n\n    `git add .`\n\n11.  提交暂存区到仓库区\n\n    `git commit -m [message]`\n\n12. 上传本地代码到远程仓库\n\n    `git push`\n\n13. 提交本地分支到远程仓库\n\n    `git push origin 本地分支名`\n\n14. 删除远程分支\n\n    `git push --delete origin 分支名`\n\n15. 更新远程分支列表\n\n    `git remote update origin -p`\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/05/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2020-05-29 09:20:12\ntags:\n    - git\ncategories:\n    - git\ndescription: 记录下工作中经常使用的git命令\n---\n\n日常工作中的git高频命令\n\n<!-- more -->\n## 日常工作中常用的几条git命令\n\n1. 查看所有本地分支和远程分支\n\n    `git branch -a`\n\n2. 下载一个项目和它的整个代码历史\n\n    `git clone [url]`\n\n3. 列出所有远程分支\n\n    `git branch -r`\n\n4. 切换到指定分支\n\n    `git checkout [branch-name]`\n\n5. 合并指定分支到当前分支\n\n    `git merge [branch]`\n\n6. 新建一个分支，但依然停留在当前分支\n\n    `git branch [branch-name]`\n\n7. 新建一个分支，并切换到该分支\n\n    `git checkout -b [branch]`\n\n8. 显示所有远程仓库\n\n    `git remote -v`\n\n9. 取回远程仓库的变化\n\n    `git pull`\n\n10. 添加当前目录的所有文件到暂存区\n\n    `git add .`\n\n11.  提交暂存区到仓库区\n\n    `git commit -m [message]`\n\n12. 上传本地代码到远程仓库\n\n    `git push`\n\n13. 提交本地分支到远程仓库\n\n    `git push origin 本地分支名`\n\n14. 删除远程分支\n\n    `git push --delete origin 分支名`\n\n15. 更新远程分支列表\n\n    `git remote update origin -p`\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/05/git常用命令","published":1,"updated":"2020-07-11T15:21:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj50y00041r0qh69mfd2m","content":"<p>日常工作中的git高频命令</p>\n<a id=\"more\"></a>\n<h2 id=\"日常工作中常用的几条git命令\"><a href=\"#日常工作中常用的几条git命令\" class=\"headerlink\" title=\"日常工作中常用的几条git命令\"></a>日常工作中常用的几条git命令</h2><ol>\n<li><p>查看所有本地分支和远程分支</p>\n<p> <code>git branch -a</code></p>\n</li>\n<li><p>下载一个项目和它的整个代码历史</p>\n<p> <code>git clone [url]</code></p>\n</li>\n<li><p>列出所有远程分支</p>\n<p> <code>git branch -r</code></p>\n</li>\n<li><p>切换到指定分支</p>\n<p> <code>git checkout [branch-name]</code></p>\n</li>\n<li><p>合并指定分支到当前分支</p>\n<p> <code>git merge [branch]</code></p>\n</li>\n<li><p>新建一个分支，但依然停留在当前分支</p>\n<p> <code>git branch [branch-name]</code></p>\n</li>\n<li><p>新建一个分支，并切换到该分支</p>\n<p> <code>git checkout -b [branch]</code></p>\n</li>\n<li><p>显示所有远程仓库</p>\n<p> <code>git remote -v</code></p>\n</li>\n<li><p>取回远程仓库的变化</p>\n<p> <code>git pull</code></p>\n</li>\n<li><p>添加当前目录的所有文件到暂存区</p>\n<p><code>git add .</code></p>\n</li>\n<li><p>提交暂存区到仓库区</p>\n<p><code>git commit -m [message]</code></p>\n</li>\n<li><p>上传本地代码到远程仓库</p>\n<p><code>git push</code></p>\n</li>\n<li><p>提交本地分支到远程仓库</p>\n<p><code>git push origin 本地分支名</code></p>\n</li>\n<li><p>删除远程分支</p>\n<p><code>git push --delete origin 分支名</code></p>\n</li>\n<li><p>更新远程分支列表</p>\n<p><code>git remote update origin -p</code></p>\n</li>\n</ol>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>日常工作中的git高频命令</p>","more":"<h2 id=\"日常工作中常用的几条git命令\"><a href=\"#日常工作中常用的几条git命令\" class=\"headerlink\" title=\"日常工作中常用的几条git命令\"></a>日常工作中常用的几条git命令</h2><ol>\n<li><p>查看所有本地分支和远程分支</p>\n<p> <code>git branch -a</code></p>\n</li>\n<li><p>下载一个项目和它的整个代码历史</p>\n<p> <code>git clone [url]</code></p>\n</li>\n<li><p>列出所有远程分支</p>\n<p> <code>git branch -r</code></p>\n</li>\n<li><p>切换到指定分支</p>\n<p> <code>git checkout [branch-name]</code></p>\n</li>\n<li><p>合并指定分支到当前分支</p>\n<p> <code>git merge [branch]</code></p>\n</li>\n<li><p>新建一个分支，但依然停留在当前分支</p>\n<p> <code>git branch [branch-name]</code></p>\n</li>\n<li><p>新建一个分支，并切换到该分支</p>\n<p> <code>git checkout -b [branch]</code></p>\n</li>\n<li><p>显示所有远程仓库</p>\n<p> <code>git remote -v</code></p>\n</li>\n<li><p>取回远程仓库的变化</p>\n<p> <code>git pull</code></p>\n</li>\n<li><p>添加当前目录的所有文件到暂存区</p>\n<p><code>git add .</code></p>\n</li>\n<li><p>提交暂存区到仓库区</p>\n<p><code>git commit -m [message]</code></p>\n</li>\n<li><p>上传本地代码到远程仓库</p>\n<p><code>git push</code></p>\n</li>\n<li><p>提交本地分支到远程仓库</p>\n<p><code>git push origin 本地分支名</code></p>\n</li>\n<li><p>删除远程分支</p>\n<p><code>git push --delete origin 分支名</code></p>\n</li>\n<li><p>更新远程分支列表</p>\n<p><code>git remote update origin -p</code></p>\n</li>\n</ol>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"hexo简单使用说明","date":"2020-05-19T07:34:28.000Z","description":"一些使用hexo常用的命令","_content":"# 一些使用hexo常用的命令\n<!-- more -->\n\n\n## 命令行\n\n``` bash\nhexo n \"博客名称\"  => hexo new \"博客名称\"   #这两个都是创建新文章，前者是简写模式\nhexo p  => hexo publish\nhexo g  => hexo generate  #生成\nhexo s  => hexo server  #启动服务预览\nhexo clean  //清除缓存 网页正常情况下可以忽略此条命令\nhexo d  => hexo deploy  #部署\nhexo publish [layout] <title>\n``` \n\n## 引入图片\n``` bash\n![图片alt](图片地址 ''图片title'')\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n例如\n![百度](https://www.baidu.com/img/flexible/logo/pc/result@2.png)\n或者\n{% asset_img slug [title] %}\n{% asset_img result@2.png [title] %}\n\n```\n\n\n![第一种](https://www.baidu.com/img/flexible/logo/pc/result@2.png)\n\n{% asset_img result@2.png [第二种] %}\n\n\n\n\n## 超链接\n``` bash\n[超链接名](超链接地址 \"超链接title\")\n例如\n[简书](http://jianshu.com)\n```\n\n[百度](http://www.baidu.com)\n\n\n## 无序列表\n\n使用符号`-`\n\n- 第一个\n- 第二个\n。。。。。。\n\n## 字体加粗\n\n```bash\n**需要加粗的内容**\n```\n**需要加粗的内容**\n\n## 引用\n\n```bash\n> 内容\n>> 内容\n>>> 内容\n```\n> 内容\n>> 内容\n>>> 内容\n","source":"_posts/2020/05/hexo简单使用说明.md","raw":"---\ntitle: hexo简单使用说明\ndate: 2020-05-19 15:34:28\ntags: hexo\ncategories: hexo\ndescription: 一些使用hexo常用的命令\n---\n# 一些使用hexo常用的命令\n<!-- more -->\n\n\n## 命令行\n\n``` bash\nhexo n \"博客名称\"  => hexo new \"博客名称\"   #这两个都是创建新文章，前者是简写模式\nhexo p  => hexo publish\nhexo g  => hexo generate  #生成\nhexo s  => hexo server  #启动服务预览\nhexo clean  //清除缓存 网页正常情况下可以忽略此条命令\nhexo d  => hexo deploy  #部署\nhexo publish [layout] <title>\n``` \n\n## 引入图片\n``` bash\n![图片alt](图片地址 ''图片title'')\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n例如\n![百度](https://www.baidu.com/img/flexible/logo/pc/result@2.png)\n或者\n{% asset_img slug [title] %}\n{% asset_img result@2.png [title] %}\n\n```\n\n\n![第一种](https://www.baidu.com/img/flexible/logo/pc/result@2.png)\n\n{% asset_img result@2.png [第二种] %}\n\n\n\n\n## 超链接\n``` bash\n[超链接名](超链接地址 \"超链接title\")\n例如\n[简书](http://jianshu.com)\n```\n\n[百度](http://www.baidu.com)\n\n\n## 无序列表\n\n使用符号`-`\n\n- 第一个\n- 第二个\n。。。。。。\n\n## 字体加粗\n\n```bash\n**需要加粗的内容**\n```\n**需要加粗的内容**\n\n## 引用\n\n```bash\n> 内容\n>> 内容\n>>> 内容\n```\n> 内容\n>> 内容\n>>> 内容\n","slug":"2020/05/hexo简单使用说明","published":1,"updated":"2020-07-11T15:21:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51300051r0q0vy40mrj","content":"<h1 id=\"一些使用hexo常用的命令\"><a href=\"#一些使用hexo常用的命令\" class=\"headerlink\" title=\"一些使用hexo常用的命令\"></a>一些使用hexo常用的命令</h1><a id=\"more\"></a>\n\n\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">\"博客名称\"</span>  =&gt; hexo new <span class=\"string\">\"博客名称\"</span>   <span class=\"comment\">#这两个都是创建新文章，前者是简写模式</span></span><br><span class=\"line\">hexo p  =&gt; hexo publish</span><br><span class=\"line\">hexo g  =&gt; hexo generate  <span class=\"comment\">#生成</span></span><br><span class=\"line\">hexo s  =&gt; hexo server  <span class=\"comment\">#启动服务预览</span></span><br><span class=\"line\">hexo clean  //清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo d  =&gt; hexo deploy  <span class=\"comment\">#部署</span></span><br><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 引入图片</span></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">![图片alt](图片地址 <span class=\"string\">''</span>图片title<span class=\"string\">''</span>)</span><br><span class=\"line\">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class=\"line\">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class=\"line\">例如</span><br><span class=\"line\">![百度](https://www.baidu.com/img/flexible/logo/pc/result@2.png)</span><br><span class=\"line\">或者</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_img result@2.png [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://www.baidu.com/img/flexible/logo/pc/result@2.png\" alt=\"第一种\"></p>\n<img src=\"/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/result@2.png\" class=\"\" title=\"[第二种]\">\n\n\n\n\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[超链接名](超链接地址 <span class=\"string\">\"超链接title\"</span>)</span><br><span class=\"line\">例如</span><br><span class=\"line\">[简书](http://jianshu.com)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">百度</a></p>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>使用符号<code>-</code></p>\n<ul>\n<li>第一个</li>\n<li>第二个<br>。。。。。。</li>\n</ul>\n<h2 id=\"字体加粗\"><a href=\"#字体加粗\" class=\"headerlink\" title=\"字体加粗\"></a>字体加粗</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**需要加粗的内容**</span><br></pre></td></tr></table></figure>\n<p><strong>需要加粗的内容</strong></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 内容</span><br><span class=\"line\">&gt;&gt; 内容</span><br><span class=\"line\">&gt;&gt;&gt; 内容</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>内容</p>\n<blockquote>\n<p>内容</p>\n<blockquote>\n<p>内容</p>\n</blockquote>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"一些使用hexo常用的命令\"><a href=\"#一些使用hexo常用的命令\" class=\"headerlink\" title=\"一些使用hexo常用的命令\"></a>一些使用hexo常用的命令</h1>","more":"<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">\"博客名称\"</span>  =&gt; hexo new <span class=\"string\">\"博客名称\"</span>   <span class=\"comment\">#这两个都是创建新文章，前者是简写模式</span></span><br><span class=\"line\">hexo p  =&gt; hexo publish</span><br><span class=\"line\">hexo g  =&gt; hexo generate  <span class=\"comment\">#生成</span></span><br><span class=\"line\">hexo s  =&gt; hexo server  <span class=\"comment\">#启动服务预览</span></span><br><span class=\"line\">hexo clean  //清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo d  =&gt; hexo deploy  <span class=\"comment\">#部署</span></span><br><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 引入图片</span></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">![图片alt](图片地址 <span class=\"string\">''</span>图片title<span class=\"string\">''</span>)</span><br><span class=\"line\">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class=\"line\">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class=\"line\">例如</span><br><span class=\"line\">![百度](https://www.baidu.com/img/flexible/logo/pc/result@2.png)</span><br><span class=\"line\">或者</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_img result@2.png [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://www.baidu.com/img/flexible/logo/pc/result@2.png\" alt=\"第一种\"></p>\n<img src=\"/2020/05/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/result@2.png\" class=\"\" title=\"[第二种]\">\n\n\n\n\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[超链接名](超链接地址 <span class=\"string\">\"超链接title\"</span>)</span><br><span class=\"line\">例如</span><br><span class=\"line\">[简书](http://jianshu.com)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">百度</a></p>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>使用符号<code>-</code></p>\n<ul>\n<li>第一个</li>\n<li>第二个<br>。。。。。。</li>\n</ul>\n<h2 id=\"字体加粗\"><a href=\"#字体加粗\" class=\"headerlink\" title=\"字体加粗\"></a>字体加粗</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**需要加粗的内容**</span><br></pre></td></tr></table></figure>\n<p><strong>需要加粗的内容</strong></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 内容</span><br><span class=\"line\">&gt;&gt; 内容</span><br><span class=\"line\">&gt;&gt;&gt; 内容</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>内容</p>\n<blockquote>\n<p>内容</p>\n<blockquote>\n<p>内容</p>\n</blockquote>\n</blockquote>\n</blockquote>"},{"title":"不好好工作会怎么样呢","date":"2020-05-22T12:46:31.000Z","description":null,"_content":"\n经常看到有人抱怨工作辛苦\n\n那么当你看完这个，还会继续抱怨吗\n\n<!-- more -->\n\n\n{% raw %}\n\n<video src='1.mp4 ' type='video/mp4' controls='controls'  width='100%' height='100%'>\n</video>\n\n{% endraw%}\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/05/不好好工作会怎么样呢.md","raw":"---\ntitle: 不好好工作会怎么样呢\ndate: 2020-05-22 20:46:31\ntags:\n    - 闲谈\ncategories:\n    - 闲谈\ndescription:\n---\n\n经常看到有人抱怨工作辛苦\n\n那么当你看完这个，还会继续抱怨吗\n\n<!-- more -->\n\n\n{% raw %}\n\n<video src='1.mp4 ' type='video/mp4' controls='controls'  width='100%' height='100%'>\n</video>\n\n{% endraw%}\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/05/不好好工作会怎么样呢","published":1,"updated":"2020-07-11T15:21:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51900081r0qdm7hfyez","content":"<p>经常看到有人抱怨工作辛苦</p>\n<p>那么当你看完这个，还会继续抱怨吗</p>\n<a id=\"more\"></a>\n\n\n\n\n<video src='1.mp4 ' type='video/mp4' controls='controls'  width='100%' height='100%'>\n</video>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>经常看到有人抱怨工作辛苦</p>\n<p>那么当你看完这个，还会继续抱怨吗</p>","more":"<video src='1.mp4 ' type='video/mp4' controls='controls'  width='100%' height='100%'>\n</video>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"从零开始手撸vue源码","date":"2020-05-23T02:52:56.000Z","description":"本文用于记录学习vue源码的过程","_content":"\n本文用于记录学习vue源码的过程\n\n<!-- more -->\n简介\n本文主要为学习B站 [前端铁蛋-手写vue框架](https://www.bilibili.com/video/BV1HE411L7fM) 的学习笔记\n\n# 一、准备工作\n首先，利用webpack构建项目\n\n1. 初始化项目\n\n    `npm init -y`\n\n2. 安装webpack\n\n    `npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save`\n\n3. 配置webpack\n    \n    根目录创建webpack.config.js文件\n\n    配置代码如下\n    ``` js\n    const path = require('path')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n    module.exports = {\n        entry: './src/index.js',\n        output: {\n            filename: \"bundle.js\",\n            path: path.resolve(__dirname, 'dist')\n        },\n        devtool: \"source-map\", //调试的时候可以快速找到源码\n        resolve: {\n            //更改模块的查找方式\n            modules: [path.resolve(__dirname, 'source'), path.resolve('node_modules')]\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: path.resolve(__dirname, 'public/index.html')\n            })\n        ]\n    }\n    ```\n\n\n4. 新建source文件夹用于后期存放资源\n\n5. 新建public文件夹\n    \n    创建index.html文件并生成h5代码\n    ``` html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Document</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n    </body>\n    </html>\n    ```\n6. 修改packjson.json配置\n    ``` json\n    \"scripts\": {\n        \"start\": \"webpack-dev-server\",\n        \"build\": \"webpack\"\n    },\n    ```\n7. 命令行输入\n    \n    `npm start //启动` \n\n# 二、数据代理\n\n1. 创建构造函数并初始化用户传入的参数(我们先假设用户传入的只有el、data)\n\n    在source文件夹新建vue文件夹并添加index.js文件\n    ``` js\n    import {initstate} from './Observe'\n\n    function Vue(options) { //vue中传入参数\n        //初始化用户传入的选项\n        this._init(options)\n    }\n\n    //初始化\n    Vue.prototype._init = function (options) {\n        let vm = this\n        vm.$options = options\n        //重新初始化状态 data computed watch\n        initstate(vm)\n    }\n\n    export default Vue\n    ```\n2. vue文件夹中新建Observe并添加index.js文件\n\n    ``` js\n    import Observe from './observe'\n    export function initstate(vm) {\n        //做不同的初始化工作\n        let opts = vm.$options\n        if (opts.data) {\n            initData(vm)\n        }\n    }\n    export function observe(data){\n        //判断data是不是对象 不是就return\n        if(typeof data!=='object'||data==null){\n            return\n        }\n        //如果是对象则new一个Observe对象来使这个data 实现数据监听\n        return new Observe(data) //观察数据的业务逻辑放在这里\n    }\n    function initData(vm) {\n        //获取用户传入的data\n        let data = vm.$options.data\n        //判断是不是函数  把数据赋值给vm._data 方便观察\n        data=vm._data = typeof data === 'function' ? data.call(vm) : data || {}\n        //观察数据\n        observe(data)\n    }\n    ```\n3. Observe文件夹下新建observe.js文件\n\n    ``` js\n    import { observe } from \".\"\n    class Observe {\n        constructor(data) { //data就是vue中我们定义的data vm._data\n            //将用户的数据使用defineProperty定义\n            this.walk(data)\n        }\n        walk(data) {\n            let keys = Object.keys(data)\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i] //获取所有的key\n                let value = data[keys[i]] //所有的value\n                defineReactive(data, key, value)\n            }\n        }\n    }\n    export function defineReactive(data, key, value) {\n        //观察value是不是对象 然后监听  如果是一个对象 递归监听\n        observe(value)\n        Object.defineProperty(data, key, {\n            get() {\n                return value\n            },\n            set(newval) {\n                if(newval===value) return\n                //有可能设置的时候也是一个对象\n                observe(newval)\n                value = newval\n            }\n        })\n    }\n    export default Observe\n    ```\n4. 这时我们回到src/index.js 引入vue并初始化vue对象\n    ```js\n    //默认  source/vue\n    import Vue from 'vue'  \n    let vm = new Vue({\n        el:'#app',\n        data(){\n            return{\n                msg:'hello',\n                haha:{\n                    a:1\n                }\n            }\n        },\n    })\n    ```\n5. 修改一下data中某个属性的值，看一下效果\n    ``` js\n    vm._data.msg='Joker 666'\n    console.log(vm)\n    ```\n    {% asset_img 2-1.png [这边我们可以看到msg已经发生了变化] %}\n\n6. 实现数据代理\n\n    我们在使用vue的时候，获取data属性时一般都是通过this.xxx获取，而我们上面只实现了通过this._data.xxx,所以我们要编写一个proxy方法，将传入的数据直接挂载到vm上\n\n    在 source/Observe/index.js 文件中新增proxy方法\n    ```js\n    function proxy(vm, source, key) {\n        Object.defineProperty(vm, key, {\n            get() {\n                return vm[source][key]\n            },\n            set(newval) {\n                return vm[source][key]=newval\n            }\n        })\n    }\n    ```\n    修改initData()\n    ```js\n    function initData(vm) {\n        //获取用户传入的data\n        let data = vm.$options.data\n        //判断是不是函数  把数据赋值给vm._data 方便观察\n        data = vm._data = typeof data === 'function' ? data.call(vm) : data || {}\n        //其实是vm._data代理了vm的操作\n        for (let key in data) {\n            proxy(vm, \"_data\", key)\n        }\n        //观察数据\n        observe(data)\n    }\n    ```\n\n    实现的原理其实非常简单，实际上就是在我们想要获取this.data时，其实去获取this._data\n\n\n    至此，我们已经实现了数据监听，但是还有个问题，Object.defineProperty是无法监听数组的变化的(面试需要注意)\n\n# 三、重写数组方法\n\n 我们常用的改变数组的方法有以下几种\n    `['push','shift','unshift','pop','reverse','sort','splice']`\n\n    我们企图往数组arr中添加值，结果发现新添加进去的值是没办法被监听到的，因此，我们需要改写push等方法    \n\n    基本思路就是之前我们调用push方法时，是从Aarray.prototype寻找这个方法，我们改成用一个空对象{}继承Array.prototype，然后再给空对象添加push方法\n    我们在source/vue/Observe下新增array.js文件\n    ```js\n    //获取数组原型上的方法\n    let oldArrayProtoMethods = Array.prototype\n    //复制一份  然后改新的\n    export let arrayMethods = Object.create(oldArrayProtoMethods)\n    //修改的方法\n    let methods = ['push', 'shift', 'unshift', 'pop', 'reverse', 'sort', 'splice']\n    methods.forEach(method => {\n        arrayMethods[method] = function (...arg) {\n            //不光要返回新的数组方法  还要执行监听\n            let res = oldArrayProtoMethods[method].apply(this, arg)\n            //实现新增属性的监听\n            console.log('实现了监听数组属性的变化')\n            return res\n        }\n    })\n    ```\n    我们在用户数据传入Observe中接收监听的时候需要区分data是数组还是对象，如果是数组，则改变数组的原型链\n    修改source/vue/Observe/observe.js中的代码\n    ```js\n    class Observe {\n        constructor(data) { //data就是vue中我们定义的data vm._data\n            //将用户的数据使用defineProperty定义\n            if (Array.isArray(data)) {\n                data.__proto__ = arrayMethods\n            } else {\n                this.walk(data)\n            }\n        }\n        walk(data) {\n            let keys = Object.keys(data)\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i] //获取所有的key\n                let value = data[keys[i]] //所有的value\n                defineReactive(data, key, value)\n            }\n        }\n    }\n    ```\n    执行以下代码\n    \n    `vm.arr.push(4)`\n\n    然后在控制台可以看到我们成功修改了数组\n    {% asset_img 3-1.png [这边我们可以看到arr已经发生了变化] %}\n\n# 四、\n\n    \n\n\n未完待续。。。\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/05/从零开始手撸vue源码.md","raw":"---\ntitle: 从零开始手撸vue源码\ndate: 2020-05-23 10:52:56\ntags:\n    - vue\ncategories:\ndescription: 本文用于记录学习vue源码的过程\n\n---\n\n本文用于记录学习vue源码的过程\n\n<!-- more -->\n简介\n本文主要为学习B站 [前端铁蛋-手写vue框架](https://www.bilibili.com/video/BV1HE411L7fM) 的学习笔记\n\n# 一、准备工作\n首先，利用webpack构建项目\n\n1. 初始化项目\n\n    `npm init -y`\n\n2. 安装webpack\n\n    `npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save`\n\n3. 配置webpack\n    \n    根目录创建webpack.config.js文件\n\n    配置代码如下\n    ``` js\n    const path = require('path')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n    module.exports = {\n        entry: './src/index.js',\n        output: {\n            filename: \"bundle.js\",\n            path: path.resolve(__dirname, 'dist')\n        },\n        devtool: \"source-map\", //调试的时候可以快速找到源码\n        resolve: {\n            //更改模块的查找方式\n            modules: [path.resolve(__dirname, 'source'), path.resolve('node_modules')]\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: path.resolve(__dirname, 'public/index.html')\n            })\n        ]\n    }\n    ```\n\n\n4. 新建source文件夹用于后期存放资源\n\n5. 新建public文件夹\n    \n    创建index.html文件并生成h5代码\n    ``` html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Document</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n    </body>\n    </html>\n    ```\n6. 修改packjson.json配置\n    ``` json\n    \"scripts\": {\n        \"start\": \"webpack-dev-server\",\n        \"build\": \"webpack\"\n    },\n    ```\n7. 命令行输入\n    \n    `npm start //启动` \n\n# 二、数据代理\n\n1. 创建构造函数并初始化用户传入的参数(我们先假设用户传入的只有el、data)\n\n    在source文件夹新建vue文件夹并添加index.js文件\n    ``` js\n    import {initstate} from './Observe'\n\n    function Vue(options) { //vue中传入参数\n        //初始化用户传入的选项\n        this._init(options)\n    }\n\n    //初始化\n    Vue.prototype._init = function (options) {\n        let vm = this\n        vm.$options = options\n        //重新初始化状态 data computed watch\n        initstate(vm)\n    }\n\n    export default Vue\n    ```\n2. vue文件夹中新建Observe并添加index.js文件\n\n    ``` js\n    import Observe from './observe'\n    export function initstate(vm) {\n        //做不同的初始化工作\n        let opts = vm.$options\n        if (opts.data) {\n            initData(vm)\n        }\n    }\n    export function observe(data){\n        //判断data是不是对象 不是就return\n        if(typeof data!=='object'||data==null){\n            return\n        }\n        //如果是对象则new一个Observe对象来使这个data 实现数据监听\n        return new Observe(data) //观察数据的业务逻辑放在这里\n    }\n    function initData(vm) {\n        //获取用户传入的data\n        let data = vm.$options.data\n        //判断是不是函数  把数据赋值给vm._data 方便观察\n        data=vm._data = typeof data === 'function' ? data.call(vm) : data || {}\n        //观察数据\n        observe(data)\n    }\n    ```\n3. Observe文件夹下新建observe.js文件\n\n    ``` js\n    import { observe } from \".\"\n    class Observe {\n        constructor(data) { //data就是vue中我们定义的data vm._data\n            //将用户的数据使用defineProperty定义\n            this.walk(data)\n        }\n        walk(data) {\n            let keys = Object.keys(data)\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i] //获取所有的key\n                let value = data[keys[i]] //所有的value\n                defineReactive(data, key, value)\n            }\n        }\n    }\n    export function defineReactive(data, key, value) {\n        //观察value是不是对象 然后监听  如果是一个对象 递归监听\n        observe(value)\n        Object.defineProperty(data, key, {\n            get() {\n                return value\n            },\n            set(newval) {\n                if(newval===value) return\n                //有可能设置的时候也是一个对象\n                observe(newval)\n                value = newval\n            }\n        })\n    }\n    export default Observe\n    ```\n4. 这时我们回到src/index.js 引入vue并初始化vue对象\n    ```js\n    //默认  source/vue\n    import Vue from 'vue'  \n    let vm = new Vue({\n        el:'#app',\n        data(){\n            return{\n                msg:'hello',\n                haha:{\n                    a:1\n                }\n            }\n        },\n    })\n    ```\n5. 修改一下data中某个属性的值，看一下效果\n    ``` js\n    vm._data.msg='Joker 666'\n    console.log(vm)\n    ```\n    {% asset_img 2-1.png [这边我们可以看到msg已经发生了变化] %}\n\n6. 实现数据代理\n\n    我们在使用vue的时候，获取data属性时一般都是通过this.xxx获取，而我们上面只实现了通过this._data.xxx,所以我们要编写一个proxy方法，将传入的数据直接挂载到vm上\n\n    在 source/Observe/index.js 文件中新增proxy方法\n    ```js\n    function proxy(vm, source, key) {\n        Object.defineProperty(vm, key, {\n            get() {\n                return vm[source][key]\n            },\n            set(newval) {\n                return vm[source][key]=newval\n            }\n        })\n    }\n    ```\n    修改initData()\n    ```js\n    function initData(vm) {\n        //获取用户传入的data\n        let data = vm.$options.data\n        //判断是不是函数  把数据赋值给vm._data 方便观察\n        data = vm._data = typeof data === 'function' ? data.call(vm) : data || {}\n        //其实是vm._data代理了vm的操作\n        for (let key in data) {\n            proxy(vm, \"_data\", key)\n        }\n        //观察数据\n        observe(data)\n    }\n    ```\n\n    实现的原理其实非常简单，实际上就是在我们想要获取this.data时，其实去获取this._data\n\n\n    至此，我们已经实现了数据监听，但是还有个问题，Object.defineProperty是无法监听数组的变化的(面试需要注意)\n\n# 三、重写数组方法\n\n 我们常用的改变数组的方法有以下几种\n    `['push','shift','unshift','pop','reverse','sort','splice']`\n\n    我们企图往数组arr中添加值，结果发现新添加进去的值是没办法被监听到的，因此，我们需要改写push等方法    \n\n    基本思路就是之前我们调用push方法时，是从Aarray.prototype寻找这个方法，我们改成用一个空对象{}继承Array.prototype，然后再给空对象添加push方法\n    我们在source/vue/Observe下新增array.js文件\n    ```js\n    //获取数组原型上的方法\n    let oldArrayProtoMethods = Array.prototype\n    //复制一份  然后改新的\n    export let arrayMethods = Object.create(oldArrayProtoMethods)\n    //修改的方法\n    let methods = ['push', 'shift', 'unshift', 'pop', 'reverse', 'sort', 'splice']\n    methods.forEach(method => {\n        arrayMethods[method] = function (...arg) {\n            //不光要返回新的数组方法  还要执行监听\n            let res = oldArrayProtoMethods[method].apply(this, arg)\n            //实现新增属性的监听\n            console.log('实现了监听数组属性的变化')\n            return res\n        }\n    })\n    ```\n    我们在用户数据传入Observe中接收监听的时候需要区分data是数组还是对象，如果是数组，则改变数组的原型链\n    修改source/vue/Observe/observe.js中的代码\n    ```js\n    class Observe {\n        constructor(data) { //data就是vue中我们定义的data vm._data\n            //将用户的数据使用defineProperty定义\n            if (Array.isArray(data)) {\n                data.__proto__ = arrayMethods\n            } else {\n                this.walk(data)\n            }\n        }\n        walk(data) {\n            let keys = Object.keys(data)\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i] //获取所有的key\n                let value = data[keys[i]] //所有的value\n                defineReactive(data, key, value)\n            }\n        }\n    }\n    ```\n    执行以下代码\n    \n    `vm.arr.push(4)`\n\n    然后在控制台可以看到我们成功修改了数组\n    {% asset_img 3-1.png [这边我们可以看到arr已经发生了变化] %}\n\n# 四、\n\n    \n\n\n未完待续。。。\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/05/从零开始手撸vue源码","published":1,"updated":"2020-07-11T15:21:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51c00091r0q6yuv1mkq","content":"<p>本文用于记录学习vue源码的过程</p>\n<a id=\"more\"></a>\n<p>简介<br>本文主要为学习B站 <a href=\"https://www.bilibili.com/video/BV1HE411L7fM\" target=\"_blank\" rel=\"noopener\">前端铁蛋-手写vue框架</a> 的学习笔记</p>\n<h1 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h1><p>首先，利用webpack构建项目</p>\n<ol>\n<li><p>初始化项目</p>\n<p> <code>npm init -y</code></p>\n</li>\n<li><p>安装webpack</p>\n<p> <code>npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save</code></p>\n</li>\n<li><p>配置webpack</p>\n<p> 根目录创建webpack.config.js文件</p>\n<p> 配置代码如下</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">\"source-map\"</span>, <span class=\"comment\">//调试的时候可以快速找到源码</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//更改模块的查找方式</span></span><br><span class=\"line\">        modules: [path.resolve(__dirname, <span class=\"string\">'source'</span>), path.resolve(<span class=\"string\">'node_modules'</span>)]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.resolve(__dirname, <span class=\"string\">'public/index.html'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>新建source文件夹用于后期存放资源</p>\n</li>\n<li><p>新建public文件夹</p>\n<p> 创建index.html文件并生成h5代码</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改packjson.json配置</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"webpack-dev-server\",</span><br><span class=\"line\">    \"build\": \"webpack\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li><p>命令行输入</p>\n<p> <code>npm start //启动</code> </p>\n</li>\n</ol>\n<h1 id=\"二、数据代理\"><a href=\"#二、数据代理\" class=\"headerlink\" title=\"二、数据代理\"></a>二、数据代理</h1><ol>\n<li><p>创建构造函数并初始化用户传入的参数(我们先假设用户传入的只有el、data)</p>\n<p> 在source文件夹新建vue文件夹并添加index.js文件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;initstate&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Observe'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vue</span>(<span class=\"params\">options</span>) </span>&#123; <span class=\"comment\">//vue中传入参数</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化用户传入的选项</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._init(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Vue.prototype._init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">    vm.$options = options</span><br><span class=\"line\">    <span class=\"comment\">//重新初始化状态 data computed watch</span></span><br><span class=\"line\">    initstate(vm)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure></li>\n<li><p>vue文件夹中新建Observe并添加index.js文件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Observe <span class=\"keyword\">from</span> <span class=\"string\">'./observe'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initstate</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做不同的初始化工作</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> opts = vm.$options</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">        initData(vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断data是不是对象 不是就return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data!==<span class=\"string\">'object'</span>||data==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是对象则new一个Observe对象来使这个data 实现数据监听</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observe(data) <span class=\"comment\">//观察数据的业务逻辑放在这里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initData</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取用户传入的data</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = vm.$options.data</span><br><span class=\"line\">    <span class=\"comment\">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class=\"line\">    data=vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//观察数据</span></span><br><span class=\"line\">    observe(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Observe文件夹下新建observe.js文件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observe &#125; <span class=\"keyword\">from</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123; <span class=\"comment\">//data就是vue中我们定义的data vm._data</span></span><br><span class=\"line\">        <span class=\"comment\">//将用户的数据使用defineProperty定义</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.walk(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    walk(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> key = keys[i] <span class=\"comment\">//获取所有的key</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> value = data[keys[i]] <span class=\"comment\">//所有的value</span></span><br><span class=\"line\">            defineReactive(data, key, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">data, key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//观察value是不是对象 然后监听  如果是一个对象 递归监听</span></span><br><span class=\"line\">    observe(value)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newval) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(newval===value) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"comment\">//有可能设置的时候也是一个对象</span></span><br><span class=\"line\">            observe(newval)</span><br><span class=\"line\">            value = newval</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Observe</span><br></pre></td></tr></table></figure></li>\n<li><p>这时我们回到src/index.js 引入vue并初始化vue对象</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认  source/vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            msg:<span class=\"string\">'hello'</span>,</span><br><span class=\"line\">            haha:&#123;</span><br><span class=\"line\">                a:<span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>修改一下data中某个属性的值，看一下效果</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm._data.msg=<span class=\"string\">'Joker 666'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm)</span><br></pre></td></tr></table></figure>\n <img src=\"/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/2-1.png\" class=\"\" title=\"[这边我们可以看到msg已经发生了变化]\">\n</li>\n<li><p>实现数据代理</p>\n<p> 我们在使用vue的时候，获取data属性时一般都是通过this.xxx获取，而我们上面只实现了通过this._data.xxx,所以我们要编写一个proxy方法，将传入的数据直接挂载到vm上</p>\n<p> 在 source/Observe/index.js 文件中新增proxy方法</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">vm, source, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vm[source][key]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newval) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vm[source][key]=newval</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 修改initData()</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initData</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取用户传入的data</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = vm.$options.data</span><br><span class=\"line\">    <span class=\"comment\">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class=\"line\">    data = vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//其实是vm._data代理了vm的操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">        proxy(vm, <span class=\"string\">\"_data\"</span>, key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//观察数据</span></span><br><span class=\"line\">    observe(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 实现的原理其实非常简单，实际上就是在我们想要获取this.data时，其实去获取this._data</p>\n</li>\n</ol>\n<pre><code>至此，我们已经实现了数据监听，但是还有个问题，Object.defineProperty是无法监听数组的变化的(面试需要注意)</code></pre><h1 id=\"三、重写数组方法\"><a href=\"#三、重写数组方法\" class=\"headerlink\" title=\"三、重写数组方法\"></a>三、重写数组方法</h1><p> 我们常用的改变数组的方法有以下几种<br>    <code>[&#39;push&#39;,&#39;shift&#39;,&#39;unshift&#39;,&#39;pop&#39;,&#39;reverse&#39;,&#39;sort&#39;,&#39;splice&#39;]</code></p>\n<pre><code>我们企图往数组arr中添加值，结果发现新添加进去的值是没办法被监听到的，因此，我们需要改写push等方法    \n\n基本思路就是之前我们调用push方法时，是从Aarray.prototype寻找这个方法，我们改成用一个空对象{}继承Array.prototype，然后再给空对象添加push方法\n我们在source/vue/Observe下新增array.js文件\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取数组原型上的方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oldArrayProtoMethods = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">//复制一份  然后改新的</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> arrayMethods = <span class=\"built_in\">Object</span>.create(oldArrayProtoMethods)</span><br><span class=\"line\"><span class=\"comment\">//修改的方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> methods = [<span class=\"string\">'push'</span>, <span class=\"string\">'shift'</span>, <span class=\"string\">'unshift'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'sort'</span>, <span class=\"string\">'splice'</span>]</span><br><span class=\"line\">methods.forEach(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">    arrayMethods[method] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不光要返回新的数组方法  还要执行监听</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = oldArrayProtoMethods[method].apply(<span class=\"keyword\">this</span>, arg)</span><br><span class=\"line\">        <span class=\"comment\">//实现新增属性的监听</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'实现了监听数组属性的变化'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n我们在用户数据传入Observe中接收监听的时候需要区分data是数组还是对象，如果是数组，则改变数组的原型链\n修改source/vue/Observe/observe.js中的代码\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123; <span class=\"comment\">//data就是vue中我们定义的data vm._data</span></span><br><span class=\"line\">        <span class=\"comment\">//将用户的数据使用defineProperty定义</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(data)) &#123;</span><br><span class=\"line\">            data.__proto__ = arrayMethods</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.walk(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    walk(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> key = keys[i] <span class=\"comment\">//获取所有的key</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> value = data[keys[i]] <span class=\"comment\">//所有的value</span></span><br><span class=\"line\">            defineReactive(data, key, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n执行以下代码\n\n`vm.arr.push(4)`\n\n然后在控制台可以看到我们成功修改了数组\n{% asset_img 3-1.png [这边我们可以看到arr已经发生了变化] %}</code></pre><h1 id=\"四、\"><a href=\"#四、\" class=\"headerlink\" title=\"四、\"></a>四、</h1><p>未完待续。。。</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本文用于记录学习vue源码的过程</p>","more":"<p>简介<br>本文主要为学习B站 <a href=\"https://www.bilibili.com/video/BV1HE411L7fM\" target=\"_blank\" rel=\"noopener\">前端铁蛋-手写vue框架</a> 的学习笔记</p>\n<h1 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h1><p>首先，利用webpack构建项目</p>\n<ol>\n<li><p>初始化项目</p>\n<p> <code>npm init -y</code></p>\n</li>\n<li><p>安装webpack</p>\n<p> <code>npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save</code></p>\n</li>\n<li><p>配置webpack</p>\n<p> 根目录创建webpack.config.js文件</p>\n<p> 配置代码如下</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">\"source-map\"</span>, <span class=\"comment\">//调试的时候可以快速找到源码</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//更改模块的查找方式</span></span><br><span class=\"line\">        modules: [path.resolve(__dirname, <span class=\"string\">'source'</span>), path.resolve(<span class=\"string\">'node_modules'</span>)]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.resolve(__dirname, <span class=\"string\">'public/index.html'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>新建source文件夹用于后期存放资源</p>\n</li>\n<li><p>新建public文件夹</p>\n<p> 创建index.html文件并生成h5代码</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改packjson.json配置</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"webpack-dev-server\",</span><br><span class=\"line\">    \"build\": \"webpack\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li><p>命令行输入</p>\n<p> <code>npm start //启动</code> </p>\n</li>\n</ol>\n<h1 id=\"二、数据代理\"><a href=\"#二、数据代理\" class=\"headerlink\" title=\"二、数据代理\"></a>二、数据代理</h1><ol>\n<li><p>创建构造函数并初始化用户传入的参数(我们先假设用户传入的只有el、data)</p>\n<p> 在source文件夹新建vue文件夹并添加index.js文件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;initstate&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Observe'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vue</span>(<span class=\"params\">options</span>) </span>&#123; <span class=\"comment\">//vue中传入参数</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化用户传入的选项</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._init(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Vue.prototype._init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">    vm.$options = options</span><br><span class=\"line\">    <span class=\"comment\">//重新初始化状态 data computed watch</span></span><br><span class=\"line\">    initstate(vm)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure></li>\n<li><p>vue文件夹中新建Observe并添加index.js文件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Observe <span class=\"keyword\">from</span> <span class=\"string\">'./observe'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initstate</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做不同的初始化工作</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> opts = vm.$options</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">        initData(vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断data是不是对象 不是就return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data!==<span class=\"string\">'object'</span>||data==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是对象则new一个Observe对象来使这个data 实现数据监听</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observe(data) <span class=\"comment\">//观察数据的业务逻辑放在这里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initData</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取用户传入的data</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = vm.$options.data</span><br><span class=\"line\">    <span class=\"comment\">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class=\"line\">    data=vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//观察数据</span></span><br><span class=\"line\">    observe(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Observe文件夹下新建observe.js文件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observe &#125; <span class=\"keyword\">from</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123; <span class=\"comment\">//data就是vue中我们定义的data vm._data</span></span><br><span class=\"line\">        <span class=\"comment\">//将用户的数据使用defineProperty定义</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.walk(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    walk(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> key = keys[i] <span class=\"comment\">//获取所有的key</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> value = data[keys[i]] <span class=\"comment\">//所有的value</span></span><br><span class=\"line\">            defineReactive(data, key, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">data, key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//观察value是不是对象 然后监听  如果是一个对象 递归监听</span></span><br><span class=\"line\">    observe(value)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newval) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(newval===value) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"comment\">//有可能设置的时候也是一个对象</span></span><br><span class=\"line\">            observe(newval)</span><br><span class=\"line\">            value = newval</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Observe</span><br></pre></td></tr></table></figure></li>\n<li><p>这时我们回到src/index.js 引入vue并初始化vue对象</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认  source/vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            msg:<span class=\"string\">'hello'</span>,</span><br><span class=\"line\">            haha:&#123;</span><br><span class=\"line\">                a:<span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>修改一下data中某个属性的值，看一下效果</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm._data.msg=<span class=\"string\">'Joker 666'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm)</span><br></pre></td></tr></table></figure>\n <img src=\"/2020/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E6%92%B8vue%E6%BA%90%E7%A0%81/2-1.png\" class=\"\" title=\"[这边我们可以看到msg已经发生了变化]\">\n</li>\n<li><p>实现数据代理</p>\n<p> 我们在使用vue的时候，获取data属性时一般都是通过this.xxx获取，而我们上面只实现了通过this._data.xxx,所以我们要编写一个proxy方法，将传入的数据直接挂载到vm上</p>\n<p> 在 source/Observe/index.js 文件中新增proxy方法</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">vm, source, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vm[source][key]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newval) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vm[source][key]=newval</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 修改initData()</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initData</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取用户传入的data</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = vm.$options.data</span><br><span class=\"line\">    <span class=\"comment\">//判断是不是函数  把数据赋值给vm._data 方便观察</span></span><br><span class=\"line\">    data = vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span> ? data.call(vm) : data || &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//其实是vm._data代理了vm的操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">        proxy(vm, <span class=\"string\">\"_data\"</span>, key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//观察数据</span></span><br><span class=\"line\">    observe(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 实现的原理其实非常简单，实际上就是在我们想要获取this.data时，其实去获取this._data</p>\n</li>\n</ol>\n<pre><code>至此，我们已经实现了数据监听，但是还有个问题，Object.defineProperty是无法监听数组的变化的(面试需要注意)</code></pre><h1 id=\"三、重写数组方法\"><a href=\"#三、重写数组方法\" class=\"headerlink\" title=\"三、重写数组方法\"></a>三、重写数组方法</h1><p> 我们常用的改变数组的方法有以下几种<br>    <code>[&#39;push&#39;,&#39;shift&#39;,&#39;unshift&#39;,&#39;pop&#39;,&#39;reverse&#39;,&#39;sort&#39;,&#39;splice&#39;]</code></p>\n<pre><code>我们企图往数组arr中添加值，结果发现新添加进去的值是没办法被监听到的，因此，我们需要改写push等方法    \n\n基本思路就是之前我们调用push方法时，是从Aarray.prototype寻找这个方法，我们改成用一个空对象{}继承Array.prototype，然后再给空对象添加push方法\n我们在source/vue/Observe下新增array.js文件\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取数组原型上的方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oldArrayProtoMethods = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">//复制一份  然后改新的</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> arrayMethods = <span class=\"built_in\">Object</span>.create(oldArrayProtoMethods)</span><br><span class=\"line\"><span class=\"comment\">//修改的方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> methods = [<span class=\"string\">'push'</span>, <span class=\"string\">'shift'</span>, <span class=\"string\">'unshift'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'sort'</span>, <span class=\"string\">'splice'</span>]</span><br><span class=\"line\">methods.forEach(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">    arrayMethods[method] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不光要返回新的数组方法  还要执行监听</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = oldArrayProtoMethods[method].apply(<span class=\"keyword\">this</span>, arg)</span><br><span class=\"line\">        <span class=\"comment\">//实现新增属性的监听</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'实现了监听数组属性的变化'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n我们在用户数据传入Observe中接收监听的时候需要区分data是数组还是对象，如果是数组，则改变数组的原型链\n修改source/vue/Observe/observe.js中的代码\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123; <span class=\"comment\">//data就是vue中我们定义的data vm._data</span></span><br><span class=\"line\">        <span class=\"comment\">//将用户的数据使用defineProperty定义</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(data)) &#123;</span><br><span class=\"line\">            data.__proto__ = arrayMethods</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.walk(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    walk(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> key = keys[i] <span class=\"comment\">//获取所有的key</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> value = data[keys[i]] <span class=\"comment\">//所有的value</span></span><br><span class=\"line\">            defineReactive(data, key, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n执行以下代码\n\n`vm.arr.push(4)`\n\n然后在控制台可以看到我们成功修改了数组\n{% asset_img 3-1.png [这边我们可以看到arr已经发生了变化] %}</code></pre><h1 id=\"四、\"><a href=\"#四、\" class=\"headerlink\" title=\"四、\"></a>四、</h1><p>未完待续。。。</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"Vue中Watch和Computed的差异","date":"2020-05-30T02:58:33.000Z","description":null,"_content":"\n计算属性 vs 监听器\n\n<!-- more -->\n\n# 语境上的差异\n\n``` js\n//一个值变化了，我要做些事情，适合一个值影响多个值的情形\nwatch:{\n    firstname(newval,oldval){\n        this.fullname = this.firstname + '' + this.lastname\n    },\n    lastname(newval,oldval){\n        this.fullname = this.firstname + '' + this.lastname\n    }\n}\n//一个值由其他值得来，这些值变化了我也要变，适合多个值影响一个值的情形\ncomputed:{\n    fullname(){\n        return this.firstname + '' + this.lastname\n    }\n}\n```\n\n# 计算属性有缓存性\n\n计算所得的值如果没有变化不会重复执行\n\n# 监听器选项\n    \n监听器选项提供了更通用的方法，适合执行异步操作或者较大开销操作的情况\n    \n[点击查看范例](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8)\n    \n我们可以在范例中看到，在created的时候将我们要发送的请求做了一次防抖处理的封装，输入停止500毫秒后才会触发，这样就可以很有效的控制请求的频率\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/05/Vue中Watch和Computed的差异.md","raw":"---\ntitle: Vue中Watch和Computed的差异\ndate: 2020-05-30 10:58:33\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n计算属性 vs 监听器\n\n<!-- more -->\n\n# 语境上的差异\n\n``` js\n//一个值变化了，我要做些事情，适合一个值影响多个值的情形\nwatch:{\n    firstname(newval,oldval){\n        this.fullname = this.firstname + '' + this.lastname\n    },\n    lastname(newval,oldval){\n        this.fullname = this.firstname + '' + this.lastname\n    }\n}\n//一个值由其他值得来，这些值变化了我也要变，适合多个值影响一个值的情形\ncomputed:{\n    fullname(){\n        return this.firstname + '' + this.lastname\n    }\n}\n```\n\n# 计算属性有缓存性\n\n计算所得的值如果没有变化不会重复执行\n\n# 监听器选项\n    \n监听器选项提供了更通用的方法，适合执行异步操作或者较大开销操作的情况\n    \n[点击查看范例](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8)\n    \n我们可以在范例中看到，在created的时候将我们要发送的请求做了一次防抖处理的封装，输入停止500毫秒后才会触发，这样就可以很有效的控制请求的频率\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/05/Vue中Watch和Computed的差异","published":1,"updated":"2020-07-11T15:21:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51g000a1r0q1ckc3p4v","content":"<p>计算属性 vs 监听器</p>\n<a id=\"more\"></a>\n\n<h1 id=\"语境上的差异\"><a href=\"#语境上的差异\" class=\"headerlink\" title=\"语境上的差异\"></a>语境上的差异</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个值变化了，我要做些事情，适合一个值影响多个值的情形</span></span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">    firstname(newval,oldval)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">''</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lastname(newval,oldval)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">''</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一个值由其他值得来，这些值变化了我也要变，适合多个值影响一个值的情形</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    fullname()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstname + <span class=\"string\">''</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"计算属性有缓存性\"><a href=\"#计算属性有缓存性\" class=\"headerlink\" title=\"计算属性有缓存性\"></a>计算属性有缓存性</h1><p>计算所得的值如果没有变化不会重复执行</p>\n<h1 id=\"监听器选项\"><a href=\"#监听器选项\" class=\"headerlink\" title=\"监听器选项\"></a>监听器选项</h1><p>监听器选项提供了更通用的方法，适合执行异步操作或者较大开销操作的情况</p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\" target=\"_blank\" rel=\"noopener\">点击查看范例</a></p>\n<p>我们可以在范例中看到，在created的时候将我们要发送的请求做了一次防抖处理的封装，输入停止500毫秒后才会触发，这样就可以很有效的控制请求的频率</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>计算属性 vs 监听器</p>","more":"<h1 id=\"语境上的差异\"><a href=\"#语境上的差异\" class=\"headerlink\" title=\"语境上的差异\"></a>语境上的差异</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个值变化了，我要做些事情，适合一个值影响多个值的情形</span></span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">    firstname(newval,oldval)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">''</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lastname(newval,oldval)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">''</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一个值由其他值得来，这些值变化了我也要变，适合多个值影响一个值的情形</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    fullname()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstname + <span class=\"string\">''</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"计算属性有缓存性\"><a href=\"#计算属性有缓存性\" class=\"headerlink\" title=\"计算属性有缓存性\"></a>计算属性有缓存性</h1><p>计算所得的值如果没有变化不会重复执行</p>\n<h1 id=\"监听器选项\"><a href=\"#监听器选项\" class=\"headerlink\" title=\"监听器选项\"></a>监听器选项</h1><p>监听器选项提供了更通用的方法，适合执行异步操作或者较大开销操作的情况</p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\" target=\"_blank\" rel=\"noopener\">点击查看范例</a></p>\n<p>我们可以在范例中看到，在created的时候将我们要发送的请求做了一次防抖处理的封装，输入停止500毫秒后才会触发，这样就可以很有效的控制请求的频率</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"在vue中使用graphql","date":"2020-05-25T08:31:14.000Z","description":null,"_content":"\n记录在vue中使用graphql踩过的坑\n\n<!-- more -->\n# 安装依赖\n首先我们保证已经有了一个vue项目，输入以下命令\n\n`npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag`\n\n# 引入\n创建apollo.js并输入以下代码\n\n```ts\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport {ApolloLink} from 'apollo-link'\n// 与 API 的 HTTP 连接\nconst httpLink = createHttpLink({\n  // 你需要在这里使用绝对路径\n  uri: process.env.VUE_APP_BASEURL + 'graphql',\n})\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  let token = '';\n  //配置token验证\n  let api_token = JSON.parse(sessionStorage.getItem('api_token')!)\n  if (api_token) {\n      token = api_token\n  }\n  operation.setContext({\n      headers: {\n          Authorization: `Bearer ${token}` || null\n      }\n  })\n  return forward(operation)\n})\n// 缓存实现\nconst cache = new InMemoryCache()\n// 创建 apollo 客户端\nexport const apolloClient = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache,\n})\n```\n然后在main.js中引入\n```ts\nimport * as apollo from './plugins/apollo'\nimport VueApollo from 'vue-apollo'\n\nVue.use(VueApollo)\nconst apolloProvider = new VueApollo({\n  defaultClient: apollo.apolloClient,\n})\n```\n使用 apolloProvider 选项将它添加到你的应用程序\n```ts\nnew Vue({\n  router,\n  vuetify,\n  i18n,\n  store,\n  apolloProvider,\n  render: h => h(App)\n}).$mount('#app');\n```\n# 使用\n在我们需要使用graphql的页面引入`gql`\n\n`import gql from 'graphql-tag'`\n\n然后创建一个js文件`query.js`用来编写查询语句，并在我们使用graphql的页面引入\n\n`\nimport * as sql from './query'\n`\n\n在`query.js`中添加查询代码如下\n\n```js\nimport gql from 'graphql-tag'\nexport var report1 = gql `query($id: ID!){\n     contracts(first:10,id:$id){\n        data{\n            id\n            address\n            contract_no\n            order{\n                contract_id\n            }\n        }\n    }\n}`\n```\n\n然后回到我们需要使用apollo的页面，使用如下方法进行查询\n\n```js\nthis.$apollo.query({\n          query: sql.report1,\n          variables: {\n            id: 195,\n          },\n          fetchPolicy:\"no-cache\",//禁止缓存\n      }).then(res => {\n          console.log(res)\n      }).catch(err => {\n          console.log(err)\n      })\n```\n{% asset_img 1.png [如图，我们便得到了查询结果] %}\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/05/在vue中使用graphql.md","raw":"---\ntitle: 在vue中使用graphql\ndate: 2020-05-25 16:31:14\ntags:\n    - vue\n    - graphql\ncategories:\n    - vue\n    - graphql\ndescription:\n---\n\n记录在vue中使用graphql踩过的坑\n\n<!-- more -->\n# 安装依赖\n首先我们保证已经有了一个vue项目，输入以下命令\n\n`npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag`\n\n# 引入\n创建apollo.js并输入以下代码\n\n```ts\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport {ApolloLink} from 'apollo-link'\n// 与 API 的 HTTP 连接\nconst httpLink = createHttpLink({\n  // 你需要在这里使用绝对路径\n  uri: process.env.VUE_APP_BASEURL + 'graphql',\n})\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  let token = '';\n  //配置token验证\n  let api_token = JSON.parse(sessionStorage.getItem('api_token')!)\n  if (api_token) {\n      token = api_token\n  }\n  operation.setContext({\n      headers: {\n          Authorization: `Bearer ${token}` || null\n      }\n  })\n  return forward(operation)\n})\n// 缓存实现\nconst cache = new InMemoryCache()\n// 创建 apollo 客户端\nexport const apolloClient = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache,\n})\n```\n然后在main.js中引入\n```ts\nimport * as apollo from './plugins/apollo'\nimport VueApollo from 'vue-apollo'\n\nVue.use(VueApollo)\nconst apolloProvider = new VueApollo({\n  defaultClient: apollo.apolloClient,\n})\n```\n使用 apolloProvider 选项将它添加到你的应用程序\n```ts\nnew Vue({\n  router,\n  vuetify,\n  i18n,\n  store,\n  apolloProvider,\n  render: h => h(App)\n}).$mount('#app');\n```\n# 使用\n在我们需要使用graphql的页面引入`gql`\n\n`import gql from 'graphql-tag'`\n\n然后创建一个js文件`query.js`用来编写查询语句，并在我们使用graphql的页面引入\n\n`\nimport * as sql from './query'\n`\n\n在`query.js`中添加查询代码如下\n\n```js\nimport gql from 'graphql-tag'\nexport var report1 = gql `query($id: ID!){\n     contracts(first:10,id:$id){\n        data{\n            id\n            address\n            contract_no\n            order{\n                contract_id\n            }\n        }\n    }\n}`\n```\n\n然后回到我们需要使用apollo的页面，使用如下方法进行查询\n\n```js\nthis.$apollo.query({\n          query: sql.report1,\n          variables: {\n            id: 195,\n          },\n          fetchPolicy:\"no-cache\",//禁止缓存\n      }).then(res => {\n          console.log(res)\n      }).catch(err => {\n          console.log(err)\n      })\n```\n{% asset_img 1.png [如图，我们便得到了查询结果] %}\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/05/在vue中使用graphql","published":1,"updated":"2020-08-06T13:22:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51m000e1r0qaikzef4b","content":"<p>记录在vue中使用graphql踩过的坑</p>\n<a id=\"more\"></a>\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><p>首先我们保证已经有了一个vue项目，输入以下命令</p>\n<p><code>npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag</code></p>\n<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>创建apollo.js并输入以下代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-client'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHttpLink &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-link-http'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InMemoryCache &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-cache-inmemory'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;ApolloLink&#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-link'</span></span><br><span class=\"line\"><span class=\"comment\">// 与 API 的 HTTP 连接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> httpLink = createHttpLink(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 你需要在这里使用绝对路径</span></span><br><span class=\"line\">  uri: process.env.VUE_APP_BASEURL + <span class=\"string\">'graphql'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewareLink = <span class=\"keyword\">new</span> ApolloLink(<span class=\"function\">(<span class=\"params\">operation, forward</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"comment\">//配置token验证</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> api_token = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">'api_token'</span>)!)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (api_token) &#123;</span><br><span class=\"line\">      token = api_token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  operation.setContext(&#123;</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">          Authorization: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;token&#125;</span>`</span> || <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> forward(operation)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 缓存实现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cache = <span class=\"keyword\">new</span> InMemoryCache()</span><br><span class=\"line\"><span class=\"comment\">// 创建 apollo 客户端</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> apolloClient = <span class=\"keyword\">new</span> ApolloClient(&#123;</span><br><span class=\"line\">  link: middlewareLink.concat(httpLink),</span><br><span class=\"line\">  cache,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后在main.js中引入</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> apollo <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/apollo'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueApollo <span class=\"keyword\">from</span> <span class=\"string\">'vue-apollo'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueApollo)</span><br><span class=\"line\"><span class=\"keyword\">const</span> apolloProvider = <span class=\"keyword\">new</span> VueApollo(&#123;</span><br><span class=\"line\">  defaultClient: apollo.apolloClient,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 apolloProvider 选项将它添加到你的应用程序</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  vuetify,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  apolloProvider,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>在我们需要使用graphql的页面引入<code>gql</code></p>\n<p><code>import gql from &#39;graphql-tag&#39;</code></p>\n<p>然后创建一个js文件<code>query.js</code>用来编写查询语句，并在我们使用graphql的页面引入</p>\n<p><code>import * as sql from &#39;./query&#39;</code></p>\n<p>在<code>query.js</code>中添加查询代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gql <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tag'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> report1 = gql <span class=\"string\">`query($id: ID!)&#123;</span></span><br><span class=\"line\"><span class=\"string\">     contracts(first:10,id:$id)&#123;</span></span><br><span class=\"line\"><span class=\"string\">        data&#123;</span></span><br><span class=\"line\"><span class=\"string\">            id</span></span><br><span class=\"line\"><span class=\"string\">            address</span></span><br><span class=\"line\"><span class=\"string\">            contract_no</span></span><br><span class=\"line\"><span class=\"string\">            order&#123;</span></span><br><span class=\"line\"><span class=\"string\">                contract_id</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;`</span></span><br></pre></td></tr></table></figure>\n\n<p>然后回到我们需要使用apollo的页面，使用如下方法进行查询</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$apollo.query(&#123;</span><br><span class=\"line\">          query: sql.report1,</span><br><span class=\"line\">          variables: &#123;</span><br><span class=\"line\">            id: <span class=\"number\">195</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          fetchPolicy:<span class=\"string\">\"no-cache\"</span>,<span class=\"comment\">//禁止缓存</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/1.png\" class=\"\" title=\"[如图，我们便得到了查询结果]\">\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>记录在vue中使用graphql踩过的坑</p>","more":"<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><p>首先我们保证已经有了一个vue项目，输入以下命令</p>\n<p><code>npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag</code></p>\n<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>创建apollo.js并输入以下代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-client'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHttpLink &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-link-http'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InMemoryCache &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-cache-inmemory'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;ApolloLink&#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-link'</span></span><br><span class=\"line\"><span class=\"comment\">// 与 API 的 HTTP 连接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> httpLink = createHttpLink(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 你需要在这里使用绝对路径</span></span><br><span class=\"line\">  uri: process.env.VUE_APP_BASEURL + <span class=\"string\">'graphql'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewareLink = <span class=\"keyword\">new</span> ApolloLink(<span class=\"function\">(<span class=\"params\">operation, forward</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"comment\">//配置token验证</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> api_token = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">'api_token'</span>)!)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (api_token) &#123;</span><br><span class=\"line\">      token = api_token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  operation.setContext(&#123;</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">          Authorization: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;token&#125;</span>`</span> || <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> forward(operation)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 缓存实现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cache = <span class=\"keyword\">new</span> InMemoryCache()</span><br><span class=\"line\"><span class=\"comment\">// 创建 apollo 客户端</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> apolloClient = <span class=\"keyword\">new</span> ApolloClient(&#123;</span><br><span class=\"line\">  link: middlewareLink.concat(httpLink),</span><br><span class=\"line\">  cache,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后在main.js中引入</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> apollo <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/apollo'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueApollo <span class=\"keyword\">from</span> <span class=\"string\">'vue-apollo'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueApollo)</span><br><span class=\"line\"><span class=\"keyword\">const</span> apolloProvider = <span class=\"keyword\">new</span> VueApollo(&#123;</span><br><span class=\"line\">  defaultClient: apollo.apolloClient,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 apolloProvider 选项将它添加到你的应用程序</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  vuetify,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  apolloProvider,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>在我们需要使用graphql的页面引入<code>gql</code></p>\n<p><code>import gql from &#39;graphql-tag&#39;</code></p>\n<p>然后创建一个js文件<code>query.js</code>用来编写查询语句，并在我们使用graphql的页面引入</p>\n<p><code>import * as sql from &#39;./query&#39;</code></p>\n<p>在<code>query.js</code>中添加查询代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gql <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tag'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> report1 = gql <span class=\"string\">`query($id: ID!)&#123;</span></span><br><span class=\"line\"><span class=\"string\">     contracts(first:10,id:$id)&#123;</span></span><br><span class=\"line\"><span class=\"string\">        data&#123;</span></span><br><span class=\"line\"><span class=\"string\">            id</span></span><br><span class=\"line\"><span class=\"string\">            address</span></span><br><span class=\"line\"><span class=\"string\">            contract_no</span></span><br><span class=\"line\"><span class=\"string\">            order&#123;</span></span><br><span class=\"line\"><span class=\"string\">                contract_id</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;`</span></span><br></pre></td></tr></table></figure>\n\n<p>然后回到我们需要使用apollo的页面，使用如下方法进行查询</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$apollo.query(&#123;</span><br><span class=\"line\">          query: sql.report1,</span><br><span class=\"line\">          variables: &#123;</span><br><span class=\"line\">            id: <span class=\"number\">195</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          fetchPolicy:<span class=\"string\">\"no-cache\"</span>,<span class=\"comment\">//禁止缓存</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/2020/05/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8graphql/1.png\" class=\"\" title=\"[如图，我们便得到了查询结果]\">\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"爬取豆瓣电影top250","date":"2020-05-21T10:52:30.000Z","description":"使用requests爬取豆瓣top250电影","_content":"\n\n记录使用python爬取豆瓣\n\n\n<!-- more -->\n\n\n\n## 直接上代码\n\n``` bash\nimport requests\nfrom bs4 import BeautifulSoup\nimport xlwt\n\nbook = xlwt.Workbook(encoding='utf-8', style_compression=0)\nsheet = book.add_sheet('豆瓣电影Top250')\nsheet.write(0, 0, '名称')\nsheet.write(0, 1, '图片')\nsheet.write(0, 2, '排名')\nsheet.write(0, 3, '评分')\nsheet.write(0, 4, '作者')\nsheet.write(0, 5, '简介')\n\nn = 1\n\n\ndef main(page):\n    url = 'https://movie.douban.com/top250?start=' + str(page * 25) + '&filter='\n    html = request_douban(url)\n    soup = BeautifulSoup(html, 'lxml')\n    list = soup.find(class_='grid_view').find_all('li')\n    for item in list:\n        item_name = item.find(class_='title').string\n        item_img = item.find('a').find('img').get('src')\n        item_index = item.find(class_='').string\n        item_score = item.find(class_='rating_num').string\n        item_author = item.find('p').text\n        if item.find(class_='inq') is not None:\n            item_intr = item.find(class_='inq').string\n\n        print('爬取电影：' + item_index + ' | ' + item_name + ' | ' + item_score + ' | ' + item_intr)\n\n        global n\n        sheet.write(n, 0, item_name)\n        sheet.write(n, 1, item_img)\n        sheet.write(n, 2, item_index)\n        sheet.write(n, 3, item_score)\n        sheet.write(n, 4, item_author)\n        sheet.write(n, 5, item_intr)\n        n = n + 1\n\n\ndef request_douban(url):\n    maxTryNum = 20\n    for tries in range(maxTryNum):\n        try:\n            kv = {\"user-agent\": \"Mizilla/5.0\"}\n            response = requests.get(url, headers=kv, timeout=60)\n            if response.status_code == 200:\n                return response.text\n        except requests.RequestException:\n            if tries < (maxTryNum - 1):\n                continue\n            else:\n                print(\"Has tried %d times to access url %s, all failed!\" % (maxTryNum, url))\n                break\n\n\nif __name__ == '__main__':\n    for i in range(0, 10):\n        main(i)\n\n    book.save('豆瓣最受欢迎的250部电影.xls')\n\n\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/05/爬取豆瓣电影top250.md","raw":"---\ntitle: 爬取豆瓣电影top250\ndate: 2020-05-21 18:52:30\ntags: \n    - python\n    - 爬虫\ncategories: \n    - [python]\n    - [爬虫]\ndescription: 使用requests爬取豆瓣top250电影\n---\n\n\n记录使用python爬取豆瓣\n\n\n<!-- more -->\n\n\n\n## 直接上代码\n\n``` bash\nimport requests\nfrom bs4 import BeautifulSoup\nimport xlwt\n\nbook = xlwt.Workbook(encoding='utf-8', style_compression=0)\nsheet = book.add_sheet('豆瓣电影Top250')\nsheet.write(0, 0, '名称')\nsheet.write(0, 1, '图片')\nsheet.write(0, 2, '排名')\nsheet.write(0, 3, '评分')\nsheet.write(0, 4, '作者')\nsheet.write(0, 5, '简介')\n\nn = 1\n\n\ndef main(page):\n    url = 'https://movie.douban.com/top250?start=' + str(page * 25) + '&filter='\n    html = request_douban(url)\n    soup = BeautifulSoup(html, 'lxml')\n    list = soup.find(class_='grid_view').find_all('li')\n    for item in list:\n        item_name = item.find(class_='title').string\n        item_img = item.find('a').find('img').get('src')\n        item_index = item.find(class_='').string\n        item_score = item.find(class_='rating_num').string\n        item_author = item.find('p').text\n        if item.find(class_='inq') is not None:\n            item_intr = item.find(class_='inq').string\n\n        print('爬取电影：' + item_index + ' | ' + item_name + ' | ' + item_score + ' | ' + item_intr)\n\n        global n\n        sheet.write(n, 0, item_name)\n        sheet.write(n, 1, item_img)\n        sheet.write(n, 2, item_index)\n        sheet.write(n, 3, item_score)\n        sheet.write(n, 4, item_author)\n        sheet.write(n, 5, item_intr)\n        n = n + 1\n\n\ndef request_douban(url):\n    maxTryNum = 20\n    for tries in range(maxTryNum):\n        try:\n            kv = {\"user-agent\": \"Mizilla/5.0\"}\n            response = requests.get(url, headers=kv, timeout=60)\n            if response.status_code == 200:\n                return response.text\n        except requests.RequestException:\n            if tries < (maxTryNum - 1):\n                continue\n            else:\n                print(\"Has tried %d times to access url %s, all failed!\" % (maxTryNum, url))\n                break\n\n\nif __name__ == '__main__':\n    for i in range(0, 10):\n        main(i)\n\n    book.save('豆瓣最受欢迎的250部电影.xls')\n\n\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/05/爬取豆瓣电影top250","published":1,"updated":"2020-07-11T15:21:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51q000f1r0q6ka302xt","content":"<p>记录使用python爬取豆瓣</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import xlwt</span><br><span class=\"line\"></span><br><span class=\"line\">book = xlwt.Workbook(encoding=<span class=\"string\">'utf-8'</span>, style_compression=0)</span><br><span class=\"line\">sheet = book.add_sheet(<span class=\"string\">'豆瓣电影Top250'</span>)</span><br><span class=\"line\">sheet.write(0, 0, <span class=\"string\">'名称'</span>)</span><br><span class=\"line\">sheet.write(0, 1, <span class=\"string\">'图片'</span>)</span><br><span class=\"line\">sheet.write(0, 2, <span class=\"string\">'排名'</span>)</span><br><span class=\"line\">sheet.write(0, 3, <span class=\"string\">'评分'</span>)</span><br><span class=\"line\">sheet.write(0, 4, <span class=\"string\">'作者'</span>)</span><br><span class=\"line\">sheet.write(0, 5, <span class=\"string\">'简介'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">n = 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main(page):</span><br><span class=\"line\">    url = <span class=\"string\">'https://movie.douban.com/top250?start='</span> + str(page * 25) + <span class=\"string\">'&amp;filter='</span></span><br><span class=\"line\">    html = request_douban(url)</span><br><span class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">    list = soup.find(class_=<span class=\"string\">'grid_view'</span>).find_all(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">        item_name = item.find(class_=<span class=\"string\">'title'</span>).string</span><br><span class=\"line\">        item_img = item.find(<span class=\"string\">'a'</span>).find(<span class=\"string\">'img'</span>).get(<span class=\"string\">'src'</span>)</span><br><span class=\"line\">        item_index = item.find(class_=<span class=\"string\">''</span>).string</span><br><span class=\"line\">        item_score = item.find(class_=<span class=\"string\">'rating_num'</span>).string</span><br><span class=\"line\">        item_author = item.find(<span class=\"string\">'p'</span>).text</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.find(class_=<span class=\"string\">'inq'</span>) is not None:</span><br><span class=\"line\">            item_intr = item.find(class_=<span class=\"string\">'inq'</span>).string</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'爬取电影：'</span> + item_index + <span class=\"string\">' | '</span> + item_name + <span class=\"string\">' | '</span> + item_score + <span class=\"string\">' | '</span> + item_intr)</span><br><span class=\"line\"></span><br><span class=\"line\">        global n</span><br><span class=\"line\">        sheet.write(n, 0, item_name)</span><br><span class=\"line\">        sheet.write(n, 1, item_img)</span><br><span class=\"line\">        sheet.write(n, 2, item_index)</span><br><span class=\"line\">        sheet.write(n, 3, item_score)</span><br><span class=\"line\">        sheet.write(n, 4, item_author)</span><br><span class=\"line\">        sheet.write(n, 5, item_intr)</span><br><span class=\"line\">        n = n + 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def request_douban(url):</span><br><span class=\"line\">    maxTryNum = 20</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tries <span class=\"keyword\">in</span> range(maxTryNum):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            kv = &#123;<span class=\"string\">\"user-agent\"</span>: <span class=\"string\">\"Mizilla/5.0\"</span>&#125;</span><br><span class=\"line\">            response = requests.get(url, headers=kv, timeout=60)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.status_code == 200:</span><br><span class=\"line\">                <span class=\"built_in\">return</span> response.text</span><br><span class=\"line\">        except requests.RequestException:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tries &lt; (maxTryNum - 1):</span><br><span class=\"line\">                <span class=\"built_in\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"Has tried %d times to access url %s, all failed!\"</span> % (maxTryNum, url))</span><br><span class=\"line\">                <span class=\"built_in\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(0, 10):</span><br><span class=\"line\">        main(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    book.save(<span class=\"string\">'豆瓣最受欢迎的250部电影.xls'</span>)</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>记录使用python爬取豆瓣</p>","more":"<h2 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import xlwt</span><br><span class=\"line\"></span><br><span class=\"line\">book = xlwt.Workbook(encoding=<span class=\"string\">'utf-8'</span>, style_compression=0)</span><br><span class=\"line\">sheet = book.add_sheet(<span class=\"string\">'豆瓣电影Top250'</span>)</span><br><span class=\"line\">sheet.write(0, 0, <span class=\"string\">'名称'</span>)</span><br><span class=\"line\">sheet.write(0, 1, <span class=\"string\">'图片'</span>)</span><br><span class=\"line\">sheet.write(0, 2, <span class=\"string\">'排名'</span>)</span><br><span class=\"line\">sheet.write(0, 3, <span class=\"string\">'评分'</span>)</span><br><span class=\"line\">sheet.write(0, 4, <span class=\"string\">'作者'</span>)</span><br><span class=\"line\">sheet.write(0, 5, <span class=\"string\">'简介'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">n = 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main(page):</span><br><span class=\"line\">    url = <span class=\"string\">'https://movie.douban.com/top250?start='</span> + str(page * 25) + <span class=\"string\">'&amp;filter='</span></span><br><span class=\"line\">    html = request_douban(url)</span><br><span class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">    list = soup.find(class_=<span class=\"string\">'grid_view'</span>).find_all(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">        item_name = item.find(class_=<span class=\"string\">'title'</span>).string</span><br><span class=\"line\">        item_img = item.find(<span class=\"string\">'a'</span>).find(<span class=\"string\">'img'</span>).get(<span class=\"string\">'src'</span>)</span><br><span class=\"line\">        item_index = item.find(class_=<span class=\"string\">''</span>).string</span><br><span class=\"line\">        item_score = item.find(class_=<span class=\"string\">'rating_num'</span>).string</span><br><span class=\"line\">        item_author = item.find(<span class=\"string\">'p'</span>).text</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.find(class_=<span class=\"string\">'inq'</span>) is not None:</span><br><span class=\"line\">            item_intr = item.find(class_=<span class=\"string\">'inq'</span>).string</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'爬取电影：'</span> + item_index + <span class=\"string\">' | '</span> + item_name + <span class=\"string\">' | '</span> + item_score + <span class=\"string\">' | '</span> + item_intr)</span><br><span class=\"line\"></span><br><span class=\"line\">        global n</span><br><span class=\"line\">        sheet.write(n, 0, item_name)</span><br><span class=\"line\">        sheet.write(n, 1, item_img)</span><br><span class=\"line\">        sheet.write(n, 2, item_index)</span><br><span class=\"line\">        sheet.write(n, 3, item_score)</span><br><span class=\"line\">        sheet.write(n, 4, item_author)</span><br><span class=\"line\">        sheet.write(n, 5, item_intr)</span><br><span class=\"line\">        n = n + 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def request_douban(url):</span><br><span class=\"line\">    maxTryNum = 20</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tries <span class=\"keyword\">in</span> range(maxTryNum):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            kv = &#123;<span class=\"string\">\"user-agent\"</span>: <span class=\"string\">\"Mizilla/5.0\"</span>&#125;</span><br><span class=\"line\">            response = requests.get(url, headers=kv, timeout=60)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.status_code == 200:</span><br><span class=\"line\">                <span class=\"built_in\">return</span> response.text</span><br><span class=\"line\">        except requests.RequestException:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tries &lt; (maxTryNum - 1):</span><br><span class=\"line\">                <span class=\"built_in\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"Has tried %d times to access url %s, all failed!\"</span> % (maxTryNum, url))</span><br><span class=\"line\">                <span class=\"built_in\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(0, 10):</span><br><span class=\"line\">        main(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    book.save(<span class=\"string\">'豆瓣最受欢迎的250部电影.xls'</span>)</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"HTML中常用的meta便签","date":"2020-07-26T13:37:31.000Z","description":null,"_content":"\n`<meta>`元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。\n\n`<meta>`标签位于文档的头部，不包含任何内容。`<meta>`标签的属性定义了与文档相关联的名称/值对。\n\n<!-- more -->\n## 定义\n\n标签提供关于HTML文档的元数据。它不会显示在页面上，但是对于机器是可读的。可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n\n## 作用\n\nmeta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的http头部内容，例如我们为页面中添加如下meta标签：\n```html\n<meta http-equiv=\"charset\" content=\"iso-8859-1\">\n<meta http-equiv=\"expires\" content=\"31 Dec 2008\">\n```\n浏览器的头部就会包括这些:\n```\ncharset:iso-8859-1\nexpires:31 Dec 2008\n```\n只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/HTML中常用的meta便签.md","raw":"---\ntitle: HTML中常用的meta便签\ndate: 2020-07-26 21:37:31\ntags:\ncategories:\ndescription:\n---\n\n`<meta>`元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。\n\n`<meta>`标签位于文档的头部，不包含任何内容。`<meta>`标签的属性定义了与文档相关联的名称/值对。\n\n<!-- more -->\n## 定义\n\n标签提供关于HTML文档的元数据。它不会显示在页面上，但是对于机器是可读的。可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n\n## 作用\n\nmeta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的http头部内容，例如我们为页面中添加如下meta标签：\n```html\n<meta http-equiv=\"charset\" content=\"iso-8859-1\">\n<meta http-equiv=\"expires\" content=\"31 Dec 2008\">\n```\n浏览器的头部就会包括这些:\n```\ncharset:iso-8859-1\nexpires:31 Dec 2008\n```\n只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/HTML中常用的meta便签","published":1,"updated":"2020-08-04T00:34:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51x000j1r0q078g2fdy","content":"<p><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</p>\n<p><code>&lt;meta&gt;</code>标签位于文档的头部，不包含任何内容。<code>&lt;meta&gt;</code>标签的属性定义了与文档相关联的名称/值对。</p>\n<a id=\"more\"></a>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>标签提供关于HTML文档的元数据。它不会显示在页面上，但是对于机器是可读的。可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>meta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的http头部内容，例如我们为页面中添加如下meta标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"charset\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"iso-8859-1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"31 Dec 2008\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器的头部就会包括这些:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">charset:iso-8859-1</span><br><span class=\"line\">expires:31 Dec 2008</span><br></pre></td></tr></table></figure>\n<p>只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</p>\n<p><code>&lt;meta&gt;</code>标签位于文档的头部，不包含任何内容。<code>&lt;meta&gt;</code>标签的属性定义了与文档相关联的名称/值对。</p>","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>标签提供关于HTML文档的元数据。它不会显示在页面上，但是对于机器是可读的。可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>meta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的http头部内容，例如我们为页面中添加如下meta标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"charset\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"iso-8859-1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"31 Dec 2008\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器的头部就会包括这些:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">charset:iso-8859-1</span><br><span class=\"line\">expires:31 Dec 2008</span><br></pre></td></tr></table></figure>\n<p>只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"将uni-request进行axios化封装","date":"2020-11-05T08:06:51.000Z","description":null,"_content":"\n本文介绍如何将uni-app提供的网络请求方式uni-request进行封装。\n\n<!-- more -->\n# step1\n\n首先我们使用hubuilderX创建一个uni-app项目，并在根目录下创建目录`common`，用于统一存放我们的的工具类。\n\n# step2\n\n在`common`下新建`axios/axios.js`,并贴上如下代码：\n\n``` js\n\nconst url_config =\"你的接口地址\"\n\nfunction axios(options){\n\tconst {url, method, data}=options\n\tconst api_token =uni.getStorageSync('api_token');\n\tlet headers={\n\t\tAuthorization:'Bearer ' + api_token,\n\t\tTargetLanguage:\"zh-CN\"\n\t}\n\t\n\treturn uni.request({\n\t\turl: url_config + url,\n\t\tmethod,\n\t\tdata,\n\t\tdataType: 'json',\n\t\theader: headers\n\t}).then(res => {\n\t\tconst result=res[1]\n\t\treturn checkStatus(result)\n\t}).catch(parmas => {\n\t\tconsole.log(parmas,'parmas')\n\t})\n}\nfunction checkStatus(response){\n\treturn new Promise((resolve, reject)=>{\n\t\tif(response.statusCode===200|| \n\t\t\tresponse.statusCode === 304 ||\n\t\t\tresponse.statusCode === 400){\n\t\t\tresolve(response.data);\n\t\t}else{\n\t\t\treject({\n\t\t\t\tstatus: response.statusCode,\n\t\t\t\tmessage: response.data.message,\n\t\t\t\terror: response.data.errors[Object.keys(response.data.errors)[0]][0]\n\t\t\t });\n\t\t}\n\t})\n}\n\nexport default {\n\tpost(url, params) {\n\t\treturn axios({url, method:\"post\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n\tget(url, params) {\n\t\treturn axios({url, method:\"get\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n\tdelete(url, params) {\n\t\treturn axios({url, method:\"delete\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n\tput(url, params) {\n\t\treturn axios({url, method:\"put\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n}\n\n```\n\n# step3\n\n将我们封装好的axios挂载到全局，编辑`main.js`,\n```\nimport axios from 'common/axios/axios.js'\nVue.prototype.$axios = axios;\n```\n到这边是不是已经开始熟悉起来了\n\n# step4\n\n接下来我们就可以在需要发送网络请求的地方快乐的使用axios了\n```js\nthis.$axios.get(url,params).then(res=>{}).catch(e=>{console.log(e)})\nthis.$axios.post(url,params).then(res=>{}).catch(e=>{console.log(e)})\nthis.$axios.delete(url,params).then(res=>{}).catch(e=>{console.log(e)})\nthis.$axios.put(url,params).then(res=>{}).catch(e=>{console.log(e)})\n```\n\n\n>  [在flutter中优雅的封装网络请求](https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/)\n>  [在vue中对axios进行二次封装](https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/)\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/11/将uni-request进行axios化封装.md","raw":"---\ntitle: 将uni-request进行axios化封装\ndate: 2020-11-05 16:06:51\ntags:\n\t- uni-app\n\t- 网络请求\ncategories:\n\t- uni-app\n\t- 网络请求\ndescription:\n---\n\n本文介绍如何将uni-app提供的网络请求方式uni-request进行封装。\n\n<!-- more -->\n# step1\n\n首先我们使用hubuilderX创建一个uni-app项目，并在根目录下创建目录`common`，用于统一存放我们的的工具类。\n\n# step2\n\n在`common`下新建`axios/axios.js`,并贴上如下代码：\n\n``` js\n\nconst url_config =\"你的接口地址\"\n\nfunction axios(options){\n\tconst {url, method, data}=options\n\tconst api_token =uni.getStorageSync('api_token');\n\tlet headers={\n\t\tAuthorization:'Bearer ' + api_token,\n\t\tTargetLanguage:\"zh-CN\"\n\t}\n\t\n\treturn uni.request({\n\t\turl: url_config + url,\n\t\tmethod,\n\t\tdata,\n\t\tdataType: 'json',\n\t\theader: headers\n\t}).then(res => {\n\t\tconst result=res[1]\n\t\treturn checkStatus(result)\n\t}).catch(parmas => {\n\t\tconsole.log(parmas,'parmas')\n\t})\n}\nfunction checkStatus(response){\n\treturn new Promise((resolve, reject)=>{\n\t\tif(response.statusCode===200|| \n\t\t\tresponse.statusCode === 304 ||\n\t\t\tresponse.statusCode === 400){\n\t\t\tresolve(response.data);\n\t\t}else{\n\t\t\treject({\n\t\t\t\tstatus: response.statusCode,\n\t\t\t\tmessage: response.data.message,\n\t\t\t\terror: response.data.errors[Object.keys(response.data.errors)[0]][0]\n\t\t\t });\n\t\t}\n\t})\n}\n\nexport default {\n\tpost(url, params) {\n\t\treturn axios({url, method:\"post\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n\tget(url, params) {\n\t\treturn axios({url, method:\"get\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n\tdelete(url, params) {\n\t\treturn axios({url, method:\"delete\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n\tput(url, params) {\n\t\treturn axios({url, method:\"put\", data:params}).then(response => {\n\t\t\treturn response\n\t\t});\n\t},\n}\n\n```\n\n# step3\n\n将我们封装好的axios挂载到全局，编辑`main.js`,\n```\nimport axios from 'common/axios/axios.js'\nVue.prototype.$axios = axios;\n```\n到这边是不是已经开始熟悉起来了\n\n# step4\n\n接下来我们就可以在需要发送网络请求的地方快乐的使用axios了\n```js\nthis.$axios.get(url,params).then(res=>{}).catch(e=>{console.log(e)})\nthis.$axios.post(url,params).then(res=>{}).catch(e=>{console.log(e)})\nthis.$axios.delete(url,params).then(res=>{}).catch(e=>{console.log(e)})\nthis.$axios.put(url,params).then(res=>{}).catch(e=>{console.log(e)})\n```\n\n\n>  [在flutter中优雅的封装网络请求](https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/)\n>  [在vue中对axios进行二次封装](https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/)\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/11/将uni-request进行axios化封装","published":1,"updated":"2020-11-05T08:27:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj51z000l1r0q3rd56kjf","content":"<p>本文介绍如何将uni-app提供的网络请求方式uni-request进行封装。</p>\n<a id=\"more\"></a>\n<h1 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h1><p>首先我们使用hubuilderX创建一个uni-app项目，并在根目录下创建目录<code>common</code>，用于统一存放我们的的工具类。</p>\n<h1 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h1><p>在<code>common</code>下新建<code>axios/axios.js</code>,并贴上如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> url_config =<span class=\"string\">\"你的接口地址\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">axios</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;url, method, data&#125;=options</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> api_token =uni.getStorageSync(<span class=\"string\">'api_token'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> headers=&#123;</span><br><span class=\"line\">\t\tAuthorization:<span class=\"string\">'Bearer '</span> + api_token,</span><br><span class=\"line\">\t\tTargetLanguage:<span class=\"string\">\"zh-CN\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> uni.request(&#123;</span><br><span class=\"line\">\t\turl: url_config + url,</span><br><span class=\"line\">\t\tmethod,</span><br><span class=\"line\">\t\tdata,</span><br><span class=\"line\">\t\tdataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">\t\theader: headers</span><br><span class=\"line\">\t&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> result=res[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> checkStatus(result)</span><br><span class=\"line\">\t&#125;).catch(<span class=\"function\"><span class=\"params\">parmas</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(parmas,<span class=\"string\">'parmas'</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(response.statusCode===<span class=\"number\">200</span>|| </span><br><span class=\"line\">\t\t\tresponse.statusCode === <span class=\"number\">304</span> ||</span><br><span class=\"line\">\t\t\tresponse.statusCode === <span class=\"number\">400</span>)&#123;</span><br><span class=\"line\">\t\t\tresolve(response.data);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\treject(&#123;</span><br><span class=\"line\">\t\t\t\tstatus: response.statusCode,</span><br><span class=\"line\">\t\t\t\tmessage: response.data.message,</span><br><span class=\"line\">\t\t\t\terror: response.data.errors[<span class=\"built_in\">Object</span>.keys(response.data.errors)[<span class=\"number\">0</span>]][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\t &#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tpost(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"post\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"get\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"delete\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tput(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"put\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h1><p>将我们封装好的axios挂载到全局，编辑<code>main.js</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &#39;common&#x2F;axios&#x2F;axios.js&#39;</span><br><span class=\"line\">Vue.prototype.$axios &#x3D; axios;</span><br></pre></td></tr></table></figure>\n<p>到这边是不是已经开始熟悉起来了</p>\n<h1 id=\"step4\"><a href=\"#step4\" class=\"headerlink\" title=\"step4\"></a>step4</h1><p>接下来我们就可以在需要发送网络请求的地方快乐的使用axios了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$axios.get(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$axios.post(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$axios.delete(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$axios.put(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/\">在flutter中优雅的封装网络请求</a><br> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/\">在vue中对axios进行二次封装</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本文介绍如何将uni-app提供的网络请求方式uni-request进行封装。</p>","more":"<h1 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h1><p>首先我们使用hubuilderX创建一个uni-app项目，并在根目录下创建目录<code>common</code>，用于统一存放我们的的工具类。</p>\n<h1 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h1><p>在<code>common</code>下新建<code>axios/axios.js</code>,并贴上如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> url_config =<span class=\"string\">\"你的接口地址\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">axios</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;url, method, data&#125;=options</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> api_token =uni.getStorageSync(<span class=\"string\">'api_token'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> headers=&#123;</span><br><span class=\"line\">\t\tAuthorization:<span class=\"string\">'Bearer '</span> + api_token,</span><br><span class=\"line\">\t\tTargetLanguage:<span class=\"string\">\"zh-CN\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> uni.request(&#123;</span><br><span class=\"line\">\t\turl: url_config + url,</span><br><span class=\"line\">\t\tmethod,</span><br><span class=\"line\">\t\tdata,</span><br><span class=\"line\">\t\tdataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">\t\theader: headers</span><br><span class=\"line\">\t&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> result=res[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> checkStatus(result)</span><br><span class=\"line\">\t&#125;).catch(<span class=\"function\"><span class=\"params\">parmas</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(parmas,<span class=\"string\">'parmas'</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(response.statusCode===<span class=\"number\">200</span>|| </span><br><span class=\"line\">\t\t\tresponse.statusCode === <span class=\"number\">304</span> ||</span><br><span class=\"line\">\t\t\tresponse.statusCode === <span class=\"number\">400</span>)&#123;</span><br><span class=\"line\">\t\t\tresolve(response.data);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\treject(&#123;</span><br><span class=\"line\">\t\t\t\tstatus: response.statusCode,</span><br><span class=\"line\">\t\t\t\tmessage: response.data.message,</span><br><span class=\"line\">\t\t\t\terror: response.data.errors[<span class=\"built_in\">Object</span>.keys(response.data.errors)[<span class=\"number\">0</span>]][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\t &#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tpost(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"post\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"get\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"delete\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tput(url, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> axios(&#123;url, <span class=\"attr\">method</span>:<span class=\"string\">\"put\"</span>, <span class=\"attr\">data</span>:params&#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h1><p>将我们封装好的axios挂载到全局，编辑<code>main.js</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &#39;common&#x2F;axios&#x2F;axios.js&#39;</span><br><span class=\"line\">Vue.prototype.$axios &#x3D; axios;</span><br></pre></td></tr></table></figure>\n<p>到这边是不是已经开始熟悉起来了</p>\n<h1 id=\"step4\"><a href=\"#step4\" class=\"headerlink\" title=\"step4\"></a>step4</h1><p>接下来我们就可以在需要发送网络请求的地方快乐的使用axios了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$axios.get(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$axios.post(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$axios.delete(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$axios.put(url,params).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/\">在flutter中优雅的封装网络请求</a><br> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/\">在vue中对axios进行二次封装</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"Vue中key的作用和工作原理","date":"2020-07-11T06:29:41.000Z","description":null,"_content":"\n一般我们会回答：可以唯一的确定一个dom元素，从而执行diff算法的时候更高效。\n\n但是到底为什么是这样呢，我们来从源码中找一下答案。\n\n<!-- more -->\n\n准备测试代码,在页面加载两秒后执行一个插入操作，在c的前面插入一个f\n\n```html\n<body>\n    <div id=\"demo\">\n        <p v-for=\"item in items\">{{item}}</p>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        const app=new Vue({\n            el:\"#demo\",\n            data(){\n                return {\n                    items:['a','b','c','d','e']\n                }\n            },\n            mounted(){\n                setTimeout(()=>{\n                    this.items.splice(2,0,'f')\n                },2000)\n            }\n        })\n    </script>\n</body>\n```\n\n如果不使用key，其实并不知道要更新谁，只能做一个操作，就是逐步更新：\n\n首先更新a，其次更新b，第三步的时候覆盖更新，将f更新到原来的c上，c更新到原来的d，d更新到e，然后再创建一个新的e追加在最后。执行了五次更新一次创建追加。\n\n如果使用了key\n\n```\n前两次更新与不使用key一样\n//首次循环patch a\na b c d e\na b f c d e \n\n//第2次循环patch b\nb c d e\nb f c d e\n\n//第3次循环patch e\nc d e\nf c d e\n\n//第4次循环patch d\nc d \nf c d \n\n//第5次循环patch c\nc\nf c \n\n//oldch全部处理结束，newch中剩下f，创建f并插入到c前面\n\n```\n\n这边虽然看上去是执行了五次更新，但是这五次并没有发生任何操作，因为是在更新五个完全相同的节点。因为数据没有发生变化，所以在执行patch是不会做任何事情，也不会发生任何dom操作。\n\n因此准确的来讲，如果不使用key我们执行了三次更新同时一次创建插入操作；而使用了key只做了一次创建插入操作，在数据量比较大的时候运行效率会大大提高。\n\n打开控制台，在vue.js的第6182行加上一个断点，并将oldStartVnode的标签指定在p标签上\n```js\n//断点所在行\nwhile (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {......}\n\n//右键编辑断点，加上以下条件 这样以后在update children时只观察p标签的变化\noldStartVnode.tag==='p'\n```\n然后刷新页面，我们可以看到，每次都会进入以下逻辑\n\n{% asset_img 1.png [sameVnode] %}\n\n我们进到sameVnode()中看一下\n\n{% asset_img 2.png [sameVnode] %}\n\n判断的条件第一条就是判断key的值是否相等，两个undefined会让等式成立，标签相同，都不是注释，data也没有发生变化，也不是input，因此判断条件已经成立了。如果没有设置key的情况下，只要两个标签相同，就会被认为是同一节点，就开始进行patch操作。\n\n我们将key加上，再看一下结果\n```html\n<p v-for=\"item in items\">{{item}}</p>\n```\n\n前两次直接跳过，因为a、b都是相同的节点，到第三次的时候，就会进入到patch e中\n\n{% asset_img 3.png [sameVnode] %}\n\n到第五次循环时，老的已经循环结束了，新的只剩下了f\n\n{% asset_img 4.png [sameVnode] %}\n\n并且在debug的过程中我们也不难看出，设置了key的只会在最后一步更新，而未设置key的会从第三次开始，每次在视图上做出更新。\n\n**结论**\n\n1. key的作用主要是为了更高效的更新虚拟dom，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同的元素，使得整个patch过程更加的高效，减少dom操作量，提高性能。\n\n2. 另外，如果不设置key还可能在列表更新时引发一些隐蔽的bug(例如：更新了某一不需要更新的行)\n\n3. vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果 \n\n\n> 2.2.0+ 的版本里，当在组件中使用v-for时，key现在是必须的，key的取值需要是number或者string，而且需要在同级唯一。\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/Vue中key的作用和工作原理.md","raw":"---\ntitle: Vue中key的作用和工作原理\ndate: 2020-07-11 14:29:41\ntags:\n    - vue\n    - 前端面试\ncategories:\n    - [vue]\n    - [前端面试]\ndescription:\n---\n\n一般我们会回答：可以唯一的确定一个dom元素，从而执行diff算法的时候更高效。\n\n但是到底为什么是这样呢，我们来从源码中找一下答案。\n\n<!-- more -->\n\n准备测试代码,在页面加载两秒后执行一个插入操作，在c的前面插入一个f\n\n```html\n<body>\n    <div id=\"demo\">\n        <p v-for=\"item in items\">{{item}}</p>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        const app=new Vue({\n            el:\"#demo\",\n            data(){\n                return {\n                    items:['a','b','c','d','e']\n                }\n            },\n            mounted(){\n                setTimeout(()=>{\n                    this.items.splice(2,0,'f')\n                },2000)\n            }\n        })\n    </script>\n</body>\n```\n\n如果不使用key，其实并不知道要更新谁，只能做一个操作，就是逐步更新：\n\n首先更新a，其次更新b，第三步的时候覆盖更新，将f更新到原来的c上，c更新到原来的d，d更新到e，然后再创建一个新的e追加在最后。执行了五次更新一次创建追加。\n\n如果使用了key\n\n```\n前两次更新与不使用key一样\n//首次循环patch a\na b c d e\na b f c d e \n\n//第2次循环patch b\nb c d e\nb f c d e\n\n//第3次循环patch e\nc d e\nf c d e\n\n//第4次循环patch d\nc d \nf c d \n\n//第5次循环patch c\nc\nf c \n\n//oldch全部处理结束，newch中剩下f，创建f并插入到c前面\n\n```\n\n这边虽然看上去是执行了五次更新，但是这五次并没有发生任何操作，因为是在更新五个完全相同的节点。因为数据没有发生变化，所以在执行patch是不会做任何事情，也不会发生任何dom操作。\n\n因此准确的来讲，如果不使用key我们执行了三次更新同时一次创建插入操作；而使用了key只做了一次创建插入操作，在数据量比较大的时候运行效率会大大提高。\n\n打开控制台，在vue.js的第6182行加上一个断点，并将oldStartVnode的标签指定在p标签上\n```js\n//断点所在行\nwhile (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {......}\n\n//右键编辑断点，加上以下条件 这样以后在update children时只观察p标签的变化\noldStartVnode.tag==='p'\n```\n然后刷新页面，我们可以看到，每次都会进入以下逻辑\n\n{% asset_img 1.png [sameVnode] %}\n\n我们进到sameVnode()中看一下\n\n{% asset_img 2.png [sameVnode] %}\n\n判断的条件第一条就是判断key的值是否相等，两个undefined会让等式成立，标签相同，都不是注释，data也没有发生变化，也不是input，因此判断条件已经成立了。如果没有设置key的情况下，只要两个标签相同，就会被认为是同一节点，就开始进行patch操作。\n\n我们将key加上，再看一下结果\n```html\n<p v-for=\"item in items\">{{item}}</p>\n```\n\n前两次直接跳过，因为a、b都是相同的节点，到第三次的时候，就会进入到patch e中\n\n{% asset_img 3.png [sameVnode] %}\n\n到第五次循环时，老的已经循环结束了，新的只剩下了f\n\n{% asset_img 4.png [sameVnode] %}\n\n并且在debug的过程中我们也不难看出，设置了key的只会在最后一步更新，而未设置key的会从第三次开始，每次在视图上做出更新。\n\n**结论**\n\n1. key的作用主要是为了更高效的更新虚拟dom，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同的元素，使得整个patch过程更加的高效，减少dom操作量，提高性能。\n\n2. 另外，如果不设置key还可能在列表更新时引发一些隐蔽的bug(例如：更新了某一不需要更新的行)\n\n3. vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果 \n\n\n> 2.2.0+ 的版本里，当在组件中使用v-for时，key现在是必须的，key的取值需要是number或者string，而且需要在同级唯一。\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/Vue中key的作用和工作原理","published":1,"updated":"2020-07-12T15:10:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj524000p1r0q1ldf3l9v","content":"<p>一般我们会回答：可以唯一的确定一个dom元素，从而执行diff算法的时候更高效。</p>\n<p>但是到底为什么是这样呢，我们来从源码中找一下答案。</p>\n<a id=\"more\"></a>\n\n<p>准备测试代码,在页面加载两秒后执行一个插入操作，在c的前面插入一个f</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app=<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el:<span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">            data()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    items:[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>]</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted()&#123;</span><br><span class=\"line\"><span class=\"javascript\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">this</span>.items.splice(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"string\">'f'</span>)</span></span><br><span class=\"line\">                &#125;,2000)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不使用key，其实并不知道要更新谁，只能做一个操作，就是逐步更新：</p>\n<p>首先更新a，其次更新b，第三步的时候覆盖更新，将f更新到原来的c上，c更新到原来的d，d更新到e，然后再创建一个新的e追加在最后。执行了五次更新一次创建追加。</p>\n<p>如果使用了key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前两次更新与不使用key一样</span><br><span class=\"line\">&#x2F;&#x2F;首次循环patch a</span><br><span class=\"line\">a b c d e</span><br><span class=\"line\">a b f c d e </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第2次循环patch b</span><br><span class=\"line\">b c d e</span><br><span class=\"line\">b f c d e</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第3次循环patch e</span><br><span class=\"line\">c d e</span><br><span class=\"line\">f c d e</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第4次循环patch d</span><br><span class=\"line\">c d </span><br><span class=\"line\">f c d </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第5次循环patch c</span><br><span class=\"line\">c</span><br><span class=\"line\">f c </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;oldch全部处理结束，newch中剩下f，创建f并插入到c前面</span><br></pre></td></tr></table></figure>\n\n<p>这边虽然看上去是执行了五次更新，但是这五次并没有发生任何操作，因为是在更新五个完全相同的节点。因为数据没有发生变化，所以在执行patch是不会做任何事情，也不会发生任何dom操作。</p>\n<p>因此准确的来讲，如果不使用key我们执行了三次更新同时一次创建插入操作；而使用了key只做了一次创建插入操作，在数据量比较大的时候运行效率会大大提高。</p>\n<p>打开控制台，在vue.js的第6182行加上一个断点，并将oldStartVnode的标签指定在p标签上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//断点所在行</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;......&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//右键编辑断点，加上以下条件 这样以后在update children时只观察p标签的变化</span></span><br><span class=\"line\">oldStartVnode.tag===<span class=\"string\">'p'</span></span><br></pre></td></tr></table></figure>\n<p>然后刷新页面，我们可以看到，每次都会进入以下逻辑</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/1.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>我们进到sameVnode()中看一下</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/2.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>判断的条件第一条就是判断key的值是否相等，两个undefined会让等式成立，标签相同，都不是注释，data也没有发生变化，也不是input，因此判断条件已经成立了。如果没有设置key的情况下，只要两个标签相同，就会被认为是同一节点，就开始进行patch操作。</p>\n<p>我们将key加上，再看一下结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>前两次直接跳过，因为a、b都是相同的节点，到第三次的时候，就会进入到patch e中</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/3.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>到第五次循环时，老的已经循环结束了，新的只剩下了f</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/4.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>并且在debug的过程中我们也不难看出，设置了key的只会在最后一步更新，而未设置key的会从第三次开始，每次在视图上做出更新。</p>\n<p><strong>结论</strong></p>\n<ol>\n<li><p>key的作用主要是为了更高效的更新虚拟dom，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同的元素，使得整个patch过程更加的高效，减少dom操作量，提高性能。</p>\n</li>\n<li><p>另外，如果不设置key还可能在列表更新时引发一些隐蔽的bug(例如：更新了某一不需要更新的行)</p>\n</li>\n<li><p>vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果 </p>\n</li>\n</ol>\n<blockquote>\n<p>2.2.0+ 的版本里，当在组件中使用v-for时，key现在是必须的，key的取值需要是number或者string，而且需要在同级唯一。</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>一般我们会回答：可以唯一的确定一个dom元素，从而执行diff算法的时候更高效。</p>\n<p>但是到底为什么是这样呢，我们来从源码中找一下答案。</p>","more":"<p>准备测试代码,在页面加载两秒后执行一个插入操作，在c的前面插入一个f</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app=<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el:<span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">            data()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    items:[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>]</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted()&#123;</span><br><span class=\"line\"><span class=\"javascript\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">this</span>.items.splice(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"string\">'f'</span>)</span></span><br><span class=\"line\">                &#125;,2000)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不使用key，其实并不知道要更新谁，只能做一个操作，就是逐步更新：</p>\n<p>首先更新a，其次更新b，第三步的时候覆盖更新，将f更新到原来的c上，c更新到原来的d，d更新到e，然后再创建一个新的e追加在最后。执行了五次更新一次创建追加。</p>\n<p>如果使用了key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前两次更新与不使用key一样</span><br><span class=\"line\">&#x2F;&#x2F;首次循环patch a</span><br><span class=\"line\">a b c d e</span><br><span class=\"line\">a b f c d e </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第2次循环patch b</span><br><span class=\"line\">b c d e</span><br><span class=\"line\">b f c d e</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第3次循环patch e</span><br><span class=\"line\">c d e</span><br><span class=\"line\">f c d e</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第4次循环patch d</span><br><span class=\"line\">c d </span><br><span class=\"line\">f c d </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第5次循环patch c</span><br><span class=\"line\">c</span><br><span class=\"line\">f c </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;oldch全部处理结束，newch中剩下f，创建f并插入到c前面</span><br></pre></td></tr></table></figure>\n\n<p>这边虽然看上去是执行了五次更新，但是这五次并没有发生任何操作，因为是在更新五个完全相同的节点。因为数据没有发生变化，所以在执行patch是不会做任何事情，也不会发生任何dom操作。</p>\n<p>因此准确的来讲，如果不使用key我们执行了三次更新同时一次创建插入操作；而使用了key只做了一次创建插入操作，在数据量比较大的时候运行效率会大大提高。</p>\n<p>打开控制台，在vue.js的第6182行加上一个断点，并将oldStartVnode的标签指定在p标签上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//断点所在行</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;......&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//右键编辑断点，加上以下条件 这样以后在update children时只观察p标签的变化</span></span><br><span class=\"line\">oldStartVnode.tag===<span class=\"string\">'p'</span></span><br></pre></td></tr></table></figure>\n<p>然后刷新页面，我们可以看到，每次都会进入以下逻辑</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/1.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>我们进到sameVnode()中看一下</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/2.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>判断的条件第一条就是判断key的值是否相等，两个undefined会让等式成立，标签相同，都不是注释，data也没有发生变化，也不是input，因此判断条件已经成立了。如果没有设置key的情况下，只要两个标签相同，就会被认为是同一节点，就开始进行patch操作。</p>\n<p>我们将key加上，再看一下结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>前两次直接跳过，因为a、b都是相同的节点，到第三次的时候，就会进入到patch e中</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/3.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>到第五次循环时，老的已经循环结束了，新的只剩下了f</p>\n<img src=\"/2020/07/Vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/4.png\" class=\"\" title=\"[sameVnode]\">\n\n<p>并且在debug的过程中我们也不难看出，设置了key的只会在最后一步更新，而未设置key的会从第三次开始，每次在视图上做出更新。</p>\n<p><strong>结论</strong></p>\n<ol>\n<li><p>key的作用主要是为了更高效的更新虚拟dom，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同的元素，使得整个patch过程更加的高效，减少dom操作量，提高性能。</p>\n</li>\n<li><p>另外，如果不设置key还可能在列表更新时引发一些隐蔽的bug(例如：更新了某一不需要更新的行)</p>\n</li>\n<li><p>vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果 </p>\n</li>\n</ol>\n<blockquote>\n<p>2.2.0+ 的版本里，当在组件中使用v-for时，key现在是必须的，key的取值需要是number或者string，而且需要在同级唯一。</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"vue-router源码实现","date":"2020-07-05T11:38:41.000Z","description":null,"_content":"\n从零开始，实现vue-router\n\n<!-- more -->\n\n# 本篇目标\n\n- 实现`VueRouter`类和`install`方法，使之作为一个插件存在\n- 实现两个全局组件:`router-view`用于显示匹配组件内容，`router-link`用于跳转\n- 监控`url`变化:监听`hashchange`或`popstate`事件\n- 响应最新`url`:创建一个响应式的属性`current`，当它改变时获取对应的组件并显示\n\n# 实现一个插件：创建VueRouter类和install方法\n\n在`src`目录下创`jrouter`文件夹用于存放我们手写的路由的相关代码，在`jrouter`下新建`index.js`和`jvue-router.js`\n\n```js\n//jvue-router.js\n\nlet Vue;//引用构造函数，在JVueRouter里面使用\n//1、实现一个插件：挂载$router\nclass JVueRouter{\n    constructor(options){\n        //获取用户配置并保存\n        this.$options=options\n    }\n}\n//插件：实现install方法，注册$router\nJVueRouter.install = function(_Vue){\n    //保存构造函数，在JVueRouter里面使用\n    Vue=_Vue;\n    // 挂载$router\n    Vue.mixin({//混入\n        beforeCreate(){\n            //确保根实例的时候才执行,只有根组件拥有router选项\n            if(this.$options.router){\n                Vue.prototype.$router = this.$options.router\n            }\n        }\n    })\n}\nexport default JVueRouter;\n```\n> 为什么要采用混入的方式：主要原因是use代码在前，Router实例创建在后，而install逻辑又需要用到该实例\n\n修改`jrouter`中`index.js`代码\n```js\nimport Vue from 'vue'\nimport VueRouter from './jvue-router'//引入我们写好的插件\nimport Home from '../views/Home.vue'\n\n// 1.应用插件\nVue.use(VueRouter)\n\nconst routes = [\n  ......\n]\n\n// 2.创建实例\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport default router\n```\n最后我们只需要修改`main.js`中对路由的引用就可以了\n```js\n...\nimport router from './jrouter'\n...\nnew Vue({\n  router,//挂载router实例\n  store,\n  render: h => h(App)\n}).$mount('#app')\n```\n\n# 实现router-link和router-view\n\n修改`jrouter`中`index.js`代码\n\n```js\nKVueRouter.install = function (_Vue) {\n    ...\n    Vue.component('router-link', {\n        props: {\n            to: {\n                type: String,\n                required: true\n            },\n        },\n        render(h) {\n            // <a href=\"#/about\">abc</a>\n            // <router-link to=\"/about\">xxx</router-link>\n            // h(tag, data, children)\n            return h('a', { attrs: { href: '#' + this.to } }, this.$slots.default)\n            // return <a href={'#' + this.to}>{this.$slots.default}</a>\n        }\n    })\n    Vue.component('router-view', {\n        render(h){\n            return h('div','router-view')\n        }\n    })\n}\n```\n\n# 监控url的变化\n\n定义响应式的current，监听hashchange事件\n```js\nclass JVueRouter{\n    constructor(options){\n        this.$options=options\n        //需要创建响应式的current的属性,可以利用vue监听current的变化\n        Vue.util.defineReactive(this,'current','/')\n        //监控url变化\n        window.addEventListener('hashchange', this.onHashChange.bind(this))//避免onHashChange中this变成window\n        window.addEventListener('load', this.onHashChange.bind(this))//页面加载 避免onHashChange中this变成window\n    }\n    onHashChange(){\n        this.current = window.location.hash.slice(1)\n    }\n}\n```\n动态获取对应的组件\n\n```js\nVue.component('router-view', {\n        render(h){\n            //获取path对应的component\n            let component=null\n            this.$router.$options.routes.forEach(route=>{\n                if(route.path===this.$router.current){\n                    component=route.component\n                }\n            })\n            return h(component)\n        }\n    })\n```\n\n# 提前处理路由表\n\n提前处理路由表可以避免每次都循环\n```js\nclass JVueRouter{\n    constructor(options){\n        ......\n        //创建一个路由映射表\n        this.routeMap={}\n        options.routes.forEach(route=>{\n            this.routeMap[route.path]=route\n        })\n        ......\n    }\n}\n```\n修改`router-view`根据path获取component的方法\n```js\nVue.component('router-view', {\n    render(h){\n        const {routeMap,current}=this.$router\n        const component=routeMap[current].component || null\n        return h(component)\n    }\n})\n```\n\n# 代码结构优化\n\n我们在`jrouter`文件夹下新建`jrouter-link.js`和`jrouter-view.js`,调整`jvue-router.js`中代码\n```js\n//首先进行引入\nimport Link from './jrouter-link'\nimport View from './jrouter-view'\n\n......\n\n // \nJVueRouter.install = function (_Vue) {\n    ......\n    Vue.component('router-link', Link)\n    Vue.component('router-view', View)\n    ......\n}\n```\n然后我们将原先写在`jvue-router.js`中组件部分的代码分别写到对应的js文件中\n```js\n//jrouter-link.js\nexport default {\n  props: {\n    to: {\n      type: String,\n      required: true\n    },\n  },\n  render(h) {\n    // <a href=\"#/about\">abc</a>\n    // <router-link to=\"/about\">xxx</router-link>\n    // h(tag, data, children)\n    return h('a', { attrs: { href: '#' + this.to } }, this.$slots.default)\n    // return <a href={'#' + this.to}>{this.$slots.default}</a>\n  }\n}\n// jrouter-view.js\nexport default {\n  render(h) {\n    //获取path对应的component\n    const {routeMap, current} = this.$router;\n    const component = routeMap[current].component || null;\n    return h(component)\n  }\n}\n```\n\n> 如果我们不用`Vue.util.defineReactive(this,'current','/')`来实现监听，其实也可以用这种方式\n>```js\nthis.app = new Vue({\n    data(){\n        return {\n            current:'/'\n        }\n   }\n})\n//获取current的方式就变为\nthis.app.current\n>```\n\n# 嵌套路由\n\n当用户的路由为类似如下的嵌套路由时，我们应该如何兼容呢\n\n```js\nconst routes = [\n    ......\n  {\n    path: '/about',\n    name: 'about',\n    component: () => import('../views/About.vue'),\n    children:[\n        {\n            path:'/about/info',\n            component:() => import('../views/AboutInfo.vue'),\n        }\n        ......\n    ]\n  }\n    ......\n]\n```\n打开`jrouter-view.js`文件，并修改\n```js\nexport default {\n  render(h) {\n    //标记当前router-view深度\n    this.$vnode.data.routerView = true;\n    let depth = 0\n    let parent = this.$parent\n    while(parent){\n        const vnodeData = parent.$vnode&&parent.$vnode.data\n        if(vnodeData&&vnodeData.routerView){\n            //说明当前的parent是一个router-view\n            depth++\n        }\n        parent = parent.$parent\n    }\n    //获取path对应的component\n    let component = null;\n    const route = this.$router.matched[depth];\n    if(route){\n        component = route.component\n    }\n    \n    return h(component)\n  }\n}\n```\n修改`jvue-router.js`\n```js\nclass JVueRouter{\n    constructor(options){\n        this.$options=options\n        //需要创建响应式的current的属性,可以利用vue监听current的变化\n        // Vue.util.defineReactive(this,'current','/')通过matched数组获取component，不需要current响应式了\n        this.current = window.location.hash.slice(1)||'/'\n        Vue.util.defineReactive(this,'matched',[])\n        //match方法可以递归遍历路由表，获得匹配关系的数组\n        this.match()\n        //监控url变化\n        window.addEventListener('hashchange', this.onHashChange.bind(this))//避免onHashChange中this变成window\n        window.addEventListener('load', this.onHashChange.bind(this))//页面加载 避免onHashChange中this变成window\n    }\n    onHashChange(){\n        this.current = window.location.hash.slice(1)\n        this.matched = []\n        this.match()\n\n    }\n    match(routes){\n        routes = routes||this.$options.routes\n        //递归遍历路由表\n        for(const route of routes){\n            if(route.path === '/'&&this.current==='/'){\n                this.matched.push(route)\n                return\n            }\n            if(route.path!=='/'&&this.current.indexOf(route.path)!=-1){\n                this.matched.push(route)\n                if(route.children){//如果有嵌套 \n                    this.match(route.children)\n                }\n                return\n            }\n        }\n    }\n}\n```\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/vue-router源码实现.md","raw":"---\ntitle: vue-router源码实现\ndate: 2020-07-05 19:38:41\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n从零开始，实现vue-router\n\n<!-- more -->\n\n# 本篇目标\n\n- 实现`VueRouter`类和`install`方法，使之作为一个插件存在\n- 实现两个全局组件:`router-view`用于显示匹配组件内容，`router-link`用于跳转\n- 监控`url`变化:监听`hashchange`或`popstate`事件\n- 响应最新`url`:创建一个响应式的属性`current`，当它改变时获取对应的组件并显示\n\n# 实现一个插件：创建VueRouter类和install方法\n\n在`src`目录下创`jrouter`文件夹用于存放我们手写的路由的相关代码，在`jrouter`下新建`index.js`和`jvue-router.js`\n\n```js\n//jvue-router.js\n\nlet Vue;//引用构造函数，在JVueRouter里面使用\n//1、实现一个插件：挂载$router\nclass JVueRouter{\n    constructor(options){\n        //获取用户配置并保存\n        this.$options=options\n    }\n}\n//插件：实现install方法，注册$router\nJVueRouter.install = function(_Vue){\n    //保存构造函数，在JVueRouter里面使用\n    Vue=_Vue;\n    // 挂载$router\n    Vue.mixin({//混入\n        beforeCreate(){\n            //确保根实例的时候才执行,只有根组件拥有router选项\n            if(this.$options.router){\n                Vue.prototype.$router = this.$options.router\n            }\n        }\n    })\n}\nexport default JVueRouter;\n```\n> 为什么要采用混入的方式：主要原因是use代码在前，Router实例创建在后，而install逻辑又需要用到该实例\n\n修改`jrouter`中`index.js`代码\n```js\nimport Vue from 'vue'\nimport VueRouter from './jvue-router'//引入我们写好的插件\nimport Home from '../views/Home.vue'\n\n// 1.应用插件\nVue.use(VueRouter)\n\nconst routes = [\n  ......\n]\n\n// 2.创建实例\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport default router\n```\n最后我们只需要修改`main.js`中对路由的引用就可以了\n```js\n...\nimport router from './jrouter'\n...\nnew Vue({\n  router,//挂载router实例\n  store,\n  render: h => h(App)\n}).$mount('#app')\n```\n\n# 实现router-link和router-view\n\n修改`jrouter`中`index.js`代码\n\n```js\nKVueRouter.install = function (_Vue) {\n    ...\n    Vue.component('router-link', {\n        props: {\n            to: {\n                type: String,\n                required: true\n            },\n        },\n        render(h) {\n            // <a href=\"#/about\">abc</a>\n            // <router-link to=\"/about\">xxx</router-link>\n            // h(tag, data, children)\n            return h('a', { attrs: { href: '#' + this.to } }, this.$slots.default)\n            // return <a href={'#' + this.to}>{this.$slots.default}</a>\n        }\n    })\n    Vue.component('router-view', {\n        render(h){\n            return h('div','router-view')\n        }\n    })\n}\n```\n\n# 监控url的变化\n\n定义响应式的current，监听hashchange事件\n```js\nclass JVueRouter{\n    constructor(options){\n        this.$options=options\n        //需要创建响应式的current的属性,可以利用vue监听current的变化\n        Vue.util.defineReactive(this,'current','/')\n        //监控url变化\n        window.addEventListener('hashchange', this.onHashChange.bind(this))//避免onHashChange中this变成window\n        window.addEventListener('load', this.onHashChange.bind(this))//页面加载 避免onHashChange中this变成window\n    }\n    onHashChange(){\n        this.current = window.location.hash.slice(1)\n    }\n}\n```\n动态获取对应的组件\n\n```js\nVue.component('router-view', {\n        render(h){\n            //获取path对应的component\n            let component=null\n            this.$router.$options.routes.forEach(route=>{\n                if(route.path===this.$router.current){\n                    component=route.component\n                }\n            })\n            return h(component)\n        }\n    })\n```\n\n# 提前处理路由表\n\n提前处理路由表可以避免每次都循环\n```js\nclass JVueRouter{\n    constructor(options){\n        ......\n        //创建一个路由映射表\n        this.routeMap={}\n        options.routes.forEach(route=>{\n            this.routeMap[route.path]=route\n        })\n        ......\n    }\n}\n```\n修改`router-view`根据path获取component的方法\n```js\nVue.component('router-view', {\n    render(h){\n        const {routeMap,current}=this.$router\n        const component=routeMap[current].component || null\n        return h(component)\n    }\n})\n```\n\n# 代码结构优化\n\n我们在`jrouter`文件夹下新建`jrouter-link.js`和`jrouter-view.js`,调整`jvue-router.js`中代码\n```js\n//首先进行引入\nimport Link from './jrouter-link'\nimport View from './jrouter-view'\n\n......\n\n // \nJVueRouter.install = function (_Vue) {\n    ......\n    Vue.component('router-link', Link)\n    Vue.component('router-view', View)\n    ......\n}\n```\n然后我们将原先写在`jvue-router.js`中组件部分的代码分别写到对应的js文件中\n```js\n//jrouter-link.js\nexport default {\n  props: {\n    to: {\n      type: String,\n      required: true\n    },\n  },\n  render(h) {\n    // <a href=\"#/about\">abc</a>\n    // <router-link to=\"/about\">xxx</router-link>\n    // h(tag, data, children)\n    return h('a', { attrs: { href: '#' + this.to } }, this.$slots.default)\n    // return <a href={'#' + this.to}>{this.$slots.default}</a>\n  }\n}\n// jrouter-view.js\nexport default {\n  render(h) {\n    //获取path对应的component\n    const {routeMap, current} = this.$router;\n    const component = routeMap[current].component || null;\n    return h(component)\n  }\n}\n```\n\n> 如果我们不用`Vue.util.defineReactive(this,'current','/')`来实现监听，其实也可以用这种方式\n>```js\nthis.app = new Vue({\n    data(){\n        return {\n            current:'/'\n        }\n   }\n})\n//获取current的方式就变为\nthis.app.current\n>```\n\n# 嵌套路由\n\n当用户的路由为类似如下的嵌套路由时，我们应该如何兼容呢\n\n```js\nconst routes = [\n    ......\n  {\n    path: '/about',\n    name: 'about',\n    component: () => import('../views/About.vue'),\n    children:[\n        {\n            path:'/about/info',\n            component:() => import('../views/AboutInfo.vue'),\n        }\n        ......\n    ]\n  }\n    ......\n]\n```\n打开`jrouter-view.js`文件，并修改\n```js\nexport default {\n  render(h) {\n    //标记当前router-view深度\n    this.$vnode.data.routerView = true;\n    let depth = 0\n    let parent = this.$parent\n    while(parent){\n        const vnodeData = parent.$vnode&&parent.$vnode.data\n        if(vnodeData&&vnodeData.routerView){\n            //说明当前的parent是一个router-view\n            depth++\n        }\n        parent = parent.$parent\n    }\n    //获取path对应的component\n    let component = null;\n    const route = this.$router.matched[depth];\n    if(route){\n        component = route.component\n    }\n    \n    return h(component)\n  }\n}\n```\n修改`jvue-router.js`\n```js\nclass JVueRouter{\n    constructor(options){\n        this.$options=options\n        //需要创建响应式的current的属性,可以利用vue监听current的变化\n        // Vue.util.defineReactive(this,'current','/')通过matched数组获取component，不需要current响应式了\n        this.current = window.location.hash.slice(1)||'/'\n        Vue.util.defineReactive(this,'matched',[])\n        //match方法可以递归遍历路由表，获得匹配关系的数组\n        this.match()\n        //监控url变化\n        window.addEventListener('hashchange', this.onHashChange.bind(this))//避免onHashChange中this变成window\n        window.addEventListener('load', this.onHashChange.bind(this))//页面加载 避免onHashChange中this变成window\n    }\n    onHashChange(){\n        this.current = window.location.hash.slice(1)\n        this.matched = []\n        this.match()\n\n    }\n    match(routes){\n        routes = routes||this.$options.routes\n        //递归遍历路由表\n        for(const route of routes){\n            if(route.path === '/'&&this.current==='/'){\n                this.matched.push(route)\n                return\n            }\n            if(route.path!=='/'&&this.current.indexOf(route.path)!=-1){\n                this.matched.push(route)\n                if(route.children){//如果有嵌套 \n                    this.match(route.children)\n                }\n                return\n            }\n        }\n    }\n}\n```\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/vue-router源码实现","published":1,"updated":"2020-07-11T15:18:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj526000r1r0q0s2yau67","content":"<p>从零开始，实现vue-router</p>\n<a id=\"more\"></a>\n\n<h1 id=\"本篇目标\"><a href=\"#本篇目标\" class=\"headerlink\" title=\"本篇目标\"></a>本篇目标</h1><ul>\n<li>实现<code>VueRouter</code>类和<code>install</code>方法，使之作为一个插件存在</li>\n<li>实现两个全局组件:<code>router-view</code>用于显示匹配组件内容，<code>router-link</code>用于跳转</li>\n<li>监控<code>url</code>变化:监听<code>hashchange</code>或<code>popstate</code>事件</li>\n<li>响应最新<code>url</code>:创建一个响应式的属性<code>current</code>，当它改变时获取对应的组件并显示</li>\n</ul>\n<h1 id=\"实现一个插件：创建VueRouter类和install方法\"><a href=\"#实现一个插件：创建VueRouter类和install方法\" class=\"headerlink\" title=\"实现一个插件：创建VueRouter类和install方法\"></a>实现一个插件：创建VueRouter类和install方法</h1><p>在<code>src</code>目录下创<code>jrouter</code>文件夹用于存放我们手写的路由的相关代码，在<code>jrouter</code>下新建<code>index.js</code>和<code>jvue-router.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jvue-router.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> Vue;<span class=\"comment\">//引用构造函数，在JVueRouter里面使用</span></span><br><span class=\"line\"><span class=\"comment\">//1、实现一个插件：挂载$router</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取用户配置并保存</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$options=options</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插件：实现install方法，注册$router</span></span><br><span class=\"line\">JVueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_Vue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//保存构造函数，在JVueRouter里面使用</span></span><br><span class=\"line\">    Vue=_Vue;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载$router</span></span><br><span class=\"line\">    Vue.mixin(&#123;<span class=\"comment\">//混入</span></span><br><span class=\"line\">        beforeCreate()&#123;</span><br><span class=\"line\">            <span class=\"comment\">//确保根实例的时候才执行,只有根组件拥有router选项</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.$options.router)&#123;</span><br><span class=\"line\">                Vue.prototype.$router = <span class=\"keyword\">this</span>.$options.router</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> JVueRouter;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么要采用混入的方式：主要原因是use代码在前，Router实例创建在后，而install逻辑又需要用到该实例</p>\n</blockquote>\n<p>修改<code>jrouter</code>中<code>index.js</code>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'./jvue-router'</span><span class=\"comment\">//引入我们写好的插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'../views/Home.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.应用插件</span></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  ......</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.创建实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  base: process.env.BASE_URL,</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n<p>最后我们只需要修改<code>main.js</code>中对路由的引用就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./jrouter'</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,<span class=\"comment\">//挂载router实例</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现router-link和router-view\"><a href=\"#实现router-link和router-view\" class=\"headerlink\" title=\"实现router-link和router-view\"></a>实现router-link和router-view</h1><p>修改<code>jrouter</code>中<code>index.js</code>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KVueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_Vue</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-link'</span>, &#123;</span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\">            to: &#123;</span><br><span class=\"line\">                type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">                required: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        render(h) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &lt;a href=\"#/about\"&gt;abc&lt;/a&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">// &lt;router-link to=\"/about\"&gt;xxx&lt;/router-link&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">// h(tag, data, children)</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> h(<span class=\"string\">'a'</span>, &#123; <span class=\"attr\">attrs</span>: &#123; <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + <span class=\"keyword\">this</span>.to &#125; &#125;, <span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">            <span class=\"comment\">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-view'</span>, &#123;</span><br><span class=\"line\">        render(h)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> h(<span class=\"string\">'div'</span>,<span class=\"string\">'router-view'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"监控url的变化\"><a href=\"#监控url的变化\" class=\"headerlink\" title=\"监控url的变化\"></a>监控url的变化</h1><p>定义响应式的current，监听hashchange事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$options=options</span><br><span class=\"line\">        <span class=\"comment\">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class=\"line\">        Vue.util.defineReactive(<span class=\"keyword\">this</span>,<span class=\"string\">'current'</span>,<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        <span class=\"comment\">//监控url变化</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//避免onHashChange中this变成window</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//页面加载 避免onHashChange中this变成window</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onHashChange()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"built_in\">window</span>.location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态获取对应的组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'router-view'</span>, &#123;</span><br><span class=\"line\">        render(h)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取path对应的component</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> component=<span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.$options.routes.forEach(<span class=\"function\"><span class=\"params\">route</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(route.path===<span class=\"keyword\">this</span>.$router.current)&#123;</span><br><span class=\"line\">                    component=route.component</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"提前处理路由表\"><a href=\"#提前处理路由表\" class=\"headerlink\" title=\"提前处理路由表\"></a>提前处理路由表</h1><p>提前处理路由表可以避免每次都循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        <span class=\"comment\">//创建一个路由映射表</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.routeMap=&#123;&#125;</span><br><span class=\"line\">        options.routes.forEach(<span class=\"function\"><span class=\"params\">route</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.routeMap[route.path]=route</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改<code>router-view</code>根据path获取component的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'router-view'</span>, &#123;</span><br><span class=\"line\">    render(h)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;routeMap,current&#125;=<span class=\"keyword\">this</span>.$router</span><br><span class=\"line\">        <span class=\"keyword\">const</span> component=routeMap[current].component || <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码结构优化\"><a href=\"#代码结构优化\" class=\"headerlink\" title=\"代码结构优化\"></a>代码结构优化</h1><p>我们在<code>jrouter</code>文件夹下新建<code>jrouter-link.js</code>和<code>jrouter-view.js</code>,调整<code>jvue-router.js</code>中代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先进行引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Link <span class=\"keyword\">from</span> <span class=\"string\">'./jrouter-link'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> View <span class=\"keyword\">from</span> <span class=\"string\">'./jrouter-view'</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// </span></span><br><span class=\"line\">JVueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_Vue</span>) </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-link'</span>, Link)</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-view'</span>, View)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们将原先写在<code>jvue-router.js</code>中组件部分的代码分别写到对应的js文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jrouter-link.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    to: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;a href=\"#/about\"&gt;abc&lt;/a&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;router-link to=\"/about\"&gt;xxx&lt;/router-link&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// h(tag, data, children)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'a'</span>, &#123; <span class=\"attr\">attrs</span>: &#123; <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + <span class=\"keyword\">this</span>.to &#125; &#125;, <span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">    <span class=\"comment\">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// jrouter-view.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取path对应的component</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;routeMap, current&#125; = <span class=\"keyword\">this</span>.$router;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> component = routeMap[current].component || <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果我们不用<code>Vue.util.defineReactive(this,&#39;current&#39;,&#39;/&#39;)</code>来实现监听，其实也可以用这种方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   data()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">           current:<span class=\"string\">'/'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//获取current的方式就变为</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.app.current</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h1><p>当用户的路由为类似如下的嵌套路由时，我们应该如何兼容呢</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/about'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'about'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../views/About.vue'</span>),</span><br><span class=\"line\">    children:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path:<span class=\"string\">'/about/info'</span>,</span><br><span class=\"line\">            component:<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../views/AboutInfo.vue'</span>),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>打开<code>jrouter-view.js</code>文件，并修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//标记当前router-view深度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$vnode.data.routerView = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> depth = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent = <span class=\"keyword\">this</span>.$parent</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> vnodeData = parent.$vnode&amp;&amp;parent.$vnode.data</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vnodeData&amp;&amp;vnodeData.routerView)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//说明当前的parent是一个router-view</span></span><br><span class=\"line\">            depth++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        parent = parent.$parent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取path对应的component</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> component = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = <span class=\"keyword\">this</span>.$router.matched[depth];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(route)&#123;</span><br><span class=\"line\">        component = route.component</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改<code>jvue-router.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$options=options</span><br><span class=\"line\">        <span class=\"comment\">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class=\"line\">        <span class=\"comment\">// Vue.util.defineReactive(this,'current','/')通过matched数组获取component，不需要current响应式了</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"built_in\">window</span>.location.hash.slice(<span class=\"number\">1</span>)||<span class=\"string\">'/'</span></span><br><span class=\"line\">        Vue.util.defineReactive(<span class=\"keyword\">this</span>,<span class=\"string\">'matched'</span>,[])</span><br><span class=\"line\">        <span class=\"comment\">//match方法可以递归遍历路由表，获得匹配关系的数组</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.match()</span><br><span class=\"line\">        <span class=\"comment\">//监控url变化</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//避免onHashChange中this变成window</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//页面加载 避免onHashChange中this变成window</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onHashChange()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"built_in\">window</span>.location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.matched = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.match()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    match(routes)&#123;</span><br><span class=\"line\">        routes = routes||<span class=\"keyword\">this</span>.$options.routes</span><br><span class=\"line\">        <span class=\"comment\">//递归遍历路由表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> route <span class=\"keyword\">of</span> routes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(route.path === <span class=\"string\">'/'</span>&amp;&amp;<span class=\"keyword\">this</span>.current===<span class=\"string\">'/'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.matched.push(route)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(route.path!==<span class=\"string\">'/'</span>&amp;&amp;<span class=\"keyword\">this</span>.current.indexOf(route.path)!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.matched.push(route)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(route.children)&#123;<span class=\"comment\">//如果有嵌套 </span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.match(route.children)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>从零开始，实现vue-router</p>","more":"<h1 id=\"本篇目标\"><a href=\"#本篇目标\" class=\"headerlink\" title=\"本篇目标\"></a>本篇目标</h1><ul>\n<li>实现<code>VueRouter</code>类和<code>install</code>方法，使之作为一个插件存在</li>\n<li>实现两个全局组件:<code>router-view</code>用于显示匹配组件内容，<code>router-link</code>用于跳转</li>\n<li>监控<code>url</code>变化:监听<code>hashchange</code>或<code>popstate</code>事件</li>\n<li>响应最新<code>url</code>:创建一个响应式的属性<code>current</code>，当它改变时获取对应的组件并显示</li>\n</ul>\n<h1 id=\"实现一个插件：创建VueRouter类和install方法\"><a href=\"#实现一个插件：创建VueRouter类和install方法\" class=\"headerlink\" title=\"实现一个插件：创建VueRouter类和install方法\"></a>实现一个插件：创建VueRouter类和install方法</h1><p>在<code>src</code>目录下创<code>jrouter</code>文件夹用于存放我们手写的路由的相关代码，在<code>jrouter</code>下新建<code>index.js</code>和<code>jvue-router.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jvue-router.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> Vue;<span class=\"comment\">//引用构造函数，在JVueRouter里面使用</span></span><br><span class=\"line\"><span class=\"comment\">//1、实现一个插件：挂载$router</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取用户配置并保存</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$options=options</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插件：实现install方法，注册$router</span></span><br><span class=\"line\">JVueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_Vue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//保存构造函数，在JVueRouter里面使用</span></span><br><span class=\"line\">    Vue=_Vue;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载$router</span></span><br><span class=\"line\">    Vue.mixin(&#123;<span class=\"comment\">//混入</span></span><br><span class=\"line\">        beforeCreate()&#123;</span><br><span class=\"line\">            <span class=\"comment\">//确保根实例的时候才执行,只有根组件拥有router选项</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.$options.router)&#123;</span><br><span class=\"line\">                Vue.prototype.$router = <span class=\"keyword\">this</span>.$options.router</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> JVueRouter;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么要采用混入的方式：主要原因是use代码在前，Router实例创建在后，而install逻辑又需要用到该实例</p>\n</blockquote>\n<p>修改<code>jrouter</code>中<code>index.js</code>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'./jvue-router'</span><span class=\"comment\">//引入我们写好的插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'../views/Home.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.应用插件</span></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  ......</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.创建实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  base: process.env.BASE_URL,</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n<p>最后我们只需要修改<code>main.js</code>中对路由的引用就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./jrouter'</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,<span class=\"comment\">//挂载router实例</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现router-link和router-view\"><a href=\"#实现router-link和router-view\" class=\"headerlink\" title=\"实现router-link和router-view\"></a>实现router-link和router-view</h1><p>修改<code>jrouter</code>中<code>index.js</code>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KVueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_Vue</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-link'</span>, &#123;</span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\">            to: &#123;</span><br><span class=\"line\">                type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">                required: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        render(h) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &lt;a href=\"#/about\"&gt;abc&lt;/a&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">// &lt;router-link to=\"/about\"&gt;xxx&lt;/router-link&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">// h(tag, data, children)</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> h(<span class=\"string\">'a'</span>, &#123; <span class=\"attr\">attrs</span>: &#123; <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + <span class=\"keyword\">this</span>.to &#125; &#125;, <span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">            <span class=\"comment\">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-view'</span>, &#123;</span><br><span class=\"line\">        render(h)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> h(<span class=\"string\">'div'</span>,<span class=\"string\">'router-view'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"监控url的变化\"><a href=\"#监控url的变化\" class=\"headerlink\" title=\"监控url的变化\"></a>监控url的变化</h1><p>定义响应式的current，监听hashchange事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$options=options</span><br><span class=\"line\">        <span class=\"comment\">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class=\"line\">        Vue.util.defineReactive(<span class=\"keyword\">this</span>,<span class=\"string\">'current'</span>,<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        <span class=\"comment\">//监控url变化</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//避免onHashChange中this变成window</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//页面加载 避免onHashChange中this变成window</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onHashChange()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"built_in\">window</span>.location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态获取对应的组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'router-view'</span>, &#123;</span><br><span class=\"line\">        render(h)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取path对应的component</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> component=<span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.$options.routes.forEach(<span class=\"function\"><span class=\"params\">route</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(route.path===<span class=\"keyword\">this</span>.$router.current)&#123;</span><br><span class=\"line\">                    component=route.component</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"提前处理路由表\"><a href=\"#提前处理路由表\" class=\"headerlink\" title=\"提前处理路由表\"></a>提前处理路由表</h1><p>提前处理路由表可以避免每次都循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        <span class=\"comment\">//创建一个路由映射表</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.routeMap=&#123;&#125;</span><br><span class=\"line\">        options.routes.forEach(<span class=\"function\"><span class=\"params\">route</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.routeMap[route.path]=route</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改<code>router-view</code>根据path获取component的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'router-view'</span>, &#123;</span><br><span class=\"line\">    render(h)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;routeMap,current&#125;=<span class=\"keyword\">this</span>.$router</span><br><span class=\"line\">        <span class=\"keyword\">const</span> component=routeMap[current].component || <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码结构优化\"><a href=\"#代码结构优化\" class=\"headerlink\" title=\"代码结构优化\"></a>代码结构优化</h1><p>我们在<code>jrouter</code>文件夹下新建<code>jrouter-link.js</code>和<code>jrouter-view.js</code>,调整<code>jvue-router.js</code>中代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先进行引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Link <span class=\"keyword\">from</span> <span class=\"string\">'./jrouter-link'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> View <span class=\"keyword\">from</span> <span class=\"string\">'./jrouter-view'</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// </span></span><br><span class=\"line\">JVueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_Vue</span>) </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-link'</span>, Link)</span><br><span class=\"line\">    Vue.component(<span class=\"string\">'router-view'</span>, View)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们将原先写在<code>jvue-router.js</code>中组件部分的代码分别写到对应的js文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jrouter-link.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    to: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;a href=\"#/about\"&gt;abc&lt;/a&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;router-link to=\"/about\"&gt;xxx&lt;/router-link&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// h(tag, data, children)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'a'</span>, &#123; <span class=\"attr\">attrs</span>: &#123; <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + <span class=\"keyword\">this</span>.to &#125; &#125;, <span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">    <span class=\"comment\">// return &lt;a href=&#123;'#' + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// jrouter-view.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取path对应的component</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;routeMap, current&#125; = <span class=\"keyword\">this</span>.$router;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> component = routeMap[current].component || <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果我们不用<code>Vue.util.defineReactive(this,&#39;current&#39;,&#39;/&#39;)</code>来实现监听，其实也可以用这种方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   data()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">           current:<span class=\"string\">'/'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//获取current的方式就变为</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.app.current</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h1><p>当用户的路由为类似如下的嵌套路由时，我们应该如何兼容呢</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/about'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'about'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../views/About.vue'</span>),</span><br><span class=\"line\">    children:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path:<span class=\"string\">'/about/info'</span>,</span><br><span class=\"line\">            component:<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../views/AboutInfo.vue'</span>),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>打开<code>jrouter-view.js</code>文件，并修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//标记当前router-view深度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$vnode.data.routerView = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> depth = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent = <span class=\"keyword\">this</span>.$parent</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> vnodeData = parent.$vnode&amp;&amp;parent.$vnode.data</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vnodeData&amp;&amp;vnodeData.routerView)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//说明当前的parent是一个router-view</span></span><br><span class=\"line\">            depth++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        parent = parent.$parent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取path对应的component</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> component = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = <span class=\"keyword\">this</span>.$router.matched[depth];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(route)&#123;</span><br><span class=\"line\">        component = route.component</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(component)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改<code>jvue-router.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVueRouter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$options=options</span><br><span class=\"line\">        <span class=\"comment\">//需要创建响应式的current的属性,可以利用vue监听current的变化</span></span><br><span class=\"line\">        <span class=\"comment\">// Vue.util.defineReactive(this,'current','/')通过matched数组获取component，不需要current响应式了</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"built_in\">window</span>.location.hash.slice(<span class=\"number\">1</span>)||<span class=\"string\">'/'</span></span><br><span class=\"line\">        Vue.util.defineReactive(<span class=\"keyword\">this</span>,<span class=\"string\">'matched'</span>,[])</span><br><span class=\"line\">        <span class=\"comment\">//match方法可以递归遍历路由表，获得匹配关系的数组</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.match()</span><br><span class=\"line\">        <span class=\"comment\">//监控url变化</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//避免onHashChange中this变成window</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.onHashChange.bind(<span class=\"keyword\">this</span>))<span class=\"comment\">//页面加载 避免onHashChange中this变成window</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onHashChange()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"built_in\">window</span>.location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.matched = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.match()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    match(routes)&#123;</span><br><span class=\"line\">        routes = routes||<span class=\"keyword\">this</span>.$options.routes</span><br><span class=\"line\">        <span class=\"comment\">//递归遍历路由表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> route <span class=\"keyword\">of</span> routes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(route.path === <span class=\"string\">'/'</span>&amp;&amp;<span class=\"keyword\">this</span>.current===<span class=\"string\">'/'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.matched.push(route)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(route.path!==<span class=\"string\">'/'</span>&amp;&amp;<span class=\"keyword\">this</span>.current.indexOf(route.path)!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.matched.push(route)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(route.children)&#123;<span class=\"comment\">//如果有嵌套 </span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.match(route.children)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"前端面试题(一)","date":"2020-07-15T13:13:46.000Z","description":null,"_content":"\n整理了一些之前面试遇到的题\n\n<!-- more -->\n\n\n## `NAN === NAN` 是否成立，为什么？\n\n不成立。因为JavaScript规定，NaN表示的是非数字，但是这个非数字也是不同的，因此 NaN 不等于 NaN，两个NaN永远不可能相等。\n\n## `0.1+0.2 == 0.3`和 `0.1+0.2 === 0.3` 哪个成立，为什么？\n\n都不成立.在正常的数学逻辑思维中，0.1+0.2=0.3这个逻辑是正确的，但是在JavaScript中0.1+0.2！==0.3，这是为什么呢？在JavaScript中的二进制的浮点数0.1和0.2并不是十分精确，在他们相加的结果并非正好等于0.3，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为false。\n\n> 可以通过 `(0.1 + 0.2).toFixed(2) // \"0.30\"` 和 `parseFloat((0.1 + 0.2).toFixed(2)) //0.3` 的方法使`0.1+0.2==0.3`\n\n## 什么是闭包？\n\n**如果一个函数用到了它作用域外面的变量，那么这个变量和这个函数之间的环境就叫闭包。**\n    \n举一个简单的例子\n```js\nfunction fun(){\n    var Joker = \"帅\";\n    return function(){\n        return Joker\n    }\n}\nfun()();//输出：'帅'\n//当然我们也可以这样，等同于fun()()\nvar temfun = fun();\nconsole.log(temfun())\n```\n\n**闭包的使用场景**\n    \n封装局部变量\n\n例如：一个游戏，主人公有10条命，我们如果把`var live=10`写在全局作用域的话，全局中任何地方都能调用修改，就会出现安全性，容易出bug。\n\n但如果写在局部作用域，会有如下问题：\n\n- 在全局环境中调用不了\n\n- 局部环境执行完毕后，会被清出环境栈，局部环境中的变量和函数都会垃圾回收机制回收。\n\n因此我们用闭包去将`var live=10`变量封装起来\n```js\nfunction liveFun(){\n    var live = 10;\n    //以下是闭包函数代码\n    return function(condition){\n        if(condition=='add'){\n            return live+=1;\n        }else if(condition=='reduce'){\n            return live-=1\n        }\n    }\n}\nvar live=liveFun()\nconsole.log(live('add')); //执行闭包函数 ，10+1=11，输出：11\nconsole.log(live('reduce')); //执行闭包函数 ，11-1=10，输出：10\n```\n\n## 箭头函数与普通函数的区别？\n\n区别：\n+ 箭头函数没有自己的`this`属性，`arguments`属性、而普通函数有，箭头函数的`this`指向当前函数作用域的`this`。\n+ 箭头函数没有不能使用`new`命令，因为没有自己的`this`，无法调用`call`，`apply`，没有prototype显示原型，所以不能作为构造函数。\n+ 不可以使用`yield`命令，因此箭头函数不能用作`Generator`函数。\n    \n箭头函数的好处：\n\n- 没有箭头函数的时候，函数闭包`var that = this`的事没少干，有了箭头函数，就不需要这么写了\n- 极简语法，函数式风格\n\n## js原型原型链\n\n**首先我们要清除明白两个概念**\n\n- js分为函数对象和普通对象，每个对象都有`__proto__`属性，但是只有函数对象才有`prototype`属性\n\n- Object、Function都是js的内置函数，类似的还有我们常用的Array,RegExp、Date、Boolean、Number、String\n\n- 属性`prototype`是一个对象，他有两个属性，`constructor`和`__proto__`;\n\n- 原型对象`prototype`有一个默认的`constructor`属性，用于记录实例是由哪个构造函数创建；\n\n举个例子：\n```js\n//有以下构造函数Person，他的原型上有所属国属性motherland='china'\nfunction Person(name,age){\n    this.name=name;\n    this.age=age;\n}\nPerson.prototype.motherland = 'china'\n```\n> 通过new Person()创建的persson01实例\n\n```js\nlet persion01 = new Person('小明'\b,18)\n```\njs在设计原型、原型链的时候遵从以下两个准则：\n```js\n1. Person.prototype.constructor == Person // **准则1：原型对象（即Person.prototype）的constructor指向构造函数本身**\n2. person01.__proto__ == Person.prototype // **准则2：实例（即person01）的__proto__和原型对象指向同一个地方**\n```\n举个例子:\n```js\nfunction Foo();\nlet f1 = new Foo();\nlet f2 = new Foo();\n\nf1.__proto__ = Foo.prototype;//准则2\nf2.__proto__ = Foo.prototype;//准则2\n\nFoo.prototype.__proto__ = Object.prototype; //准则2 （Foo.prototype本身也是普通对象，适用于准则2）\nObject.prototype.__proto__ = null;//原型链到此停止\n\nFoo.prototype.constructor = Foo; // 准则1\nFoo.__proto__ = Function.prototype;//准则2\nFunction.prototype.__proto__ = Object.prototype;//准则2\nObject.prototype.__proto__ = null;//原型链到此停止\n// **此处注意Foo 和 Function的区别， Foo是 Function的实例**\n```\n> 除了Object的原型对象（Object.prototype）的__proto__指向null，其他内置函数对象的原型对象（例如：Array.prototype）和自定义构造函数的__proto__都指向Object.prototype, 因为原型对象本身是普通对象。即：\n```js\nObject.prototype.__proto__ = null;\nArray.prototype.__proto__ = Object.prototype;\nFoo.prototype.__proto__  = Object.prototype;\n```\n> 原型对象的作用，是用来存放实例中共有的那部份属性、方法，可以大大减少内存消耗。\n\n## em、rem 是什么？\n\n- em：em是相对于⽗元素的尺⼨单位\n\n- rem：相对于html元素的尺⼨单位（html默认font-size:16px）\n\n## Vue为什么使用虚拟dom？\n\n\n## promise和callback的区别\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/前端面试题(一).md","raw":"---\ntitle: 前端面试题(一)\ndate: 2020-07-15 21:13:46\ntags:\n    - 面试题\ncategories:\n    - 面试题\ndescription:\n---\n\n整理了一些之前面试遇到的题\n\n<!-- more -->\n\n\n## `NAN === NAN` 是否成立，为什么？\n\n不成立。因为JavaScript规定，NaN表示的是非数字，但是这个非数字也是不同的，因此 NaN 不等于 NaN，两个NaN永远不可能相等。\n\n## `0.1+0.2 == 0.3`和 `0.1+0.2 === 0.3` 哪个成立，为什么？\n\n都不成立.在正常的数学逻辑思维中，0.1+0.2=0.3这个逻辑是正确的，但是在JavaScript中0.1+0.2！==0.3，这是为什么呢？在JavaScript中的二进制的浮点数0.1和0.2并不是十分精确，在他们相加的结果并非正好等于0.3，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为false。\n\n> 可以通过 `(0.1 + 0.2).toFixed(2) // \"0.30\"` 和 `parseFloat((0.1 + 0.2).toFixed(2)) //0.3` 的方法使`0.1+0.2==0.3`\n\n## 什么是闭包？\n\n**如果一个函数用到了它作用域外面的变量，那么这个变量和这个函数之间的环境就叫闭包。**\n    \n举一个简单的例子\n```js\nfunction fun(){\n    var Joker = \"帅\";\n    return function(){\n        return Joker\n    }\n}\nfun()();//输出：'帅'\n//当然我们也可以这样，等同于fun()()\nvar temfun = fun();\nconsole.log(temfun())\n```\n\n**闭包的使用场景**\n    \n封装局部变量\n\n例如：一个游戏，主人公有10条命，我们如果把`var live=10`写在全局作用域的话，全局中任何地方都能调用修改，就会出现安全性，容易出bug。\n\n但如果写在局部作用域，会有如下问题：\n\n- 在全局环境中调用不了\n\n- 局部环境执行完毕后，会被清出环境栈，局部环境中的变量和函数都会垃圾回收机制回收。\n\n因此我们用闭包去将`var live=10`变量封装起来\n```js\nfunction liveFun(){\n    var live = 10;\n    //以下是闭包函数代码\n    return function(condition){\n        if(condition=='add'){\n            return live+=1;\n        }else if(condition=='reduce'){\n            return live-=1\n        }\n    }\n}\nvar live=liveFun()\nconsole.log(live('add')); //执行闭包函数 ，10+1=11，输出：11\nconsole.log(live('reduce')); //执行闭包函数 ，11-1=10，输出：10\n```\n\n## 箭头函数与普通函数的区别？\n\n区别：\n+ 箭头函数没有自己的`this`属性，`arguments`属性、而普通函数有，箭头函数的`this`指向当前函数作用域的`this`。\n+ 箭头函数没有不能使用`new`命令，因为没有自己的`this`，无法调用`call`，`apply`，没有prototype显示原型，所以不能作为构造函数。\n+ 不可以使用`yield`命令，因此箭头函数不能用作`Generator`函数。\n    \n箭头函数的好处：\n\n- 没有箭头函数的时候，函数闭包`var that = this`的事没少干，有了箭头函数，就不需要这么写了\n- 极简语法，函数式风格\n\n## js原型原型链\n\n**首先我们要清除明白两个概念**\n\n- js分为函数对象和普通对象，每个对象都有`__proto__`属性，但是只有函数对象才有`prototype`属性\n\n- Object、Function都是js的内置函数，类似的还有我们常用的Array,RegExp、Date、Boolean、Number、String\n\n- 属性`prototype`是一个对象，他有两个属性，`constructor`和`__proto__`;\n\n- 原型对象`prototype`有一个默认的`constructor`属性，用于记录实例是由哪个构造函数创建；\n\n举个例子：\n```js\n//有以下构造函数Person，他的原型上有所属国属性motherland='china'\nfunction Person(name,age){\n    this.name=name;\n    this.age=age;\n}\nPerson.prototype.motherland = 'china'\n```\n> 通过new Person()创建的persson01实例\n\n```js\nlet persion01 = new Person('小明'\b,18)\n```\njs在设计原型、原型链的时候遵从以下两个准则：\n```js\n1. Person.prototype.constructor == Person // **准则1：原型对象（即Person.prototype）的constructor指向构造函数本身**\n2. person01.__proto__ == Person.prototype // **准则2：实例（即person01）的__proto__和原型对象指向同一个地方**\n```\n举个例子:\n```js\nfunction Foo();\nlet f1 = new Foo();\nlet f2 = new Foo();\n\nf1.__proto__ = Foo.prototype;//准则2\nf2.__proto__ = Foo.prototype;//准则2\n\nFoo.prototype.__proto__ = Object.prototype; //准则2 （Foo.prototype本身也是普通对象，适用于准则2）\nObject.prototype.__proto__ = null;//原型链到此停止\n\nFoo.prototype.constructor = Foo; // 准则1\nFoo.__proto__ = Function.prototype;//准则2\nFunction.prototype.__proto__ = Object.prototype;//准则2\nObject.prototype.__proto__ = null;//原型链到此停止\n// **此处注意Foo 和 Function的区别， Foo是 Function的实例**\n```\n> 除了Object的原型对象（Object.prototype）的__proto__指向null，其他内置函数对象的原型对象（例如：Array.prototype）和自定义构造函数的__proto__都指向Object.prototype, 因为原型对象本身是普通对象。即：\n```js\nObject.prototype.__proto__ = null;\nArray.prototype.__proto__ = Object.prototype;\nFoo.prototype.__proto__  = Object.prototype;\n```\n> 原型对象的作用，是用来存放实例中共有的那部份属性、方法，可以大大减少内存消耗。\n\n## em、rem 是什么？\n\n- em：em是相对于⽗元素的尺⼨单位\n\n- rem：相对于html元素的尺⼨单位（html默认font-size:16px）\n\n## Vue为什么使用虚拟dom？\n\n\n## promise和callback的区别\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/前端面试题(一)","published":1,"updated":"2020-07-22T00:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj52c000v1r0qe4k1eio4","content":"<p>整理了一些之前面试遇到的题</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"NAN-NAN-是否成立，为什么？\"><a href=\"#NAN-NAN-是否成立，为什么？\" class=\"headerlink\" title=\"NAN === NAN 是否成立，为什么？\"></a><code>NAN === NAN</code> 是否成立，为什么？</h2><p>不成立。因为JavaScript规定，NaN表示的是非数字，但是这个非数字也是不同的，因此 NaN 不等于 NaN，两个NaN永远不可能相等。</p>\n<h2 id=\"0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？\"><a href=\"#0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？\" class=\"headerlink\" title=\"0.1+0.2 == 0.3和 0.1+0.2 === 0.3 哪个成立，为什么？\"></a><code>0.1+0.2 == 0.3</code>和 <code>0.1+0.2 === 0.3</code> 哪个成立，为什么？</h2><p>都不成立.在正常的数学逻辑思维中，0.1+0.2=0.3这个逻辑是正确的，但是在JavaScript中0.1+0.2！==0.3，这是为什么呢？在JavaScript中的二进制的浮点数0.1和0.2并不是十分精确，在他们相加的结果并非正好等于0.3，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为false。</p>\n<blockquote>\n<p>可以通过 <code>(0.1 + 0.2).toFixed(2) // &quot;0.30&quot;</code> 和 <code>parseFloat((0.1 + 0.2).toFixed(2)) //0.3</code> 的方法使<code>0.1+0.2==0.3</code></p>\n</blockquote>\n<h2 id=\"什么是闭包？\"><a href=\"#什么是闭包？\" class=\"headerlink\" title=\"什么是闭包？\"></a>什么是闭包？</h2><p><strong>如果一个函数用到了它作用域外面的变量，那么这个变量和这个函数之间的环境就叫闭包。</strong></p>\n<p>举一个简单的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Joker = <span class=\"string\">\"帅\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Joker</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()();<span class=\"comment\">//输出：'帅'</span></span><br><span class=\"line\"><span class=\"comment\">//当然我们也可以这样，等同于fun()()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temfun = fun();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temfun())</span><br></pre></td></tr></table></figure>\n\n<p><strong>闭包的使用场景</strong></p>\n<p>封装局部变量</p>\n<p>例如：一个游戏，主人公有10条命，我们如果把<code>var live=10</code>写在全局作用域的话，全局中任何地方都能调用修改，就会出现安全性，容易出bug。</p>\n<p>但如果写在局部作用域，会有如下问题：</p>\n<ul>\n<li><p>在全局环境中调用不了</p>\n</li>\n<li><p>局部环境执行完毕后，会被清出环境栈，局部环境中的变量和函数都会垃圾回收机制回收。</p>\n</li>\n</ul>\n<p>因此我们用闭包去将<code>var live=10</code>变量封装起来</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">liveFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> live = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">//以下是闭包函数代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">condition</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(condition==<span class=\"string\">'add'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> live+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(condition==<span class=\"string\">'reduce'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> live-=<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> live=liveFun()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(live(<span class=\"string\">'add'</span>)); <span class=\"comment\">//执行闭包函数 ，10+1=11，输出：11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(live(<span class=\"string\">'reduce'</span>)); <span class=\"comment\">//执行闭包函数 ，11-1=10，输出：10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数与普通函数的区别？\"><a href=\"#箭头函数与普通函数的区别？\" class=\"headerlink\" title=\"箭头函数与普通函数的区别？\"></a>箭头函数与普通函数的区别？</h2><p>区别：</p>\n<ul>\n<li>箭头函数没有自己的<code>this</code>属性，<code>arguments</code>属性、而普通函数有，箭头函数的<code>this</code>指向当前函数作用域的<code>this</code>。</li>\n<li>箭头函数没有不能使用<code>new</code>命令，因为没有自己的<code>this</code>，无法调用<code>call</code>，<code>apply</code>，没有prototype显示原型，所以不能作为构造函数。</li>\n<li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数。</li>\n</ul>\n<p>箭头函数的好处：</p>\n<ul>\n<li>没有箭头函数的时候，函数闭包<code>var that = this</code>的事没少干，有了箭头函数，就不需要这么写了</li>\n<li>极简语法，函数式风格</li>\n</ul>\n<h2 id=\"js原型原型链\"><a href=\"#js原型原型链\" class=\"headerlink\" title=\"js原型原型链\"></a>js原型原型链</h2><p><strong>首先我们要清除明白两个概念</strong></p>\n<ul>\n<li><p>js分为函数对象和普通对象，每个对象都有<code>__proto__</code>属性，但是只有函数对象才有<code>prototype</code>属性</p>\n</li>\n<li><p>Object、Function都是js的内置函数，类似的还有我们常用的Array,RegExp、Date、Boolean、Number、String</p>\n</li>\n<li><p>属性<code>prototype</code>是一个对象，他有两个属性，<code>constructor</code>和<code>__proto__</code>;</p>\n</li>\n<li><p>原型对象<code>prototype</code>有一个默认的<code>constructor</code>属性，用于记录实例是由哪个构造函数创建；</p>\n</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有以下构造函数Person，他的原型上有所属国属性motherland='china'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.motherland = <span class=\"string\">'china'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过new Person()创建的persson01实例</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> persion01 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'小明'</span>\b,<span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n<p>js在设计原型、原型链的时候遵从以下两个准则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> Person.prototype.constructor == Person <span class=\"comment\">// **准则1：原型对象（即Person.prototype）的constructor指向构造函数本身**</span></span><br><span class=\"line\"><span class=\"number\">2.</span> person01.__proto__ == Person.prototype <span class=\"comment\">// **准则2：实例（即person01）的__proto__和原型对象指向同一个地方**</span></span><br></pre></td></tr></table></figure>\n<p>举个例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">f1</span> = <span class=\"title\">new</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">f2</span> = <span class=\"title\">new</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">f1</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">f2</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Object</span>.<span class=\"title\">prototype</span>; //准则2 （<span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>本身也是普通对象，适用于准则2）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">null</span>;//原型链到此停止</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>.<span class=\"title\">constructor</span> = <span class=\"title\">Foo</span>; // 准则1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Foo</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Function</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Function</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Object</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">null</span>;//原型链到此停止</span></span><br><span class=\"line\"><span class=\"function\">// **此处注意<span class=\"title\">Foo</span> 和 <span class=\"title\">Function</span>的区别， <span class=\"title\">Foo</span>是 <span class=\"title\">Function</span>的实例**</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>除了Object的原型对象（Object.prototype）的<strong>proto</strong>指向null，其他内置函数对象的原型对象（例如：Array.prototype）和自定义构造函数的<strong>proto</strong>都指向Object.prototype, 因为原型对象本身是普通对象。即：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__ = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.__proto__ = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">Foo.prototype.__proto__  = <span class=\"built_in\">Object</span>.prototype;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原型对象的作用，是用来存放实例中共有的那部份属性、方法，可以大大减少内存消耗。</p>\n</blockquote>\n<h2 id=\"em、rem-是什么？\"><a href=\"#em、rem-是什么？\" class=\"headerlink\" title=\"em、rem 是什么？\"></a>em、rem 是什么？</h2><ul>\n<li><p>em：em是相对于⽗元素的尺⼨单位</p>\n</li>\n<li><p>rem：相对于html元素的尺⼨单位（html默认font-size:16px）</p>\n</li>\n</ul>\n<h2 id=\"Vue为什么使用虚拟dom？\"><a href=\"#Vue为什么使用虚拟dom？\" class=\"headerlink\" title=\"Vue为什么使用虚拟dom？\"></a>Vue为什么使用虚拟dom？</h2><h2 id=\"promise和callback的区别\"><a href=\"#promise和callback的区别\" class=\"headerlink\" title=\"promise和callback的区别\"></a>promise和callback的区别</h2><!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>整理了一些之前面试遇到的题</p>","more":"<h2 id=\"NAN-NAN-是否成立，为什么？\"><a href=\"#NAN-NAN-是否成立，为什么？\" class=\"headerlink\" title=\"NAN === NAN 是否成立，为什么？\"></a><code>NAN === NAN</code> 是否成立，为什么？</h2><p>不成立。因为JavaScript规定，NaN表示的是非数字，但是这个非数字也是不同的，因此 NaN 不等于 NaN，两个NaN永远不可能相等。</p>\n<h2 id=\"0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？\"><a href=\"#0-1-0-2-0-3和-0-1-0-2-0-3-哪个成立，为什么？\" class=\"headerlink\" title=\"0.1+0.2 == 0.3和 0.1+0.2 === 0.3 哪个成立，为什么？\"></a><code>0.1+0.2 == 0.3</code>和 <code>0.1+0.2 === 0.3</code> 哪个成立，为什么？</h2><p>都不成立.在正常的数学逻辑思维中，0.1+0.2=0.3这个逻辑是正确的，但是在JavaScript中0.1+0.2！==0.3，这是为什么呢？在JavaScript中的二进制的浮点数0.1和0.2并不是十分精确，在他们相加的结果并非正好等于0.3，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为false。</p>\n<blockquote>\n<p>可以通过 <code>(0.1 + 0.2).toFixed(2) // &quot;0.30&quot;</code> 和 <code>parseFloat((0.1 + 0.2).toFixed(2)) //0.3</code> 的方法使<code>0.1+0.2==0.3</code></p>\n</blockquote>\n<h2 id=\"什么是闭包？\"><a href=\"#什么是闭包？\" class=\"headerlink\" title=\"什么是闭包？\"></a>什么是闭包？</h2><p><strong>如果一个函数用到了它作用域外面的变量，那么这个变量和这个函数之间的环境就叫闭包。</strong></p>\n<p>举一个简单的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Joker = <span class=\"string\">\"帅\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Joker</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()();<span class=\"comment\">//输出：'帅'</span></span><br><span class=\"line\"><span class=\"comment\">//当然我们也可以这样，等同于fun()()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temfun = fun();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temfun())</span><br></pre></td></tr></table></figure>\n\n<p><strong>闭包的使用场景</strong></p>\n<p>封装局部变量</p>\n<p>例如：一个游戏，主人公有10条命，我们如果把<code>var live=10</code>写在全局作用域的话，全局中任何地方都能调用修改，就会出现安全性，容易出bug。</p>\n<p>但如果写在局部作用域，会有如下问题：</p>\n<ul>\n<li><p>在全局环境中调用不了</p>\n</li>\n<li><p>局部环境执行完毕后，会被清出环境栈，局部环境中的变量和函数都会垃圾回收机制回收。</p>\n</li>\n</ul>\n<p>因此我们用闭包去将<code>var live=10</code>变量封装起来</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">liveFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> live = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">//以下是闭包函数代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">condition</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(condition==<span class=\"string\">'add'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> live+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(condition==<span class=\"string\">'reduce'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> live-=<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> live=liveFun()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(live(<span class=\"string\">'add'</span>)); <span class=\"comment\">//执行闭包函数 ，10+1=11，输出：11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(live(<span class=\"string\">'reduce'</span>)); <span class=\"comment\">//执行闭包函数 ，11-1=10，输出：10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数与普通函数的区别？\"><a href=\"#箭头函数与普通函数的区别？\" class=\"headerlink\" title=\"箭头函数与普通函数的区别？\"></a>箭头函数与普通函数的区别？</h2><p>区别：</p>\n<ul>\n<li>箭头函数没有自己的<code>this</code>属性，<code>arguments</code>属性、而普通函数有，箭头函数的<code>this</code>指向当前函数作用域的<code>this</code>。</li>\n<li>箭头函数没有不能使用<code>new</code>命令，因为没有自己的<code>this</code>，无法调用<code>call</code>，<code>apply</code>，没有prototype显示原型，所以不能作为构造函数。</li>\n<li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数。</li>\n</ul>\n<p>箭头函数的好处：</p>\n<ul>\n<li>没有箭头函数的时候，函数闭包<code>var that = this</code>的事没少干，有了箭头函数，就不需要这么写了</li>\n<li>极简语法，函数式风格</li>\n</ul>\n<h2 id=\"js原型原型链\"><a href=\"#js原型原型链\" class=\"headerlink\" title=\"js原型原型链\"></a>js原型原型链</h2><p><strong>首先我们要清除明白两个概念</strong></p>\n<ul>\n<li><p>js分为函数对象和普通对象，每个对象都有<code>__proto__</code>属性，但是只有函数对象才有<code>prototype</code>属性</p>\n</li>\n<li><p>Object、Function都是js的内置函数，类似的还有我们常用的Array,RegExp、Date、Boolean、Number、String</p>\n</li>\n<li><p>属性<code>prototype</code>是一个对象，他有两个属性，<code>constructor</code>和<code>__proto__</code>;</p>\n</li>\n<li><p>原型对象<code>prototype</code>有一个默认的<code>constructor</code>属性，用于记录实例是由哪个构造函数创建；</p>\n</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有以下构造函数Person，他的原型上有所属国属性motherland='china'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.motherland = <span class=\"string\">'china'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过new Person()创建的persson01实例</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> persion01 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'小明'</span>\b,<span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n<p>js在设计原型、原型链的时候遵从以下两个准则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> Person.prototype.constructor == Person <span class=\"comment\">// **准则1：原型对象（即Person.prototype）的constructor指向构造函数本身**</span></span><br><span class=\"line\"><span class=\"number\">2.</span> person01.__proto__ == Person.prototype <span class=\"comment\">// **准则2：实例（即person01）的__proto__和原型对象指向同一个地方**</span></span><br></pre></td></tr></table></figure>\n<p>举个例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">f1</span> = <span class=\"title\">new</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">f2</span> = <span class=\"title\">new</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">f1</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">f2</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Object</span>.<span class=\"title\">prototype</span>; //准则2 （<span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>本身也是普通对象，适用于准则2）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">null</span>;//原型链到此停止</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Foo</span>.<span class=\"title\">prototype</span>.<span class=\"title\">constructor</span> = <span class=\"title\">Foo</span>; // 准则1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Foo</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Function</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Function</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">Object</span>.<span class=\"title\">prototype</span>;//准则2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span>.<span class=\"title\">prototype</span>.<span class=\"title\">__proto__</span> = <span class=\"title\">null</span>;//原型链到此停止</span></span><br><span class=\"line\"><span class=\"function\">// **此处注意<span class=\"title\">Foo</span> 和 <span class=\"title\">Function</span>的区别， <span class=\"title\">Foo</span>是 <span class=\"title\">Function</span>的实例**</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>除了Object的原型对象（Object.prototype）的<strong>proto</strong>指向null，其他内置函数对象的原型对象（例如：Array.prototype）和自定义构造函数的<strong>proto</strong>都指向Object.prototype, 因为原型对象本身是普通对象。即：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__ = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.__proto__ = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">Foo.prototype.__proto__  = <span class=\"built_in\">Object</span>.prototype;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原型对象的作用，是用来存放实例中共有的那部份属性、方法，可以大大减少内存消耗。</p>\n</blockquote>\n<h2 id=\"em、rem-是什么？\"><a href=\"#em、rem-是什么？\" class=\"headerlink\" title=\"em、rem 是什么？\"></a>em、rem 是什么？</h2><ul>\n<li><p>em：em是相对于⽗元素的尺⼨单位</p>\n</li>\n<li><p>rem：相对于html元素的尺⼨单位（html默认font-size:16px）</p>\n</li>\n</ul>\n<h2 id=\"Vue为什么使用虚拟dom？\"><a href=\"#Vue为什么使用虚拟dom？\" class=\"headerlink\" title=\"Vue为什么使用虚拟dom？\"></a>Vue为什么使用虚拟dom？</h2><h2 id=\"promise和callback的区别\"><a href=\"#promise和callback的区别\" class=\"headerlink\" title=\"promise和callback的区别\"></a>promise和callback的区别</h2><!-- markdownlint-disable MD041 MD002-->"},{"title":"Vue组件data为何要函数形式","date":"2020-07-08T13:08:43.000Z","description":null,"_content":"\nVue组件中data为什么必须是个函数，而Vue的根实例则没有此限制\n\n<!-- more -->\n\n> 函数每次执行都会返回全新的data对象实例\n\n测试代码如下\n\n```html\n<body>\n    <div id=\"demo\">\n        <h1>Vue组件中data为啥要是函数？</h1>\n        <comp></comp>\n        <comp></comp>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        Vue.component('comp',{\n            template:'<div @click=\"counter++\">{{counter}}</div>',\n            data:{counter:0}\n        })\n        const app = new Vue({\n            el: \"#demo\",\n        })\n    </script>\n</body>\n```\n我们查看源码研究一下数据是如何初始化的,源码位置`src\\core\\instance\\state.js-initData()`\n```js\n//如果data是函数，则执行之并将其结果作为data选项的值否则则会执行用户设置的data\ndata = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n```\n\n> 如果每一个组件都是使用的对象来设置data,那么将会作为将来组件实例里的data选项，Vue.component组件的时候其实只执行了一次，每一次初始化的时候对于两个comp的data指向的将会是同一个地方，一个组件的不同实例直接的数据就共享了，会产生数据污染。\n\n我们看一下控制台的报错\n```js\nvue.js:634 [Vue warn]: The \"data\" option should be a function that returns a per-instance value in component definitions.\n```\n> 程序甚至无法通过vue检测\n\n我们接下来再看一下为什么根实例中data可以直接用对象,测试代码如下\n\n```html\n<body>\n    <div id=\"demo\">\n        <h1>Vue组件中data为啥要是函数？</h1>\n        <comp></comp>\n        <comp></comp>\n        <p>{{counter}}</p>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        Vue.component('comp',{\n            template:'<div @click=\"counter++\">{{counter}}</div>',\n            data(){return {counter:1}}\n        })\n        const app = new Vue({\n            el: \"#demo\",\n            data:{counter:1}\n        })\n    </script>\n</body>\n```\n从逻辑上来讲，在全局范围内根实例是单例的，不会存在多实例的问题，我们再看一下源码中是怎么处理的\n`src/core/instance/init.js-initMinx()-Vue-_init`\n```js\n// merge options 合并选项\nif (options && options._isComponent) {//自定义组件\n    // optimize internal component instantiation\n    // since dynamic options merging is pretty slow, and none of the\n    // internal component options needs special treatment.\n    initInternalComponent(vm, options)\n} else {//根实例\n    vm.$options = mergeOptions(\n    resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n    )\n}\n```\n我们再看一下`src/core/util/options.js`中对data的处理\n```js\nstrats.data = function (\n  parentVal: any,\n  childVal: any,\n  vm?: Component\n): ?Function {\n  if (!vm) {//只有当根实例创建的时候vm才会存在，普通组件VM不存在，所以进入方法\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      )\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n  return mergeDataOrFn(parentVal, childVal, vm)\n}\n\n```\n\n**结论**\n\nVue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态\n变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返\n回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也\n是因为根实例只能有一个，不需要担心这种情况。\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/Vue组件data为何要函数形式.md","raw":"---\ntitle: Vue组件data为何要函数形式\ndate: 2020-07-08 21:08:43\ntags:\n    - vue \n    - 前端面试\ncategories:\n    - [vue]\n    - [前端面试]\ndescription:\n---\n\nVue组件中data为什么必须是个函数，而Vue的根实例则没有此限制\n\n<!-- more -->\n\n> 函数每次执行都会返回全新的data对象实例\n\n测试代码如下\n\n```html\n<body>\n    <div id=\"demo\">\n        <h1>Vue组件中data为啥要是函数？</h1>\n        <comp></comp>\n        <comp></comp>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        Vue.component('comp',{\n            template:'<div @click=\"counter++\">{{counter}}</div>',\n            data:{counter:0}\n        })\n        const app = new Vue({\n            el: \"#demo\",\n        })\n    </script>\n</body>\n```\n我们查看源码研究一下数据是如何初始化的,源码位置`src\\core\\instance\\state.js-initData()`\n```js\n//如果data是函数，则执行之并将其结果作为data选项的值否则则会执行用户设置的data\ndata = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n```\n\n> 如果每一个组件都是使用的对象来设置data,那么将会作为将来组件实例里的data选项，Vue.component组件的时候其实只执行了一次，每一次初始化的时候对于两个comp的data指向的将会是同一个地方，一个组件的不同实例直接的数据就共享了，会产生数据污染。\n\n我们看一下控制台的报错\n```js\nvue.js:634 [Vue warn]: The \"data\" option should be a function that returns a per-instance value in component definitions.\n```\n> 程序甚至无法通过vue检测\n\n我们接下来再看一下为什么根实例中data可以直接用对象,测试代码如下\n\n```html\n<body>\n    <div id=\"demo\">\n        <h1>Vue组件中data为啥要是函数？</h1>\n        <comp></comp>\n        <comp></comp>\n        <p>{{counter}}</p>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        Vue.component('comp',{\n            template:'<div @click=\"counter++\">{{counter}}</div>',\n            data(){return {counter:1}}\n        })\n        const app = new Vue({\n            el: \"#demo\",\n            data:{counter:1}\n        })\n    </script>\n</body>\n```\n从逻辑上来讲，在全局范围内根实例是单例的，不会存在多实例的问题，我们再看一下源码中是怎么处理的\n`src/core/instance/init.js-initMinx()-Vue-_init`\n```js\n// merge options 合并选项\nif (options && options._isComponent) {//自定义组件\n    // optimize internal component instantiation\n    // since dynamic options merging is pretty slow, and none of the\n    // internal component options needs special treatment.\n    initInternalComponent(vm, options)\n} else {//根实例\n    vm.$options = mergeOptions(\n    resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n    )\n}\n```\n我们再看一下`src/core/util/options.js`中对data的处理\n```js\nstrats.data = function (\n  parentVal: any,\n  childVal: any,\n  vm?: Component\n): ?Function {\n  if (!vm) {//只有当根实例创建的时候vm才会存在，普通组件VM不存在，所以进入方法\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      )\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n  return mergeDataOrFn(parentVal, childVal, vm)\n}\n\n```\n\n**结论**\n\nVue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态\n变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返\n回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也\n是因为根实例只能有一个，不需要担心这种情况。\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/Vue组件data为何要函数形式","published":1,"updated":"2020-07-11T15:18:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj52l000x1r0qe8o8eqsl","content":"<p>Vue组件中data为什么必须是个函数，而Vue的根实例则没有此限制</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>函数每次执行都会返回全新的data对象实例</p>\n</blockquote>\n<p>测试代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        Vue.component(<span class=\"string\">'comp'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            template:'<span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"counter++\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;counter&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\">            data:&#123;counter:0&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el: <span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们查看源码研究一下数据是如何初始化的,源码位置<code>src\\core\\instance\\state.js-initData()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果data是函数，则执行之并将其结果作为data选项的值否则则会执行用户设置的data</span></span><br><span class=\"line\">data = vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span></span><br><span class=\"line\">    ? getData(data, vm)</span><br><span class=\"line\">    : data || &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果每一个组件都是使用的对象来设置data,那么将会作为将来组件实例里的data选项，Vue.component组件的时候其实只执行了一次，每一次初始化的时候对于两个comp的data指向的将会是同一个地方，一个组件的不同实例直接的数据就共享了，会产生数据污染。</p>\n</blockquote>\n<p>我们看一下控制台的报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.js:<span class=\"number\">634</span> [Vue warn]: The <span class=\"string\">\"data\"</span> option should be a <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">that</span> <span class=\"title\">returns</span> <span class=\"title\">a</span> <span class=\"title\">per</span>-<span class=\"title\">instance</span> <span class=\"title\">value</span> <span class=\"title\">in</span> <span class=\"title\">component</span> <span class=\"title\">definitions</span>.</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>程序甚至无法通过vue检测</p>\n</blockquote>\n<p>我们接下来再看一下为什么根实例中data可以直接用对象,测试代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        Vue.component(<span class=\"string\">'comp'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            template:'<span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"counter++\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;counter&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            data()&#123;<span class=\"keyword\">return</span> &#123;counter:<span class=\"number\">1</span>&#125;&#125;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el: <span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">            data:&#123;counter:1&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>从逻辑上来讲，在全局范围内根实例是单例的，不会存在多实例的问题，我们再看一下源码中是怎么处理的<br><code>src/core/instance/init.js-initMinx()-Vue-_init</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// merge options 合并选项</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (options &amp;&amp; options._isComponent) &#123;<span class=\"comment\">//自定义组件</span></span><br><span class=\"line\">    <span class=\"comment\">// optimize internal component instantiation</span></span><br><span class=\"line\">    <span class=\"comment\">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class=\"line\">    <span class=\"comment\">// internal component options needs special treatment.</span></span><br><span class=\"line\">    initInternalComponent(vm, options)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//根实例</span></span><br><span class=\"line\">    vm.$options = mergeOptions(</span><br><span class=\"line\">    resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">        options || &#123;&#125;,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再看一下<code>src/core/util/options.js</code>中对data的处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strats.data = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parentVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  childVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): ?<span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm) &#123;<span class=\"comment\">//只有当根实例创建的时候vm才会存在，普通组件VM不存在，所以进入方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childVal &amp;&amp; <span class=\"keyword\">typeof</span> childVal !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; warn(</span><br><span class=\"line\">        <span class=\"string\">'The \"data\" option should be a function '</span> +</span><br><span class=\"line\">        <span class=\"string\">'that returns a per-instance value in component '</span> +</span><br><span class=\"line\">        <span class=\"string\">'definitions.'</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">return</span> parentVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>结论</strong></p>\n<p>Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态<br>变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返<br>回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也<br>是因为根实例只能有一个，不需要担心这种情况。</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>Vue组件中data为什么必须是个函数，而Vue的根实例则没有此限制</p>","more":"<blockquote>\n<p>函数每次执行都会返回全新的data对象实例</p>\n</blockquote>\n<p>测试代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        Vue.component(<span class=\"string\">'comp'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            template:'<span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"counter++\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;counter&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\">            data:&#123;counter:0&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el: <span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们查看源码研究一下数据是如何初始化的,源码位置<code>src\\core\\instance\\state.js-initData()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果data是函数，则执行之并将其结果作为data选项的值否则则会执行用户设置的data</span></span><br><span class=\"line\">data = vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span></span><br><span class=\"line\">    ? getData(data, vm)</span><br><span class=\"line\">    : data || &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果每一个组件都是使用的对象来设置data,那么将会作为将来组件实例里的data选项，Vue.component组件的时候其实只执行了一次，每一次初始化的时候对于两个comp的data指向的将会是同一个地方，一个组件的不同实例直接的数据就共享了，会产生数据污染。</p>\n</blockquote>\n<p>我们看一下控制台的报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.js:<span class=\"number\">634</span> [Vue warn]: The <span class=\"string\">\"data\"</span> option should be a <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">that</span> <span class=\"title\">returns</span> <span class=\"title\">a</span> <span class=\"title\">per</span>-<span class=\"title\">instance</span> <span class=\"title\">value</span> <span class=\"title\">in</span> <span class=\"title\">component</span> <span class=\"title\">definitions</span>.</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>程序甚至无法通过vue检测</p>\n</blockquote>\n<p>我们接下来再看一下为什么根实例中data可以直接用对象,测试代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Vue组件中data为啥要是函数？<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        Vue.component(<span class=\"string\">'comp'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            template:'<span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"counter++\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;counter&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            data()&#123;<span class=\"keyword\">return</span> &#123;counter:<span class=\"number\">1</span>&#125;&#125;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el: <span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">            data:&#123;counter:1&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>从逻辑上来讲，在全局范围内根实例是单例的，不会存在多实例的问题，我们再看一下源码中是怎么处理的<br><code>src/core/instance/init.js-initMinx()-Vue-_init</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// merge options 合并选项</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (options &amp;&amp; options._isComponent) &#123;<span class=\"comment\">//自定义组件</span></span><br><span class=\"line\">    <span class=\"comment\">// optimize internal component instantiation</span></span><br><span class=\"line\">    <span class=\"comment\">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class=\"line\">    <span class=\"comment\">// internal component options needs special treatment.</span></span><br><span class=\"line\">    initInternalComponent(vm, options)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//根实例</span></span><br><span class=\"line\">    vm.$options = mergeOptions(</span><br><span class=\"line\">    resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">        options || &#123;&#125;,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再看一下<code>src/core/util/options.js</code>中对data的处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strats.data = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parentVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  childVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): ?<span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm) &#123;<span class=\"comment\">//只有当根实例创建的时候vm才会存在，普通组件VM不存在，所以进入方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childVal &amp;&amp; <span class=\"keyword\">typeof</span> childVal !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; warn(</span><br><span class=\"line\">        <span class=\"string\">'The \"data\" option should be a function '</span> +</span><br><span class=\"line\">        <span class=\"string\">'that returns a per-instance value in component '</span> +</span><br><span class=\"line\">        <span class=\"string\">'definitions.'</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">return</span> parentVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>结论</strong></p>\n<p>Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态<br>变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返<br>回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也<br>是因为根实例只能有一个，不需要担心这种情况。</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"实现vue弹窗组件(二)","date":"2020-07-01T13:01:50.000Z","description":null,"_content":"\n本文讲述如何使用`Vue.extend()`构造弹窗组件，并实现全局调用\n\n[点击这里查看](https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/)，查看如何使用`render()`,构造一个弹窗组件\n\n<!-- more -->\n\n## 准备工作\n\n在`components`文件夹下新建`Tools`文件夹用于存放所有的全局组件，`Tools`文件夹下新增`Notice`文件夹，并在其中新建`Notice.vue`和`Notice.js`\n\n## 修改`Notice.js`\n\n在`Notice.js`中添加如下代码\n```js\nimport Vue from 'vue';\nimport Notice from './Notice.vue';\n\n// 获取组件构造器\nconst notice = Vue.extend(Notice);\nlet VM = ''; \nfunction AModal() {\n  return function(type, props) {\n    if (!props.text) return;\n    if (!VM) {\n      const oDiv = document.createElement('div');\n      // 创建notice实例\n      VM = new notice({ el: oDiv });\n      // 并把实例化的模板插入body\n      document.body.appendChild(VM.$el);\n    }\n    // 设置属性\n    VM.type = type;\n    VM.text = props.text;\n    VM.timeout = !props.timeout&&props.timeout!=0?3000:props.timeout;\n    VM.show = true;\n    setTimeout(() => {\n      VM.show = false;\n    }, VM.timeout);\n  };\n}\nlet SHOW = AModal();\nfunction warning(props) {\n  SHOW('warning', props);\n}\nfunction info(props) {\n  SHOW('info', props);\n} \nfunction success(props) {\n  SHOW('success',props);\n}\nfunction error(props) {\n  SHOW('error', props);\n}\nexport default {\n  warning,\n  success,\n  info,\n  error\n};\n```\n\n## 编写弹窗组件\n\n在`Notice.vue`中，添加如下代码\n```vue\n<template>\n  <div v-if=\"show\" class=\"box\">\n      <div :class=\"type\">\n        <strong>{{text}}</strong>\n      </div>\n  </div>\n</template>\n\n<script>\nexport default {\n    props: [\"show\", \"text\", \"type\"],\n}\n</script>\n<style>\n.box {\n  position: fixed;\n  width: 100%;\n  top: 16px;\n  left: 0;\n  text-align: center;\n  pointer-events: none;\n  border: grey 3px solid;\n  box-sizing: border-box;\n}\n.success {\n  background: #4caf50 !important;\n}\n.info {\n  background: #2196f3 !important;\n}\n.warning {\n  background: #ffc107 !important;\n}\n.error {\n  background: #ff1744 !important;\n}\n</style>\n```\n\n## 注册全局组件\n\n在`main.js`中，添加如下代码\n\n```js\nimport notice from './components/Tools/Notice/Notice'\n\nVue.prototype.$notice = notice\n\n```\n\n## 使用弹窗组件\n\n在需要使用该组件的vue文件中\n```js\nthis.$notice.info({text:\"Joker真帅\",timeout:9999})\nthis.$notice.success({text:\"Joker真帅\"})\n```\n\n就可以尽情使用了\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/实现vue弹窗组件(二).md","raw":"---\ntitle: 实现vue弹窗组件(二)\ndate: 2020-07-01 21:01:50\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n本文讲述如何使用`Vue.extend()`构造弹窗组件，并实现全局调用\n\n[点击这里查看](https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/)，查看如何使用`render()`,构造一个弹窗组件\n\n<!-- more -->\n\n## 准备工作\n\n在`components`文件夹下新建`Tools`文件夹用于存放所有的全局组件，`Tools`文件夹下新增`Notice`文件夹，并在其中新建`Notice.vue`和`Notice.js`\n\n## 修改`Notice.js`\n\n在`Notice.js`中添加如下代码\n```js\nimport Vue from 'vue';\nimport Notice from './Notice.vue';\n\n// 获取组件构造器\nconst notice = Vue.extend(Notice);\nlet VM = ''; \nfunction AModal() {\n  return function(type, props) {\n    if (!props.text) return;\n    if (!VM) {\n      const oDiv = document.createElement('div');\n      // 创建notice实例\n      VM = new notice({ el: oDiv });\n      // 并把实例化的模板插入body\n      document.body.appendChild(VM.$el);\n    }\n    // 设置属性\n    VM.type = type;\n    VM.text = props.text;\n    VM.timeout = !props.timeout&&props.timeout!=0?3000:props.timeout;\n    VM.show = true;\n    setTimeout(() => {\n      VM.show = false;\n    }, VM.timeout);\n  };\n}\nlet SHOW = AModal();\nfunction warning(props) {\n  SHOW('warning', props);\n}\nfunction info(props) {\n  SHOW('info', props);\n} \nfunction success(props) {\n  SHOW('success',props);\n}\nfunction error(props) {\n  SHOW('error', props);\n}\nexport default {\n  warning,\n  success,\n  info,\n  error\n};\n```\n\n## 编写弹窗组件\n\n在`Notice.vue`中，添加如下代码\n```vue\n<template>\n  <div v-if=\"show\" class=\"box\">\n      <div :class=\"type\">\n        <strong>{{text}}</strong>\n      </div>\n  </div>\n</template>\n\n<script>\nexport default {\n    props: [\"show\", \"text\", \"type\"],\n}\n</script>\n<style>\n.box {\n  position: fixed;\n  width: 100%;\n  top: 16px;\n  left: 0;\n  text-align: center;\n  pointer-events: none;\n  border: grey 3px solid;\n  box-sizing: border-box;\n}\n.success {\n  background: #4caf50 !important;\n}\n.info {\n  background: #2196f3 !important;\n}\n.warning {\n  background: #ffc107 !important;\n}\n.error {\n  background: #ff1744 !important;\n}\n</style>\n```\n\n## 注册全局组件\n\n在`main.js`中，添加如下代码\n\n```js\nimport notice from './components/Tools/Notice/Notice'\n\nVue.prototype.$notice = notice\n\n```\n\n## 使用弹窗组件\n\n在需要使用该组件的vue文件中\n```js\nthis.$notice.info({text:\"Joker真帅\",timeout:9999})\nthis.$notice.success({text:\"Joker真帅\"})\n```\n\n就可以尽情使用了\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/实现vue弹窗组件(二)","published":1,"updated":"2020-07-12T06:58:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj52r00121r0qaohqetau","content":"<p>本文讲述如何使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>\n<p><a href=\"https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/\">点击这里查看</a>，查看如何使用<code>render()</code>,构造一个弹窗组件</p>\n<a id=\"more\"></a>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>在<code>components</code>文件夹下新建<code>Tools</code>文件夹用于存放所有的全局组件，<code>Tools</code>文件夹下新增<code>Notice</code>文件夹，并在其中新建<code>Notice.vue</code>和<code>Notice.js</code></p>\n<h2 id=\"修改Notice-js\"><a href=\"#修改Notice-js\" class=\"headerlink\" title=\"修改Notice.js\"></a>修改<code>Notice.js</code></h2><p>在<code>Notice.js</code>中添加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Notice <span class=\"keyword\">from</span> <span class=\"string\">'./Notice.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取组件构造器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> notice = Vue.extend(Notice);</span><br><span class=\"line\"><span class=\"keyword\">let</span> VM = <span class=\"string\">''</span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AModal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!props.text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VM) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> oDiv = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 创建notice实例</span></span><br><span class=\"line\">      VM = <span class=\"keyword\">new</span> notice(&#123; <span class=\"attr\">el</span>: oDiv &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// 并把实例化的模板插入body</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(VM.$el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置属性</span></span><br><span class=\"line\">    VM.type = type;</span><br><span class=\"line\">    VM.text = props.text;</span><br><span class=\"line\">    VM.timeout = !props.timeout&amp;&amp;props.timeout!=<span class=\"number\">0</span>?<span class=\"number\">3000</span>:props.timeout;</span><br><span class=\"line\">    VM.show = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      VM.show = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;, VM.timeout);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> SHOW = AModal();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warning</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'warning'</span>, props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">info</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'info'</span>, props);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'success'</span>,props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'error'</span>, props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  warning,</span><br><span class=\"line\">  success,</span><br><span class=\"line\">  info,</span><br><span class=\"line\">  error</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写弹窗组件\"><a href=\"#编写弹窗组件\" class=\"headerlink\" title=\"编写弹窗组件\"></a>编写弹窗组件</h2><p>在<code>Notice.vue</code>中，添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div v-if&#x3D;&quot;show&quot; class&#x3D;&quot;box&quot;&gt;</span><br><span class=\"line\">      &lt;div :class&#x3D;&quot;type&quot;&gt;</span><br><span class=\"line\">        &lt;strong&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;strong&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    props: [&quot;show&quot;, &quot;text&quot;, &quot;type&quot;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  top: 16px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">  border: grey 3px solid;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.success &#123;</span><br><span class=\"line\">  background: #4caf50 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.info &#123;</span><br><span class=\"line\">  background: #2196f3 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.warning &#123;</span><br><span class=\"line\">  background: #ffc107 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.error &#123;</span><br><span class=\"line\">  background: #ff1744 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h2><p>在<code>main.js</code>中，添加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> notice <span class=\"keyword\">from</span> <span class=\"string\">'./components/Tools/Notice/Notice'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$notice = notice</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用弹窗组件\"><a href=\"#使用弹窗组件\" class=\"headerlink\" title=\"使用弹窗组件\"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$notice.info(&#123;<span class=\"attr\">text</span>:<span class=\"string\">\"Joker真帅\"</span>,<span class=\"attr\">timeout</span>:<span class=\"number\">9999</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$notice.success(&#123;<span class=\"attr\">text</span>:<span class=\"string\">\"Joker真帅\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>就可以尽情使用了</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本文讲述如何使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>\n<p><a href=\"https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%B8%80)/\">点击这里查看</a>，查看如何使用<code>render()</code>,构造一个弹窗组件</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>在<code>components</code>文件夹下新建<code>Tools</code>文件夹用于存放所有的全局组件，<code>Tools</code>文件夹下新增<code>Notice</code>文件夹，并在其中新建<code>Notice.vue</code>和<code>Notice.js</code></p>\n<h2 id=\"修改Notice-js\"><a href=\"#修改Notice-js\" class=\"headerlink\" title=\"修改Notice.js\"></a>修改<code>Notice.js</code></h2><p>在<code>Notice.js</code>中添加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Notice <span class=\"keyword\">from</span> <span class=\"string\">'./Notice.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取组件构造器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> notice = Vue.extend(Notice);</span><br><span class=\"line\"><span class=\"keyword\">let</span> VM = <span class=\"string\">''</span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AModal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!props.text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VM) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> oDiv = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 创建notice实例</span></span><br><span class=\"line\">      VM = <span class=\"keyword\">new</span> notice(&#123; <span class=\"attr\">el</span>: oDiv &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// 并把实例化的模板插入body</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(VM.$el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置属性</span></span><br><span class=\"line\">    VM.type = type;</span><br><span class=\"line\">    VM.text = props.text;</span><br><span class=\"line\">    VM.timeout = !props.timeout&amp;&amp;props.timeout!=<span class=\"number\">0</span>?<span class=\"number\">3000</span>:props.timeout;</span><br><span class=\"line\">    VM.show = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      VM.show = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;, VM.timeout);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> SHOW = AModal();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warning</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'warning'</span>, props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">info</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'info'</span>, props);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'success'</span>,props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  SHOW(<span class=\"string\">'error'</span>, props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  warning,</span><br><span class=\"line\">  success,</span><br><span class=\"line\">  info,</span><br><span class=\"line\">  error</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写弹窗组件\"><a href=\"#编写弹窗组件\" class=\"headerlink\" title=\"编写弹窗组件\"></a>编写弹窗组件</h2><p>在<code>Notice.vue</code>中，添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div v-if&#x3D;&quot;show&quot; class&#x3D;&quot;box&quot;&gt;</span><br><span class=\"line\">      &lt;div :class&#x3D;&quot;type&quot;&gt;</span><br><span class=\"line\">        &lt;strong&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;strong&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    props: [&quot;show&quot;, &quot;text&quot;, &quot;type&quot;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  top: 16px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">  border: grey 3px solid;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.success &#123;</span><br><span class=\"line\">  background: #4caf50 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.info &#123;</span><br><span class=\"line\">  background: #2196f3 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.warning &#123;</span><br><span class=\"line\">  background: #ffc107 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.error &#123;</span><br><span class=\"line\">  background: #ff1744 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h2><p>在<code>main.js</code>中，添加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> notice <span class=\"keyword\">from</span> <span class=\"string\">'./components/Tools/Notice/Notice'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$notice = notice</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用弹窗组件\"><a href=\"#使用弹窗组件\" class=\"headerlink\" title=\"使用弹窗组件\"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$notice.info(&#123;<span class=\"attr\">text</span>:<span class=\"string\">\"Joker真帅\"</span>,<span class=\"attr\">timeout</span>:<span class=\"number\">9999</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$notice.success(&#123;<span class=\"attr\">text</span>:<span class=\"string\">\"Joker真帅\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>就可以尽情使用了</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"实现vue弹窗组件(一)","date":"2020-07-01T12:06:57.000Z","description":null,"_content":"\n本文讲述如何使用`render()`，构造一个弹窗组件\n\n[点击这里查看](https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/),使用`Vue.extend()`构造弹窗组件，并实现全局调用\n\n<!-- more -->\n\n弹窗这类组件的特点是他们**在当前vue实例之外独立存在**，通常挂载于body；他们是通过JS动态创建的，不需要在任何组件中声明。常见的使用姿势：\n\n```js\nthis.$create(Notice, {\n    title: \"标题\",\n    message: \"提示信息\",\n    duration: 2000//延时时间\n}).show();\n```\n\n## create函数\n\n创建utils/create.js,并添加以下代码\n\n```js\nimport Vue from 'vue'\nfunction create(Component,props){\n    // 组件构造函数如何获取？\n    // 1.Vue.extend()\n    // 2.render\n    const vm = new Vue({\n        // h是createElement, 返回VNode，是虚拟dom\n        // 需要挂载才能变成真实dom\n        render: h => h(Component, {props}),\n    }).$mount() // 不指定宿主元素，则会创建真实dom，但是不会追加操作\n\n    //获取真实dom————vm.$el,并挂载到body上\n    document.body.appendChild(vm.$el)\n\n    const comp = vm.$children[0]\n    // 删除\n    comp.remove = function(){\n        document.body.removeChild(vm.$el)\n        vm.$destroy()\n    }\n\n    return comp\n}\nexport default create\n```\n\n## 弹窗组件\n\n新建弹窗组件，`Notice.vue`\n\n``` vue\n<template>\n  <div class=\"box\" v-if=\"isShow\">\n    <h3>{{title}}</h3>\n    <p class=\"box-content\">{{message}}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    title: {\n      type: String,\n      default: \"\"\n    },\n    message: {\n      type: String,\n      default: \"\"\n    },\n    duration: {\n      type: Number,\n      default: 1000\n    }\n  },\n  data() {\n    return {\n      isShow: false\n    };\n  },\n  methods: {\n    show() {\n      this.isShow = true;\n      setTimeout(this.hide, this.duration);\n    },\n    hide() {\n      this.isShow = false;\n      // 清除自己\n      this.remove();\n    }\n  }\n};\n</script>\n\n<style>\n.box {\n  position: fixed;\n  width: 100%;\n  top: 16px;\n  left: 0;\n  text-align: center;\n  pointer-events: none;\n  background-color: #fff;\n  border: grey 3px solid;\n  box-sizing: border-box;\n}\n.box-content {\n  width: 200px;\n  margin: 10px auto;\n  font-size: 14px;  \n  padding: 8px 16px;\n  background: #fff;\n  border-radius: 3px;\n  margin-bottom: 8px;\n}\n</style>\n```\n\n## 使用弹窗组件\n\n在需要使用该组件的vue文件中\n```js\nimport Notice from \"@/components/Notice.vue\";\nimport create from './utils/create'\n\nmethods: {\n    showNotice() {\n        create(Notice, {\n            title: \"标题\",\n            message: \"提示信息\",\n            duration: 2000//延时时间\n        }).show();\n    }\n};\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/实现vue弹窗组件(一).md","raw":"---\ntitle: 实现vue弹窗组件(一)\ndate: 2020-07-01 20:06:57\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n本文讲述如何使用`render()`，构造一个弹窗组件\n\n[点击这里查看](https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/),使用`Vue.extend()`构造弹窗组件，并实现全局调用\n\n<!-- more -->\n\n弹窗这类组件的特点是他们**在当前vue实例之外独立存在**，通常挂载于body；他们是通过JS动态创建的，不需要在任何组件中声明。常见的使用姿势：\n\n```js\nthis.$create(Notice, {\n    title: \"标题\",\n    message: \"提示信息\",\n    duration: 2000//延时时间\n}).show();\n```\n\n## create函数\n\n创建utils/create.js,并添加以下代码\n\n```js\nimport Vue from 'vue'\nfunction create(Component,props){\n    // 组件构造函数如何获取？\n    // 1.Vue.extend()\n    // 2.render\n    const vm = new Vue({\n        // h是createElement, 返回VNode，是虚拟dom\n        // 需要挂载才能变成真实dom\n        render: h => h(Component, {props}),\n    }).$mount() // 不指定宿主元素，则会创建真实dom，但是不会追加操作\n\n    //获取真实dom————vm.$el,并挂载到body上\n    document.body.appendChild(vm.$el)\n\n    const comp = vm.$children[0]\n    // 删除\n    comp.remove = function(){\n        document.body.removeChild(vm.$el)\n        vm.$destroy()\n    }\n\n    return comp\n}\nexport default create\n```\n\n## 弹窗组件\n\n新建弹窗组件，`Notice.vue`\n\n``` vue\n<template>\n  <div class=\"box\" v-if=\"isShow\">\n    <h3>{{title}}</h3>\n    <p class=\"box-content\">{{message}}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    title: {\n      type: String,\n      default: \"\"\n    },\n    message: {\n      type: String,\n      default: \"\"\n    },\n    duration: {\n      type: Number,\n      default: 1000\n    }\n  },\n  data() {\n    return {\n      isShow: false\n    };\n  },\n  methods: {\n    show() {\n      this.isShow = true;\n      setTimeout(this.hide, this.duration);\n    },\n    hide() {\n      this.isShow = false;\n      // 清除自己\n      this.remove();\n    }\n  }\n};\n</script>\n\n<style>\n.box {\n  position: fixed;\n  width: 100%;\n  top: 16px;\n  left: 0;\n  text-align: center;\n  pointer-events: none;\n  background-color: #fff;\n  border: grey 3px solid;\n  box-sizing: border-box;\n}\n.box-content {\n  width: 200px;\n  margin: 10px auto;\n  font-size: 14px;  \n  padding: 8px 16px;\n  background: #fff;\n  border-radius: 3px;\n  margin-bottom: 8px;\n}\n</style>\n```\n\n## 使用弹窗组件\n\n在需要使用该组件的vue文件中\n```js\nimport Notice from \"@/components/Notice.vue\";\nimport create from './utils/create'\n\nmethods: {\n    showNotice() {\n        create(Notice, {\n            title: \"标题\",\n            message: \"提示信息\",\n            duration: 2000//延时时间\n        }).show();\n    }\n};\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/实现vue弹窗组件(一)","published":1,"updated":"2020-07-12T06:58:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj52s00151r0q4z8p4j82","content":"<p>本文讲述如何使用<code>render()</code>，构造一个弹窗组件</p>\n<p><a href=\"https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/\">点击这里查看</a>,使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>\n<a id=\"more\"></a>\n\n<p>弹窗这类组件的特点是他们<strong>在当前vue实例之外独立存在</strong>，通常挂载于body；他们是通过JS动态创建的，不需要在任何组件中声明。常见的使用姿势：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$create(Notice, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"标题\"</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"提示信息\"</span>,</span><br><span class=\"line\">    duration: <span class=\"number\">2000</span><span class=\"comment\">//延时时间</span></span><br><span class=\"line\">&#125;).show();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"create函数\"><a href=\"#create函数\" class=\"headerlink\" title=\"create函数\"></a>create函数</h2><p>创建utils/create.js,并添加以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">Component,props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 组件构造函数如何获取？</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.Vue.extend()</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.render</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// h是createElement, 返回VNode，是虚拟dom</span></span><br><span class=\"line\">        <span class=\"comment\">// 需要挂载才能变成真实dom</span></span><br><span class=\"line\">        render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(Component, &#123;props&#125;),</span><br><span class=\"line\">    &#125;).$mount() <span class=\"comment\">// 不指定宿主元素，则会创建真实dom，但是不会追加操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取真实dom————vm.$el,并挂载到body上</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(vm.$el)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> comp = vm.$children[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    comp.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(vm.$el)</span><br><span class=\"line\">        vm.$destroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> comp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> create</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"弹窗组件\"><a href=\"#弹窗组件\" class=\"headerlink\" title=\"弹窗组件\"></a>弹窗组件</h2><p>新建弹窗组件，<code>Notice.vue</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot; v-if&#x3D;&quot;isShow&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;p class&#x3D;&quot;box-content&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    message: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    duration: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 1000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      isShow: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    show() &#123;</span><br><span class=\"line\">      this.isShow &#x3D; true;</span><br><span class=\"line\">      setTimeout(this.hide, this.duration);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hide() &#123;</span><br><span class=\"line\">      this.isShow &#x3D; false;</span><br><span class=\"line\">      &#x2F;&#x2F; 清除自己</span><br><span class=\"line\">      this.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  top: 16px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">  background-color: #fff;</span><br><span class=\"line\">  border: grey 3px solid;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box-content &#123;</span><br><span class=\"line\">  width: 200px;</span><br><span class=\"line\">  margin: 10px auto;</span><br><span class=\"line\">  font-size: 14px;  </span><br><span class=\"line\">  padding: 8px 16px;</span><br><span class=\"line\">  background: #fff;</span><br><span class=\"line\">  border-radius: 3px;</span><br><span class=\"line\">  margin-bottom: 8px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用弹窗组件\"><a href=\"#使用弹窗组件\" class=\"headerlink\" title=\"使用弹窗组件\"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Notice <span class=\"keyword\">from</span> <span class=\"string\">\"@/components/Notice.vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> create <span class=\"keyword\">from</span> <span class=\"string\">'./utils/create'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    showNotice() &#123;</span><br><span class=\"line\">        create(Notice, &#123;</span><br><span class=\"line\">            title: <span class=\"string\">\"标题\"</span>,</span><br><span class=\"line\">            message: <span class=\"string\">\"提示信息\"</span>,</span><br><span class=\"line\">            duration: <span class=\"number\">2000</span><span class=\"comment\">//延时时间</span></span><br><span class=\"line\">        &#125;).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本文讲述如何使用<code>render()</code>，构造一个弹窗组件</p>\n<p><a href=\"https://qytayh.github.io/2020/07/%E5%AE%9E%E7%8E%B0vue%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6(%E4%BA%8C)/\">点击这里查看</a>,使用<code>Vue.extend()</code>构造弹窗组件，并实现全局调用</p>","more":"<p>弹窗这类组件的特点是他们<strong>在当前vue实例之外独立存在</strong>，通常挂载于body；他们是通过JS动态创建的，不需要在任何组件中声明。常见的使用姿势：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$create(Notice, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"标题\"</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"提示信息\"</span>,</span><br><span class=\"line\">    duration: <span class=\"number\">2000</span><span class=\"comment\">//延时时间</span></span><br><span class=\"line\">&#125;).show();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"create函数\"><a href=\"#create函数\" class=\"headerlink\" title=\"create函数\"></a>create函数</h2><p>创建utils/create.js,并添加以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">Component,props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 组件构造函数如何获取？</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.Vue.extend()</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.render</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// h是createElement, 返回VNode，是虚拟dom</span></span><br><span class=\"line\">        <span class=\"comment\">// 需要挂载才能变成真实dom</span></span><br><span class=\"line\">        render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(Component, &#123;props&#125;),</span><br><span class=\"line\">    &#125;).$mount() <span class=\"comment\">// 不指定宿主元素，则会创建真实dom，但是不会追加操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取真实dom————vm.$el,并挂载到body上</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(vm.$el)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> comp = vm.$children[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    comp.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(vm.$el)</span><br><span class=\"line\">        vm.$destroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> comp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> create</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"弹窗组件\"><a href=\"#弹窗组件\" class=\"headerlink\" title=\"弹窗组件\"></a>弹窗组件</h2><p>新建弹窗组件，<code>Notice.vue</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot; v-if&#x3D;&quot;isShow&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;p class&#x3D;&quot;box-content&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    message: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    duration: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 1000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      isShow: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    show() &#123;</span><br><span class=\"line\">      this.isShow &#x3D; true;</span><br><span class=\"line\">      setTimeout(this.hide, this.duration);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hide() &#123;</span><br><span class=\"line\">      this.isShow &#x3D; false;</span><br><span class=\"line\">      &#x2F;&#x2F; 清除自己</span><br><span class=\"line\">      this.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  top: 16px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">  background-color: #fff;</span><br><span class=\"line\">  border: grey 3px solid;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box-content &#123;</span><br><span class=\"line\">  width: 200px;</span><br><span class=\"line\">  margin: 10px auto;</span><br><span class=\"line\">  font-size: 14px;  </span><br><span class=\"line\">  padding: 8px 16px;</span><br><span class=\"line\">  background: #fff;</span><br><span class=\"line\">  border-radius: 3px;</span><br><span class=\"line\">  margin-bottom: 8px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用弹窗组件\"><a href=\"#使用弹窗组件\" class=\"headerlink\" title=\"使用弹窗组件\"></a>使用弹窗组件</h2><p>在需要使用该组件的vue文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Notice <span class=\"keyword\">from</span> <span class=\"string\">\"@/components/Notice.vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> create <span class=\"keyword\">from</span> <span class=\"string\">'./utils/create'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    showNotice() &#123;</span><br><span class=\"line\">        create(Notice, &#123;</span><br><span class=\"line\">            title: <span class=\"string\">\"标题\"</span>,</span><br><span class=\"line\">            message: <span class=\"string\">\"提示信息\"</span>,</span><br><span class=\"line\">            duration: <span class=\"number\">2000</span><span class=\"comment\">//延时时间</span></span><br><span class=\"line\">        &#125;).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"实现一个简易Vuex","date":"2020-07-12T07:06:57.000Z","description":null,"_content":"\n在阅读本篇之前，希望你已经对vuex的用法有了一定了解。可以参考一下[Vue统一状态管理——Vuex](https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/)。\n\n<!-- more -->\n\n# Vuex \n\nVuex**集中式**存储管理应用的所有组件的状态，并以相应的规则保证状态以**可预测**的方式发生改变\n\n{% asset_img 1.png [第一步] %}\n\n## 整合vuex\n\n```bash\nvue add vuex\n```\n\n## 核心概念\n\n+ state 状态、数据\n+ mutations 更改状态的函数\n+ actions 异步操作\n+ store 包含以上概念的容器\n\n## 状态 - state\n\nstate保存应用状态\n\n```js\nexport default new Vuex.Store({\n    state: { counter:0 },\n})\n```\n\n## 状态变更 - mutations\n\nmutations用于修改状态\n\n```js\nexport default new Vuex.Store({\n    mutations: {\n        add(state) {\n            state.counter++\n        }\n    }\n})\n```\n\n## 派生状态 - getters\n\n从state派生出新状态，类似计算属性\n\n```js\nexport default new Vuex.Store({\n    getters: {\n        doubleCounter(state) { // 计算剩余数量\n            return state.counter * 2;\n        }\n    }\n})\n```\n\n## 动作 - actions\n\n添加业务逻辑，类似于controller\n\n```js\nexport default new Vuex.Store({\n    actions: {\n        add({ commit }) {\n            setTimeout(() => { commit('add')}, 1000);\n        }\n    }\n})\n```\n\n测试代码：\n\n```html\n<p @click=\"$store.commit('add')\">counter: {{$store.state.counter}}</p>\n<p @click=\"$store.dispatch('add')\">async counter: {{$store.state.counter}}</p>\n<p>double：{{$store.getters.doubleCounter}}</p>\n```\n\n# Vuex原理解析\n\n## 目标分析：\n\n+ 实现一个插件：声明store类，挂载$store\n+ Store具体实现：\n    * 创建响应式的state，保存mutations、actions和getters\n    * 实现commit根据用户传入的type，执行对应的mutation\n    * 实现dispatch根据用户传入的type执行对应的action，同时传递上下文\n    * 实现getters，按照getters定义对state做派生\n\n## 初始化\n\nStore声明、install实现，jvuex.js：\n\n```js\n// jvuex\nlet Vue //保存构造函数的引用，避免import\nclass Store{\n    constructor(options){\n        //响应化处理state\n        this.state = new Vue({\n            data: options.state\n        })\n    }\n}\nfunction install(_Vue){\n    Vue = _Vue\n    Vue.mixin({\n        beforeCreate(){\n            if(this.$options.store){\n                Vue.prototype.$store = this.$options.store\n            }\n        }\n    })\n}\nexport default {\n    Store,\n    install\n}\n```\n\n## 实现 commit\n\n根据用户传入type获取并执行对应的mutation\n\n```js\n//修改 Store类\nclass Store{\n    constructor(options){\n        this._mutations = options.mutations\n        //响应化处理state\n        this.state = new Vue({\n            data: options.state\n        })\n    }\n    // store.commit('add',1)\n    //type:mutation的类型\n    //payload：载荷，参数\n    commit(type,payload){\n        const entry = this._mutations[type]\n        if(entry){\n            entry(this.state,payload)\n        }\n        \n    }\n}\n```\n\n## 实现 actions\n\n根据用户传入的type获取并执行对应的mutation\n\n```js\n//继续修改Store类\ndispatch(type,payload){\n    const entry = this._actions[type]\n    if (entry) {\n        entry(this, payload)\n    }\n}\n```\n然后我们运行一下会发现报以下错误\n{% asset_img 2.png [报错信息] %}\n\n> 错误原因：因为class的影响，this指向出了问题\n\n参考了一下官方的解决方案，我们修改Store：\n```js\nconstructor(options) {\n    ......\n    //绑定 commit、dispatch的上下文\n    this.commit = this.commit.bind(this)\n    this.dispatch = this.dispatch.bind(this)\n}\n```\n\n## 优化state\n\n目前的代码还没有对state做一个很好的保护，会存在将来用户直接去改state中的值得行为，继续修改Store的代码\n\n```js\nconstructor(options) {\n    ......\n    //响应化处理state\n    // this.state = new Vue({\n    //     data: options.state\n    // })\n    this._vm = new Vue({\n        data:{\n            //加两个$，Vue不做代理 对外部是隐藏的\n            $$state:options.state\n        }\n    })\n    ......\n}\n//存取器 store.state\nget state(){\n    console.log(this._vm)\n    return this._vm._data.$$state\n}\nset state(v){\n    console.error('禁止这样修改')\n}\n```\n\n## 实现 getters\n\n继续修改Store类\n```js\nclass Store {\n    constructor(options) {\n        ......\n        this._wrapperGetters = options.getters\n        //定义computed选项\n        const computed = {}\n        this.getters = {}\n        const store=this\n        //\n        Object.keys(this._wrapperGetters).forEach(key=>{\n            //获取用户定义的getter\n            const fn = store._wrapperGetters[key]\n            //转化为computed可以使用的无参数形式\n            computed[key]=function(){\n                return fn(store.state)\n            }\n            //为getters定义只读属性\n            Object.defineProperty(store.getters,key,{\n                get:()=> store._vm[key]\n            })\n        })\n        ......\n    }\n}\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/实现一个简易Vuex.md","raw":"---\ntitle: 实现一个简易Vuex\ndate: 2020-07-12 15:06:57\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n在阅读本篇之前，希望你已经对vuex的用法有了一定了解。可以参考一下[Vue统一状态管理——Vuex](https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/)。\n\n<!-- more -->\n\n# Vuex \n\nVuex**集中式**存储管理应用的所有组件的状态，并以相应的规则保证状态以**可预测**的方式发生改变\n\n{% asset_img 1.png [第一步] %}\n\n## 整合vuex\n\n```bash\nvue add vuex\n```\n\n## 核心概念\n\n+ state 状态、数据\n+ mutations 更改状态的函数\n+ actions 异步操作\n+ store 包含以上概念的容器\n\n## 状态 - state\n\nstate保存应用状态\n\n```js\nexport default new Vuex.Store({\n    state: { counter:0 },\n})\n```\n\n## 状态变更 - mutations\n\nmutations用于修改状态\n\n```js\nexport default new Vuex.Store({\n    mutations: {\n        add(state) {\n            state.counter++\n        }\n    }\n})\n```\n\n## 派生状态 - getters\n\n从state派生出新状态，类似计算属性\n\n```js\nexport default new Vuex.Store({\n    getters: {\n        doubleCounter(state) { // 计算剩余数量\n            return state.counter * 2;\n        }\n    }\n})\n```\n\n## 动作 - actions\n\n添加业务逻辑，类似于controller\n\n```js\nexport default new Vuex.Store({\n    actions: {\n        add({ commit }) {\n            setTimeout(() => { commit('add')}, 1000);\n        }\n    }\n})\n```\n\n测试代码：\n\n```html\n<p @click=\"$store.commit('add')\">counter: {{$store.state.counter}}</p>\n<p @click=\"$store.dispatch('add')\">async counter: {{$store.state.counter}}</p>\n<p>double：{{$store.getters.doubleCounter}}</p>\n```\n\n# Vuex原理解析\n\n## 目标分析：\n\n+ 实现一个插件：声明store类，挂载$store\n+ Store具体实现：\n    * 创建响应式的state，保存mutations、actions和getters\n    * 实现commit根据用户传入的type，执行对应的mutation\n    * 实现dispatch根据用户传入的type执行对应的action，同时传递上下文\n    * 实现getters，按照getters定义对state做派生\n\n## 初始化\n\nStore声明、install实现，jvuex.js：\n\n```js\n// jvuex\nlet Vue //保存构造函数的引用，避免import\nclass Store{\n    constructor(options){\n        //响应化处理state\n        this.state = new Vue({\n            data: options.state\n        })\n    }\n}\nfunction install(_Vue){\n    Vue = _Vue\n    Vue.mixin({\n        beforeCreate(){\n            if(this.$options.store){\n                Vue.prototype.$store = this.$options.store\n            }\n        }\n    })\n}\nexport default {\n    Store,\n    install\n}\n```\n\n## 实现 commit\n\n根据用户传入type获取并执行对应的mutation\n\n```js\n//修改 Store类\nclass Store{\n    constructor(options){\n        this._mutations = options.mutations\n        //响应化处理state\n        this.state = new Vue({\n            data: options.state\n        })\n    }\n    // store.commit('add',1)\n    //type:mutation的类型\n    //payload：载荷，参数\n    commit(type,payload){\n        const entry = this._mutations[type]\n        if(entry){\n            entry(this.state,payload)\n        }\n        \n    }\n}\n```\n\n## 实现 actions\n\n根据用户传入的type获取并执行对应的mutation\n\n```js\n//继续修改Store类\ndispatch(type,payload){\n    const entry = this._actions[type]\n    if (entry) {\n        entry(this, payload)\n    }\n}\n```\n然后我们运行一下会发现报以下错误\n{% asset_img 2.png [报错信息] %}\n\n> 错误原因：因为class的影响，this指向出了问题\n\n参考了一下官方的解决方案，我们修改Store：\n```js\nconstructor(options) {\n    ......\n    //绑定 commit、dispatch的上下文\n    this.commit = this.commit.bind(this)\n    this.dispatch = this.dispatch.bind(this)\n}\n```\n\n## 优化state\n\n目前的代码还没有对state做一个很好的保护，会存在将来用户直接去改state中的值得行为，继续修改Store的代码\n\n```js\nconstructor(options) {\n    ......\n    //响应化处理state\n    // this.state = new Vue({\n    //     data: options.state\n    // })\n    this._vm = new Vue({\n        data:{\n            //加两个$，Vue不做代理 对外部是隐藏的\n            $$state:options.state\n        }\n    })\n    ......\n}\n//存取器 store.state\nget state(){\n    console.log(this._vm)\n    return this._vm._data.$$state\n}\nset state(v){\n    console.error('禁止这样修改')\n}\n```\n\n## 实现 getters\n\n继续修改Store类\n```js\nclass Store {\n    constructor(options) {\n        ......\n        this._wrapperGetters = options.getters\n        //定义computed选项\n        const computed = {}\n        this.getters = {}\n        const store=this\n        //\n        Object.keys(this._wrapperGetters).forEach(key=>{\n            //获取用户定义的getter\n            const fn = store._wrapperGetters[key]\n            //转化为computed可以使用的无参数形式\n            computed[key]=function(){\n                return fn(store.state)\n            }\n            //为getters定义只读属性\n            Object.defineProperty(store.getters,key,{\n                get:()=> store._vm[key]\n            })\n        })\n        ......\n    }\n}\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/实现一个简易Vuex","published":1,"updated":"2020-07-12T12:18:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj52y00181r0qhynrboqi","content":"<p>在阅读本篇之前，希望你已经对vuex的用法有了一定了解。可以参考一下<a href=\"https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/\">Vue统一状态管理——Vuex</a>。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><p>Vuex<strong>集中式</strong>存储管理应用的所有组件的状态，并以相应的规则保证状态以<strong>可预测</strong>的方式发生改变</p>\n<img src=\"/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/1.png\" class=\"\" title=\"[第一步]\">\n\n<h2 id=\"整合vuex\"><a href=\"#整合vuex\" class=\"headerlink\" title=\"整合vuex\"></a>整合vuex</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add vuex</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><ul>\n<li>state 状态、数据</li>\n<li>mutations 更改状态的函数</li>\n<li>actions 异步操作</li>\n<li>store 包含以上概念的容器</li>\n</ul>\n<h2 id=\"状态-state\"><a href=\"#状态-state\" class=\"headerlink\" title=\"状态 - state\"></a>状态 - state</h2><p>state保存应用状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123; <span class=\"attr\">counter</span>:<span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态变更-mutations\"><a href=\"#状态变更-mutations\" class=\"headerlink\" title=\"状态变更 - mutations\"></a>状态变更 - mutations</h2><p>mutations用于修改状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        add(state) &#123;</span><br><span class=\"line\">            state.counter++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"派生状态-getters\"><a href=\"#派生状态-getters\" class=\"headerlink\" title=\"派生状态 - getters\"></a>派生状态 - getters</h2><p>从state派生出新状态，类似计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        doubleCounter(state) &#123; <span class=\"comment\">// 计算剩余数量</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.counter * <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动作-actions\"><a href=\"#动作-actions\" class=\"headerlink\" title=\"动作 - actions\"></a>动作 - actions</h2><p>添加业务逻辑，类似于controller</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">        add(&#123; commit &#125;) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; commit(<span class=\"string\">'add'</span>)&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"$store.commit('add')\"</span>&gt;</span>counter: &#123;&#123;$store.state.counter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"$store.dispatch('add')\"</span>&gt;</span>async counter: &#123;&#123;$store.state.counter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>double：&#123;&#123;$store.getters.doubleCounter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vuex原理解析\"><a href=\"#Vuex原理解析\" class=\"headerlink\" title=\"Vuex原理解析\"></a>Vuex原理解析</h1><h2 id=\"目标分析：\"><a href=\"#目标分析：\" class=\"headerlink\" title=\"目标分析：\"></a>目标分析：</h2><ul>\n<li>实现一个插件：声明store类，挂载$store</li>\n<li>Store具体实现：<ul>\n<li>创建响应式的state，保存mutations、actions和getters</li>\n<li>实现commit根据用户传入的type，执行对应的mutation</li>\n<li>实现dispatch根据用户传入的type执行对应的action，同时传递上下文</li>\n<li>实现getters，按照getters定义对state做派生</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>Store声明、install实现，jvuex.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jvuex</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Vue <span class=\"comment\">//保存构造函数的引用，避免import</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//响应化处理state</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            data: options.state</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span>(<span class=\"params\">_Vue</span>)</span>&#123;</span><br><span class=\"line\">    Vue = _Vue</span><br><span class=\"line\">    Vue.mixin(&#123;</span><br><span class=\"line\">        beforeCreate()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.$options.store)&#123;</span><br><span class=\"line\">                Vue.prototype.$store = <span class=\"keyword\">this</span>.$options.store</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    Store,</span><br><span class=\"line\">    install</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-commit\"><a href=\"#实现-commit\" class=\"headerlink\" title=\"实现 commit\"></a>实现 commit</h2><p>根据用户传入type获取并执行对应的mutation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//修改 Store类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._mutations = options.mutations</span><br><span class=\"line\">        <span class=\"comment\">//响应化处理state</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            data: options.state</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// store.commit('add',1)</span></span><br><span class=\"line\">    <span class=\"comment\">//type:mutation的类型</span></span><br><span class=\"line\">    <span class=\"comment\">//payload：载荷，参数</span></span><br><span class=\"line\">    commit(type,payload)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._mutations[type]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(entry)&#123;</span><br><span class=\"line\">            entry(<span class=\"keyword\">this</span>.state,payload)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-actions\"><a href=\"#实现-actions\" class=\"headerlink\" title=\"实现 actions\"></a>实现 actions</h2><p>根据用户传入的type获取并执行对应的mutation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继续修改Store类</span></span><br><span class=\"line\">dispatch(type,payload)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._actions[type]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entry) &#123;</span><br><span class=\"line\">        entry(<span class=\"keyword\">this</span>, payload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们运行一下会发现报以下错误</p>\n<img src=\"/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/2.png\" class=\"\" title=\"[报错信息]\">\n\n<blockquote>\n<p>错误原因：因为class的影响，this指向出了问题</p>\n</blockquote>\n<p>参考了一下官方的解决方案，我们修改Store：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//绑定 commit、dispatch的上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.commit = <span class=\"keyword\">this</span>.commit.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dispatch = <span class=\"keyword\">this</span>.dispatch.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化state\"><a href=\"#优化state\" class=\"headerlink\" title=\"优化state\"></a>优化state</h2><p>目前的代码还没有对state做一个很好的保护，会存在将来用户直接去改state中的值得行为，继续修改Store的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//响应化处理state</span></span><br><span class=\"line\">    <span class=\"comment\">// this.state = new Vue(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     data: options.state</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            <span class=\"comment\">//加两个$，Vue不做代理 对外部是隐藏的</span></span><br><span class=\"line\">            $$state:options.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//存取器 store.state</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> state()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._vm)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._vm._data.$$state</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">set</span> state(v)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'禁止这样修改'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-getters\"><a href=\"#实现-getters\" class=\"headerlink\" title=\"实现 getters\"></a>实现 getters</h2><p>继续修改Store类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._wrapperGetters = options.getters</span><br><span class=\"line\">        <span class=\"comment\">//定义computed选项</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getters = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> store=<span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>._wrapperGetters).forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取用户定义的getter</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> fn = store._wrapperGetters[key]</span><br><span class=\"line\">            <span class=\"comment\">//转化为computed可以使用的无参数形式</span></span><br><span class=\"line\">            computed[key]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> fn(store.state)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//为getters定义只读属性</span></span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(store.getters,key,&#123;</span><br><span class=\"line\">                <span class=\"keyword\">get</span>:()=&gt; store._vm[key]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>在阅读本篇之前，希望你已经对vuex的用法有了一定了解。可以参考一下<a href=\"https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/\">Vue统一状态管理——Vuex</a>。</p>","more":"<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><p>Vuex<strong>集中式</strong>存储管理应用的所有组件的状态，并以相应的规则保证状态以<strong>可预测</strong>的方式发生改变</p>\n<img src=\"/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/1.png\" class=\"\" title=\"[第一步]\">\n\n<h2 id=\"整合vuex\"><a href=\"#整合vuex\" class=\"headerlink\" title=\"整合vuex\"></a>整合vuex</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add vuex</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><ul>\n<li>state 状态、数据</li>\n<li>mutations 更改状态的函数</li>\n<li>actions 异步操作</li>\n<li>store 包含以上概念的容器</li>\n</ul>\n<h2 id=\"状态-state\"><a href=\"#状态-state\" class=\"headerlink\" title=\"状态 - state\"></a>状态 - state</h2><p>state保存应用状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123; <span class=\"attr\">counter</span>:<span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态变更-mutations\"><a href=\"#状态变更-mutations\" class=\"headerlink\" title=\"状态变更 - mutations\"></a>状态变更 - mutations</h2><p>mutations用于修改状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        add(state) &#123;</span><br><span class=\"line\">            state.counter++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"派生状态-getters\"><a href=\"#派生状态-getters\" class=\"headerlink\" title=\"派生状态 - getters\"></a>派生状态 - getters</h2><p>从state派生出新状态，类似计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        doubleCounter(state) &#123; <span class=\"comment\">// 计算剩余数量</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.counter * <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动作-actions\"><a href=\"#动作-actions\" class=\"headerlink\" title=\"动作 - actions\"></a>动作 - actions</h2><p>添加业务逻辑，类似于controller</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">        add(&#123; commit &#125;) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; commit(<span class=\"string\">'add'</span>)&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"$store.commit('add')\"</span>&gt;</span>counter: &#123;&#123;$store.state.counter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"$store.dispatch('add')\"</span>&gt;</span>async counter: &#123;&#123;$store.state.counter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>double：&#123;&#123;$store.getters.doubleCounter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vuex原理解析\"><a href=\"#Vuex原理解析\" class=\"headerlink\" title=\"Vuex原理解析\"></a>Vuex原理解析</h1><h2 id=\"目标分析：\"><a href=\"#目标分析：\" class=\"headerlink\" title=\"目标分析：\"></a>目标分析：</h2><ul>\n<li>实现一个插件：声明store类，挂载$store</li>\n<li>Store具体实现：<ul>\n<li>创建响应式的state，保存mutations、actions和getters</li>\n<li>实现commit根据用户传入的type，执行对应的mutation</li>\n<li>实现dispatch根据用户传入的type执行对应的action，同时传递上下文</li>\n<li>实现getters，按照getters定义对state做派生</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>Store声明、install实现，jvuex.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jvuex</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Vue <span class=\"comment\">//保存构造函数的引用，避免import</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//响应化处理state</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            data: options.state</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span>(<span class=\"params\">_Vue</span>)</span>&#123;</span><br><span class=\"line\">    Vue = _Vue</span><br><span class=\"line\">    Vue.mixin(&#123;</span><br><span class=\"line\">        beforeCreate()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.$options.store)&#123;</span><br><span class=\"line\">                Vue.prototype.$store = <span class=\"keyword\">this</span>.$options.store</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    Store,</span><br><span class=\"line\">    install</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-commit\"><a href=\"#实现-commit\" class=\"headerlink\" title=\"实现 commit\"></a>实现 commit</h2><p>根据用户传入type获取并执行对应的mutation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//修改 Store类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._mutations = options.mutations</span><br><span class=\"line\">        <span class=\"comment\">//响应化处理state</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            data: options.state</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// store.commit('add',1)</span></span><br><span class=\"line\">    <span class=\"comment\">//type:mutation的类型</span></span><br><span class=\"line\">    <span class=\"comment\">//payload：载荷，参数</span></span><br><span class=\"line\">    commit(type,payload)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._mutations[type]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(entry)&#123;</span><br><span class=\"line\">            entry(<span class=\"keyword\">this</span>.state,payload)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-actions\"><a href=\"#实现-actions\" class=\"headerlink\" title=\"实现 actions\"></a>实现 actions</h2><p>根据用户传入的type获取并执行对应的mutation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继续修改Store类</span></span><br><span class=\"line\">dispatch(type,payload)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._actions[type]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entry) &#123;</span><br><span class=\"line\">        entry(<span class=\"keyword\">this</span>, payload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们运行一下会发现报以下错误</p>\n<img src=\"/2020/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93Vuex/2.png\" class=\"\" title=\"[报错信息]\">\n\n<blockquote>\n<p>错误原因：因为class的影响，this指向出了问题</p>\n</blockquote>\n<p>参考了一下官方的解决方案，我们修改Store：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//绑定 commit、dispatch的上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.commit = <span class=\"keyword\">this</span>.commit.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dispatch = <span class=\"keyword\">this</span>.dispatch.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化state\"><a href=\"#优化state\" class=\"headerlink\" title=\"优化state\"></a>优化state</h2><p>目前的代码还没有对state做一个很好的保护，会存在将来用户直接去改state中的值得行为，继续修改Store的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//响应化处理state</span></span><br><span class=\"line\">    <span class=\"comment\">// this.state = new Vue(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     data: options.state</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            <span class=\"comment\">//加两个$，Vue不做代理 对外部是隐藏的</span></span><br><span class=\"line\">            $$state:options.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//存取器 store.state</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> state()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._vm)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._vm._data.$$state</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">set</span> state(v)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'禁止这样修改'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-getters\"><a href=\"#实现-getters\" class=\"headerlink\" title=\"实现 getters\"></a>实现 getters</h2><p>继续修改Store类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._wrapperGetters = options.getters</span><br><span class=\"line\">        <span class=\"comment\">//定义computed选项</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getters = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> store=<span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>._wrapperGetters).forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取用户定义的getter</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> fn = store._wrapperGetters[key]</span><br><span class=\"line\">            <span class=\"comment\">//转化为computed可以使用的无参数形式</span></span><br><span class=\"line\">            computed[key]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> fn(store.state)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//为getters定义只读属性</span></span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(store.getters,key,&#123;</span><br><span class=\"line\">                <span class=\"keyword\">get</span>:()=&gt; store._vm[key]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"Vue中v-if和v-for的优先级","date":"2020-07-07T12:00:07.000Z","description":null,"_content":"\nv-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化才能得到更好的性能？\n\n<!-- more -->\n\n当v-if和v-for同级的时候，我们写一个例子\n\n```html\n<body>\n    <div id=\"demo\">\n        <p v-for=\"child in children\" v-if=\"isFolder\">{{child.title}}</p>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        const app=new Vue({\n            el:\"#demo\",\n            data(){\n                return {\n                    children:[\n                        {title:'foo'},\n                        {title:'bar'}\n                    ]\n                }\n            },\n            computed:{\n                isFolder(){\n                    return this.children&&this.children.length>0\n                }\n            }\n        })\n        console.log(app.$options.render)\n    </script>\n</body>\n```\n生成的渲染函数\n```js\nƒ anonymous(\n) {\nwith(this){return _c('div',{attrs:{\"id\":\"demo\"}},_l((children),function(child){return (isFolder)?_c('p',[_v(_s(child.title))]):_e()}),0)}\n}\n```\n> 这样我们可以看出来是循环先执行，isFolder判断后执行\n\n当v-if和v-for不同级的时候，我们先调整下dom区域\n```html\n<template v-if='isFolder'>\n    <p v-for=\"child in children\">{{child.title}}</p>\n</template>\n```\n两者不同级时，渲染函数入下\n```js\nƒ anonymous(\n) {\nwith(this){return _c('div',{attrs:{\"id\":\"demo\"}},[(isFolder)?_l((children),function(child){return _c('p',[_v(_s(child.title))])}):_e()],2)}\n}\n```\n> 先判断了isFolder再看是否执行-l\n\n**结论**\n\n1. 显然v-for优先于v-if被解析\n2. 如果同时出现，每次渲染都会先执行循环再判断条件，无论如何，循环都不可避免，浪费了性能\n3. 要避免出现这种情况，可以在外层嵌套template,然后在这一层进行v-if判断，然后在内部进行v-for循环\n4. 如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/Vue中v-if和v-for的优先级.md","raw":"---\ntitle: Vue中v-if和v-for的优先级\ndate: 2020-07-07 20:00:07\ntags:\n    - vue \n    - 前端面试\ncategories:\n    - [vue]\n    - [前端面试]\ndescription:\n---\n\nv-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化才能得到更好的性能？\n\n<!-- more -->\n\n当v-if和v-for同级的时候，我们写一个例子\n\n```html\n<body>\n    <div id=\"demo\">\n        <p v-for=\"child in children\" v-if=\"isFolder\">{{child.title}}</p>\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        const app=new Vue({\n            el:\"#demo\",\n            data(){\n                return {\n                    children:[\n                        {title:'foo'},\n                        {title:'bar'}\n                    ]\n                }\n            },\n            computed:{\n                isFolder(){\n                    return this.children&&this.children.length>0\n                }\n            }\n        })\n        console.log(app.$options.render)\n    </script>\n</body>\n```\n生成的渲染函数\n```js\nƒ anonymous(\n) {\nwith(this){return _c('div',{attrs:{\"id\":\"demo\"}},_l((children),function(child){return (isFolder)?_c('p',[_v(_s(child.title))]):_e()}),0)}\n}\n```\n> 这样我们可以看出来是循环先执行，isFolder判断后执行\n\n当v-if和v-for不同级的时候，我们先调整下dom区域\n```html\n<template v-if='isFolder'>\n    <p v-for=\"child in children\">{{child.title}}</p>\n</template>\n```\n两者不同级时，渲染函数入下\n```js\nƒ anonymous(\n) {\nwith(this){return _c('div',{attrs:{\"id\":\"demo\"}},[(isFolder)?_l((children),function(child){return _c('p',[_v(_s(child.title))])}):_e()],2)}\n}\n```\n> 先判断了isFolder再看是否执行-l\n\n**结论**\n\n1. 显然v-for优先于v-if被解析\n2. 如果同时出现，每次渲染都会先执行循环再判断条件，无论如何，循环都不可避免，浪费了性能\n3. 要避免出现这种情况，可以在外层嵌套template,然后在这一层进行v-if判断，然后在内部进行v-for循环\n4. 如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/Vue中v-if和v-for的优先级","published":1,"updated":"2020-07-11T15:18:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj531001b1r0q22fv0upe","content":"<p>v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化才能得到更好的性能？</p>\n<a id=\"more\"></a>\n\n<p>当v-if和v-for同级的时候，我们写一个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"child in children\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"isFolder\"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app=<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el:<span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">            data()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">                    children:[</span><br><span class=\"line\"><span class=\"actionscript\">                        &#123;title:<span class=\"string\">'foo'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                        &#123;title:<span class=\"string\">'bar'</span>&#125;</span></span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            computed:&#123;</span><br><span class=\"line\">                isFolder()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children&amp;&amp;<span class=\"keyword\">this</span>.children.length&gt;<span class=\"number\">0</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(app.$options.render)</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>生成的渲染函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ anonymous(</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"demo\"</span>&#125;&#125;,_l((children),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;<span class=\"keyword\">return</span> (isFolder)?_c(<span class=\"string\">'p'</span>,[_v(_s(child.title))]):_e()&#125;),<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样我们可以看出来是循环先执行，isFolder判断后执行</p>\n</blockquote>\n<p>当v-if和v-for不同级的时候，我们先调整下dom区域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">'isFolder'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"child in children\"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>两者不同级时，渲染函数入下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ anonymous(</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"demo\"</span>&#125;&#125;,[(isFolder)?_l((children),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(_s(child.title))])&#125;):_e()],<span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先判断了isFolder再看是否执行-l</p>\n</blockquote>\n<p><strong>结论</strong></p>\n<ol>\n<li>显然v-for优先于v-if被解析</li>\n<li>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何，循环都不可避免，浪费了性能</li>\n<li>要避免出现这种情况，可以在外层嵌套template,然后在这一层进行v-if判断，然后在内部进行v-for循环</li>\n<li>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</li>\n</ol>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化才能得到更好的性能？</p>","more":"<p>当v-if和v-for同级的时候，我们写一个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"child in children\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"isFolder\"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> app=<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el:<span class=\"string\">\"#demo\"</span>,</span></span><br><span class=\"line\">            data()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">                    children:[</span><br><span class=\"line\"><span class=\"actionscript\">                        &#123;title:<span class=\"string\">'foo'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                        &#123;title:<span class=\"string\">'bar'</span>&#125;</span></span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            computed:&#123;</span><br><span class=\"line\">                isFolder()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children&amp;&amp;<span class=\"keyword\">this</span>.children.length&gt;<span class=\"number\">0</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(app.$options.render)</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>生成的渲染函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ anonymous(</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"demo\"</span>&#125;&#125;,_l((children),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;<span class=\"keyword\">return</span> (isFolder)?_c(<span class=\"string\">'p'</span>,[_v(_s(child.title))]):_e()&#125;),<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样我们可以看出来是循环先执行，isFolder判断后执行</p>\n</blockquote>\n<p>当v-if和v-for不同级的时候，我们先调整下dom区域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">'isFolder'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"child in children\"</span>&gt;</span>&#123;&#123;child.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>两者不同级时，渲染函数入下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ anonymous(</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"demo\"</span>&#125;&#125;,[(isFolder)?_l((children),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(_s(child.title))])&#125;):_e()],<span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先判断了isFolder再看是否执行-l</p>\n</blockquote>\n<p><strong>结论</strong></p>\n<ol>\n<li>显然v-for优先于v-if被解析</li>\n<li>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何，循环都不可避免，浪费了性能</li>\n<li>要避免出现这种情况，可以在外层嵌套template,然后在这一层进行v-if判断，然后在内部进行v-for循环</li>\n<li>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</li>\n</ol>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"Vue中路由守卫","date":"2020-06-02T13:48:44.000Z","description":null,"_content":"\nVue中路由守卫的详细用法\n\n<!-- more -->\n\n# 路由守卫\n\n`vue-router` 提供的导航守卫主要是用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局，单个路由独享，或者组件级\n\n## 全局守卫\n\n```js\nrouter.beforeEach((to,from,next) => {\n    //...\n    //to:Route:即将要进入的目标，路由对象\n    //from:Route:当前导航正要离开的路由\n    //next:Function:一定要调用该方法来 resolve 这个钩子 \n})\n```\n\n范例\n\n```js\nconst routes=[\n    {\n        path: '/',\n        component:  component: () => import('@/views/home.vue'),\n        meta: {\n            auth: true//限制home要登录\n        }\n    },\n    {\n        path: '/login',\n        component:  component: () => import('@/views/login.vue'),\n    }\n]\n\n......\n\nrouter.beforeEach((to,from,next) => {\n    //判断路由是否需要守卫\n    //meta数据\n    if(to.meta.auth){\n        //是否登录\n        if(window.isLogin){//登录了就直接跳转\n            next()\n        }else{//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面\n            next('/login?redirect='+to.fullPath)\n        }\n    }\n    else{\n        next()\n    }\n})\n```\n\n## 单个路由守卫\n\n范例\n\n```js\nconst routes=[\n    {\n        path: '/',\n        component:  component: () => import('@/views/home.vue'),\n        meta: {\n            auth: true//限制home要登录\n        },\n        beforeEnter(to,from,next){\n            //是否登录\n            if(window.isLogin){//登录了就直接跳转\n                next()\n            }else{//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面\n                next('/login?redirect='+to.fullPath)\n            }\n        }\n]\n```\n\n## 组件内守卫\n\n可以在路由组件内直接定义以下导航守卫\n\n- beforeRouteEnter\n- beforeRouteUpdate\n- beforeRouteLeave\n\n范例\n\n``` js\n//About.vue\nmounted(){...},\nmethods:{...},\nbeforeRouteEnter(to,from,next){\n    if(window.isLogin){//登录了就直接跳转\n            next()\n    }else{//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面\n        next('/login?redirect='+to.fullPath)\n    }\n}\n```\n\n## 动态路由\n\n通过router.addRoutes(routes)方式动态添加路由\n\n```js\n// 全局守卫修改为：要求用户必须登录，否则只能去登录页\nrouter.beforeEach((to, from, next) => {\n    if (window.isLogin) {\n        if (to.path === '/login') {\n            next('/')\n        } else {\n            next()\n        }\n    } else {\n        if (to.path === '/login') {\n            next()\n        } else {\n            next('/login?redirect=' + to.fullPath)\n        }\n    }\n})\n```\n```js\n// Login.vue用户登录成功后动态添加/about\nlogin() {\n    window.isLogin = true;\n    this.$router.addRoutes([\n    {\n    path: \"/about\", //...\n    }\n    ]);\n    const redirect = this.$route.query.redirect || \"/\";\n    this.$router.push(redirect);\n}\n```\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/06/Vue中路由守卫.md","raw":"---\ntitle: Vue中路由守卫\ndate: 2020-06-02 21:48:44\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\nVue中路由守卫的详细用法\n\n<!-- more -->\n\n# 路由守卫\n\n`vue-router` 提供的导航守卫主要是用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局，单个路由独享，或者组件级\n\n## 全局守卫\n\n```js\nrouter.beforeEach((to,from,next) => {\n    //...\n    //to:Route:即将要进入的目标，路由对象\n    //from:Route:当前导航正要离开的路由\n    //next:Function:一定要调用该方法来 resolve 这个钩子 \n})\n```\n\n范例\n\n```js\nconst routes=[\n    {\n        path: '/',\n        component:  component: () => import('@/views/home.vue'),\n        meta: {\n            auth: true//限制home要登录\n        }\n    },\n    {\n        path: '/login',\n        component:  component: () => import('@/views/login.vue'),\n    }\n]\n\n......\n\nrouter.beforeEach((to,from,next) => {\n    //判断路由是否需要守卫\n    //meta数据\n    if(to.meta.auth){\n        //是否登录\n        if(window.isLogin){//登录了就直接跳转\n            next()\n        }else{//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面\n            next('/login?redirect='+to.fullPath)\n        }\n    }\n    else{\n        next()\n    }\n})\n```\n\n## 单个路由守卫\n\n范例\n\n```js\nconst routes=[\n    {\n        path: '/',\n        component:  component: () => import('@/views/home.vue'),\n        meta: {\n            auth: true//限制home要登录\n        },\n        beforeEnter(to,from,next){\n            //是否登录\n            if(window.isLogin){//登录了就直接跳转\n                next()\n            }else{//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面\n                next('/login?redirect='+to.fullPath)\n            }\n        }\n]\n```\n\n## 组件内守卫\n\n可以在路由组件内直接定义以下导航守卫\n\n- beforeRouteEnter\n- beforeRouteUpdate\n- beforeRouteLeave\n\n范例\n\n``` js\n//About.vue\nmounted(){...},\nmethods:{...},\nbeforeRouteEnter(to,from,next){\n    if(window.isLogin){//登录了就直接跳转\n            next()\n    }else{//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面\n        next('/login?redirect='+to.fullPath)\n    }\n}\n```\n\n## 动态路由\n\n通过router.addRoutes(routes)方式动态添加路由\n\n```js\n// 全局守卫修改为：要求用户必须登录，否则只能去登录页\nrouter.beforeEach((to, from, next) => {\n    if (window.isLogin) {\n        if (to.path === '/login') {\n            next('/')\n        } else {\n            next()\n        }\n    } else {\n        if (to.path === '/login') {\n            next()\n        } else {\n            next('/login?redirect=' + to.fullPath)\n        }\n    }\n})\n```\n```js\n// Login.vue用户登录成功后动态添加/about\nlogin() {\n    window.isLogin = true;\n    this.$router.addRoutes([\n    {\n    path: \"/about\", //...\n    }\n    ]);\n    const redirect = this.$route.query.redirect || \"/\";\n    this.$router.push(redirect);\n}\n```\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/06/Vue中路由守卫","published":1,"updated":"2020-07-11T15:20:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj532001e1r0qg99i7946","content":"<p>Vue中路由守卫的详细用法</p>\n<a id=\"more\"></a>\n\n<h1 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h1><p><code>vue-router</code> 提供的导航守卫主要是用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局，单个路由独享，或者组件级</p>\n<h2 id=\"全局守卫\"><a href=\"#全局守卫\" class=\"headerlink\" title=\"全局守卫\"></a>全局守卫</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">//to:Route:即将要进入的目标，路由对象</span></span><br><span class=\"line\">    <span class=\"comment\">//from:Route:当前导航正要离开的路由</span></span><br><span class=\"line\">    <span class=\"comment\">//next:Function:一定要调用该方法来 resolve 这个钩子 </span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>范例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes=[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        component:  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/home.vue'</span>),</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">            auth: <span class=\"literal\">true</span><span class=\"comment\">//限制home要登录</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">        component:  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/login.vue'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断路由是否需要守卫</span></span><br><span class=\"line\">    <span class=\"comment\">//meta数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.meta.auth)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//是否登录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.isLogin)&#123;<span class=\"comment\">//登录了就直接跳转</span></span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class=\"line\">            next(<span class=\"string\">'/login?redirect='</span>+to.fullPath)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单个路由守卫\"><a href=\"#单个路由守卫\" class=\"headerlink\" title=\"单个路由守卫\"></a>单个路由守卫</h2><p>范例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes=[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        component:  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/home.vue'</span>),</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">            auth: <span class=\"literal\">true</span><span class=\"comment\">//限制home要登录</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeEnter(to,<span class=\"keyword\">from</span>,next)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是否登录</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.isLogin)&#123;<span class=\"comment\">//登录了就直接跳转</span></span><br><span class=\"line\">                next()</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class=\"line\">                next(<span class=\"string\">'/login?redirect='</span>+to.fullPath)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件内守卫\"><a href=\"#组件内守卫\" class=\"headerlink\" title=\"组件内守卫\"></a>组件内守卫</h2><p>可以在路由组件内直接定义以下导航守卫</p>\n<ul>\n<li>beforeRouteEnter</li>\n<li>beforeRouteUpdate</li>\n<li>beforeRouteLeave</li>\n</ul>\n<p>范例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//About.vue</span></span><br><span class=\"line\">mounted()&#123;...&#125;,</span><br><span class=\"line\">methods:&#123;...&#125;,</span><br><span class=\"line\">beforeRouteEnter(to,<span class=\"keyword\">from</span>,next)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.isLogin)&#123;<span class=\"comment\">//登录了就直接跳转</span></span><br><span class=\"line\">            next()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class=\"line\">        next(<span class=\"string\">'/login?redirect='</span>+to.fullPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>通过router.addRoutes(routes)方式动态添加路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局守卫修改为：要求用户必须登录，否则只能去登录页</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.isLogin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to.path === <span class=\"string\">'/login'</span>) &#123;</span><br><span class=\"line\">            next(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to.path === <span class=\"string\">'/login'</span>) &#123;</span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            next(<span class=\"string\">'/login?redirect='</span> + to.fullPath)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Login.vue用户登录成功后动态添加/about</span></span><br><span class=\"line\">login() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.isLogin = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.addRoutes([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/about\"</span>, <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> redirect = <span class=\"keyword\">this</span>.$route.query.redirect || <span class=\"string\">\"/\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.push(redirect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>Vue中路由守卫的详细用法</p>","more":"<h1 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h1><p><code>vue-router</code> 提供的导航守卫主要是用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局，单个路由独享，或者组件级</p>\n<h2 id=\"全局守卫\"><a href=\"#全局守卫\" class=\"headerlink\" title=\"全局守卫\"></a>全局守卫</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">//to:Route:即将要进入的目标，路由对象</span></span><br><span class=\"line\">    <span class=\"comment\">//from:Route:当前导航正要离开的路由</span></span><br><span class=\"line\">    <span class=\"comment\">//next:Function:一定要调用该方法来 resolve 这个钩子 </span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>范例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes=[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        component:  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/home.vue'</span>),</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">            auth: <span class=\"literal\">true</span><span class=\"comment\">//限制home要登录</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">        component:  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/login.vue'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断路由是否需要守卫</span></span><br><span class=\"line\">    <span class=\"comment\">//meta数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.meta.auth)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//是否登录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.isLogin)&#123;<span class=\"comment\">//登录了就直接跳转</span></span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class=\"line\">            next(<span class=\"string\">'/login?redirect='</span>+to.fullPath)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单个路由守卫\"><a href=\"#单个路由守卫\" class=\"headerlink\" title=\"单个路由守卫\"></a>单个路由守卫</h2><p>范例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes=[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        component:  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/home.vue'</span>),</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">            auth: <span class=\"literal\">true</span><span class=\"comment\">//限制home要登录</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeEnter(to,<span class=\"keyword\">from</span>,next)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是否登录</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.isLogin)&#123;<span class=\"comment\">//登录了就直接跳转</span></span><br><span class=\"line\">                next()</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class=\"line\">                next(<span class=\"string\">'/login?redirect='</span>+to.fullPath)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件内守卫\"><a href=\"#组件内守卫\" class=\"headerlink\" title=\"组件内守卫\"></a>组件内守卫</h2><p>可以在路由组件内直接定义以下导航守卫</p>\n<ul>\n<li>beforeRouteEnter</li>\n<li>beforeRouteUpdate</li>\n<li>beforeRouteLeave</li>\n</ul>\n<p>范例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//About.vue</span></span><br><span class=\"line\">mounted()&#123;...&#125;,</span><br><span class=\"line\">methods:&#123;...&#125;,</span><br><span class=\"line\">beforeRouteEnter(to,<span class=\"keyword\">from</span>,next)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.isLogin)&#123;<span class=\"comment\">//登录了就直接跳转</span></span><br><span class=\"line\">            next()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//未登录就去登录页 ？后面是为了登陆后重定向回当前的页面</span></span><br><span class=\"line\">        next(<span class=\"string\">'/login?redirect='</span>+to.fullPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>通过router.addRoutes(routes)方式动态添加路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局守卫修改为：要求用户必须登录，否则只能去登录页</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.isLogin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to.path === <span class=\"string\">'/login'</span>) &#123;</span><br><span class=\"line\">            next(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to.path === <span class=\"string\">'/login'</span>) &#123;</span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            next(<span class=\"string\">'/login?redirect='</span> + to.fullPath)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Login.vue用户登录成功后动态添加/about</span></span><br><span class=\"line\">login() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.isLogin = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.addRoutes([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/about\"</span>, <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> redirect = <span class=\"keyword\">this</span>.$route.query.redirect || <span class=\"string\">\"/\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.push(redirect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"BFC布局","date":"2020-12-07T06:09:51.000Z","description":null,"_content":"\n这篇文章主要介绍的是关于块格式化上下文（Block Formatting Context），也就是大家俗称的BFC。你可能从未听说过这个术语，但只要你曾经使用过CSS布局，你就可能知道它是什么。理解BFC是什么，它有什么功能，以及如何创建一个BFC是非常有用的，这些能帮助你更好的理解CSS布局。\n\n<!-- more -->\n\n# 什么是BFC\n\n通过一个简单的float布局示例就能很好的理解BFC的行为。在下面的示例中，我们创建了一个盒子（其实在CSS中，每个元素都是一个盒子），这个盒子中包含了一个设置了浮动的图片和一段文本。如果有足够多的文本内容的时候，文本会围绕着图片（把整个图片包裹起来。\n\n```html\n<!-- html -->\n<div class=\"outer\">\n    <div class=\"float\">I am a floated element.</div>\n    I am text inside the\n        <!-- outer box.If there is enough text \n    then the text will wrap around the floated element.\n    The border on the outer will then wrap around the text. -->\n</div>\n```\n\n```css\n/* css */\n.outer {\n    border: 3px dotted red;\n    border-radius: 5px;\n    width: 400px;\n    padding: 10px;\n    margin-bottom: 40px;\n}\n\n.float {\n    padding: 10px;\n    border: 3px solid teal;\n    border-radius: 3px;\n    background-color:skyblue;\n    color: #fff;\n    float: left;\n    width: 200px;\n    margin: 0 20px 0 0;\n}\n```\n\n{% asset_img 1.png  %}\n\n如果在上面的基础上删除一些文本，就没有足够的文本去围绕图片，同时由于浮动元素脱离文档流，盒子元素的边框高度就会随着文本的减少而降低（常被理解为元素浮动之后使得其父元素坍塌）。\n\n{% asset_img 2.png  %}\n\n之所以会这样，是因为当一个元素浮动时，盒子依然保持原来的宽度，使文本所占的空间缩短了,才给浮动的元素腾出位置，这就是为什么背景和边框都能够看起来包裹住了浮动的元素。\n\n有两种方案可以解决这个布局问题。\n- 一种是使用`clearfix`黑魔法，就是在文本和浮动元素的下面加一个元素，比如`div`，并将`clear`属性设置为`both`\n\n```html\n<!-- html -->\n<div class=\"outer\">\n    <div class=\"float\">I am a floated element.</div>\n    I am text inside the\n    <div class=\"clear\"></div>\n        <!-- outer box.If there is enough text \n    then the text will wrap around the floated element.\n    The border on the outer will then wrap around the text. -->\n</div>\n```\n```css\n.clear{\n    clear:both\n}\n```\n\n\n- 另一种方法就是使用`overflow`属性，把它设置为非`visible`的值。\n\n```html\n<div class=\"outer\">\n    <div class=\"float\">I am a floated element.</div>\n    I am text inside the\n</div>\n```\n```css\n.outer{\n    ...\n    overflow:auto;/* 补上这个属性 */\n}\n```\n使用`overflow:auto`后盒子就能包裹浮动元素。\n\n{% asset_img 3.png  %}\n\n`overflow`之所以能够有效是因为它的值是非`visible`时会创建一个BFC，而BFC的特性就是包裹浮动元素\n\n> 使用Clearfix黑魔法时，除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after。其实也就是大家常说的清除浮动.\n\n# 清除浮动\n\n除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after\n\n## 使用伪元素 ::after\n\n```css\n.outer::after{\n    content: \"\";\n    display: block;\n    clear: both;\n}\n```\n\n## 使用伪类 :after\n\n```css\n.outer:after{\n    content:\"\";\n    display:block;\n    clear:both;\n}\n```\n> 该方法在 ie6、7 中无效，需要对 .outer 设置 zoom:1\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/12/BFC布局.md","raw":"---\ntitle: BFC布局\ndate: 2020-12-7 14:09:51\ntags:\n    - css\ncategories:\n    - css\ndescription:\n---\n\n这篇文章主要介绍的是关于块格式化上下文（Block Formatting Context），也就是大家俗称的BFC。你可能从未听说过这个术语，但只要你曾经使用过CSS布局，你就可能知道它是什么。理解BFC是什么，它有什么功能，以及如何创建一个BFC是非常有用的，这些能帮助你更好的理解CSS布局。\n\n<!-- more -->\n\n# 什么是BFC\n\n通过一个简单的float布局示例就能很好的理解BFC的行为。在下面的示例中，我们创建了一个盒子（其实在CSS中，每个元素都是一个盒子），这个盒子中包含了一个设置了浮动的图片和一段文本。如果有足够多的文本内容的时候，文本会围绕着图片（把整个图片包裹起来。\n\n```html\n<!-- html -->\n<div class=\"outer\">\n    <div class=\"float\">I am a floated element.</div>\n    I am text inside the\n        <!-- outer box.If there is enough text \n    then the text will wrap around the floated element.\n    The border on the outer will then wrap around the text. -->\n</div>\n```\n\n```css\n/* css */\n.outer {\n    border: 3px dotted red;\n    border-radius: 5px;\n    width: 400px;\n    padding: 10px;\n    margin-bottom: 40px;\n}\n\n.float {\n    padding: 10px;\n    border: 3px solid teal;\n    border-radius: 3px;\n    background-color:skyblue;\n    color: #fff;\n    float: left;\n    width: 200px;\n    margin: 0 20px 0 0;\n}\n```\n\n{% asset_img 1.png  %}\n\n如果在上面的基础上删除一些文本，就没有足够的文本去围绕图片，同时由于浮动元素脱离文档流，盒子元素的边框高度就会随着文本的减少而降低（常被理解为元素浮动之后使得其父元素坍塌）。\n\n{% asset_img 2.png  %}\n\n之所以会这样，是因为当一个元素浮动时，盒子依然保持原来的宽度，使文本所占的空间缩短了,才给浮动的元素腾出位置，这就是为什么背景和边框都能够看起来包裹住了浮动的元素。\n\n有两种方案可以解决这个布局问题。\n- 一种是使用`clearfix`黑魔法，就是在文本和浮动元素的下面加一个元素，比如`div`，并将`clear`属性设置为`both`\n\n```html\n<!-- html -->\n<div class=\"outer\">\n    <div class=\"float\">I am a floated element.</div>\n    I am text inside the\n    <div class=\"clear\"></div>\n        <!-- outer box.If there is enough text \n    then the text will wrap around the floated element.\n    The border on the outer will then wrap around the text. -->\n</div>\n```\n```css\n.clear{\n    clear:both\n}\n```\n\n\n- 另一种方法就是使用`overflow`属性，把它设置为非`visible`的值。\n\n```html\n<div class=\"outer\">\n    <div class=\"float\">I am a floated element.</div>\n    I am text inside the\n</div>\n```\n```css\n.outer{\n    ...\n    overflow:auto;/* 补上这个属性 */\n}\n```\n使用`overflow:auto`后盒子就能包裹浮动元素。\n\n{% asset_img 3.png  %}\n\n`overflow`之所以能够有效是因为它的值是非`visible`时会创建一个BFC，而BFC的特性就是包裹浮动元素\n\n> 使用Clearfix黑魔法时，除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after。其实也就是大家常说的清除浮动.\n\n# 清除浮动\n\n除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after\n\n## 使用伪元素 ::after\n\n```css\n.outer::after{\n    content: \"\";\n    display: block;\n    clear: both;\n}\n```\n\n## 使用伪类 :after\n\n```css\n.outer:after{\n    content:\"\";\n    display:block;\n    clear:both;\n}\n```\n> 该方法在 ie6、7 中无效，需要对 .outer 设置 zoom:1\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/12/BFC布局","published":1,"updated":"2020-12-11T06:34:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj532001j1r0qdu98ftxq","content":"<p>这篇文章主要介绍的是关于块格式化上下文（Block Formatting Context），也就是大家俗称的BFC。你可能从未听说过这个术语，但只要你曾经使用过CSS布局，你就可能知道它是什么。理解BFC是什么，它有什么功能，以及如何创建一个BFC是非常有用的，这些能帮助你更好的理解CSS布局。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"什么是BFC\"><a href=\"#什么是BFC\" class=\"headerlink\" title=\"什么是BFC\"></a>什么是BFC</h1><p>通过一个简单的float布局示例就能很好的理解BFC的行为。在下面的示例中，我们创建了一个盒子（其实在CSS中，每个元素都是一个盒子），这个盒子中包含了一个设置了浮动的图片和一段文本。如果有足够多的文本内容的时候，文本会围绕着图片（把整个图片包裹起来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>I am a floated element.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    I am text inside the</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- outer box.If there is enough text </span></span><br><span class=\"line\"><span class=\"comment\">    then the text will wrap around the floated element.</span></span><br><span class=\"line\"><span class=\"comment\">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* css */</span></span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> dotted red;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid teal;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:skyblue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/12/BFC%E5%B8%83%E5%B1%80/1.png\" class=\"\">\n\n<p>如果在上面的基础上删除一些文本，就没有足够的文本去围绕图片，同时由于浮动元素脱离文档流，盒子元素的边框高度就会随着文本的减少而降低（常被理解为元素浮动之后使得其父元素坍塌）。</p>\n<img src=\"/2020/12/BFC%E5%B8%83%E5%B1%80/2.png\" class=\"\">\n\n<p>之所以会这样，是因为当一个元素浮动时，盒子依然保持原来的宽度，使文本所占的空间缩短了,才给浮动的元素腾出位置，这就是为什么背景和边框都能够看起来包裹住了浮动的元素。</p>\n<p>有两种方案可以解决这个布局问题。</p>\n<ul>\n<li>一种是使用<code>clearfix</code>黑魔法，就是在文本和浮动元素的下面加一个元素，比如<code>div</code>，并将<code>clear</code>属性设置为<code>both</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>I am a floated element.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    I am text inside the</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clear\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- outer box.If there is enough text </span></span><br><span class=\"line\"><span class=\"comment\">    then the text will wrap around the floated element.</span></span><br><span class=\"line\"><span class=\"comment\">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>另一种方法就是使用<code>overflow</code>属性，把它设置为非<code>visible</code>的值。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>I am a floated element.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    I am text inside the</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:auto</span>;<span class=\"comment\">/* 补上这个属性 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>overflow:auto</code>后盒子就能包裹浮动元素。</p>\n<img src=\"/2020/12/BFC%E5%B8%83%E5%B1%80/3.png\" class=\"\">\n\n<p><code>overflow</code>之所以能够有效是因为它的值是非<code>visible</code>时会创建一个BFC，而BFC的特性就是包裹浮动元素</p>\n<blockquote>\n<p>使用Clearfix黑魔法时，除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after。其实也就是大家常说的清除浮动.</p>\n</blockquote>\n<h1 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h1><p>除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after</p>\n<h2 id=\"使用伪元素-after\"><a href=\"#使用伪元素-after\" class=\"headerlink\" title=\"使用伪元素 ::after\"></a>使用伪元素 ::after</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用伪类-after\"><a href=\"#使用伪类-after\" class=\"headerlink\" title=\"使用伪类 :after\"></a>使用伪类 :after</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该方法在 ie6、7 中无效，需要对 .outer 设置 zoom:1</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>这篇文章主要介绍的是关于块格式化上下文（Block Formatting Context），也就是大家俗称的BFC。你可能从未听说过这个术语，但只要你曾经使用过CSS布局，你就可能知道它是什么。理解BFC是什么，它有什么功能，以及如何创建一个BFC是非常有用的，这些能帮助你更好的理解CSS布局。</p>","more":"<h1 id=\"什么是BFC\"><a href=\"#什么是BFC\" class=\"headerlink\" title=\"什么是BFC\"></a>什么是BFC</h1><p>通过一个简单的float布局示例就能很好的理解BFC的行为。在下面的示例中，我们创建了一个盒子（其实在CSS中，每个元素都是一个盒子），这个盒子中包含了一个设置了浮动的图片和一段文本。如果有足够多的文本内容的时候，文本会围绕着图片（把整个图片包裹起来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>I am a floated element.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    I am text inside the</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- outer box.If there is enough text </span></span><br><span class=\"line\"><span class=\"comment\">    then the text will wrap around the floated element.</span></span><br><span class=\"line\"><span class=\"comment\">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* css */</span></span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> dotted red;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid teal;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:skyblue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/12/BFC%E5%B8%83%E5%B1%80/1.png\" class=\"\">\n\n<p>如果在上面的基础上删除一些文本，就没有足够的文本去围绕图片，同时由于浮动元素脱离文档流，盒子元素的边框高度就会随着文本的减少而降低（常被理解为元素浮动之后使得其父元素坍塌）。</p>\n<img src=\"/2020/12/BFC%E5%B8%83%E5%B1%80/2.png\" class=\"\">\n\n<p>之所以会这样，是因为当一个元素浮动时，盒子依然保持原来的宽度，使文本所占的空间缩短了,才给浮动的元素腾出位置，这就是为什么背景和边框都能够看起来包裹住了浮动的元素。</p>\n<p>有两种方案可以解决这个布局问题。</p>\n<ul>\n<li>一种是使用<code>clearfix</code>黑魔法，就是在文本和浮动元素的下面加一个元素，比如<code>div</code>，并将<code>clear</code>属性设置为<code>both</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>I am a floated element.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    I am text inside the</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clear\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- outer box.If there is enough text </span></span><br><span class=\"line\"><span class=\"comment\">    then the text will wrap around the floated element.</span></span><br><span class=\"line\"><span class=\"comment\">    The border on the outer will then wrap around the text. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>另一种方法就是使用<code>overflow</code>属性，把它设置为非<code>visible</code>的值。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>I am a floated element.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    I am text inside the</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:auto</span>;<span class=\"comment\">/* 补上这个属性 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>overflow:auto</code>后盒子就能包裹浮动元素。</p>\n<img src=\"/2020/12/BFC%E5%B8%83%E5%B1%80/3.png\" class=\"\">\n\n<p><code>overflow</code>之所以能够有效是因为它的值是非<code>visible</code>时会创建一个BFC，而BFC的特性就是包裹浮动元素</p>\n<blockquote>\n<p>使用Clearfix黑魔法时，除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after。其实也就是大家常说的清除浮动.</p>\n</blockquote>\n<h1 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h1><p>除了在浮动的元素和文本最下面插入一个元素之外，更简单，也是最为经典的方式是使用CSS的伪元素::after或伪类:after</p>\n<h2 id=\"使用伪元素-after\"><a href=\"#使用伪元素-after\" class=\"headerlink\" title=\"使用伪元素 ::after\"></a>使用伪元素 ::after</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用伪类-after\"><a href=\"#使用伪类-after\" class=\"headerlink\" title=\"使用伪类 :after\"></a>使用伪类 :after</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该方法在 ie6、7 中无效，需要对 .outer 设置 zoom:1</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"苹果手机自定义siri回答","date":"2020-07-11T13:34:31.000Z","description":null,"_content":"\n前几天抖音上看到一个在苹果店让siri叫老公的视频，相信不少小伙伴看完都偷偷对自己的siri试过吧。而且肯定也有不少小伙伴没有试出视频中的效果，这个是怎么做到的呢？看完这篇你就明白了。\n\n<!-- more -->\n\n# 第一步\n\n首先我们肯定要有一步苹果手机，然后打开**快捷指令**\n\n{% asset_img 1.jpg [第一步] %}\n\n# 第二步\n\n点击创建快捷指令\n\n{% asset_img 2.jpg [第二步] %}\n\n# 第三步\n\n添加操作，并搜索**显示提醒**，选中最下方的**显示提醒**\n\n{% asset_img 3.jpg [第三步] %}\n\n# 第四步\n\n修改图中**信息**部分为你希望siri回应的内容，然后点击下一步\n\n{% asset_img 4.jpg [设置回复内容] %}\n\n例如我可以设置成这样\n\n{% asset_img 5.jpg [肯定是我最帅了] %}\n\n> 记得将下方的显示取消按钮设置成图中状态\n\n# 第五步\n\n设置触发我们设置好的回复内容的关键词语，然后点击完成\n\n{% asset_img 6.jpg [第五步] %}\n\n例如我设置的**谁是世界上最帅的男人**\n\n{% asset_img 7.jpg [别问，问就是我最帅] %}\n\n# 第六步\n\n接下来我们就可以和siri一起愉快的玩耍啦~~~\n\n{% asset_img 8.jpg [我帅吧] %}\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/苹果手机自定义siri回答.md","raw":"---\ntitle: 苹果手机自定义siri回答\ndate: 2020-07-11 21:34:31\ntags:\n    - 闲谈\ncategories:\n    - 闲谈\ndescription:\n---\n\n前几天抖音上看到一个在苹果店让siri叫老公的视频，相信不少小伙伴看完都偷偷对自己的siri试过吧。而且肯定也有不少小伙伴没有试出视频中的效果，这个是怎么做到的呢？看完这篇你就明白了。\n\n<!-- more -->\n\n# 第一步\n\n首先我们肯定要有一步苹果手机，然后打开**快捷指令**\n\n{% asset_img 1.jpg [第一步] %}\n\n# 第二步\n\n点击创建快捷指令\n\n{% asset_img 2.jpg [第二步] %}\n\n# 第三步\n\n添加操作，并搜索**显示提醒**，选中最下方的**显示提醒**\n\n{% asset_img 3.jpg [第三步] %}\n\n# 第四步\n\n修改图中**信息**部分为你希望siri回应的内容，然后点击下一步\n\n{% asset_img 4.jpg [设置回复内容] %}\n\n例如我可以设置成这样\n\n{% asset_img 5.jpg [肯定是我最帅了] %}\n\n> 记得将下方的显示取消按钮设置成图中状态\n\n# 第五步\n\n设置触发我们设置好的回复内容的关键词语，然后点击完成\n\n{% asset_img 6.jpg [第五步] %}\n\n例如我设置的**谁是世界上最帅的男人**\n\n{% asset_img 7.jpg [别问，问就是我最帅] %}\n\n# 第六步\n\n接下来我们就可以和siri一起愉快的玩耍啦~~~\n\n{% asset_img 8.jpg [我帅吧] %}\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/苹果手机自定义siri回答","published":1,"updated":"2020-07-11T15:17:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj537001m1r0q050oaalf","content":"<p>前几天抖音上看到一个在苹果店让siri叫老公的视频，相信不少小伙伴看完都偷偷对自己的siri试过吧。而且肯定也有不少小伙伴没有试出视频中的效果，这个是怎么做到的呢？看完这篇你就明白了。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h1><p>首先我们肯定要有一步苹果手机，然后打开<strong>快捷指令</strong></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/1.jpg\" class=\"\" title=\"[第一步]\">\n\n<h1 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h1><p>点击创建快捷指令</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/2.jpg\" class=\"\" title=\"[第二步]\">\n\n<h1 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h1><p>添加操作，并搜索<strong>显示提醒</strong>，选中最下方的<strong>显示提醒</strong></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/3.jpg\" class=\"\" title=\"[第三步]\">\n\n<h1 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h1><p>修改图中<strong>信息</strong>部分为你希望siri回应的内容，然后点击下一步</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/4.jpg\" class=\"\" title=\"[设置回复内容]\">\n\n<p>例如我可以设置成这样</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/5.jpg\" class=\"\" title=\"[肯定是我最帅了]\">\n\n<blockquote>\n<p>记得将下方的显示取消按钮设置成图中状态</p>\n</blockquote>\n<h1 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h1><p>设置触发我们设置好的回复内容的关键词语，然后点击完成</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/6.jpg\" class=\"\" title=\"[第五步]\">\n\n<p>例如我设置的<strong>谁是世界上最帅的男人</strong></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/7.jpg\" class=\"\" title=\"[别问，问就是我最帅]\">\n\n<h1 id=\"第六步\"><a href=\"#第六步\" class=\"headerlink\" title=\"第六步\"></a>第六步</h1><p>接下来我们就可以和siri一起愉快的玩耍啦<del>~</del></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/8.jpg\" class=\"\" title=\"[我帅吧]\">\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>前几天抖音上看到一个在苹果店让siri叫老公的视频，相信不少小伙伴看完都偷偷对自己的siri试过吧。而且肯定也有不少小伙伴没有试出视频中的效果，这个是怎么做到的呢？看完这篇你就明白了。</p>","more":"<h1 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h1><p>首先我们肯定要有一步苹果手机，然后打开<strong>快捷指令</strong></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/1.jpg\" class=\"\" title=\"[第一步]\">\n\n<h1 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h1><p>点击创建快捷指令</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/2.jpg\" class=\"\" title=\"[第二步]\">\n\n<h1 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h1><p>添加操作，并搜索<strong>显示提醒</strong>，选中最下方的<strong>显示提醒</strong></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/3.jpg\" class=\"\" title=\"[第三步]\">\n\n<h1 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h1><p>修改图中<strong>信息</strong>部分为你希望siri回应的内容，然后点击下一步</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/4.jpg\" class=\"\" title=\"[设置回复内容]\">\n\n<p>例如我可以设置成这样</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/5.jpg\" class=\"\" title=\"[肯定是我最帅了]\">\n\n<blockquote>\n<p>记得将下方的显示取消按钮设置成图中状态</p>\n</blockquote>\n<h1 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h1><p>设置触发我们设置好的回复内容的关键词语，然后点击完成</p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/6.jpg\" class=\"\" title=\"[第五步]\">\n\n<p>例如我设置的<strong>谁是世界上最帅的男人</strong></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/7.jpg\" class=\"\" title=\"[别问，问就是我最帅]\">\n\n<h1 id=\"第六步\"><a href=\"#第六步\" class=\"headerlink\" title=\"第六步\"></a>第六步</h1><p>接下来我们就可以和siri一起愉快的玩耍啦<del>~</del></p>\n<img src=\"/2020/07/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89siri%E5%9B%9E%E7%AD%94/8.jpg\" class=\"\" title=\"[我帅吧]\">\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"圣杯布局&&双飞翼布局","date":"2020-12-04T00:55:26.000Z","description":null,"_content":"\n圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。\n\n<!-- more -->\n\n# 作用\n\n圣杯布局和双飞翼布局解决的问题是相同的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。\n\n# 区别\n\n- 圣杯布局：为了让中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。\n\n- 双飞翼布局：为了让中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该div里用margin-left和margin-right为左右两栏div留出位置。\n\n# 代码示例\n\n[详细代码点击这里去github查看](https://github.com/qytayh/common-css-layout)\n\n## 圣杯布局\n\n- 优点：不需要添加dom节点\n\n- 缺点：圣杯布局的缺点：正常情况下是没有问题的，但是部分情况下会出现页面变形的问题\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>圣杯布局</title>\n</head>\n<style>\n    .container {\n        padding: 0 100px 0 200px;/* 此段代码是为了摆正中间栏的位置 */\n        /* min-width: 600px; 不设置最小宽度  页面容易变形 */\n    }\n\n    .left {\n        width: 200px;\n        background: red;\n        /* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */\n        margin-left: -100%;\n        left: -200px;\n        /* 中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置 */\n    }\n    .right{\n        width: 100px;\n        background: blue;\n        margin-left: -100px;\n        right: -100px;\n        /* 中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置 */\n    }\n    .main{\n        width: 100%;\n        background: yellow;\n    }\n    .left,.main,.right{\n        float: left;\n        min-height: 200px;\n        position: relative;\n    }\n</style>\n\n<body>\n    <div class=\"container\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n\n</html>\n```\n\n> 圣杯布局总结：用父盒子的padding将中间栏挤到中间，并腾出地方给两边栏\n\n## 双飞翼\n\n- 优点：不会像圣杯布局那样变形\n\n- 缺点是：多加了一层dom节点\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>双飞翼</title>\n</head>\n<style>\n    .left,.main,.right{\n        min-height: 300px;\n        float: left;\n    }\n    .content{\n        /* 关键点：用margin把div挤到中间正常展示*/\n        margin: 0 100px 0 200px;\n    }\n    .left{\n        width: 200px;\n        background: green;\n        margin-left: -100%;\n    }\n    .main{\n        width: 100%;\n        background: red;\n    }\n    .right{\n        width: 100px;\n        background: blue;\n        margin-left: -100px;\n    }\n</style>\n\n<body>\n    <div class=\"container\">\n        <div class=\"main\">\n            <div class=\"content\">main</div>\n        </div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n\n</html>\n```\n\n> 双飞翼总结：中间的div外层用另一个div包裹了一下，然后利用 margin来把嵌套的div“挤”到中间\n\n## 使用其他方法实现中间栏div内容不被遮挡\n\n除了圣杯布局和双飞翼布局，我们还可以用别的方式实现同样的效果\n\n### 方案一\n\n使用`box-sizing:boder-box`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>其他方法实现中间栏div内容不被遮挡</title>\n</head>\n\n<style>\n    .container{\n        padding: 0 100px 0 200px;\n    }\n    .left,.main,.right{\n        float:left;\n        position: relative;\n        min-height: 200px;\n    }\n    .left{\n        background: lightgreen;\n        width: 200px;\n        /* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */\n        margin-left: -100%;\n        left: -200px;\n    }\n    .main{\n        background: lightpink;\n        width: 100%;\n        /* 关键点！！！ */\n        box-sizing: border-box;\n        padding: 0 100px 0 200px;\n    }\n    .right{\n        background: lightseagreen;\n        width: 100px;\n        margin-left: -100px;\n        right: -100px;\n    }\n</style>\n\n<body>\n    <div class=\"container\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n\n</html>\n```\n\n### 方案二\n\n利用flex\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>flex</title>\n</head>\n\n<style>\n    .container{\n        display: flex;\n        min-height: 300px;\n    }\n    .main {\n        flex-grow: 1;\n        background-color: mediumaquamarine;\n    }\n    .left{\n        flex-basis: 200px;\n        /* 固定宽度 */\n        background-color: mediumpurple;\n    }\n    .right{\n        flex-basis: 300px;\n        background-color: red;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left\">left</div>\n        <div class=\"main\">main</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n</html>\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/12/圣杯布局-双飞翼布局.md","raw":"---\ntitle: 圣杯布局&&双飞翼布局\ndate: 2020-12-4 08:55:26\ntags:\n    - css\ncategories:\n    - css\ndescription:\n---\n\n圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。\n\n<!-- more -->\n\n# 作用\n\n圣杯布局和双飞翼布局解决的问题是相同的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。\n\n# 区别\n\n- 圣杯布局：为了让中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。\n\n- 双飞翼布局：为了让中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该div里用margin-left和margin-right为左右两栏div留出位置。\n\n# 代码示例\n\n[详细代码点击这里去github查看](https://github.com/qytayh/common-css-layout)\n\n## 圣杯布局\n\n- 优点：不需要添加dom节点\n\n- 缺点：圣杯布局的缺点：正常情况下是没有问题的，但是部分情况下会出现页面变形的问题\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>圣杯布局</title>\n</head>\n<style>\n    .container {\n        padding: 0 100px 0 200px;/* 此段代码是为了摆正中间栏的位置 */\n        /* min-width: 600px; 不设置最小宽度  页面容易变形 */\n    }\n\n    .left {\n        width: 200px;\n        background: red;\n        /* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */\n        margin-left: -100%;\n        left: -200px;\n        /* 中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置 */\n    }\n    .right{\n        width: 100px;\n        background: blue;\n        margin-left: -100px;\n        right: -100px;\n        /* 中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置 */\n    }\n    .main{\n        width: 100%;\n        background: yellow;\n    }\n    .left,.main,.right{\n        float: left;\n        min-height: 200px;\n        position: relative;\n    }\n</style>\n\n<body>\n    <div class=\"container\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n\n</html>\n```\n\n> 圣杯布局总结：用父盒子的padding将中间栏挤到中间，并腾出地方给两边栏\n\n## 双飞翼\n\n- 优点：不会像圣杯布局那样变形\n\n- 缺点是：多加了一层dom节点\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>双飞翼</title>\n</head>\n<style>\n    .left,.main,.right{\n        min-height: 300px;\n        float: left;\n    }\n    .content{\n        /* 关键点：用margin把div挤到中间正常展示*/\n        margin: 0 100px 0 200px;\n    }\n    .left{\n        width: 200px;\n        background: green;\n        margin-left: -100%;\n    }\n    .main{\n        width: 100%;\n        background: red;\n    }\n    .right{\n        width: 100px;\n        background: blue;\n        margin-left: -100px;\n    }\n</style>\n\n<body>\n    <div class=\"container\">\n        <div class=\"main\">\n            <div class=\"content\">main</div>\n        </div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n\n</html>\n```\n\n> 双飞翼总结：中间的div外层用另一个div包裹了一下，然后利用 margin来把嵌套的div“挤”到中间\n\n## 使用其他方法实现中间栏div内容不被遮挡\n\n除了圣杯布局和双飞翼布局，我们还可以用别的方式实现同样的效果\n\n### 方案一\n\n使用`box-sizing:boder-box`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>其他方法实现中间栏div内容不被遮挡</title>\n</head>\n\n<style>\n    .container{\n        padding: 0 100px 0 200px;\n    }\n    .left,.main,.right{\n        float:left;\n        position: relative;\n        min-height: 200px;\n    }\n    .left{\n        background: lightgreen;\n        width: 200px;\n        /* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */\n        margin-left: -100%;\n        left: -200px;\n    }\n    .main{\n        background: lightpink;\n        width: 100%;\n        /* 关键点！！！ */\n        box-sizing: border-box;\n        padding: 0 100px 0 200px;\n    }\n    .right{\n        background: lightseagreen;\n        width: 100px;\n        margin-left: -100px;\n        right: -100px;\n    }\n</style>\n\n<body>\n    <div class=\"container\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n\n</html>\n```\n\n### 方案二\n\n利用flex\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>flex</title>\n</head>\n\n<style>\n    .container{\n        display: flex;\n        min-height: 300px;\n    }\n    .main {\n        flex-grow: 1;\n        background-color: mediumaquamarine;\n    }\n    .left{\n        flex-basis: 200px;\n        /* 固定宽度 */\n        background-color: mediumpurple;\n    }\n    .right{\n        flex-basis: 300px;\n        background-color: red;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left\">left</div>\n        <div class=\"main\">main</div>\n        <div class=\"right\">right</div>\n    </div>\n</body>\n</html>\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/12/圣杯布局-双飞翼布局","published":1,"updated":"2020-12-11T03:09:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53f001q1r0q2v2z75gx","content":"<p>圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>圣杯布局和双飞翼布局解决的问题是相同的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。</p>\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><ul>\n<li><p>圣杯布局：为了让中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</p>\n</li>\n<li><p>双飞翼布局：为了让中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该div里用margin-left和margin-right为左右两栏div留出位置。</p>\n</li>\n</ul>\n<h1 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h1><p><a href=\"https://github.com/qytayh/common-css-layout\" target=\"_blank\" rel=\"noopener\">详细代码点击这里去github查看</a></p>\n<h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><ul>\n<li><p>优点：不需要添加dom节点</p>\n</li>\n<li><p>缺点：圣杯布局的缺点：正常情况下是没有问题的，但是部分情况下会出现页面变形的问题</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>圣杯布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">padding</span>: 0 100<span class=\"selector-tag\">px</span> 0 200<span class=\"selector-tag\">px</span>;<span class=\"comment\">/* 此段代码是为了摆正中间栏的位置 */</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* min-width: 600px; 不设置最小宽度  页面容易变形 */</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class=\"line\">        margin-left: -100%;</span><br><span class=\"line\">        left: -200px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置 */</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        right: -100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置 */</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span>&#123;</span></span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        background: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>,<span class=\"selector-class\">.main</span>,<span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        min-height: 200px;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>圣杯布局总结：用父盒子的padding将中间栏挤到中间，并腾出地方给两边栏</p>\n</blockquote>\n<h2 id=\"双飞翼\"><a href=\"#双飞翼\" class=\"headerlink\" title=\"双飞翼\"></a>双飞翼</h2><ul>\n<li><p>优点：不会像圣杯布局那样变形</p>\n</li>\n<li><p>缺点是：多加了一层dom节点</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>双飞翼<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>,<span class=\"selector-class\">.main</span>,<span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        min-height: 300px;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.content</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点：用margin把div挤到中间正常展示*/</span></span></span><br><span class=\"line\">        margin: 0 100px 0 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: green;</span><br><span class=\"line\">        margin-left: -100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span>&#123;</span></span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>双飞翼总结：中间的div外层用另一个div包裹了一下，然后利用 margin来把嵌套的div“挤”到中间</p>\n</blockquote>\n<h2 id=\"使用其他方法实现中间栏div内容不被遮挡\"><a href=\"#使用其他方法实现中间栏div内容不被遮挡\" class=\"headerlink\" title=\"使用其他方法实现中间栏div内容不被遮挡\"></a>使用其他方法实现中间栏div内容不被遮挡</h2><p>除了圣杯布局和双飞翼布局，我们还可以用别的方式实现同样的效果</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>使用<code>box-sizing:boder-box</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>其他方法实现中间栏div内容不被遮挡<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span>&#123;</span></span><br><span class=\"line\">        padding: 0 100px 0 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>,<span class=\"selector-class\">.main</span>,<span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;</span></span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        min-height: 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">        background: lightgreen;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class=\"line\">        margin-left: -100%;</span><br><span class=\"line\">        left: -200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span>&#123;</span></span><br><span class=\"line\">        background: lightpink;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点！！！ */</span></span></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        padding: 0 100px 0 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        background: lightseagreen;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        right: -100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>利用flex</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>flex<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span>&#123;</span></span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        min-height: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\">        flex-grow: 1;</span><br><span class=\"line\">        background-color: mediumaquamarine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">        flex-basis: 200px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 固定宽度 */</span></span></span><br><span class=\"line\">        background-color: mediumpurple;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        flex-basis: 300px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。</p>","more":"<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>圣杯布局和双飞翼布局解决的问题是相同的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。</p>\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><ul>\n<li><p>圣杯布局：为了让中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</p>\n</li>\n<li><p>双飞翼布局：为了让中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该div里用margin-left和margin-right为左右两栏div留出位置。</p>\n</li>\n</ul>\n<h1 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h1><p><a href=\"https://github.com/qytayh/common-css-layout\" target=\"_blank\" rel=\"noopener\">详细代码点击这里去github查看</a></p>\n<h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><ul>\n<li><p>优点：不需要添加dom节点</p>\n</li>\n<li><p>缺点：圣杯布局的缺点：正常情况下是没有问题的，但是部分情况下会出现页面变形的问题</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>圣杯布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">padding</span>: 0 100<span class=\"selector-tag\">px</span> 0 200<span class=\"selector-tag\">px</span>;<span class=\"comment\">/* 此段代码是为了摆正中间栏的位置 */</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* min-width: 600px; 不设置最小宽度  页面容易变形 */</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class=\"line\">        margin-left: -100%;</span><br><span class=\"line\">        left: -200px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置 */</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        right: -100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置 */</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span>&#123;</span></span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        background: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>,<span class=\"selector-class\">.main</span>,<span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        min-height: 200px;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>圣杯布局总结：用父盒子的padding将中间栏挤到中间，并腾出地方给两边栏</p>\n</blockquote>\n<h2 id=\"双飞翼\"><a href=\"#双飞翼\" class=\"headerlink\" title=\"双飞翼\"></a>双飞翼</h2><ul>\n<li><p>优点：不会像圣杯布局那样变形</p>\n</li>\n<li><p>缺点是：多加了一层dom节点</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>双飞翼<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>,<span class=\"selector-class\">.main</span>,<span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        min-height: 300px;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.content</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点：用margin把div挤到中间正常展示*/</span></span></span><br><span class=\"line\">        margin: 0 100px 0 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: green;</span><br><span class=\"line\">        margin-left: -100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span>&#123;</span></span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>双飞翼总结：中间的div外层用另一个div包裹了一下，然后利用 margin来把嵌套的div“挤”到中间</p>\n</blockquote>\n<h2 id=\"使用其他方法实现中间栏div内容不被遮挡\"><a href=\"#使用其他方法实现中间栏div内容不被遮挡\" class=\"headerlink\" title=\"使用其他方法实现中间栏div内容不被遮挡\"></a>使用其他方法实现中间栏div内容不被遮挡</h2><p>除了圣杯布局和双飞翼布局，我们还可以用别的方式实现同样的效果</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>使用<code>box-sizing:boder-box</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>其他方法实现中间栏div内容不被遮挡<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span>&#123;</span></span><br><span class=\"line\">        padding: 0 100px 0 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>,<span class=\"selector-class\">.main</span>,<span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;</span></span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        min-height: 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">        background: lightgreen;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点：会让元素沿文档流向左移动，负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class=\"line\">        margin-left: -100%;</span><br><span class=\"line\">        left: -200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span>&#123;</span></span><br><span class=\"line\">        background: lightpink;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 关键点！！！ */</span></span></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        padding: 0 100px 0 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        background: lightseagreen;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        right: -100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>利用flex</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>flex<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span>&#123;</span></span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        min-height: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\">        flex-grow: 1;</span><br><span class=\"line\">        background-color: mediumaquamarine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">        flex-basis: 200px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* 固定宽度 */</span></span></span><br><span class=\"line\">        background-color: mediumpurple;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">        flex-basis: 300px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"Vue组件化","date":"2020-06-11T01:15:04.000Z","description":null,"_content":"\nVue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用程序界面都可以抽象为一个组件树。组件化可以提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。\n\n<!-- more -->\n\n# 组件通信\n\n## props\n\n父给子传值\n```js\n//child\nprops:{ msg: String}\n\n//parent\n<HelloWorld msg=\"hello world\">\n```\n\n## 自定义事件\n\n子给父传值\n\n```js\n// child\nthis.$emit('add', good)\n// parent\n<Cart @add=\"cartAdd($event)\"></Cart>\n```\n\n## 事件总线\n\n任意两个组件之间传值常用事件总线或vuex的方式\n\n```js\n//Bus:事件触发、监听和回调管理\nclass Bus{\n    constructor(){\n        this.callbacks={}\n    }\n    $on(name,fn){\n        this.callbacks[name]=this.callbacks[name]||[]\n        this.callbacks[name].push(fn)\n    }\n    $emit(name,args){\n        if(this.callbacks[name]){\n            this.callbacks[name].forEach(cb => cb(args))\n        }\n    }\n}\n\n//main.js\nVue.prototype.$bus = new Bus()\n\n//child1\nthis.$bus.$on('foo',msg => {})\n\n//child2\nthis.$bus.$emit('foo',msg)\n```\n\n实践中通常用Vue代替Bus,因为Vue已经实现了相应的接口\n\n## vuex\n\n创建唯一的全局数据管理者store，通过他管理数据并通知组件状态变更\n\n详细见[Vue统一状态管理——Vuex](https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/)\n\n## $parent/$root\n\n兄弟组件之间通信可以通过共同的祖辈搭桥，$parent或$root,与Bus总线类似\n\n```js\n//brother1\nthis.$parent.$on('foo',msg => {})\n\n//brother2\nthis.$parent.$emit('foo',msg)\n```\n\n## $children\n\n父组件可以通过$children访问子组件，实现父子通信\n```js\n//parent\nthis.$children[0].xx = 'xxx'\n```\n  注意：$children不能保证子元素顺序 (异步组件)\n\n## $attr/$listener\n\n包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外)。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定(class和style除外)，并且可以通过 vbind=\"$attrs\"传入内部组件——在创建高级别的组件时非常有用。\n\n```js\n//child:并未在props内声明foo\n<p>{{$attrs.foo}}</p>\n\n//parent\n<Helloworld foo = 'foo'>\n```\n\n## refs\n\n获取子节点引用\n\n```js\n//parent\n<Helloworld ref='hw'>\n\nmounted(){\n    this.$refs.hw.xx = ''\n}\n```\n\n## provide/inject\n\n能够实现祖先和后代之间传值(依赖注入)\n\n```js\n//ancestor \nprovide(){//与data、mounted平级\n    return {\n        foo:'foooooo'\n    }\n}\n\n//descendant\n<p>{{foo}}</p>\n\ninject:['foo']\n```\n也可以使用别名\n```js\n//子组件中\n<p>{{bar}}</p>\n\ninject:{bar:{from:'foo'}}\n```\n  provide和inject主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。\n\n\n# 插槽\n\n插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。\n\n## 匿名插槽\n\n```html\n<!-- comp1 -->\n<div>\n    <solt></solt>\n</div>\n\n<!-- parent -->\n<Comp1>\n    <template>content...</template>\n</Comp1>\n```\n\n## 具名插槽\n\n将内容分发到子组件指定位置\n\n```html\n<!-- comp2 -->\n<div>\n    <solt></solt>\n    <solt name=\"content\"></solt>\n</div>\n\n<!-- parent -->\n<Comp2>\n    <!-- 默认插槽使用default做参数 -->\n    <template v-solt:default>具名插槽</template>\n    <!-- 具名插槽使用插槽名做参数 -->\n    <template v-solt:content>内容。。</template>\n<Comp2>\n```\n\n## 作用域插槽\n\n分发内容要用到子组件中的数据\n\n```html\n<!-- comp3 -->\n<div>\n    <solt :foo=\"foo\"></solt>\n</div>\n\n<!-- parent -->\n<Comp3>\n    <!-- 把v-slot的值指定为作用域上下文对象 -->\n    <template v-solt:default=\"soltProps\">\n        来自子组件数据：{{soltProps.foo}}\n    </template>\n</Comp3>\n```\n\n范例\n\n```html\n<!-- parent -->\n<!-- 插槽 -->\n<Layout>\n<!-- 作用域插槽 -->\n<!-- 对象解构 -->\n    <template v-slot:footer=\"{fc}\">{{fc}}</template>\n</Layout>\n\n<!-- children -->\n<div class=\"footer\">\n    <slot name=\"footer\" :fc=\"footerContent\"></slot>\n</div>\n```\n```js\n//parent\nimport Layout from '@/components/slots/Layout.vue'\nexport default {\n    components: {\n      Layout\n    },\n}\n\n\n// children \ndata() {\n    return {\n        remark: [\n          '好好学习，天天向上',\n          '学习永远不晚',\n          '学习知识要善于思考,思考,再思考',\n          '学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始',\n          '构成我们学习最大障碍的是已知的东西,而不是未知的东西',\n          '在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事',\n          '三人行必有我师焉；择其善者而从之，其不善者而改之'\n        ]\n    }\n},\ncomputed: {\n    footerContent() {\n        return this.remark[new Date().getDay() - 1] \n    }\n},\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/06/Vue组件化.md","raw":"---\ntitle: Vue组件化\ndate: 2020-06-11 09:15:04\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\nVue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用程序界面都可以抽象为一个组件树。组件化可以提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。\n\n<!-- more -->\n\n# 组件通信\n\n## props\n\n父给子传值\n```js\n//child\nprops:{ msg: String}\n\n//parent\n<HelloWorld msg=\"hello world\">\n```\n\n## 自定义事件\n\n子给父传值\n\n```js\n// child\nthis.$emit('add', good)\n// parent\n<Cart @add=\"cartAdd($event)\"></Cart>\n```\n\n## 事件总线\n\n任意两个组件之间传值常用事件总线或vuex的方式\n\n```js\n//Bus:事件触发、监听和回调管理\nclass Bus{\n    constructor(){\n        this.callbacks={}\n    }\n    $on(name,fn){\n        this.callbacks[name]=this.callbacks[name]||[]\n        this.callbacks[name].push(fn)\n    }\n    $emit(name,args){\n        if(this.callbacks[name]){\n            this.callbacks[name].forEach(cb => cb(args))\n        }\n    }\n}\n\n//main.js\nVue.prototype.$bus = new Bus()\n\n//child1\nthis.$bus.$on('foo',msg => {})\n\n//child2\nthis.$bus.$emit('foo',msg)\n```\n\n实践中通常用Vue代替Bus,因为Vue已经实现了相应的接口\n\n## vuex\n\n创建唯一的全局数据管理者store，通过他管理数据并通知组件状态变更\n\n详细见[Vue统一状态管理——Vuex](https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/)\n\n## $parent/$root\n\n兄弟组件之间通信可以通过共同的祖辈搭桥，$parent或$root,与Bus总线类似\n\n```js\n//brother1\nthis.$parent.$on('foo',msg => {})\n\n//brother2\nthis.$parent.$emit('foo',msg)\n```\n\n## $children\n\n父组件可以通过$children访问子组件，实现父子通信\n```js\n//parent\nthis.$children[0].xx = 'xxx'\n```\n  注意：$children不能保证子元素顺序 (异步组件)\n\n## $attr/$listener\n\n包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外)。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定(class和style除外)，并且可以通过 vbind=\"$attrs\"传入内部组件——在创建高级别的组件时非常有用。\n\n```js\n//child:并未在props内声明foo\n<p>{{$attrs.foo}}</p>\n\n//parent\n<Helloworld foo = 'foo'>\n```\n\n## refs\n\n获取子节点引用\n\n```js\n//parent\n<Helloworld ref='hw'>\n\nmounted(){\n    this.$refs.hw.xx = ''\n}\n```\n\n## provide/inject\n\n能够实现祖先和后代之间传值(依赖注入)\n\n```js\n//ancestor \nprovide(){//与data、mounted平级\n    return {\n        foo:'foooooo'\n    }\n}\n\n//descendant\n<p>{{foo}}</p>\n\ninject:['foo']\n```\n也可以使用别名\n```js\n//子组件中\n<p>{{bar}}</p>\n\ninject:{bar:{from:'foo'}}\n```\n  provide和inject主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。\n\n\n# 插槽\n\n插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。\n\n## 匿名插槽\n\n```html\n<!-- comp1 -->\n<div>\n    <solt></solt>\n</div>\n\n<!-- parent -->\n<Comp1>\n    <template>content...</template>\n</Comp1>\n```\n\n## 具名插槽\n\n将内容分发到子组件指定位置\n\n```html\n<!-- comp2 -->\n<div>\n    <solt></solt>\n    <solt name=\"content\"></solt>\n</div>\n\n<!-- parent -->\n<Comp2>\n    <!-- 默认插槽使用default做参数 -->\n    <template v-solt:default>具名插槽</template>\n    <!-- 具名插槽使用插槽名做参数 -->\n    <template v-solt:content>内容。。</template>\n<Comp2>\n```\n\n## 作用域插槽\n\n分发内容要用到子组件中的数据\n\n```html\n<!-- comp3 -->\n<div>\n    <solt :foo=\"foo\"></solt>\n</div>\n\n<!-- parent -->\n<Comp3>\n    <!-- 把v-slot的值指定为作用域上下文对象 -->\n    <template v-solt:default=\"soltProps\">\n        来自子组件数据：{{soltProps.foo}}\n    </template>\n</Comp3>\n```\n\n范例\n\n```html\n<!-- parent -->\n<!-- 插槽 -->\n<Layout>\n<!-- 作用域插槽 -->\n<!-- 对象解构 -->\n    <template v-slot:footer=\"{fc}\">{{fc}}</template>\n</Layout>\n\n<!-- children -->\n<div class=\"footer\">\n    <slot name=\"footer\" :fc=\"footerContent\"></slot>\n</div>\n```\n```js\n//parent\nimport Layout from '@/components/slots/Layout.vue'\nexport default {\n    components: {\n      Layout\n    },\n}\n\n\n// children \ndata() {\n    return {\n        remark: [\n          '好好学习，天天向上',\n          '学习永远不晚',\n          '学习知识要善于思考,思考,再思考',\n          '学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始',\n          '构成我们学习最大障碍的是已知的东西,而不是未知的东西',\n          '在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事',\n          '三人行必有我师焉；择其善者而从之，其不善者而改之'\n        ]\n    }\n},\ncomputed: {\n    footerContent() {\n        return this.remark[new Date().getDay() - 1] \n    }\n},\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/06/Vue组件化","published":1,"updated":"2020-07-29T13:25:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53h001t1r0q026q86y2","content":"<p>Vue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用程序界面都可以抽象为一个组件树。组件化可以提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h1><h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><p>父给子传值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//child</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\">&lt;HelloWorld msg=<span class=\"string\">\"hello world\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><p>子给父传值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// child</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>, good)</span><br><span class=\"line\"><span class=\"comment\">// parent</span></span><br><span class=\"line\">&lt;Cart @add=<span class=\"string\">\"cartAdd($event)\"</span>&gt;&lt;<span class=\"regexp\">/Cart&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h2><p>任意两个组件之间传值常用事件总线或vuex的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Bus:事件触发、监听和回调管理</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callbacks=&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $on(name,fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callbacks[name]=<span class=\"keyword\">this</span>.callbacks[name]||[]</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callbacks[name].push(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $emit(name,args)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.callbacks[name])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.callbacks[name].forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(args))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\">Vue.prototype.$bus = <span class=\"keyword\">new</span> Bus()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//child1</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$bus.$on(<span class=\"string\">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//child2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$bus.$emit(<span class=\"string\">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>\n\n<p>实践中通常用Vue代替Bus,因为Vue已经实现了相应的接口</p>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><p>创建唯一的全局数据管理者store，通过他管理数据并通知组件状态变更</p>\n<p>详细见<a href=\"https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/\">Vue统一状态管理——Vuex</a></p>\n<h2 id=\"parent-root\"><a href=\"#parent-root\" class=\"headerlink\" title=\"$parent/$root\"></a>$parent/$root</h2><p>兄弟组件之间通信可以通过共同的祖辈搭桥，$parent或$root,与Bus总线类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//brother1</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$parent.$on(<span class=\"string\">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//brother2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$parent.$emit(<span class=\"string\">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"$children\"></a>$children</h2><p>父组件可以通过$children访问子组件，实现父子通信</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].xx = <span class=\"string\">'xxx'</span></span><br></pre></td></tr></table></figure>\n<p>  注意：$children不能保证子元素顺序 (异步组件)</p>\n<h2 id=\"attr-listener\"><a href=\"#attr-listener\" class=\"headerlink\" title=\"$attr/$listener\"></a>$attr/$listener</h2><p>包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外)。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定(class和style除外)，并且可以通过 vbind=”$attrs”传入内部组件——在创建高级别的组件时非常有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//child:并未在props内声明foo</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/parent</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;Helloworld foo = 'foo'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h2><p>获取子节点引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\">&lt;Helloworld ref=<span class=\"string\">'hw'</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$refs.hw.xx = <span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide/inject\"></a>provide/inject</h2><p>能够实现祖先和后代之间传值(依赖注入)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ancestor </span></span><br><span class=\"line\">provide()&#123;<span class=\"comment\">//与data、mounted平级</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo:<span class=\"string\">'foooooo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//descendant</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;foo&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">inject:['foo']</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件中</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;bar&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">inject:&#123;bar:&#123;from:'foo'&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>  provide和inject主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p>\n<h1 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h1><p>插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p>\n<h2 id=\"匿名插槽\"><a href=\"#匿名插槽\" class=\"headerlink\" title=\"匿名插槽\"></a>匿名插槽</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comp1 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>content...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Comp1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>将内容分发到子组件指定位置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comp2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认插槽使用default做参数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-solt:default</span>&gt;</span>具名插槽<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 具名插槽使用插槽名做参数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-solt:content</span>&gt;</span>内容。。<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2><p>分发内容要用到子组件中的数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comp3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span> <span class=\"attr\">:foo</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 把v-slot的值指定为作用域上下文对象 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-solt:default</span>=<span class=\"string\">\"soltProps\"</span>&gt;</span></span><br><span class=\"line\">        来自子组件数据：&#123;&#123;soltProps.foo&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Comp3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>范例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 插槽 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Layout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 作用域插槽 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 对象解构 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>=<span class=\"string\">\"&#123;fc&#125;\"</span>&gt;</span>&#123;&#123;fc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Layout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- children --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span> <span class=\"attr\">:fc</span>=<span class=\"string\">\"footerContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">'@/components/slots/Layout.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      Layout</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// children </span></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        remark: [</span><br><span class=\"line\">          <span class=\"string\">'好好学习，天天向上'</span>,</span><br><span class=\"line\">          <span class=\"string\">'学习永远不晚'</span>,</span><br><span class=\"line\">          <span class=\"string\">'学习知识要善于思考,思考,再思考'</span>,</span><br><span class=\"line\">          <span class=\"string\">'学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始'</span>,</span><br><span class=\"line\">          <span class=\"string\">'构成我们学习最大障碍的是已知的东西,而不是未知的东西'</span>,</span><br><span class=\"line\">          <span class=\"string\">'在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事'</span>,</span><br><span class=\"line\">          <span class=\"string\">'三人行必有我师焉；择其善者而从之，其不善者而改之'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    footerContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.remark[<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDay() - <span class=\"number\">1</span>] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>Vue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用程序界面都可以抽象为一个组件树。组件化可以提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。</p>","more":"<h1 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h1><h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><p>父给子传值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//child</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\">&lt;HelloWorld msg=<span class=\"string\">\"hello world\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><p>子给父传值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// child</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>, good)</span><br><span class=\"line\"><span class=\"comment\">// parent</span></span><br><span class=\"line\">&lt;Cart @add=<span class=\"string\">\"cartAdd($event)\"</span>&gt;&lt;<span class=\"regexp\">/Cart&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h2><p>任意两个组件之间传值常用事件总线或vuex的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Bus:事件触发、监听和回调管理</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callbacks=&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $on(name,fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callbacks[name]=<span class=\"keyword\">this</span>.callbacks[name]||[]</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callbacks[name].push(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $emit(name,args)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.callbacks[name])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.callbacks[name].forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(args))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\">Vue.prototype.$bus = <span class=\"keyword\">new</span> Bus()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//child1</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$bus.$on(<span class=\"string\">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//child2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$bus.$emit(<span class=\"string\">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>\n\n<p>实践中通常用Vue代替Bus,因为Vue已经实现了相应的接口</p>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><p>创建唯一的全局数据管理者store，通过他管理数据并通知组件状态变更</p>\n<p>详细见<a href=\"https://qytayh.github.io/2020/06/Vue%E7%BB%9F%E4%B8%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vuex/\">Vue统一状态管理——Vuex</a></p>\n<h2 id=\"parent-root\"><a href=\"#parent-root\" class=\"headerlink\" title=\"$parent/$root\"></a>$parent/$root</h2><p>兄弟组件之间通信可以通过共同的祖辈搭桥，$parent或$root,与Bus总线类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//brother1</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$parent.$on(<span class=\"string\">'foo'</span>,msg =&gt; &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//brother2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$parent.$emit(<span class=\"string\">'foo'</span>,msg)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"$children\"></a>$children</h2><p>父组件可以通过$children访问子组件，实现父子通信</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].xx = <span class=\"string\">'xxx'</span></span><br></pre></td></tr></table></figure>\n<p>  注意：$children不能保证子元素顺序 (异步组件)</p>\n<h2 id=\"attr-listener\"><a href=\"#attr-listener\" class=\"headerlink\" title=\"$attr/$listener\"></a>$attr/$listener</h2><p>包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外)。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定(class和style除外)，并且可以通过 vbind=”$attrs”传入内部组件——在创建高级别的组件时非常有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//child:并未在props内声明foo</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/parent</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;Helloworld foo = 'foo'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h2><p>获取子节点引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\">&lt;Helloworld ref=<span class=\"string\">'hw'</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$refs.hw.xx = <span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide/inject\"></a>provide/inject</h2><p>能够实现祖先和后代之间传值(依赖注入)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ancestor </span></span><br><span class=\"line\">provide()&#123;<span class=\"comment\">//与data、mounted平级</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo:<span class=\"string\">'foooooo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//descendant</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;foo&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">inject:['foo']</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件中</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;bar&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">inject:&#123;bar:&#123;from:'foo'&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>  provide和inject主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p>\n<h1 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h1><p>插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p>\n<h2 id=\"匿名插槽\"><a href=\"#匿名插槽\" class=\"headerlink\" title=\"匿名插槽\"></a>匿名插槽</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comp1 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>content...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Comp1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>将内容分发到子组件指定位置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comp2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认插槽使用default做参数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-solt:default</span>&gt;</span>具名插槽<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 具名插槽使用插槽名做参数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-solt:content</span>&gt;</span>内容。。<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2><p>分发内容要用到子组件中的数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comp3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solt</span> <span class=\"attr\">:foo</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">solt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 把v-slot的值指定为作用域上下文对象 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-solt:default</span>=<span class=\"string\">\"soltProps\"</span>&gt;</span></span><br><span class=\"line\">        来自子组件数据：&#123;&#123;soltProps.foo&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Comp3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>范例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 插槽 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Layout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 作用域插槽 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 对象解构 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>=<span class=\"string\">\"&#123;fc&#125;\"</span>&gt;</span>&#123;&#123;fc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Layout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- children --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span> <span class=\"attr\">:fc</span>=<span class=\"string\">\"footerContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">'@/components/slots/Layout.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      Layout</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// children </span></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        remark: [</span><br><span class=\"line\">          <span class=\"string\">'好好学习，天天向上'</span>,</span><br><span class=\"line\">          <span class=\"string\">'学习永远不晚'</span>,</span><br><span class=\"line\">          <span class=\"string\">'学习知识要善于思考,思考,再思考'</span>,</span><br><span class=\"line\">          <span class=\"string\">'学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始'</span>,</span><br><span class=\"line\">          <span class=\"string\">'构成我们学习最大障碍的是已知的东西,而不是未知的东西'</span>,</span><br><span class=\"line\">          <span class=\"string\">'在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事'</span>,</span><br><span class=\"line\">          <span class=\"string\">'三人行必有我师焉；择其善者而从之，其不善者而改之'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    footerContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.remark[<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDay() - <span class=\"number\">1</span>] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"必备知识之Vue-Cli","date":"2020-06-02T02:15:11.000Z","description":null,"_content":"\n更快速构建vue项目\n\n<!-- more -->\n\n# 快速原型开发\n\n你可以使用`vue serve`和`vue build`命令对单个vue文件快速进行原型开发\n\n## 安装`@vue/cli-service-global`扩展\n\n`npm install  -g @vue/cli-service-global`\n\n准备一个内容原型\n\n## vue serve\n\n启动一个服务并运行原型\n\n`vue serve Hello.vue`\n\n\n# 创建项目\n\n## vue create\n\n创建一个vue项目\n\n`vue create projectname`\n\n## vue ui\n\n图形化项目管理\n\n`vue ui`\n\n# 插件\n\nVue Cli使用了一套基于插件的架构。插件可以修改webpack的内部配置，也可以向vue-cli-serve注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的\n\n## 在现有的项目中安装插件\n\n如果你想在一个已经被创建好的项目中安装一个插件，可以使用 `vue add` 命令\n\n`vue add router`\n\n\n# 开发\n\n## 处理资源路径\n\n当你在JavaScript、css或vue文件中使用相对路径(必须以`.`开头)引用一个静态资源时，该资源将被webpack处理。(public中文件webpack不会处理)\n\n### 转换规则\n\n如果URL是一个绝对路径(例如`/images/foo.png`),他将会保留不变。\n\n``` html\n<img alt=\"vue logo\" src=\"/assets/logo.png\">//当前服务器静态路径下 public会作为服务器静态路径\n<img alt=\"vue logo\" src=\"http://image.xx.com/logo.png\">//某图片服务器线上地址\n```\n\n如果URL以`.`开头会作为一个相对模块请求被解释并基于文件系统相对路径\n\n``` html\n<img alt=\"vue logo\" src=\"./assets/logo.png\">\n```\n\n如果URL以`~`开头会作为一个模块请求被解析，这意味着你甚至可以引用Node模块中的资源\n\n``` html\n<img alt=\"vue logo\" src=\"~some-npm-package/foo.png\">\n```\n\n如果URL以`@`开头会作为一个模块请求被解析，Vue Cli默认会设置一个指向`src`的别名`@`\n\n``` js\nimport Hello from '@/components/Hello.vue'\n```\n\n### 何时使用`public`文件夹\n\n通过webpack的处理并获得如下好处：\n\n- 脚本和样式表会被压缩并且打包在一起，从而避免额外的网络请求\n\n- 文件丢失会直接在编译时报错，而不是到了用户端才会产生404错误\n\n- 最终生成的文件名包含了内容哈希，因此不用担心浏览器缓存他们的老版本\n\n以下的几种情况可以考虑使用public文件夹\n\n- 你需要在构建输出中指定一个固定的文件名字\n\n- 你有上千个图片，需要动态引用他们的路径\n\n- 有些库可能会和webpack不兼容，除了将其用一个独立的`<script>`标签引入没有别的办法\n\n### 使用public文件夹的注意事项\n\n如果你的应用没有部署在域名的根部，那么你需要为你的URL配置`publicPath`前缀\n\n``` js\n//vue.config.js\nmodule.export = {\n    publicPath: precess.env.NODE_ENV === 'production'?'线上所在目录':'本地所在目录 正常为 / '\n}\n```\n\n在`public/index.html` 等通过`html-webpack-plugin`用作模板的HTML文件中，你需要用过`<% =BASE_URL %>` 设置链接前缀：\n\n``` html\n<link rel=\"icon\" href=\"<% =BASE_URL %>favicon.ico\">\n```\n\n在模板中，先向组件传入BASE_URL：\n``` js\ndata(){\n    return{\n        publicPath: process.env.BASE_URL\n    }\n}\n```\n在使用的时候\n```js\n<img :src=\"`${publicPath}my-image.png`\">\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/06/必备知识之Vue-Cli.md","raw":"---\ntitle: 必备知识之Vue-Cli\ndate: 2020-06-02 10:15:11\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n更快速构建vue项目\n\n<!-- more -->\n\n# 快速原型开发\n\n你可以使用`vue serve`和`vue build`命令对单个vue文件快速进行原型开发\n\n## 安装`@vue/cli-service-global`扩展\n\n`npm install  -g @vue/cli-service-global`\n\n准备一个内容原型\n\n## vue serve\n\n启动一个服务并运行原型\n\n`vue serve Hello.vue`\n\n\n# 创建项目\n\n## vue create\n\n创建一个vue项目\n\n`vue create projectname`\n\n## vue ui\n\n图形化项目管理\n\n`vue ui`\n\n# 插件\n\nVue Cli使用了一套基于插件的架构。插件可以修改webpack的内部配置，也可以向vue-cli-serve注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的\n\n## 在现有的项目中安装插件\n\n如果你想在一个已经被创建好的项目中安装一个插件，可以使用 `vue add` 命令\n\n`vue add router`\n\n\n# 开发\n\n## 处理资源路径\n\n当你在JavaScript、css或vue文件中使用相对路径(必须以`.`开头)引用一个静态资源时，该资源将被webpack处理。(public中文件webpack不会处理)\n\n### 转换规则\n\n如果URL是一个绝对路径(例如`/images/foo.png`),他将会保留不变。\n\n``` html\n<img alt=\"vue logo\" src=\"/assets/logo.png\">//当前服务器静态路径下 public会作为服务器静态路径\n<img alt=\"vue logo\" src=\"http://image.xx.com/logo.png\">//某图片服务器线上地址\n```\n\n如果URL以`.`开头会作为一个相对模块请求被解释并基于文件系统相对路径\n\n``` html\n<img alt=\"vue logo\" src=\"./assets/logo.png\">\n```\n\n如果URL以`~`开头会作为一个模块请求被解析，这意味着你甚至可以引用Node模块中的资源\n\n``` html\n<img alt=\"vue logo\" src=\"~some-npm-package/foo.png\">\n```\n\n如果URL以`@`开头会作为一个模块请求被解析，Vue Cli默认会设置一个指向`src`的别名`@`\n\n``` js\nimport Hello from '@/components/Hello.vue'\n```\n\n### 何时使用`public`文件夹\n\n通过webpack的处理并获得如下好处：\n\n- 脚本和样式表会被压缩并且打包在一起，从而避免额外的网络请求\n\n- 文件丢失会直接在编译时报错，而不是到了用户端才会产生404错误\n\n- 最终生成的文件名包含了内容哈希，因此不用担心浏览器缓存他们的老版本\n\n以下的几种情况可以考虑使用public文件夹\n\n- 你需要在构建输出中指定一个固定的文件名字\n\n- 你有上千个图片，需要动态引用他们的路径\n\n- 有些库可能会和webpack不兼容，除了将其用一个独立的`<script>`标签引入没有别的办法\n\n### 使用public文件夹的注意事项\n\n如果你的应用没有部署在域名的根部，那么你需要为你的URL配置`publicPath`前缀\n\n``` js\n//vue.config.js\nmodule.export = {\n    publicPath: precess.env.NODE_ENV === 'production'?'线上所在目录':'本地所在目录 正常为 / '\n}\n```\n\n在`public/index.html` 等通过`html-webpack-plugin`用作模板的HTML文件中，你需要用过`<% =BASE_URL %>` 设置链接前缀：\n\n``` html\n<link rel=\"icon\" href=\"<% =BASE_URL %>favicon.ico\">\n```\n\n在模板中，先向组件传入BASE_URL：\n``` js\ndata(){\n    return{\n        publicPath: process.env.BASE_URL\n    }\n}\n```\n在使用的时候\n```js\n<img :src=\"`${publicPath}my-image.png`\">\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/06/必备知识之Vue-Cli","published":1,"updated":"2020-07-11T15:20:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53j001w1r0q0eev99yz","content":"<p>更快速构建vue项目</p>\n<a id=\"more\"></a>\n\n<h1 id=\"快速原型开发\"><a href=\"#快速原型开发\" class=\"headerlink\" title=\"快速原型开发\"></a>快速原型开发</h1><p>你可以使用<code>vue serve</code>和<code>vue build</code>命令对单个vue文件快速进行原型开发</p>\n<h2 id=\"安装-vue-cli-service-global扩展\"><a href=\"#安装-vue-cli-service-global扩展\" class=\"headerlink\" title=\"安装@vue/cli-service-global扩展\"></a>安装<code>@vue/cli-service-global</code>扩展</h2><p><code>npm install  -g @vue/cli-service-global</code></p>\n<p>准备一个内容原型</p>\n<h2 id=\"vue-serve\"><a href=\"#vue-serve\" class=\"headerlink\" title=\"vue serve\"></a>vue serve</h2><p>启动一个服务并运行原型</p>\n<p><code>vue serve Hello.vue</code></p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><h2 id=\"vue-create\"><a href=\"#vue-create\" class=\"headerlink\" title=\"vue create\"></a>vue create</h2><p>创建一个vue项目</p>\n<p><code>vue create projectname</code></p>\n<h2 id=\"vue-ui\"><a href=\"#vue-ui\" class=\"headerlink\" title=\"vue ui\"></a>vue ui</h2><p>图形化项目管理</p>\n<p><code>vue ui</code></p>\n<h1 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h1><p>Vue Cli使用了一套基于插件的架构。插件可以修改webpack的内部配置，也可以向vue-cli-serve注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的</p>\n<h2 id=\"在现有的项目中安装插件\"><a href=\"#在现有的项目中安装插件\" class=\"headerlink\" title=\"在现有的项目中安装插件\"></a>在现有的项目中安装插件</h2><p>如果你想在一个已经被创建好的项目中安装一个插件，可以使用 <code>vue add</code> 命令</p>\n<p><code>vue add router</code></p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"处理资源路径\"><a href=\"#处理资源路径\" class=\"headerlink\" title=\"处理资源路径\"></a>处理资源路径</h2><p>当你在JavaScript、css或vue文件中使用相对路径(必须以<code>.</code>开头)引用一个静态资源时，该资源将被webpack处理。(public中文件webpack不会处理)</p>\n<h3 id=\"转换规则\"><a href=\"#转换规则\" class=\"headerlink\" title=\"转换规则\"></a>转换规则</h3><p>如果URL是一个绝对路径(例如<code>/images/foo.png</code>),他将会保留不变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/logo.png\"</span>&gt;</span>//当前服务器静态路径下 public会作为服务器静态路径</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://image.xx.com/logo.png\"</span>&gt;</span>//某图片服务器线上地址</span><br></pre></td></tr></table></figure>\n\n<p>如果URL以<code>.</code>开头会作为一个相对模块请求被解释并基于文件系统相对路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果URL以<code>~</code>开头会作为一个模块请求被解析，这意味着你甚至可以引用Node模块中的资源</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"~some-npm-package/foo.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果URL以<code>@</code>开头会作为一个模块请求被解析，Vue Cli默认会设置一个指向<code>src</code>的别名<code>@</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'@/components/Hello.vue'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"何时使用public文件夹\"><a href=\"#何时使用public文件夹\" class=\"headerlink\" title=\"何时使用public文件夹\"></a>何时使用<code>public</code>文件夹</h3><p>通过webpack的处理并获得如下好处：</p>\n<ul>\n<li><p>脚本和样式表会被压缩并且打包在一起，从而避免额外的网络请求</p>\n</li>\n<li><p>文件丢失会直接在编译时报错，而不是到了用户端才会产生404错误</p>\n</li>\n<li><p>最终生成的文件名包含了内容哈希，因此不用担心浏览器缓存他们的老版本</p>\n</li>\n</ul>\n<p>以下的几种情况可以考虑使用public文件夹</p>\n<ul>\n<li><p>你需要在构建输出中指定一个固定的文件名字</p>\n</li>\n<li><p>你有上千个图片，需要动态引用他们的路径</p>\n</li>\n<li><p>有些库可能会和webpack不兼容，除了将其用一个独立的<code>&lt;script&gt;</code>标签引入没有别的办法</p>\n</li>\n</ul>\n<h3 id=\"使用public文件夹的注意事项\"><a href=\"#使用public文件夹的注意事项\" class=\"headerlink\" title=\"使用public文件夹的注意事项\"></a>使用public文件夹的注意事项</h3><p>如果你的应用没有部署在域名的根部，那么你需要为你的URL配置<code>publicPath</code>前缀</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    publicPath: precess.env.NODE_ENV === <span class=\"string\">'production'</span>?<span class=\"string\">'线上所在目录'</span>:<span class=\"string\">'本地所在目录 正常为 / '</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>public/index.html</code> 等通过<code>html-webpack-plugin</code>用作模板的HTML文件中，你需要用过<code>&lt;% =BASE_URL %&gt;</code> 设置链接前缀：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;% =BASE_URL %&gt;favicon.ico\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在模板中，先向组件传入BASE_URL：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        publicPath: process.env.BASE_URL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img :src=<span class=\"string\">\"`$&#123;publicPath&#125;my-image.png`\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>更快速构建vue项目</p>","more":"<h1 id=\"快速原型开发\"><a href=\"#快速原型开发\" class=\"headerlink\" title=\"快速原型开发\"></a>快速原型开发</h1><p>你可以使用<code>vue serve</code>和<code>vue build</code>命令对单个vue文件快速进行原型开发</p>\n<h2 id=\"安装-vue-cli-service-global扩展\"><a href=\"#安装-vue-cli-service-global扩展\" class=\"headerlink\" title=\"安装@vue/cli-service-global扩展\"></a>安装<code>@vue/cli-service-global</code>扩展</h2><p><code>npm install  -g @vue/cli-service-global</code></p>\n<p>准备一个内容原型</p>\n<h2 id=\"vue-serve\"><a href=\"#vue-serve\" class=\"headerlink\" title=\"vue serve\"></a>vue serve</h2><p>启动一个服务并运行原型</p>\n<p><code>vue serve Hello.vue</code></p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><h2 id=\"vue-create\"><a href=\"#vue-create\" class=\"headerlink\" title=\"vue create\"></a>vue create</h2><p>创建一个vue项目</p>\n<p><code>vue create projectname</code></p>\n<h2 id=\"vue-ui\"><a href=\"#vue-ui\" class=\"headerlink\" title=\"vue ui\"></a>vue ui</h2><p>图形化项目管理</p>\n<p><code>vue ui</code></p>\n<h1 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h1><p>Vue Cli使用了一套基于插件的架构。插件可以修改webpack的内部配置，也可以向vue-cli-serve注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的</p>\n<h2 id=\"在现有的项目中安装插件\"><a href=\"#在现有的项目中安装插件\" class=\"headerlink\" title=\"在现有的项目中安装插件\"></a>在现有的项目中安装插件</h2><p>如果你想在一个已经被创建好的项目中安装一个插件，可以使用 <code>vue add</code> 命令</p>\n<p><code>vue add router</code></p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"处理资源路径\"><a href=\"#处理资源路径\" class=\"headerlink\" title=\"处理资源路径\"></a>处理资源路径</h2><p>当你在JavaScript、css或vue文件中使用相对路径(必须以<code>.</code>开头)引用一个静态资源时，该资源将被webpack处理。(public中文件webpack不会处理)</p>\n<h3 id=\"转换规则\"><a href=\"#转换规则\" class=\"headerlink\" title=\"转换规则\"></a>转换规则</h3><p>如果URL是一个绝对路径(例如<code>/images/foo.png</code>),他将会保留不变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/logo.png\"</span>&gt;</span>//当前服务器静态路径下 public会作为服务器静态路径</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://image.xx.com/logo.png\"</span>&gt;</span>//某图片服务器线上地址</span><br></pre></td></tr></table></figure>\n\n<p>如果URL以<code>.</code>开头会作为一个相对模块请求被解释并基于文件系统相对路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果URL以<code>~</code>开头会作为一个模块请求被解析，这意味着你甚至可以引用Node模块中的资源</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"vue logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"~some-npm-package/foo.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果URL以<code>@</code>开头会作为一个模块请求被解析，Vue Cli默认会设置一个指向<code>src</code>的别名<code>@</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'@/components/Hello.vue'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"何时使用public文件夹\"><a href=\"#何时使用public文件夹\" class=\"headerlink\" title=\"何时使用public文件夹\"></a>何时使用<code>public</code>文件夹</h3><p>通过webpack的处理并获得如下好处：</p>\n<ul>\n<li><p>脚本和样式表会被压缩并且打包在一起，从而避免额外的网络请求</p>\n</li>\n<li><p>文件丢失会直接在编译时报错，而不是到了用户端才会产生404错误</p>\n</li>\n<li><p>最终生成的文件名包含了内容哈希，因此不用担心浏览器缓存他们的老版本</p>\n</li>\n</ul>\n<p>以下的几种情况可以考虑使用public文件夹</p>\n<ul>\n<li><p>你需要在构建输出中指定一个固定的文件名字</p>\n</li>\n<li><p>你有上千个图片，需要动态引用他们的路径</p>\n</li>\n<li><p>有些库可能会和webpack不兼容，除了将其用一个独立的<code>&lt;script&gt;</code>标签引入没有别的办法</p>\n</li>\n</ul>\n<h3 id=\"使用public文件夹的注意事项\"><a href=\"#使用public文件夹的注意事项\" class=\"headerlink\" title=\"使用public文件夹的注意事项\"></a>使用public文件夹的注意事项</h3><p>如果你的应用没有部署在域名的根部，那么你需要为你的URL配置<code>publicPath</code>前缀</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    publicPath: precess.env.NODE_ENV === <span class=\"string\">'production'</span>?<span class=\"string\">'线上所在目录'</span>:<span class=\"string\">'本地所在目录 正常为 / '</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>public/index.html</code> 等通过<code>html-webpack-plugin</code>用作模板的HTML文件中，你需要用过<code>&lt;% =BASE_URL %&gt;</code> 设置链接前缀：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;% =BASE_URL %&gt;favicon.ico\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在模板中，先向组件传入BASE_URL：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        publicPath: process.env.BASE_URL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img :src=<span class=\"string\">\"`$&#123;publicPath&#125;my-image.png`\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"自己动手封装一个Vue表单组件","date":"2020-06-30T12:40:26.000Z","description":null,"_content":"\n仿element-ui封装一个通用的表单组件\n\n<!-- more -->\n\n# 需求分析\n\n- 实现JForm\n    - 指定数据，校验规则\n\n- JFormItem\n    - 执行校验\n    - 显示错误信息\n\n- JInput\n    - 维护数据\n\n最终理想效果：[element Form 表单](https://element.eleme.cn/#/zh-CN/component/form)\n\n# JInput\n\n创建components/form/JInput.vue\n\n```vue\n<template>\n  <div>\n    <!-- 自定义组件双向绑定：:value  @input -->\n    <!-- v-bind=\"$attrs\"展开$attrs 每一个项都可以单独设置上去 -->\n    <input :type=\"type\" :value=\"value\" @input=\"onInput\" v-bind=\"$attrs\">\n  </div>\n</template>\n<script> \n  export default {\n    inheritAttrs: false, // 设置为false避免attrs设置到根元素上\n    props: {\n      value: {\n        type: String,\n        default: ''\n      },\n      type: {\n        type: String,\n        default: 'text'\n      }\n    },\n    methods: {\n      onInput(e) {\n        // 派发一个input事件即可\n        this.$emit('input', e.target.value)\n      }\n    },\n  }\n</script>\n```\n\n# 使用JInput\n\n创建components/form/index.vue，添加如下代码：\n\n``` vue\n<template>\n    <div>\n        <h3>JForm表单</h3><hr>\n        <j-input v-model=\"model.username\"></j-input>\n        <j-input type=\"password\" v-model=\"model.password\"></j-input>\n    </div>\n</template>\n<script>\nimport JInput from \"./JInput\";\nexport default {\n    components: {\n        JInput\n    },\n    data() {\n        return {\n            model: { username: \"Joker\", password: \"\" },\n        };\n    }\n};\n</script>\n```\n\n# 实现JFormItem\n\n创建components/form/JFormItem.vue\n\n``` vue\n<template>\n    <div>\n        <label v-if=\"label\">{{label}}</label>\n        <solt></solt>\n        <p v-if=\"error\">{{error}}</p>\n    </div>\n</template>\n<script>\nexport default {\n    props:{\n        label:{//输入项标签\n            type:String,\n            default:''\n        }\n    },\n    data(){\n        return{\n            error:''//校验错误信息\n        }\n    }\n}\n</script>\n```\n\n# 使用JFormItem\n\n在components/form/index.vue中添加基础代码\n\n```vue\n<template>\n    <div>\n        <h3>JForm表单</h3><hr>\n        <j-form-item label=\"用户名\">\n            <j-input v-model=\"model.username\"></j-input>\n        </j-form-item>\n        <j-form-item label=\"密码\">\n            <j-input type=\"password\" v-model=\"model.password\"></j-input>\n        </j-form-item>\n    </div>\n</template>\n<script>\nimport JInput from \"./JInput\";\nimport JFormItem from \"./JFormItem\";\nexport default {\n    components: {\n        JInput,JFormItem\n    },\n    data() {\n        return {\n            model: { username: \"Joker\", password: \"\" },\n        };\n    }\n};\n</script>\n```\n\n# 实现JForm\n\n创建components/form/JForm.vue\n\n```vue\n<template>\n    <form>\n        <solt></solt>\n    <form>\n</template>\n<script>\nexport default {\n    provide() {\n        return {\n            form: this // 将组件实例作为提供者，子代组件可方便获取\n        };\n    },\n    props: {\n        model: {\n            type: Object,\n            required: true\n        },\n        rules: {\n            type: Object\n        }\n    }\n}\n</script>\n```\n\n# 使用JForm\n\n在components/form/index.vue中添加基础代码\n\n```vue\n<template>\n  <div> \n    <!-- JForm -->\n    <JForm :model=\"userInfo\" :rules=\"rules\" ref=\"loginForm\">\n      <!-- 用户名 -->\n      <JFormItem label=\"用户名\" prop=\"username\">\n        <JInput v-model=\"userInfo.username\" placeholder=\"请输入用户名\"></JInput>\n      </JFormItem>\n      <!-- 密码 -->\n      <JFormItem label=\"密码\" prop=\"password\">\n        <JInput type=\"password\" v-model=\"userInfo.password\" placeholder=\"请输入用户名\"></JInput>\n      </JFormItem>\n      <!-- 提交按钮 -->\n      <JFormItem>\n        <button @click=\"login\">登录</button>\n      </JFormItem>\n    </JForm>\n  </div>\n</template>\n<script>\nimport JInput from \"./JInput\";\nimport JFormItem from \"./JFormItem\";\nimport JForm from \"./JForm\";\n\nexport default {\n    components: {\n        JInput,JFormItem,JForm\n    },\n    data() {\n        return {\n            rules: {\n                username: [{ required: true, message: \"请输入用户名\" }],\n                password: [{ required: true, message: \"请输入密码\" }]\n            },\n            model: { username: \"Joker\", password: \"\" },\n        };\n    },\n    methods:{\n        login(){\n            this.$refs['loginForm'].validate(valid => {\n                if(valid){\n                    alert(\"请求登录\")\n                }else{\n                    alert(\"请求失败\")\n                }\n            })\n        }\n    }\n};\n</script>\n```\n\n# 数据校验\n\nJInput中通知校验，修改components/form/JInput.vue中代码\n```\n<!-- dom -->\n<input :type=\"type\" :value=\"value\" @input=\"onInput\" v-bind=\"$attrs\">\n\n<!-- methods -->\nonInput(e) {\n    // 派发一个input事件即可\n    this.$emit('input', e.target.value)\n    // 通知父级执行校验\n    this.$parent.$emit('validate')\n}\n```\n\nJFormItem监听校验通知，获取规则并执行校验，修改components/form/JFormItem.vue\n\n```vue\n<template>\n    <div>\n        <label v-if=\"label\">{{label}}</label>\n        <solt></solt>\n        <p v-if=\"error\">{{error}}</p>\n    </div>\n</template>\n<script>\nexport default {\n    inject:['form'],//注入\n    mounted(){//监听校验事件\n        this.$on('validate',()=>{this.validate()})\n    },\n    methods:{\n        validate(){\n            //获取对应JFormItem的校验规则\n            console.log(this.form.rules[this.prop]);\n            //获取对应JFormItem的值\n            console.log(this.form.model[this.prop]);\n        }\n    },\n    props:{\n        label:{//输入项标签\n            type:String,\n            default:''\n        },\n        prop: {\n            type: String\n        }\n    },\n    data(){\n        return{\n            error:''//校验错误信息\n        }\n    }\n}\n</script>\n```\n\n安装校验库async-validator： `npm i async-validator -S`\n\n在components/form/JFormItem.vue中引入，并添加校验代码\n\n```js\nimport Schema from \"async-validator\";\n...\nvalidate(){\n    //获取对应校验规则\n    const rules = this.form.rules[this.prop];\n    //获取校验值\n    const value = this.form.model[this.prop];\n    //获取描述对象\n    const desc = {[this.prop]:rules};\n    //创建Schema实例\n    const schema = new Schema(desc)\n    return schema.validate({[this.prop]:value},errors =>{\n        if(errors){\n            this.error=errors[0].message\n        }else{\n            //校验通过\n            this.error=''\n        }\n    })\n}\n```\n\n# 表单全局校验\n\n为JForm提供validate方法，修改components/form/JForm.vue\n\n``` js\nvalidate(cb){\n    // 获取所有孩子KFormItem\n    // [resultPromise]\n    const task = this.$children\n    .filter(item => item.prop) // 过滤掉没有prop属性的Item\n    .map(item => item.validate())\n    //统一处理所有的Promise结果\n    Promise.all(tasks)\n    .then(()=> cb(true))\n    .catch(()=> cb(false))\n}\n```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/06/自己动手封装一个Vue表单组件.md","raw":"---\ntitle: 自己动手封装一个Vue表单组件\ndate: 2020-06-30 20:40:26\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n仿element-ui封装一个通用的表单组件\n\n<!-- more -->\n\n# 需求分析\n\n- 实现JForm\n    - 指定数据，校验规则\n\n- JFormItem\n    - 执行校验\n    - 显示错误信息\n\n- JInput\n    - 维护数据\n\n最终理想效果：[element Form 表单](https://element.eleme.cn/#/zh-CN/component/form)\n\n# JInput\n\n创建components/form/JInput.vue\n\n```vue\n<template>\n  <div>\n    <!-- 自定义组件双向绑定：:value  @input -->\n    <!-- v-bind=\"$attrs\"展开$attrs 每一个项都可以单独设置上去 -->\n    <input :type=\"type\" :value=\"value\" @input=\"onInput\" v-bind=\"$attrs\">\n  </div>\n</template>\n<script> \n  export default {\n    inheritAttrs: false, // 设置为false避免attrs设置到根元素上\n    props: {\n      value: {\n        type: String,\n        default: ''\n      },\n      type: {\n        type: String,\n        default: 'text'\n      }\n    },\n    methods: {\n      onInput(e) {\n        // 派发一个input事件即可\n        this.$emit('input', e.target.value)\n      }\n    },\n  }\n</script>\n```\n\n# 使用JInput\n\n创建components/form/index.vue，添加如下代码：\n\n``` vue\n<template>\n    <div>\n        <h3>JForm表单</h3><hr>\n        <j-input v-model=\"model.username\"></j-input>\n        <j-input type=\"password\" v-model=\"model.password\"></j-input>\n    </div>\n</template>\n<script>\nimport JInput from \"./JInput\";\nexport default {\n    components: {\n        JInput\n    },\n    data() {\n        return {\n            model: { username: \"Joker\", password: \"\" },\n        };\n    }\n};\n</script>\n```\n\n# 实现JFormItem\n\n创建components/form/JFormItem.vue\n\n``` vue\n<template>\n    <div>\n        <label v-if=\"label\">{{label}}</label>\n        <solt></solt>\n        <p v-if=\"error\">{{error}}</p>\n    </div>\n</template>\n<script>\nexport default {\n    props:{\n        label:{//输入项标签\n            type:String,\n            default:''\n        }\n    },\n    data(){\n        return{\n            error:''//校验错误信息\n        }\n    }\n}\n</script>\n```\n\n# 使用JFormItem\n\n在components/form/index.vue中添加基础代码\n\n```vue\n<template>\n    <div>\n        <h3>JForm表单</h3><hr>\n        <j-form-item label=\"用户名\">\n            <j-input v-model=\"model.username\"></j-input>\n        </j-form-item>\n        <j-form-item label=\"密码\">\n            <j-input type=\"password\" v-model=\"model.password\"></j-input>\n        </j-form-item>\n    </div>\n</template>\n<script>\nimport JInput from \"./JInput\";\nimport JFormItem from \"./JFormItem\";\nexport default {\n    components: {\n        JInput,JFormItem\n    },\n    data() {\n        return {\n            model: { username: \"Joker\", password: \"\" },\n        };\n    }\n};\n</script>\n```\n\n# 实现JForm\n\n创建components/form/JForm.vue\n\n```vue\n<template>\n    <form>\n        <solt></solt>\n    <form>\n</template>\n<script>\nexport default {\n    provide() {\n        return {\n            form: this // 将组件实例作为提供者，子代组件可方便获取\n        };\n    },\n    props: {\n        model: {\n            type: Object,\n            required: true\n        },\n        rules: {\n            type: Object\n        }\n    }\n}\n</script>\n```\n\n# 使用JForm\n\n在components/form/index.vue中添加基础代码\n\n```vue\n<template>\n  <div> \n    <!-- JForm -->\n    <JForm :model=\"userInfo\" :rules=\"rules\" ref=\"loginForm\">\n      <!-- 用户名 -->\n      <JFormItem label=\"用户名\" prop=\"username\">\n        <JInput v-model=\"userInfo.username\" placeholder=\"请输入用户名\"></JInput>\n      </JFormItem>\n      <!-- 密码 -->\n      <JFormItem label=\"密码\" prop=\"password\">\n        <JInput type=\"password\" v-model=\"userInfo.password\" placeholder=\"请输入用户名\"></JInput>\n      </JFormItem>\n      <!-- 提交按钮 -->\n      <JFormItem>\n        <button @click=\"login\">登录</button>\n      </JFormItem>\n    </JForm>\n  </div>\n</template>\n<script>\nimport JInput from \"./JInput\";\nimport JFormItem from \"./JFormItem\";\nimport JForm from \"./JForm\";\n\nexport default {\n    components: {\n        JInput,JFormItem,JForm\n    },\n    data() {\n        return {\n            rules: {\n                username: [{ required: true, message: \"请输入用户名\" }],\n                password: [{ required: true, message: \"请输入密码\" }]\n            },\n            model: { username: \"Joker\", password: \"\" },\n        };\n    },\n    methods:{\n        login(){\n            this.$refs['loginForm'].validate(valid => {\n                if(valid){\n                    alert(\"请求登录\")\n                }else{\n                    alert(\"请求失败\")\n                }\n            })\n        }\n    }\n};\n</script>\n```\n\n# 数据校验\n\nJInput中通知校验，修改components/form/JInput.vue中代码\n```\n<!-- dom -->\n<input :type=\"type\" :value=\"value\" @input=\"onInput\" v-bind=\"$attrs\">\n\n<!-- methods -->\nonInput(e) {\n    // 派发一个input事件即可\n    this.$emit('input', e.target.value)\n    // 通知父级执行校验\n    this.$parent.$emit('validate')\n}\n```\n\nJFormItem监听校验通知，获取规则并执行校验，修改components/form/JFormItem.vue\n\n```vue\n<template>\n    <div>\n        <label v-if=\"label\">{{label}}</label>\n        <solt></solt>\n        <p v-if=\"error\">{{error}}</p>\n    </div>\n</template>\n<script>\nexport default {\n    inject:['form'],//注入\n    mounted(){//监听校验事件\n        this.$on('validate',()=>{this.validate()})\n    },\n    methods:{\n        validate(){\n            //获取对应JFormItem的校验规则\n            console.log(this.form.rules[this.prop]);\n            //获取对应JFormItem的值\n            console.log(this.form.model[this.prop]);\n        }\n    },\n    props:{\n        label:{//输入项标签\n            type:String,\n            default:''\n        },\n        prop: {\n            type: String\n        }\n    },\n    data(){\n        return{\n            error:''//校验错误信息\n        }\n    }\n}\n</script>\n```\n\n安装校验库async-validator： `npm i async-validator -S`\n\n在components/form/JFormItem.vue中引入，并添加校验代码\n\n```js\nimport Schema from \"async-validator\";\n...\nvalidate(){\n    //获取对应校验规则\n    const rules = this.form.rules[this.prop];\n    //获取校验值\n    const value = this.form.model[this.prop];\n    //获取描述对象\n    const desc = {[this.prop]:rules};\n    //创建Schema实例\n    const schema = new Schema(desc)\n    return schema.validate({[this.prop]:value},errors =>{\n        if(errors){\n            this.error=errors[0].message\n        }else{\n            //校验通过\n            this.error=''\n        }\n    })\n}\n```\n\n# 表单全局校验\n\n为JForm提供validate方法，修改components/form/JForm.vue\n\n``` js\nvalidate(cb){\n    // 获取所有孩子KFormItem\n    // [resultPromise]\n    const task = this.$children\n    .filter(item => item.prop) // 过滤掉没有prop属性的Item\n    .map(item => item.validate())\n    //统一处理所有的Promise结果\n    Promise.all(tasks)\n    .then(()=> cb(true))\n    .catch(()=> cb(false))\n}\n```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/06/自己动手封装一个Vue表单组件","published":1,"updated":"2020-07-11T15:20:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53k001z1r0q419222on","content":"<p>仿element-ui封装一个通用的表单组件</p>\n<a id=\"more\"></a>\n\n<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><ul>\n<li><p>实现JForm</p>\n<ul>\n<li>指定数据，校验规则</li>\n</ul>\n</li>\n<li><p>JFormItem</p>\n<ul>\n<li>执行校验</li>\n<li>显示错误信息</li>\n</ul>\n</li>\n<li><p>JInput</p>\n<ul>\n<li>维护数据</li>\n</ul>\n</li>\n</ul>\n<p>最终理想效果：<a href=\"https://element.eleme.cn/#/zh-CN/component/form\" target=\"_blank\" rel=\"noopener\">element Form 表单</a></p>\n<h1 id=\"JInput\"><a href=\"#JInput\" class=\"headerlink\" title=\"JInput\"></a>JInput</h1><p>创建components/form/JInput.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;!-- 自定义组件双向绑定：:value  @input --&gt;</span><br><span class=\"line\">    &lt;!-- v-bind&#x3D;&quot;$attrs&quot;展开$attrs 每一个项都可以单独设置上去 --&gt;</span><br><span class=\"line\">    &lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    inheritAttrs: false, &#x2F;&#x2F; 设置为false避免attrs设置到根元素上</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      value: &#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        default: &#39;&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      type: &#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        default: &#39;text&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      onInput(e) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 派发一个input事件即可</span><br><span class=\"line\">        this.$emit(&#39;input&#39;, e.target.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用JInput\"><a href=\"#使用JInput\" class=\"headerlink\" title=\"使用JInput\"></a>使用JInput</h1><p>创建components/form/index.vue，添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class=\"line\">        &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">        &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        JInput</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现JFormItem\"><a href=\"#实现JFormItem\" class=\"headerlink\" title=\"实现JFormItem\"></a>实现JFormItem</h1><p>创建components/form/JFormItem.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class=\"line\">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class=\"line\">            type:String,</span><br><span class=\"line\">            default:&#39;&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用JFormItem\"><a href=\"#使用JFormItem\" class=\"headerlink\" title=\"使用JFormItem\"></a>使用JFormItem</h1><p>在components/form/index.vue中添加基础代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class=\"line\">        &lt;j-form-item label&#x3D;&quot;用户名&quot;&gt;</span><br><span class=\"line\">            &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">        &lt;&#x2F;j-form-item&gt;</span><br><span class=\"line\">        &lt;j-form-item label&#x3D;&quot;密码&quot;&gt;</span><br><span class=\"line\">            &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">        &lt;&#x2F;j-form-item&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class=\"line\">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        JInput,JFormItem</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现JForm\"><a href=\"#实现JForm\" class=\"headerlink\" title=\"实现JForm\"></a>实现JForm</h1><p>创建components/form/JForm.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    provide() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            form: this &#x2F;&#x2F; 将组件实例作为提供者，子代组件可方便获取</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        model: &#123;</span><br><span class=\"line\">            type: Object,</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rules: &#123;</span><br><span class=\"line\">            type: Object</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用JForm\"><a href=\"#使用JForm\" class=\"headerlink\" title=\"使用JForm\"></a>使用JForm</h1><p>在components/form/index.vue中添加基础代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt; </span><br><span class=\"line\">    &lt;!-- JForm --&gt;</span><br><span class=\"line\">    &lt;JForm :model&#x3D;&quot;userInfo&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;loginForm&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 用户名 --&gt;</span><br><span class=\"line\">      &lt;JFormItem label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class=\"line\">        &lt;JInput v-model&#x3D;&quot;userInfo.username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class=\"line\">      &lt;&#x2F;JFormItem&gt;</span><br><span class=\"line\">      &lt;!-- 密码 --&gt;</span><br><span class=\"line\">      &lt;JFormItem label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class=\"line\">        &lt;JInput type&#x3D;&quot;password&quot; v-model&#x3D;&quot;userInfo.password&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class=\"line\">      &lt;&#x2F;JFormItem&gt;</span><br><span class=\"line\">      &lt;!-- 提交按钮 --&gt;</span><br><span class=\"line\">      &lt;JFormItem&gt;</span><br><span class=\"line\">        &lt;button @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;JFormItem&gt;</span><br><span class=\"line\">    &lt;&#x2F;JForm&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class=\"line\">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class=\"line\">import JForm from &quot;.&#x2F;JForm&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        JInput,JFormItem,JForm</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            rules: &#123;</span><br><span class=\"line\">                username: [&#123; required: true, message: &quot;请输入用户名&quot; &#125;],</span><br><span class=\"line\">                password: [&#123; required: true, message: &quot;请输入密码&quot; &#125;]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">            this.$refs[&#39;loginForm&#39;].validate(valid &#x3D;&gt; &#123;</span><br><span class=\"line\">                if(valid)&#123;</span><br><span class=\"line\">                    alert(&quot;请求登录&quot;)</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    alert(&quot;请求失败&quot;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据校验\"><a href=\"#数据校验\" class=\"headerlink\" title=\"数据校验\"></a>数据校验</h1><p>JInput中通知校验，修改components/form/JInput.vue中代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- dom --&gt;</span><br><span class=\"line\">&lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- methods --&gt;</span><br><span class=\"line\">onInput(e) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 派发一个input事件即可</span><br><span class=\"line\">    this.$emit(&#39;input&#39;, e.target.value)</span><br><span class=\"line\">    &#x2F;&#x2F; 通知父级执行校验</span><br><span class=\"line\">    this.$parent.$emit(&#39;validate&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JFormItem监听校验通知，获取规则并执行校验，修改components/form/JFormItem.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class=\"line\">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    inject:[&#39;form&#39;],&#x2F;&#x2F;注入</span><br><span class=\"line\">    mounted()&#123;&#x2F;&#x2F;监听校验事件</span><br><span class=\"line\">        this.$on(&#39;validate&#39;,()&#x3D;&gt;&#123;this.validate()&#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        validate()&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;获取对应JFormItem的校验规则</span><br><span class=\"line\">            console.log(this.form.rules[this.prop]);</span><br><span class=\"line\">            &#x2F;&#x2F;获取对应JFormItem的值</span><br><span class=\"line\">            console.log(this.form.model[this.prop]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class=\"line\">            type:String,</span><br><span class=\"line\">            default:&#39;&#39;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        prop: &#123;</span><br><span class=\"line\">            type: String</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>安装校验库async-validator： <code>npm i async-validator -S</code></p>\n<p>在components/form/JFormItem.vue中引入，并添加校验代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Schema <span class=\"keyword\">from</span> <span class=\"string\">\"async-validator\"</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">validate()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取对应校验规则</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rules = <span class=\"keyword\">this</span>.form.rules[<span class=\"keyword\">this</span>.prop];</span><br><span class=\"line\">    <span class=\"comment\">//获取校验值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.form.model[<span class=\"keyword\">this</span>.prop];</span><br><span class=\"line\">    <span class=\"comment\">//获取描述对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> desc = &#123;[<span class=\"keyword\">this</span>.prop]:rules&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//创建Schema实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> schema = <span class=\"keyword\">new</span> Schema(desc)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> schema.validate(&#123;[<span class=\"keyword\">this</span>.prop]:value&#125;,errors =&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(errors)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.error=errors[<span class=\"number\">0</span>].message</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//校验通过</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.error=<span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"表单全局校验\"><a href=\"#表单全局校验\" class=\"headerlink\" title=\"表单全局校验\"></a>表单全局校验</h1><p>为JForm提供validate方法，修改components/form/JForm.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate(cb)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取所有孩子KFormItem</span></span><br><span class=\"line\">    <span class=\"comment\">// [resultPromise]</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> task = <span class=\"keyword\">this</span>.$children</span><br><span class=\"line\">    .filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.prop) <span class=\"comment\">// 过滤掉没有prop属性的Item</span></span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.validate())</span><br><span class=\"line\">    <span class=\"comment\">//统一处理所有的Promise结果</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(tasks)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> cb(<span class=\"literal\">true</span>))</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> cb(<span class=\"literal\">false</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>仿element-ui封装一个通用的表单组件</p>","more":"<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><ul>\n<li><p>实现JForm</p>\n<ul>\n<li>指定数据，校验规则</li>\n</ul>\n</li>\n<li><p>JFormItem</p>\n<ul>\n<li>执行校验</li>\n<li>显示错误信息</li>\n</ul>\n</li>\n<li><p>JInput</p>\n<ul>\n<li>维护数据</li>\n</ul>\n</li>\n</ul>\n<p>最终理想效果：<a href=\"https://element.eleme.cn/#/zh-CN/component/form\" target=\"_blank\" rel=\"noopener\">element Form 表单</a></p>\n<h1 id=\"JInput\"><a href=\"#JInput\" class=\"headerlink\" title=\"JInput\"></a>JInput</h1><p>创建components/form/JInput.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;!-- 自定义组件双向绑定：:value  @input --&gt;</span><br><span class=\"line\">    &lt;!-- v-bind&#x3D;&quot;$attrs&quot;展开$attrs 每一个项都可以单独设置上去 --&gt;</span><br><span class=\"line\">    &lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    inheritAttrs: false, &#x2F;&#x2F; 设置为false避免attrs设置到根元素上</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      value: &#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        default: &#39;&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      type: &#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        default: &#39;text&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      onInput(e) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 派发一个input事件即可</span><br><span class=\"line\">        this.$emit(&#39;input&#39;, e.target.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用JInput\"><a href=\"#使用JInput\" class=\"headerlink\" title=\"使用JInput\"></a>使用JInput</h1><p>创建components/form/index.vue，添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class=\"line\">        &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">        &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        JInput</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现JFormItem\"><a href=\"#实现JFormItem\" class=\"headerlink\" title=\"实现JFormItem\"></a>实现JFormItem</h1><p>创建components/form/JFormItem.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class=\"line\">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class=\"line\">            type:String,</span><br><span class=\"line\">            default:&#39;&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用JFormItem\"><a href=\"#使用JFormItem\" class=\"headerlink\" title=\"使用JFormItem\"></a>使用JFormItem</h1><p>在components/form/index.vue中添加基础代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h3&gt;JForm表单&lt;&#x2F;h3&gt;&lt;hr&gt;</span><br><span class=\"line\">        &lt;j-form-item label&#x3D;&quot;用户名&quot;&gt;</span><br><span class=\"line\">            &lt;j-input v-model&#x3D;&quot;model.username&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">        &lt;&#x2F;j-form-item&gt;</span><br><span class=\"line\">        &lt;j-form-item label&#x3D;&quot;密码&quot;&gt;</span><br><span class=\"line\">            &lt;j-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;model.password&quot;&gt;&lt;&#x2F;j-input&gt;</span><br><span class=\"line\">        &lt;&#x2F;j-form-item&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class=\"line\">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        JInput,JFormItem</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现JForm\"><a href=\"#实现JForm\" class=\"headerlink\" title=\"实现JForm\"></a>实现JForm</h1><p>创建components/form/JForm.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    provide() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            form: this &#x2F;&#x2F; 将组件实例作为提供者，子代组件可方便获取</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        model: &#123;</span><br><span class=\"line\">            type: Object,</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rules: &#123;</span><br><span class=\"line\">            type: Object</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用JForm\"><a href=\"#使用JForm\" class=\"headerlink\" title=\"使用JForm\"></a>使用JForm</h1><p>在components/form/index.vue中添加基础代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt; </span><br><span class=\"line\">    &lt;!-- JForm --&gt;</span><br><span class=\"line\">    &lt;JForm :model&#x3D;&quot;userInfo&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;loginForm&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 用户名 --&gt;</span><br><span class=\"line\">      &lt;JFormItem label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class=\"line\">        &lt;JInput v-model&#x3D;&quot;userInfo.username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class=\"line\">      &lt;&#x2F;JFormItem&gt;</span><br><span class=\"line\">      &lt;!-- 密码 --&gt;</span><br><span class=\"line\">      &lt;JFormItem label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class=\"line\">        &lt;JInput type&#x3D;&quot;password&quot; v-model&#x3D;&quot;userInfo.password&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;JInput&gt;</span><br><span class=\"line\">      &lt;&#x2F;JFormItem&gt;</span><br><span class=\"line\">      &lt;!-- 提交按钮 --&gt;</span><br><span class=\"line\">      &lt;JFormItem&gt;</span><br><span class=\"line\">        &lt;button @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;JFormItem&gt;</span><br><span class=\"line\">    &lt;&#x2F;JForm&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import JInput from &quot;.&#x2F;JInput&quot;;</span><br><span class=\"line\">import JFormItem from &quot;.&#x2F;JFormItem&quot;;</span><br><span class=\"line\">import JForm from &quot;.&#x2F;JForm&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        JInput,JFormItem,JForm</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            rules: &#123;</span><br><span class=\"line\">                username: [&#123; required: true, message: &quot;请输入用户名&quot; &#125;],</span><br><span class=\"line\">                password: [&#123; required: true, message: &quot;请输入密码&quot; &#125;]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            model: &#123; username: &quot;Joker&quot;, password: &quot;&quot; &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">            this.$refs[&#39;loginForm&#39;].validate(valid &#x3D;&gt; &#123;</span><br><span class=\"line\">                if(valid)&#123;</span><br><span class=\"line\">                    alert(&quot;请求登录&quot;)</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    alert(&quot;请求失败&quot;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据校验\"><a href=\"#数据校验\" class=\"headerlink\" title=\"数据校验\"></a>数据校验</h1><p>JInput中通知校验，修改components/form/JInput.vue中代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- dom --&gt;</span><br><span class=\"line\">&lt;input :type&#x3D;&quot;type&quot; :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- methods --&gt;</span><br><span class=\"line\">onInput(e) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 派发一个input事件即可</span><br><span class=\"line\">    this.$emit(&#39;input&#39;, e.target.value)</span><br><span class=\"line\">    &#x2F;&#x2F; 通知父级执行校验</span><br><span class=\"line\">    this.$parent.$emit(&#39;validate&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JFormItem监听校验通知，获取规则并执行校验，修改components/form/JFormItem.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;label v-if&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class=\"line\">        &lt;p v-if&#x3D;&quot;error&quot;&gt;&#123;&#123;error&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    inject:[&#39;form&#39;],&#x2F;&#x2F;注入</span><br><span class=\"line\">    mounted()&#123;&#x2F;&#x2F;监听校验事件</span><br><span class=\"line\">        this.$on(&#39;validate&#39;,()&#x3D;&gt;&#123;this.validate()&#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        validate()&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;获取对应JFormItem的校验规则</span><br><span class=\"line\">            console.log(this.form.rules[this.prop]);</span><br><span class=\"line\">            &#x2F;&#x2F;获取对应JFormItem的值</span><br><span class=\"line\">            console.log(this.form.model[this.prop]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        label:&#123;&#x2F;&#x2F;输入项标签</span><br><span class=\"line\">            type:String,</span><br><span class=\"line\">            default:&#39;&#39;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        prop: &#123;</span><br><span class=\"line\">            type: String</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            error:&#39;&#39;&#x2F;&#x2F;校验错误信息</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>安装校验库async-validator： <code>npm i async-validator -S</code></p>\n<p>在components/form/JFormItem.vue中引入，并添加校验代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Schema <span class=\"keyword\">from</span> <span class=\"string\">\"async-validator\"</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">validate()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取对应校验规则</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rules = <span class=\"keyword\">this</span>.form.rules[<span class=\"keyword\">this</span>.prop];</span><br><span class=\"line\">    <span class=\"comment\">//获取校验值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.form.model[<span class=\"keyword\">this</span>.prop];</span><br><span class=\"line\">    <span class=\"comment\">//获取描述对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> desc = &#123;[<span class=\"keyword\">this</span>.prop]:rules&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//创建Schema实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> schema = <span class=\"keyword\">new</span> Schema(desc)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> schema.validate(&#123;[<span class=\"keyword\">this</span>.prop]:value&#125;,errors =&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(errors)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.error=errors[<span class=\"number\">0</span>].message</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//校验通过</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.error=<span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"表单全局校验\"><a href=\"#表单全局校验\" class=\"headerlink\" title=\"表单全局校验\"></a>表单全局校验</h1><p>为JForm提供validate方法，修改components/form/JForm.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate(cb)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取所有孩子KFormItem</span></span><br><span class=\"line\">    <span class=\"comment\">// [resultPromise]</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> task = <span class=\"keyword\">this</span>.$children</span><br><span class=\"line\">    .filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.prop) <span class=\"comment\">// 过滤掉没有prop属性的Item</span></span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.validate())</span><br><span class=\"line\">    <span class=\"comment\">//统一处理所有的Promise结果</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(tasks)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> cb(<span class=\"literal\">true</span>))</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> cb(<span class=\"literal\">false</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"Vue统一状态管理——Vuex","date":"2020-06-10T06:21:38.000Z","description":null,"_content":"\nVuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状\n态，并以相应的规则保证状态以可预测的方式发生变化。\n<!-- more -->\n\n# 安装\n\n`vue add vuex`\n\n# 起始\n\n## State\n\n将应用全局状态定义在state中\n\n```js\nstate: {\n isLogin: false\n}\n```\n\n## Mutation\n\n修改State只能通过Mutation\n\n```js\nmutations: {\n    login(state) {\n        state.isLogin = true\n    },\n    logout(state) {\n        state.isLogin = false\n    }\n},\n```\n\n## 获取和修改状态\n\n使用store.state获取状态\n\n```html\n<button @click=\"login\" v-if=\"!$store.state.isLogin\">登录</button>\n<button @click=\"logout\" v-else>登出</button>\n```\n\n修改状态只能通过store.dispatch(mutation)\n\n```js\nthis.$store.commit('login')\nthis.$store.commit('logout')\n```\n\n## Action\n\nAction 类似于 mutation，不同在于：\n- Action 提交的是 mutation，而不是直接变更状态。\n- Action 可以包含任意异步操作。\n\n```js\n//参数1是vuex传递的上下文context:{commit,dispatch,state}\nlogin({commit}, username) {\n    //模拟登陆api调用，1s后如果登录名是admin则登陆成功\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (username === 'admin') {\n                commit('login')\n                resolve()\n            } else {\n                reject()\n            }\n        }, 1000);\n    })\n}\n```\n\n派发动作，触发actions\n\n```js\nthis.$store.dispatch('login', 'admin').then(() => {\n        this.$router.push(this.$route.query.redirect)\n}).catch(() => {\n    alert('用户名或密码错误')\n})\n```\n\n# 最佳实践\n\n## 模块化\n\n使用modules定义多个子模块有利于组件复杂状态\n\n```js\nimport user from './user'\n\nexport default new Vuex.Store({\n    modules:{\n        user,\n    }\n})\n```\n\n移动先前登陆状态相关代码到store文件夹下新建的user.js中\n\n```js\nexport default {\n    namespaced: true,//避免命名冲突\n    //...\n}\n```\n\n访问方式相应变化\n\n```html\n<!-- Login.vue -->\n<button @click=\"login\" v-if=\"!$store.state.user.isLogin\">登录</button>\n```\n```js\nthis.$store.dispatch('user/login', 'admin').then(() => {\n    const redirect = this.$route.query.redirect || '/'\n    this.$router.push(redirect)\n}).catch(() => {\n    alert('用户名或密码错误')\n})\n```\n```js\n// router/index.js\nstore.state.user.isLogin\n```\n\n## mapState()/mapMutation()/mapAction()\n\n通过这些映射方法可以让大家少敲几个字，而起避免对store的直接访问\n\nstate相关修改,`Login.vue`\n```html\n<button @click=\"login\" v-if=\"!isLogin\">登录</button>\n```\n```js\nimport { mapState } from 'vuex'\ncomputed: {\n    ...mapState('user', ['isLogin'])\n}\n```\n\naction相关修改\n\n```js\nimport { mapActions } from 'vuex'\nmethods:{\n    login(){\n        this['user/login'](\"admin\").then(()=>{\n            ...\n        }).catch(()=>{\n            ...\n        })\n    },\n    ...mapActions(['user/login','user/logout'])\n}\n```\n## Getters\n\n可以使用getters从store的state中派生出一些状态\n\n```js\nexport default {\n    namespaced: true,\n    state:{\n        isLogin:false,\n        username:''//用户名\n    },\n    mutations:{\n        login(state,username){\n            state.isLogin = true\n            state.username = username\n        },\n        logout(){\n            state.isLogin = false\n            state.username = ''\n        }\n    },\n    getters:{\n        welcome: state => {\n            return state.username + ',欢迎回来'\n        }\n    },\n    actions:{\n        login({commit},username){\n            return new Promise((resolve,reject)=>{\n                setTimeout(()=>{\n                    if(username==='admin'){\n                        commit('login',username)\n                        resolve()\n                    }else{\n                        reject()\n                    }\n                },1000)\n                \n            })\n        }\n    }\n}\n```\n在需要渲染的页面中\n```html\n<span v-if=\"isLogin\">\n    {{welcome}}\n    <button>注销</button>\n</span>\n```\n```js\nimport {mapState,mapGetters} from 'vuex'\nexport default {\n    computed:{\n        ...mapState('user',['isLogin'])\n        ...mapGetters('user',['welcome'])\n    }\n}\n```\n\n## 严格模式\n\n严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。开启严格模式`strict: true`\n\n```js\nconst store = new Vuex.Store({\n// ...\n    strict: true\n})\n```\n\n## 插件\n\nVuex的store接受plugins选项，这个选项暴露出每次mutation的钩子。Vuex插件就是一个函数，它接收 store 作为唯一参数：\n\n```js\nconst myPlugin = store => {\n// 当 store 初始化后调用\n}\n```\n在store文件夹下新建plugins文件夹并新建persist.js\n\n```js\nexport default store =>{\n    //store初始化的时候，将存储在localStoreage的状态还原\n    if(localStoreage){\n        const user = JSON.parse(localStorage.getItem('user'))\n        if(user){\n            store.commit('login',user.username)\n        }\n    }\n    //如果用户相关状态发生变化，自动存入localStoreage\n    store.subscribe((mutation,state)=>{\n        //{type:'user/login'}\n        //{type:'user/logout'}\n        //{type:'cart/addcart'}\n        if(mutation.type==='user/login'){\n            const user = JSON.stringify(state.user)\n            localStoreage.setItem('user',user)\n        }else if(mutation.type==='user/logout'){\n            localStoreage.removeItem('user')\n        }\n    })\n}\n```\n注册插件：\n\n在store的index.js中\n\n```js\n//...\nimport persist from './plugins/persist'\n\nconst store = new Vuex.Store({\n    // ...\n    plugins: [persist]\n})\n```\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/06/Vue统一状态管理——Vuex.md","raw":"---\ntitle: Vue统一状态管理——Vuex\ndate: 2020-06-10 14:21:38\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\nVuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状\n态，并以相应的规则保证状态以可预测的方式发生变化。\n<!-- more -->\n\n# 安装\n\n`vue add vuex`\n\n# 起始\n\n## State\n\n将应用全局状态定义在state中\n\n```js\nstate: {\n isLogin: false\n}\n```\n\n## Mutation\n\n修改State只能通过Mutation\n\n```js\nmutations: {\n    login(state) {\n        state.isLogin = true\n    },\n    logout(state) {\n        state.isLogin = false\n    }\n},\n```\n\n## 获取和修改状态\n\n使用store.state获取状态\n\n```html\n<button @click=\"login\" v-if=\"!$store.state.isLogin\">登录</button>\n<button @click=\"logout\" v-else>登出</button>\n```\n\n修改状态只能通过store.dispatch(mutation)\n\n```js\nthis.$store.commit('login')\nthis.$store.commit('logout')\n```\n\n## Action\n\nAction 类似于 mutation，不同在于：\n- Action 提交的是 mutation，而不是直接变更状态。\n- Action 可以包含任意异步操作。\n\n```js\n//参数1是vuex传递的上下文context:{commit,dispatch,state}\nlogin({commit}, username) {\n    //模拟登陆api调用，1s后如果登录名是admin则登陆成功\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (username === 'admin') {\n                commit('login')\n                resolve()\n            } else {\n                reject()\n            }\n        }, 1000);\n    })\n}\n```\n\n派发动作，触发actions\n\n```js\nthis.$store.dispatch('login', 'admin').then(() => {\n        this.$router.push(this.$route.query.redirect)\n}).catch(() => {\n    alert('用户名或密码错误')\n})\n```\n\n# 最佳实践\n\n## 模块化\n\n使用modules定义多个子模块有利于组件复杂状态\n\n```js\nimport user from './user'\n\nexport default new Vuex.Store({\n    modules:{\n        user,\n    }\n})\n```\n\n移动先前登陆状态相关代码到store文件夹下新建的user.js中\n\n```js\nexport default {\n    namespaced: true,//避免命名冲突\n    //...\n}\n```\n\n访问方式相应变化\n\n```html\n<!-- Login.vue -->\n<button @click=\"login\" v-if=\"!$store.state.user.isLogin\">登录</button>\n```\n```js\nthis.$store.dispatch('user/login', 'admin').then(() => {\n    const redirect = this.$route.query.redirect || '/'\n    this.$router.push(redirect)\n}).catch(() => {\n    alert('用户名或密码错误')\n})\n```\n```js\n// router/index.js\nstore.state.user.isLogin\n```\n\n## mapState()/mapMutation()/mapAction()\n\n通过这些映射方法可以让大家少敲几个字，而起避免对store的直接访问\n\nstate相关修改,`Login.vue`\n```html\n<button @click=\"login\" v-if=\"!isLogin\">登录</button>\n```\n```js\nimport { mapState } from 'vuex'\ncomputed: {\n    ...mapState('user', ['isLogin'])\n}\n```\n\naction相关修改\n\n```js\nimport { mapActions } from 'vuex'\nmethods:{\n    login(){\n        this['user/login'](\"admin\").then(()=>{\n            ...\n        }).catch(()=>{\n            ...\n        })\n    },\n    ...mapActions(['user/login','user/logout'])\n}\n```\n## Getters\n\n可以使用getters从store的state中派生出一些状态\n\n```js\nexport default {\n    namespaced: true,\n    state:{\n        isLogin:false,\n        username:''//用户名\n    },\n    mutations:{\n        login(state,username){\n            state.isLogin = true\n            state.username = username\n        },\n        logout(){\n            state.isLogin = false\n            state.username = ''\n        }\n    },\n    getters:{\n        welcome: state => {\n            return state.username + ',欢迎回来'\n        }\n    },\n    actions:{\n        login({commit},username){\n            return new Promise((resolve,reject)=>{\n                setTimeout(()=>{\n                    if(username==='admin'){\n                        commit('login',username)\n                        resolve()\n                    }else{\n                        reject()\n                    }\n                },1000)\n                \n            })\n        }\n    }\n}\n```\n在需要渲染的页面中\n```html\n<span v-if=\"isLogin\">\n    {{welcome}}\n    <button>注销</button>\n</span>\n```\n```js\nimport {mapState,mapGetters} from 'vuex'\nexport default {\n    computed:{\n        ...mapState('user',['isLogin'])\n        ...mapGetters('user',['welcome'])\n    }\n}\n```\n\n## 严格模式\n\n严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。开启严格模式`strict: true`\n\n```js\nconst store = new Vuex.Store({\n// ...\n    strict: true\n})\n```\n\n## 插件\n\nVuex的store接受plugins选项，这个选项暴露出每次mutation的钩子。Vuex插件就是一个函数，它接收 store 作为唯一参数：\n\n```js\nconst myPlugin = store => {\n// 当 store 初始化后调用\n}\n```\n在store文件夹下新建plugins文件夹并新建persist.js\n\n```js\nexport default store =>{\n    //store初始化的时候，将存储在localStoreage的状态还原\n    if(localStoreage){\n        const user = JSON.parse(localStorage.getItem('user'))\n        if(user){\n            store.commit('login',user.username)\n        }\n    }\n    //如果用户相关状态发生变化，自动存入localStoreage\n    store.subscribe((mutation,state)=>{\n        //{type:'user/login'}\n        //{type:'user/logout'}\n        //{type:'cart/addcart'}\n        if(mutation.type==='user/login'){\n            const user = JSON.stringify(state.user)\n            localStoreage.setItem('user',user)\n        }else if(mutation.type==='user/logout'){\n            localStoreage.removeItem('user')\n        }\n    })\n}\n```\n注册插件：\n\n在store的index.js中\n\n```js\n//...\nimport persist from './plugins/persist'\n\nconst store = new Vuex.Store({\n    // ...\n    plugins: [persist]\n})\n```\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/06/Vue统一状态管理——Vuex","published":1,"updated":"2020-07-12T07:29:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53l00231r0q7fgq3yw7","content":"<p>Vuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状<br>态，并以相应的规则保证状态以可预测的方式发生变化。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><code>vue add vuex</code></p>\n<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>将应用全局状态定义在state中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state: &#123;</span><br><span class=\"line\"> isLogin: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h2><p>修改State只能通过Mutation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">    login(state) &#123;</span><br><span class=\"line\">        state.isLogin = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    logout(state) &#123;</span><br><span class=\"line\">        state.isLogin = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取和修改状态\"><a href=\"#获取和修改状态\" class=\"headerlink\" title=\"获取和修改状态\"></a>获取和修改状态</h2><p>使用store.state获取状态</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!$store.state.isLogin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"logout\"</span> <span class=\"attr\">v-else</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改状态只能通过store.dispatch(mutation)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'login'</span>)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'logout'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数1是vuex传递的上下文context:&#123;commit,dispatch,state&#125;</span></span><br><span class=\"line\">login(&#123;commit&#125;, username) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//模拟登陆api调用，1s后如果登录名是admin则登陆成功</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (username === <span class=\"string\">'admin'</span>) &#123;</span><br><span class=\"line\">                commit(<span class=\"string\">'login'</span>)</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>派发动作，触发actions</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'login'</span>, <span class=\"string\">'admin'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$router.push(<span class=\"keyword\">this</span>.$route.query.redirect)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'用户名或密码错误'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h1><h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><p>使用modules定义多个子模块有利于组件复杂状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> user <span class=\"keyword\">from</span> <span class=\"string\">'./user'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    modules:&#123;</span><br><span class=\"line\">        user,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>移动先前登陆状态相关代码到store文件夹下新建的user.js中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    namespaced: <span class=\"literal\">true</span>,<span class=\"comment\">//避免命名冲突</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问方式相应变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Login.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!$store.state.user.isLogin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'user/login'</span>, <span class=\"string\">'admin'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> redirect = <span class=\"keyword\">this</span>.$route.query.redirect || <span class=\"string\">'/'</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.push(redirect)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'用户名或密码错误'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router/index.js</span></span><br><span class=\"line\">store.state.user.isLogin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mapState-mapMutation-mapAction\"><a href=\"#mapState-mapMutation-mapAction\" class=\"headerlink\" title=\"mapState()/mapMutation()/mapAction()\"></a>mapState()/mapMutation()/mapAction()</h2><p>通过这些映射方法可以让大家少敲几个字，而起避免对store的直接访问</p>\n<p>state相关修改,<code>Login.vue</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!isLogin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    ...mapState(<span class=\"string\">'user'</span>, [<span class=\"string\">'isLogin'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>action相关修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    login()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[<span class=\"string\">'user/login'</span>](<span class=\"string\">\"admin\"</span>).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...mapActions([<span class=\"string\">'user/login'</span>,<span class=\"string\">'user/logout'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h2><p>可以使用getters从store的state中派生出一些状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    state:&#123;</span><br><span class=\"line\">        isLogin:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        username:<span class=\"string\">''</span><span class=\"comment\">//用户名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations:&#123;</span><br><span class=\"line\">        login(state,username)&#123;</span><br><span class=\"line\">            state.isLogin = <span class=\"literal\">true</span></span><br><span class=\"line\">            state.username = username</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        logout()&#123;</span><br><span class=\"line\">            state.isLogin = <span class=\"literal\">false</span></span><br><span class=\"line\">            state.username = <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters:&#123;</span><br><span class=\"line\">        welcome: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.username + <span class=\"string\">',欢迎回来'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    actions:&#123;</span><br><span class=\"line\">        login(&#123;commit&#125;,username)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(username===<span class=\"string\">'admin'</span>)&#123;</span><br><span class=\"line\">                        commit(<span class=\"string\">'login'</span>,username)</span><br><span class=\"line\">                        resolve()</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        reject()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在需要渲染的页面中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"isLogin\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;welcome&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>注销<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState,mapGetters&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        ...mapState(<span class=\"string\">'user'</span>,[<span class=\"string\">'isLogin'</span>])</span><br><span class=\"line\">        ...mapGetters(<span class=\"string\">'user'</span>,[<span class=\"string\">'welcome'</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。开启严格模式<code>strict: true</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">    strict: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>Vuex的store接受plugins选项，这个选项暴露出每次mutation的钩子。Vuex插件就是一个函数，它接收 store 作为唯一参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPlugin = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 当 store 初始化后调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在store文件夹下新建plugins文件夹并新建persist.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store =&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//store初始化的时候，将存储在localStoreage的状态还原</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localStoreage)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> user = <span class=\"built_in\">JSON</span>.parse(localStorage.getItem(<span class=\"string\">'user'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user)&#123;</span><br><span class=\"line\">            store.commit(<span class=\"string\">'login'</span>,user.username)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果用户相关状态发生变化，自动存入localStoreage</span></span><br><span class=\"line\">    store.subscribe(<span class=\"function\">(<span class=\"params\">mutation,state</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//&#123;type:'user/login'&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;type:'user/logout'&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;type:'cart/addcart'&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mutation.type===<span class=\"string\">'user/login'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> user = <span class=\"built_in\">JSON</span>.stringify(state.user)</span><br><span class=\"line\">            localStoreage.setItem(<span class=\"string\">'user'</span>,user)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mutation.type===<span class=\"string\">'user/logout'</span>)&#123;</span><br><span class=\"line\">            localStoreage.removeItem(<span class=\"string\">'user'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注册插件：</p>\n<p>在store的index.js中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> persist <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/persist'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    plugins: [persist]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>Vuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状<br>态，并以相应的规则保证状态以可预测的方式发生变化。</p>","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><code>vue add vuex</code></p>\n<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>将应用全局状态定义在state中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state: &#123;</span><br><span class=\"line\"> isLogin: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h2><p>修改State只能通过Mutation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">    login(state) &#123;</span><br><span class=\"line\">        state.isLogin = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    logout(state) &#123;</span><br><span class=\"line\">        state.isLogin = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取和修改状态\"><a href=\"#获取和修改状态\" class=\"headerlink\" title=\"获取和修改状态\"></a>获取和修改状态</h2><p>使用store.state获取状态</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!$store.state.isLogin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"logout\"</span> <span class=\"attr\">v-else</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改状态只能通过store.dispatch(mutation)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'login'</span>)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'logout'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数1是vuex传递的上下文context:&#123;commit,dispatch,state&#125;</span></span><br><span class=\"line\">login(&#123;commit&#125;, username) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//模拟登陆api调用，1s后如果登录名是admin则登陆成功</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (username === <span class=\"string\">'admin'</span>) &#123;</span><br><span class=\"line\">                commit(<span class=\"string\">'login'</span>)</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>派发动作，触发actions</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'login'</span>, <span class=\"string\">'admin'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$router.push(<span class=\"keyword\">this</span>.$route.query.redirect)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'用户名或密码错误'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h1><h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><p>使用modules定义多个子模块有利于组件复杂状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> user <span class=\"keyword\">from</span> <span class=\"string\">'./user'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    modules:&#123;</span><br><span class=\"line\">        user,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>移动先前登陆状态相关代码到store文件夹下新建的user.js中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    namespaced: <span class=\"literal\">true</span>,<span class=\"comment\">//避免命名冲突</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问方式相应变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Login.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!$store.state.user.isLogin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'user/login'</span>, <span class=\"string\">'admin'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> redirect = <span class=\"keyword\">this</span>.$route.query.redirect || <span class=\"string\">'/'</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.push(redirect)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'用户名或密码错误'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router/index.js</span></span><br><span class=\"line\">store.state.user.isLogin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mapState-mapMutation-mapAction\"><a href=\"#mapState-mapMutation-mapAction\" class=\"headerlink\" title=\"mapState()/mapMutation()/mapAction()\"></a>mapState()/mapMutation()/mapAction()</h2><p>通过这些映射方法可以让大家少敲几个字，而起避免对store的直接访问</p>\n<p>state相关修改,<code>Login.vue</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!isLogin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    ...mapState(<span class=\"string\">'user'</span>, [<span class=\"string\">'isLogin'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>action相关修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    login()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[<span class=\"string\">'user/login'</span>](<span class=\"string\">\"admin\"</span>).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...mapActions([<span class=\"string\">'user/login'</span>,<span class=\"string\">'user/logout'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h2><p>可以使用getters从store的state中派生出一些状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    state:&#123;</span><br><span class=\"line\">        isLogin:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        username:<span class=\"string\">''</span><span class=\"comment\">//用户名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations:&#123;</span><br><span class=\"line\">        login(state,username)&#123;</span><br><span class=\"line\">            state.isLogin = <span class=\"literal\">true</span></span><br><span class=\"line\">            state.username = username</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        logout()&#123;</span><br><span class=\"line\">            state.isLogin = <span class=\"literal\">false</span></span><br><span class=\"line\">            state.username = <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters:&#123;</span><br><span class=\"line\">        welcome: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.username + <span class=\"string\">',欢迎回来'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    actions:&#123;</span><br><span class=\"line\">        login(&#123;commit&#125;,username)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(username===<span class=\"string\">'admin'</span>)&#123;</span><br><span class=\"line\">                        commit(<span class=\"string\">'login'</span>,username)</span><br><span class=\"line\">                        resolve()</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        reject()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在需要渲染的页面中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"isLogin\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;welcome&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>注销<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState,mapGetters&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        ...mapState(<span class=\"string\">'user'</span>,[<span class=\"string\">'isLogin'</span>])</span><br><span class=\"line\">        ...mapGetters(<span class=\"string\">'user'</span>,[<span class=\"string\">'welcome'</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。开启严格模式<code>strict: true</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">    strict: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>Vuex的store接受plugins选项，这个选项暴露出每次mutation的钩子。Vuex插件就是一个函数，它接收 store 作为唯一参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPlugin = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 当 store 初始化后调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在store文件夹下新建plugins文件夹并新建persist.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store =&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//store初始化的时候，将存储在localStoreage的状态还原</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localStoreage)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> user = <span class=\"built_in\">JSON</span>.parse(localStorage.getItem(<span class=\"string\">'user'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user)&#123;</span><br><span class=\"line\">            store.commit(<span class=\"string\">'login'</span>,user.username)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果用户相关状态发生变化，自动存入localStoreage</span></span><br><span class=\"line\">    store.subscribe(<span class=\"function\">(<span class=\"params\">mutation,state</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//&#123;type:'user/login'&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;type:'user/logout'&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;type:'cart/addcart'&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mutation.type===<span class=\"string\">'user/login'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> user = <span class=\"built_in\">JSON</span>.stringify(state.user)</span><br><span class=\"line\">            localStoreage.setItem(<span class=\"string\">'user'</span>,user)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mutation.type===<span class=\"string\">'user/logout'</span>)&#123;</span><br><span class=\"line\">            localStoreage.removeItem(<span class=\"string\">'user'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注册插件：</p>\n<p>在store的index.js中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> persist <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/persist'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    plugins: [persist]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"在vue项目中动态加载js","date":"2020-06-03T00:54:13.000Z","description":null,"_content":"\n通常情况下，如果网页加载的js文件较多并且文件较大的时候，一次性加载完毕的话，会非常的影响网页加载的速度，当然将会严重影响用户体验，最终会影响的站点的人气，所以我们要想办法解决这个问题。\n\n<!-- more -->\n\n很多时候，加载的js代码在当前页面功能中并不需要，所以如果能够根据需要动态的加载js文件，那么将会极大的提高网页的加载速度，下面就通过代码实例介绍一下如何动态加载js。\n\nvue中常用的引入js文件的方式一般有三种\n\n- 在html文件中`<script src=\"\" type=\"text/javascript\"></script>`引入\n\n- 在`main.js`或需要引用的`.vue`文件中\n```js\nimport a from '../a'//要用到export导出之后 才能用import导入.\n//或\nimport '../a'//和直接引入script标签是一样的\n```\n\n假设我们有这样一个比较极限的应用场景：\n\n我们在登录页需要支持facebook，google，微信等十多个平台的第三方登录，并且每个第三方登录所需要的js文件特别大，用我们常规的用法去加载的话在用户第一次使用的时候就需要加载特别多的js文件，势必会造成用户体验不好的情况\n\n那么我们应该怎么去优化呢\n\n# vue-plugin-load-script\n\n安装\n\n```\nnpm install --save vue-plugin-load-script\n```\n\n使用\n\n```js\n// In main.js\nimport LoadScript from 'vue-plugin-load-script';\n\nVue.use(LoadScript);\n```\n\n```js\n//login.vue\nmethods:{\n    wxLogin(){\n        this.$loadScript(\"https://wx登录需要的js\")\n        .then(() => {\n        // Script is loaded, do something\n        })\n        .catch(() => {\n        // Failed to fetch script\n        });\n    },\n    googleLogin(){\n        this.$loadScript(\"https://谷歌登录需要的js\")\n        .then(() => {\n        // Script is loaded, do something\n        })\n        .catch(() => {\n        // Failed to fetch script\n        });\n    },\n    ......\n}\n```\n\n这样用户点击什么登录方式就会去加载对应的第三方登录需要的js，从而避免了加载过多不需要的js造成页面性能浪费\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/06/在vue项目中动态加载js.md","raw":"---\ntitle: 在vue项目中动态加载js\ndate: 2020-06-03 08:54:13\ntags:\n    - vue\ncategories:\n    - vue\ndescription:\n---\n\n通常情况下，如果网页加载的js文件较多并且文件较大的时候，一次性加载完毕的话，会非常的影响网页加载的速度，当然将会严重影响用户体验，最终会影响的站点的人气，所以我们要想办法解决这个问题。\n\n<!-- more -->\n\n很多时候，加载的js代码在当前页面功能中并不需要，所以如果能够根据需要动态的加载js文件，那么将会极大的提高网页的加载速度，下面就通过代码实例介绍一下如何动态加载js。\n\nvue中常用的引入js文件的方式一般有三种\n\n- 在html文件中`<script src=\"\" type=\"text/javascript\"></script>`引入\n\n- 在`main.js`或需要引用的`.vue`文件中\n```js\nimport a from '../a'//要用到export导出之后 才能用import导入.\n//或\nimport '../a'//和直接引入script标签是一样的\n```\n\n假设我们有这样一个比较极限的应用场景：\n\n我们在登录页需要支持facebook，google，微信等十多个平台的第三方登录，并且每个第三方登录所需要的js文件特别大，用我们常规的用法去加载的话在用户第一次使用的时候就需要加载特别多的js文件，势必会造成用户体验不好的情况\n\n那么我们应该怎么去优化呢\n\n# vue-plugin-load-script\n\n安装\n\n```\nnpm install --save vue-plugin-load-script\n```\n\n使用\n\n```js\n// In main.js\nimport LoadScript from 'vue-plugin-load-script';\n\nVue.use(LoadScript);\n```\n\n```js\n//login.vue\nmethods:{\n    wxLogin(){\n        this.$loadScript(\"https://wx登录需要的js\")\n        .then(() => {\n        // Script is loaded, do something\n        })\n        .catch(() => {\n        // Failed to fetch script\n        });\n    },\n    googleLogin(){\n        this.$loadScript(\"https://谷歌登录需要的js\")\n        .then(() => {\n        // Script is loaded, do something\n        })\n        .catch(() => {\n        // Failed to fetch script\n        });\n    },\n    ......\n}\n```\n\n这样用户点击什么登录方式就会去加载对应的第三方登录需要的js，从而避免了加载过多不需要的js造成页面性能浪费\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/06/在vue项目中动态加载js","published":1,"updated":"2020-07-11T15:20:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53m00271r0qbqax996q","content":"<p>通常情况下，如果网页加载的js文件较多并且文件较大的时候，一次性加载完毕的话，会非常的影响网页加载的速度，当然将会严重影响用户体验，最终会影响的站点的人气，所以我们要想办法解决这个问题。</p>\n<a id=\"more\"></a>\n\n<p>很多时候，加载的js代码在当前页面功能中并不需要，所以如果能够根据需要动态的加载js文件，那么将会极大的提高网页的加载速度，下面就通过代码实例介绍一下如何动态加载js。</p>\n<p>vue中常用的引入js文件的方式一般有三种</p>\n<ul>\n<li><p>在html文件中<code>&lt;script src=&quot;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>引入</p>\n</li>\n<li><p>在<code>main.js</code>或需要引用的<code>.vue</code>文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">'../a'</span><span class=\"comment\">//要用到export导出之后 才能用import导入.</span></span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../a'</span><span class=\"comment\">//和直接引入script标签是一样的</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>假设我们有这样一个比较极限的应用场景：</p>\n<p>我们在登录页需要支持facebook，google，微信等十多个平台的第三方登录，并且每个第三方登录所需要的js文件特别大，用我们常规的用法去加载的话在用户第一次使用的时候就需要加载特别多的js文件，势必会造成用户体验不好的情况</p>\n<p>那么我们应该怎么去优化呢</p>\n<h1 id=\"vue-plugin-load-script\"><a href=\"#vue-plugin-load-script\" class=\"headerlink\" title=\"vue-plugin-load-script\"></a>vue-plugin-load-script</h1><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vue-plugin-load-script</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> LoadScript <span class=\"keyword\">from</span> <span class=\"string\">'vue-plugin-load-script'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(LoadScript);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//login.vue</span></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    wxLogin()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$loadScript(<span class=\"string\">\"https://wx登录需要的js\"</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Script is loaded, do something</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Failed to fetch script</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    googleLogin()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$loadScript(<span class=\"string\">\"https://谷歌登录需要的js\"</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Script is loaded, do something</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Failed to fetch script</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样用户点击什么登录方式就会去加载对应的第三方登录需要的js，从而避免了加载过多不需要的js造成页面性能浪费</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>通常情况下，如果网页加载的js文件较多并且文件较大的时候，一次性加载完毕的话，会非常的影响网页加载的速度，当然将会严重影响用户体验，最终会影响的站点的人气，所以我们要想办法解决这个问题。</p>","more":"<p>很多时候，加载的js代码在当前页面功能中并不需要，所以如果能够根据需要动态的加载js文件，那么将会极大的提高网页的加载速度，下面就通过代码实例介绍一下如何动态加载js。</p>\n<p>vue中常用的引入js文件的方式一般有三种</p>\n<ul>\n<li><p>在html文件中<code>&lt;script src=&quot;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>引入</p>\n</li>\n<li><p>在<code>main.js</code>或需要引用的<code>.vue</code>文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">'../a'</span><span class=\"comment\">//要用到export导出之后 才能用import导入.</span></span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../a'</span><span class=\"comment\">//和直接引入script标签是一样的</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>假设我们有这样一个比较极限的应用场景：</p>\n<p>我们在登录页需要支持facebook，google，微信等十多个平台的第三方登录，并且每个第三方登录所需要的js文件特别大，用我们常规的用法去加载的话在用户第一次使用的时候就需要加载特别多的js文件，势必会造成用户体验不好的情况</p>\n<p>那么我们应该怎么去优化呢</p>\n<h1 id=\"vue-plugin-load-script\"><a href=\"#vue-plugin-load-script\" class=\"headerlink\" title=\"vue-plugin-load-script\"></a>vue-plugin-load-script</h1><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vue-plugin-load-script</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> LoadScript <span class=\"keyword\">from</span> <span class=\"string\">'vue-plugin-load-script'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(LoadScript);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//login.vue</span></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    wxLogin()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$loadScript(<span class=\"string\">\"https://wx登录需要的js\"</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Script is loaded, do something</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Failed to fetch script</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    googleLogin()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$loadScript(<span class=\"string\">\"https://谷歌登录需要的js\"</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Script is loaded, do something</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Failed to fetch script</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样用户点击什么登录方式就会去加载对应的第三方登录需要的js，从而避免了加载过多不需要的js造成页面性能浪费</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"mac电脑也能模拟ie浏览器了","date":"2021-01-10T03:01:42.000Z","description":null,"_content":"\n在我们日常开发中难免会遇到需要兼容ie浏览器的情况，这就让我们mac用户十分头疼。\n本文可以解决此类问题\n<!-- more -->\n\n1. 打开safair浏览器，在偏好设置 -> 高级 -> 在菜单栏中显示“开发”菜单\n\n2. 开发 -> 用户代理\n\n    - 有需要的ie版本则选择需要的版本\n\n    - 没有的话，点开其他，参照下表贴入需要的对应的代理字符串\n\n    |  系统平台   | 浏览器  | 代理字符串  |\n    |  ----  | ----  |----  |\n    |  Windows  | IE 5 | Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1) |\n    |  Windows  | IE 6 | Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1) |\n    |  Windows  | IE 7 | Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; Trident/4.0; SLCC1) |\n    |  Windows  | IE 8 | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0) |\n    | Windows  | IE 9 |Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0) |\n    | Windows  | IE 10 |Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0) |\n    | Windows  | IE 11 | Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko |\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/01/mac电脑也能模拟ie浏览器了.md","raw":"---\ntitle: mac电脑也能模拟ie浏览器了\ndate: 2021-01-10 11:01:42\ntags:\n    - 前端\n    - ie\ncategories:\n    - 前端\n    - ie\ndescription:\n---\n\n在我们日常开发中难免会遇到需要兼容ie浏览器的情况，这就让我们mac用户十分头疼。\n本文可以解决此类问题\n<!-- more -->\n\n1. 打开safair浏览器，在偏好设置 -> 高级 -> 在菜单栏中显示“开发”菜单\n\n2. 开发 -> 用户代理\n\n    - 有需要的ie版本则选择需要的版本\n\n    - 没有的话，点开其他，参照下表贴入需要的对应的代理字符串\n\n    |  系统平台   | 浏览器  | 代理字符串  |\n    |  ----  | ----  |----  |\n    |  Windows  | IE 5 | Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1) |\n    |  Windows  | IE 6 | Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1) |\n    |  Windows  | IE 7 | Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; Trident/4.0; SLCC1) |\n    |  Windows  | IE 8 | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0) |\n    | Windows  | IE 9 |Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0) |\n    | Windows  | IE 10 |Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0) |\n    | Windows  | IE 11 | Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko |\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/01/mac电脑也能模拟ie浏览器了","published":1,"updated":"2021-01-27T03:01:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53m002a1r0q4s4ca5be","content":"<p>在我们日常开发中难免会遇到需要兼容ie浏览器的情况，这就让我们mac用户十分头疼。<br>本文可以解决此类问题</p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>打开safair浏览器，在偏好设置 -&gt; 高级 -&gt; 在菜单栏中显示“开发”菜单</p>\n</li>\n<li><p>开发 -&gt; 用户代理</p>\n<ul>\n<li><p>有需要的ie版本则选择需要的版本</p>\n</li>\n<li><p>没有的话，点开其他，参照下表贴入需要的对应的代理字符串</p>\n<table>\n<thead>\n<tr>\n<th>系统平台</th>\n<th>浏览器</th>\n<th>代理字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Windows</td>\n<td>IE 5</td>\n<td>Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 6</td>\n<td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 7</td>\n<td>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; Trident/4.0; SLCC1)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 8</td>\n<td>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 9</td>\n<td>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 10</td>\n<td>Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 11</td>\n<td>Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ol>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>在我们日常开发中难免会遇到需要兼容ie浏览器的情况，这就让我们mac用户十分头疼。<br>本文可以解决此类问题</p>","more":"<ol>\n<li><p>打开safair浏览器，在偏好设置 -&gt; 高级 -&gt; 在菜单栏中显示“开发”菜单</p>\n</li>\n<li><p>开发 -&gt; 用户代理</p>\n<ul>\n<li><p>有需要的ie版本则选择需要的版本</p>\n</li>\n<li><p>没有的话，点开其他，参照下表贴入需要的对应的代理字符串</p>\n<table>\n<thead>\n<tr>\n<th>系统平台</th>\n<th>浏览器</th>\n<th>代理字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Windows</td>\n<td>IE 5</td>\n<td>Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 6</td>\n<td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 7</td>\n<td>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; Trident/4.0; SLCC1)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 8</td>\n<td>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 9</td>\n<td>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 10</td>\n<td>Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>IE 11</td>\n<td>Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ol>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"JS面向对象","date":"2021-01-20T03:19:04.000Z","description":null,"_content":"\n面向对象编程\n\n<!-- more -->\n\n## new 运算符\n\n1. 执行函数；\n2. 自动创建空对象\n3. 把创建的对象指向另一个对象\n4. 吧空对象和函数里的this衔接起来(this指向实例化对象)\n5. 隐式返还this\n\n```js\nfunction test(){\n    console.log(\"test....\")\n}\n\ntest();\nnew test;\nnew test(); \n//这三种方法执行效果相同\n\n```\n简化工厂模式  -----> 构造函数\n\n - 约定俗成 ： 首字母大写\n\n - 属性放在构造原型；方法放在原型\n\n```js\nfunction Tab(){\n    // let obj = {}; ---> this\n    // obj.name = \"张三\";\n    // obj.hobby = function(){\n    this.name = \"张三\";\n    this.hobby = function(){\n        console.log(\"篮球\");\n    }\n    // return obj;\n}\nlet tab1 = new Tab();\n\nconsole.log(tab1.__proto__===Tab.prototype)  //true\nconsole.log(Tab.prototype.__proto__===Object.prototype) //true\nconsole.log(Object.prototype.__proto__) //null\n\nTab.prototype.psFor = function(){\n    console.log('psFor...')\n}\n\nlet tab2 = new Tab();\nconsole.log(tab1.psFor === tab2.psFor)  // true\n\nTab.prototype.foods = function(){\n    console.log(this.name,'foods...')\n}\n\ntab1.foods()\n\n```\n> 每个原型上都有一个预定义属性 ： constructor\n> 覆盖原本的 constructor 属性\n> 用以下写法必须要写constructor,不然会找不到对象的原型指向\n\n```js\n\nTab.prototype={\n    constructor:Tab,\n    psFor(){\n        console.log('psFor...')\n    },\n    hobby(){\n        console.log('hobby...')\n    }\n}\n\nlet str = '123saar'\nif(str.constructor===String){\n    console.log(\"字符串\")\n}else{\n    console.log(\"不是\")\n}\n//字符串\n```\n\n## es6 类\n\n```js\nclass Drag{\n    static height = \"178cm\"; //静态属性 也可以这样写静态方法\n    constructor(age){\n        this.name = \"张三\"\n        this.age = age\n    }\n    hobby(){\n        console.log(\"篮球\")\n    }\n    setStyle(){\n        console.log(\"父类逻辑\")\n    }\n    testSuper(){\n        console.log(\"父类test逻辑\")\n    }\n}\n\nDrag.test = function(){  //静态方法  也可这样写静态属性\n    console.log('test...')\n}\n\nDrag.test()\n\nconsole.log(Drag.height) //178cm\n\nconsole.log(typeof Drag)  //function\nlet drag1 = new Drag()\n```\n\n继承\n\n```js\nclass LimitDrag extends Drag{\n    constructor(age){\n        super(age);\n    }\n    setStyle(){\n        console.log(\"子类逻辑\")\n    }\n    testSuper(){\n        super.testSuper()  //调用父类\n        console.log(\"子类test逻辑\")\n    }\n}\nlet drag2 = new LimitDrag(20)\n\n\nconsole.log(LimitDrag.height) //178cm  静态属性方法在类上继承\nconsole.log(drag2.height) //undefined  \n\ndrag2.setStyle()  //子类逻辑\ndrag2.testSuper()  //父类test逻辑  子类test逻辑\n\n//构造函数的属性和方法通过实例化对象继承\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/01/面向对象.md","raw":"---\ntitle: JS面向对象\ndate: 2021-01-20 11:19:04\ntags:\n    - JavaScript\ncategories:\n    - JavaScript\ndescription:\n---\n\n面向对象编程\n\n<!-- more -->\n\n## new 运算符\n\n1. 执行函数；\n2. 自动创建空对象\n3. 把创建的对象指向另一个对象\n4. 吧空对象和函数里的this衔接起来(this指向实例化对象)\n5. 隐式返还this\n\n```js\nfunction test(){\n    console.log(\"test....\")\n}\n\ntest();\nnew test;\nnew test(); \n//这三种方法执行效果相同\n\n```\n简化工厂模式  -----> 构造函数\n\n - 约定俗成 ： 首字母大写\n\n - 属性放在构造原型；方法放在原型\n\n```js\nfunction Tab(){\n    // let obj = {}; ---> this\n    // obj.name = \"张三\";\n    // obj.hobby = function(){\n    this.name = \"张三\";\n    this.hobby = function(){\n        console.log(\"篮球\");\n    }\n    // return obj;\n}\nlet tab1 = new Tab();\n\nconsole.log(tab1.__proto__===Tab.prototype)  //true\nconsole.log(Tab.prototype.__proto__===Object.prototype) //true\nconsole.log(Object.prototype.__proto__) //null\n\nTab.prototype.psFor = function(){\n    console.log('psFor...')\n}\n\nlet tab2 = new Tab();\nconsole.log(tab1.psFor === tab2.psFor)  // true\n\nTab.prototype.foods = function(){\n    console.log(this.name,'foods...')\n}\n\ntab1.foods()\n\n```\n> 每个原型上都有一个预定义属性 ： constructor\n> 覆盖原本的 constructor 属性\n> 用以下写法必须要写constructor,不然会找不到对象的原型指向\n\n```js\n\nTab.prototype={\n    constructor:Tab,\n    psFor(){\n        console.log('psFor...')\n    },\n    hobby(){\n        console.log('hobby...')\n    }\n}\n\nlet str = '123saar'\nif(str.constructor===String){\n    console.log(\"字符串\")\n}else{\n    console.log(\"不是\")\n}\n//字符串\n```\n\n## es6 类\n\n```js\nclass Drag{\n    static height = \"178cm\"; //静态属性 也可以这样写静态方法\n    constructor(age){\n        this.name = \"张三\"\n        this.age = age\n    }\n    hobby(){\n        console.log(\"篮球\")\n    }\n    setStyle(){\n        console.log(\"父类逻辑\")\n    }\n    testSuper(){\n        console.log(\"父类test逻辑\")\n    }\n}\n\nDrag.test = function(){  //静态方法  也可这样写静态属性\n    console.log('test...')\n}\n\nDrag.test()\n\nconsole.log(Drag.height) //178cm\n\nconsole.log(typeof Drag)  //function\nlet drag1 = new Drag()\n```\n\n继承\n\n```js\nclass LimitDrag extends Drag{\n    constructor(age){\n        super(age);\n    }\n    setStyle(){\n        console.log(\"子类逻辑\")\n    }\n    testSuper(){\n        super.testSuper()  //调用父类\n        console.log(\"子类test逻辑\")\n    }\n}\nlet drag2 = new LimitDrag(20)\n\n\nconsole.log(LimitDrag.height) //178cm  静态属性方法在类上继承\nconsole.log(drag2.height) //undefined  \n\ndrag2.setStyle()  //子类逻辑\ndrag2.testSuper()  //父类test逻辑  子类test逻辑\n\n//构造函数的属性和方法通过实例化对象继承\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/01/面向对象","published":1,"updated":"2021-01-28T05:51:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53n002f1r0qhgmp2tz5","content":"<p>面向对象编程</p>\n<a id=\"more\"></a>\n\n<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><ol>\n<li>执行函数；</li>\n<li>自动创建空对象</li>\n<li>把创建的对象指向另一个对象</li>\n<li>吧空对象和函数里的this衔接起来(this指向实例化对象)</li>\n<li>隐式返还this</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"keyword\">new</span> test;</span><br><span class=\"line\"><span class=\"keyword\">new</span> test(); </span><br><span class=\"line\"><span class=\"comment\">//这三种方法执行效果相同</span></span><br></pre></td></tr></table></figure>\n<p>简化工厂模式  —–&gt; 构造函数</p>\n<ul>\n<li><p>约定俗成 ： 首字母大写</p>\n</li>\n<li><p>属性放在构造原型；方法放在原型</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tab</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// let obj = &#123;&#125;; ---&gt; this</span></span><br><span class=\"line\">    <span class=\"comment\">// obj.name = \"张三\";</span></span><br><span class=\"line\">    <span class=\"comment\">// obj.hobby = function()&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hobby = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return obj;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tab1 = <span class=\"keyword\">new</span> Tab();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tab1.__proto__===Tab.prototype)  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Tab.prototype.__proto__===<span class=\"built_in\">Object</span>.prototype) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.__proto__) <span class=\"comment\">//null</span></span><br><span class=\"line\"></span><br><span class=\"line\">Tab.prototype.psFor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'psFor...'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tab2 = <span class=\"keyword\">new</span> Tab();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tab1.psFor === tab2.psFor)  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Tab.prototype.foods = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,<span class=\"string\">'foods...'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tab1.foods()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每个原型上都有一个预定义属性 ： constructor<br>覆盖原本的 constructor 属性<br>用以下写法必须要写constructor,不然会找不到对象的原型指向</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Tab.prototype=&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>:Tab,</span><br><span class=\"line\">    psFor()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'psFor...'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hobby()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hobby...'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'123saar'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(str.constructor===<span class=\"built_in\">String</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"字符串\"</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"不是\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"es6-类\"><a href=\"#es6-类\" class=\"headerlink\" title=\"es6 类\"></a>es6 类</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Drag</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> height = <span class=\"string\">\"178cm\"</span>; <span class=\"comment\">//静态属性 也可以这样写静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hobby()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"篮球\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setStyle()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父类逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    testSuper()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父类test逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Drag.test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//静态方法  也可这样写静态属性</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test...'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Drag.test()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Drag.height) <span class=\"comment\">//178cm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> Drag)  <span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> drag1 = <span class=\"keyword\">new</span> Drag()</span><br></pre></td></tr></table></figure>\n\n<p>继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LimitDrag</span> <span class=\"keyword\">extends</span> <span class=\"title\">Drag</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setStyle()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"子类逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    testSuper()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.testSuper()  <span class=\"comment\">//调用父类</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"子类test逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> drag2 = <span class=\"keyword\">new</span> LimitDrag(<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(LimitDrag.height) <span class=\"comment\">//178cm  静态属性方法在类上继承</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drag2.height) <span class=\"comment\">//undefined  </span></span><br><span class=\"line\"></span><br><span class=\"line\">drag2.setStyle()  <span class=\"comment\">//子类逻辑</span></span><br><span class=\"line\">drag2.testSuper()  <span class=\"comment\">//父类test逻辑  子类test逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数的属性和方法通过实例化对象继承</span></span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>面向对象编程</p>","more":"<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><ol>\n<li>执行函数；</li>\n<li>自动创建空对象</li>\n<li>把创建的对象指向另一个对象</li>\n<li>吧空对象和函数里的this衔接起来(this指向实例化对象)</li>\n<li>隐式返还this</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"keyword\">new</span> test;</span><br><span class=\"line\"><span class=\"keyword\">new</span> test(); </span><br><span class=\"line\"><span class=\"comment\">//这三种方法执行效果相同</span></span><br></pre></td></tr></table></figure>\n<p>简化工厂模式  —–&gt; 构造函数</p>\n<ul>\n<li><p>约定俗成 ： 首字母大写</p>\n</li>\n<li><p>属性放在构造原型；方法放在原型</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tab</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// let obj = &#123;&#125;; ---&gt; this</span></span><br><span class=\"line\">    <span class=\"comment\">// obj.name = \"张三\";</span></span><br><span class=\"line\">    <span class=\"comment\">// obj.hobby = function()&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hobby = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return obj;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tab1 = <span class=\"keyword\">new</span> Tab();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tab1.__proto__===Tab.prototype)  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Tab.prototype.__proto__===<span class=\"built_in\">Object</span>.prototype) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.__proto__) <span class=\"comment\">//null</span></span><br><span class=\"line\"></span><br><span class=\"line\">Tab.prototype.psFor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'psFor...'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tab2 = <span class=\"keyword\">new</span> Tab();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tab1.psFor === tab2.psFor)  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Tab.prototype.foods = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,<span class=\"string\">'foods...'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tab1.foods()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每个原型上都有一个预定义属性 ： constructor<br>覆盖原本的 constructor 属性<br>用以下写法必须要写constructor,不然会找不到对象的原型指向</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Tab.prototype=&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>:Tab,</span><br><span class=\"line\">    psFor()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'psFor...'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hobby()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hobby...'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'123saar'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(str.constructor===<span class=\"built_in\">String</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"字符串\"</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"不是\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"es6-类\"><a href=\"#es6-类\" class=\"headerlink\" title=\"es6 类\"></a>es6 类</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Drag</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> height = <span class=\"string\">\"178cm\"</span>; <span class=\"comment\">//静态属性 也可以这样写静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hobby()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"篮球\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setStyle()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父类逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    testSuper()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父类test逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Drag.test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//静态方法  也可这样写静态属性</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test...'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Drag.test()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Drag.height) <span class=\"comment\">//178cm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> Drag)  <span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> drag1 = <span class=\"keyword\">new</span> Drag()</span><br></pre></td></tr></table></figure>\n\n<p>继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LimitDrag</span> <span class=\"keyword\">extends</span> <span class=\"title\">Drag</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setStyle()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"子类逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    testSuper()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.testSuper()  <span class=\"comment\">//调用父类</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"子类test逻辑\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> drag2 = <span class=\"keyword\">new</span> LimitDrag(<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(LimitDrag.height) <span class=\"comment\">//178cm  静态属性方法在类上继承</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drag2.height) <span class=\"comment\">//undefined  </span></span><br><span class=\"line\"></span><br><span class=\"line\">drag2.setStyle()  <span class=\"comment\">//子类逻辑</span></span><br><span class=\"line\">drag2.testSuper()  <span class=\"comment\">//父类test逻辑  子类test逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数的属性和方法通过实例化对象继承</span></span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"flutter中区分开发环境与正式环境","date":"2020-08-19T02:12:02.000Z","description":null,"_content":"\n本文讲述如何在flutter中区分开开发环境以及正式环境中接口地址等相关信息。\n\n<!-- more -->\n\n## 准备工作\n\n首先我们已经有了一个flutter项目，创建一个新文件用来保存所有环境特定配置信息`lib/app_config.dart`\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:meta/meta.dart';\n\nclass ENV extends InheritedWidget {\n  static String appName; // 系统名称\n  static String envName; // 运行环境\n  static String baseUrl; // 基础api url\n  static String webViewUrl; // 基础webviewurl\n ENV({\n    @required String appName,\n    @required String envName,\n    @required String baseUrl,\n    @required Widget child,\n    @required String webViewUrl\n  }) : super(child: child){\n    ENV.appName = appName;\n    ENV.envName = envName;\n    ENV.baseUrl = baseUrl;\n    ENV.webViewUrl = webViewUrl;\n  }\n\n  static ENV of(BuildContext context) {\n     return context.dependOnInheritedWidgetOfExactType(aspect: ENV);\n  }\n\n  @override\n  bool updateShouldNotify(InheritedWidget oldWidget) => false;\n}\n```\n\n## 区分环境配置\n\n新建`main_dev.dart`,并编写开发环境的配置\n```dart\nimport 'package:flutter/material.dart';\nimport 'app_config.dart';\nimport 'main.dart';\n\nvoid main() {\n  var configuredApp = new ENV(\n    appName: '项目名dev',\n    envName: 'development',\n    baseUrl: '开发环境接口地址',\n    child: new App(),\n    webViewUrl:'开发环境webview地址'\n  );\n  runApp(configuredApp);\n}\n```\n于此同时，创建`main_pro.dart`,编写对应的正式环境配置\n```dart\nimport 'package:flutter/material.dart';\nimport 'app_config.dart';\nimport 'main.dart';\n\nvoid main() {\n  var configuredApp = new ENV(\n    appName: '项目名',\n    envName: 'product',\n    baseUrl: '正式环境接口地址',\n    child: new App(),\n    webViewUrl:'正式环境webview地址'\n  );\n  runApp(configuredApp);\n}\n```\n\n## 使用\n\n修改`dio.dart`中baseurl的获取方式\n```dart\nimport 'package:zzc_app/app_config.dart';\n...\nString BASE_URL = ENV.baseUrl + url;\n...\n```\n> dio的封装可以看这篇->[在flutter中优雅的封装网络请求](https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/)\n\n## 编译\n\n- 运行开发版本，采用`flutter run -t lib/main_dev.dart`\n\n- 运行生产版本，采用`flutter run -t lib/main_pro.dart`\n\n- Android上创建一个release版本,采用`flutter build apk -t lib/main_<environment>.dart`\n\n> 我们将为不同的环境生成对应的APK。 要在iOS上构建版本，只需将apk替换为ios。\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/08/flutter中区分开发环境与正式环境.md","raw":"---\ntitle: flutter中区分开发环境与正式环境\ndate: 2020-08-19 10:12:02\ntags:\n  - flutter\ncategories:\n  - flutter\ndescription:\n---\n\n本文讲述如何在flutter中区分开开发环境以及正式环境中接口地址等相关信息。\n\n<!-- more -->\n\n## 准备工作\n\n首先我们已经有了一个flutter项目，创建一个新文件用来保存所有环境特定配置信息`lib/app_config.dart`\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:meta/meta.dart';\n\nclass ENV extends InheritedWidget {\n  static String appName; // 系统名称\n  static String envName; // 运行环境\n  static String baseUrl; // 基础api url\n  static String webViewUrl; // 基础webviewurl\n ENV({\n    @required String appName,\n    @required String envName,\n    @required String baseUrl,\n    @required Widget child,\n    @required String webViewUrl\n  }) : super(child: child){\n    ENV.appName = appName;\n    ENV.envName = envName;\n    ENV.baseUrl = baseUrl;\n    ENV.webViewUrl = webViewUrl;\n  }\n\n  static ENV of(BuildContext context) {\n     return context.dependOnInheritedWidgetOfExactType(aspect: ENV);\n  }\n\n  @override\n  bool updateShouldNotify(InheritedWidget oldWidget) => false;\n}\n```\n\n## 区分环境配置\n\n新建`main_dev.dart`,并编写开发环境的配置\n```dart\nimport 'package:flutter/material.dart';\nimport 'app_config.dart';\nimport 'main.dart';\n\nvoid main() {\n  var configuredApp = new ENV(\n    appName: '项目名dev',\n    envName: 'development',\n    baseUrl: '开发环境接口地址',\n    child: new App(),\n    webViewUrl:'开发环境webview地址'\n  );\n  runApp(configuredApp);\n}\n```\n于此同时，创建`main_pro.dart`,编写对应的正式环境配置\n```dart\nimport 'package:flutter/material.dart';\nimport 'app_config.dart';\nimport 'main.dart';\n\nvoid main() {\n  var configuredApp = new ENV(\n    appName: '项目名',\n    envName: 'product',\n    baseUrl: '正式环境接口地址',\n    child: new App(),\n    webViewUrl:'正式环境webview地址'\n  );\n  runApp(configuredApp);\n}\n```\n\n## 使用\n\n修改`dio.dart`中baseurl的获取方式\n```dart\nimport 'package:zzc_app/app_config.dart';\n...\nString BASE_URL = ENV.baseUrl + url;\n...\n```\n> dio的封装可以看这篇->[在flutter中优雅的封装网络请求](https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/)\n\n## 编译\n\n- 运行开发版本，采用`flutter run -t lib/main_dev.dart`\n\n- 运行生产版本，采用`flutter run -t lib/main_pro.dart`\n\n- Android上创建一个release版本,采用`flutter build apk -t lib/main_<environment>.dart`\n\n> 我们将为不同的环境生成对应的APK。 要在iOS上构建版本，只需将apk替换为ios。\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/08/flutter中区分开发环境与正式环境","published":1,"updated":"2021-06-09T01:13:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53n002i1r0qbzjm9fnu","content":"<p>本文讲述如何在flutter中区分开开发环境以及正式环境中接口地址等相关信息。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先我们已经有了一个flutter项目，创建一个新文件用来保存所有环境特定配置信息<code>lib/app_config.dart</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:meta/meta.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ENV</span> <span class=\"keyword\">extends</span> <span class=\"title\">InheritedWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> appName; <span class=\"comment\">// 系统名称</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> envName; <span class=\"comment\">// 运行环境</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> baseUrl; <span class=\"comment\">// 基础api url</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> webViewUrl; <span class=\"comment\">// 基础webviewurl</span></span><br><span class=\"line\"> ENV(&#123;</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> appName,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> envName,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> baseUrl,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> Widget child,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> webViewUrl</span><br><span class=\"line\">  &#125;) : <span class=\"keyword\">super</span>(child: child)&#123;</span><br><span class=\"line\">    ENV.appName = appName;</span><br><span class=\"line\">    ENV.envName = envName;</span><br><span class=\"line\">    ENV.baseUrl = baseUrl;</span><br><span class=\"line\">    ENV.webViewUrl = webViewUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> ENV of(BuildContext context) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> context.dependOnInheritedWidgetOfExactType(aspect: ENV);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> updateShouldNotify(InheritedWidget oldWidget) =&gt; <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"区分环境配置\"><a href=\"#区分环境配置\" class=\"headerlink\" title=\"区分环境配置\"></a>区分环境配置</h2><p>新建<code>main_dev.dart</code>,并编写开发环境的配置</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'app_config.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'main.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> configuredApp = <span class=\"keyword\">new</span> ENV(</span><br><span class=\"line\">    appName: <span class=\"string\">'项目名dev'</span>,</span><br><span class=\"line\">    envName: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">    baseUrl: <span class=\"string\">'开发环境接口地址'</span>,</span><br><span class=\"line\">    child: <span class=\"keyword\">new</span> App(),</span><br><span class=\"line\">    webViewUrl:<span class=\"string\">'开发环境webview地址'</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  runApp(configuredApp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>于此同时，创建<code>main_pro.dart</code>,编写对应的正式环境配置</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'app_config.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'main.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> configuredApp = <span class=\"keyword\">new</span> ENV(</span><br><span class=\"line\">    appName: <span class=\"string\">'项目名'</span>,</span><br><span class=\"line\">    envName: <span class=\"string\">'product'</span>,</span><br><span class=\"line\">    baseUrl: <span class=\"string\">'正式环境接口地址'</span>,</span><br><span class=\"line\">    child: <span class=\"keyword\">new</span> App(),</span><br><span class=\"line\">    webViewUrl:<span class=\"string\">'正式环境webview地址'</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  runApp(configuredApp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>修改<code>dio.dart</code>中baseurl的获取方式</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:zzc_app/app_config.dart'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">String</span> BASE_URL = ENV.baseUrl + url;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dio的封装可以看这篇-&gt;<a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/\">在flutter中优雅的封装网络请求</a></p>\n</blockquote>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><ul>\n<li><p>运行开发版本，采用<code>flutter run -t lib/main_dev.dart</code></p>\n</li>\n<li><p>运行生产版本，采用<code>flutter run -t lib/main_pro.dart</code></p>\n</li>\n<li><p>Android上创建一个release版本,采用<code>flutter build apk -t lib/main_&lt;environment&gt;.dart</code></p>\n</li>\n</ul>\n<blockquote>\n<p>我们将为不同的环境生成对应的APK。 要在iOS上构建版本，只需将apk替换为ios。</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本文讲述如何在flutter中区分开开发环境以及正式环境中接口地址等相关信息。</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先我们已经有了一个flutter项目，创建一个新文件用来保存所有环境特定配置信息<code>lib/app_config.dart</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:meta/meta.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ENV</span> <span class=\"keyword\">extends</span> <span class=\"title\">InheritedWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> appName; <span class=\"comment\">// 系统名称</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> envName; <span class=\"comment\">// 运行环境</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> baseUrl; <span class=\"comment\">// 基础api url</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> webViewUrl; <span class=\"comment\">// 基础webviewurl</span></span><br><span class=\"line\"> ENV(&#123;</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> appName,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> envName,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> baseUrl,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> Widget child,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">String</span> webViewUrl</span><br><span class=\"line\">  &#125;) : <span class=\"keyword\">super</span>(child: child)&#123;</span><br><span class=\"line\">    ENV.appName = appName;</span><br><span class=\"line\">    ENV.envName = envName;</span><br><span class=\"line\">    ENV.baseUrl = baseUrl;</span><br><span class=\"line\">    ENV.webViewUrl = webViewUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> ENV of(BuildContext context) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> context.dependOnInheritedWidgetOfExactType(aspect: ENV);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> updateShouldNotify(InheritedWidget oldWidget) =&gt; <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"区分环境配置\"><a href=\"#区分环境配置\" class=\"headerlink\" title=\"区分环境配置\"></a>区分环境配置</h2><p>新建<code>main_dev.dart</code>,并编写开发环境的配置</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'app_config.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'main.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> configuredApp = <span class=\"keyword\">new</span> ENV(</span><br><span class=\"line\">    appName: <span class=\"string\">'项目名dev'</span>,</span><br><span class=\"line\">    envName: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">    baseUrl: <span class=\"string\">'开发环境接口地址'</span>,</span><br><span class=\"line\">    child: <span class=\"keyword\">new</span> App(),</span><br><span class=\"line\">    webViewUrl:<span class=\"string\">'开发环境webview地址'</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  runApp(configuredApp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>于此同时，创建<code>main_pro.dart</code>,编写对应的正式环境配置</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'app_config.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'main.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> configuredApp = <span class=\"keyword\">new</span> ENV(</span><br><span class=\"line\">    appName: <span class=\"string\">'项目名'</span>,</span><br><span class=\"line\">    envName: <span class=\"string\">'product'</span>,</span><br><span class=\"line\">    baseUrl: <span class=\"string\">'正式环境接口地址'</span>,</span><br><span class=\"line\">    child: <span class=\"keyword\">new</span> App(),</span><br><span class=\"line\">    webViewUrl:<span class=\"string\">'正式环境webview地址'</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  runApp(configuredApp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>修改<code>dio.dart</code>中baseurl的获取方式</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:zzc_app/app_config.dart'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">String</span> BASE_URL = ENV.baseUrl + url;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dio的封装可以看这篇-&gt;<a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/\">在flutter中优雅的封装网络请求</a></p>\n</blockquote>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><ul>\n<li><p>运行开发版本，采用<code>flutter run -t lib/main_dev.dart</code></p>\n</li>\n<li><p>运行生产版本，采用<code>flutter run -t lib/main_pro.dart</code></p>\n</li>\n<li><p>Android上创建一个release版本,采用<code>flutter build apk -t lib/main_&lt;environment&gt;.dart</code></p>\n</li>\n</ul>\n<blockquote>\n<p>我们将为不同的环境生成对应的APK。 要在iOS上构建版本，只需将apk替换为ios。</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"仿写new运算符","date":"2021-01-16T02:28:57.000Z","description":null,"_content":"\n实现new运算符\n\n<!-- more -->\n\n```js\nfunction myNew(constructor,...arg){\n    let obj = {};//创建对象\n    constructor.call(obj,...arg)//改变this执行\n    obj.__proto__==constructor.prototype//构造函数的原型赋给对象的原型\n    return obj\n}\n\nfunction Tab(){\n    this.name = \"张三\"\n    this.hobby = function(){\n        console.log(\"hobby...\")\n    }\n}\n\nlet tab1 = myNew(Tab)\nconsole.log(tab1.name)\ntab1.hobby()\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/01/仿写new运算符.md","raw":"---\ntitle: 仿写new运算符\ndate: 2021-01-16 10:28:57\ntags:\ncategories:\ndescription:\n---\n\n实现new运算符\n\n<!-- more -->\n\n```js\nfunction myNew(constructor,...arg){\n    let obj = {};//创建对象\n    constructor.call(obj,...arg)//改变this执行\n    obj.__proto__==constructor.prototype//构造函数的原型赋给对象的原型\n    return obj\n}\n\nfunction Tab(){\n    this.name = \"张三\"\n    this.hobby = function(){\n        console.log(\"hobby...\")\n    }\n}\n\nlet tab1 = myNew(Tab)\nconsole.log(tab1.name)\ntab1.hobby()\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/01/仿写new运算符","published":1,"updated":"2021-01-27T03:01:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53o002n1r0qaedj9tg4","content":"<p>实现new运算符</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">constructor,...arg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;;<span class=\"comment\">//创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>.call(obj,...arg)//改变this执行</span><br><span class=\"line\">    obj.__proto__==<span class=\"keyword\">constructor</span>.prototype//构造函数的原型赋给对象的原型</span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Tab()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hobby = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hobby...\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tab1 = myNew(Tab)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tab1.name)</span><br><span class=\"line\">tab1.hobby()</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>实现new运算符</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">constructor,...arg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;;<span class=\"comment\">//创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>.call(obj,...arg)//改变this执行</span><br><span class=\"line\">    obj.__proto__==<span class=\"keyword\">constructor</span>.prototype//构造函数的原型赋给对象的原型</span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Tab()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hobby = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hobby...\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tab1 = myNew(Tab)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tab1.name)</span><br><span class=\"line\">tab1.hobby()</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"flutter中验证码倒计时","date":"2020-08-10T01:52:40.000Z","description":null,"_content":"\nflutter中更换手机号，验证码倒计时的一种写法。\n<!-- more -->\n\n```dart\nimport 'dart:async';\nimport 'dart:convert';\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:zzc_app/utils/dio/dio.dart';\n\nclass PhoneNumber extends StatefulWidget {\n  final userinfo;\n  PhoneNumber(this.userinfo, {Key key}) : super(key: key);\n\n  @override\n  _PhoneNumberState createState() => _PhoneNumberState();\n}\n\nclass _PhoneNumberState extends State<PhoneNumber> {\n  final _codeController = TextEditingController();\n\n  Timer _countdownTimer;\n  String _codeCountdownStr = '获取验证码';\n  int _countdownNum = 59;\n\n  _getcode() async {\n    //获取验证码\n    var res = await Net().get('verification-code', {\n      'phone_number': widget.userinfo['phone_number'],\n      'type': \"change_phone\"\n    });\n    reGetCountdown();\n  }\n\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  void reGetCountdown() {\n    setState(() {\n      if (_countdownTimer != null) {\n        return;\n      }\n      // Timer的第一秒倒计时是有一点延迟的，为了立刻显示效果可以添加下一行\n      _codeCountdownStr = '${_countdownNum--}(s)';\n      _countdownTimer = new Timer.periodic(new Duration(seconds: 1), (timer) {\n        setState(() {\n          if (_countdownNum > 0) {\n            _codeCountdownStr = '${_countdownNum--}(s)';\n          } else {\n            _codeCountdownStr = '获取验证码';\n            _countdownNum = 59;\n            _countdownTimer.cancel();\n            _countdownTimer = null;\n          }\n        });\n      });\n    });\n  }\n\n// 不要忘记在这里释放掉Timer\n  @override\n  void dispose() {\n    _countdownTimer?.cancel();\n    _countdownTimer = null;\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('绑定手机号')),\n      body: Container(\n        padding: EdgeInsets.only(left: 10, right: 10, top: 10),\n        child: ListView(\n          children: <Widget>[\n            ListTile(\n              leading: Text('当前手机号'),\n              title: Text(widget.userinfo['phone_number']),\n            ),\n            Divider(),\n            ListTile(\n              title: TextField(\n                controller: _codeController,\n                decoration: InputDecoration(hintText: '请输入验证码'),\n              ),\n              trailing: RaisedButton(\n                onPressed: _countdownNum >= 59 ? _getcode : null,\n                child: Text(_codeCountdownStr),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/08/flutter中验证码倒计时.md","raw":"---\ntitle: flutter中验证码倒计时\ndate: 2020-08-10 09:52:40\ntags:\n    - flutter\ncategories:\n    - flutter\ndescription:\n---\n\nflutter中更换手机号，验证码倒计时的一种写法。\n<!-- more -->\n\n```dart\nimport 'dart:async';\nimport 'dart:convert';\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:zzc_app/utils/dio/dio.dart';\n\nclass PhoneNumber extends StatefulWidget {\n  final userinfo;\n  PhoneNumber(this.userinfo, {Key key}) : super(key: key);\n\n  @override\n  _PhoneNumberState createState() => _PhoneNumberState();\n}\n\nclass _PhoneNumberState extends State<PhoneNumber> {\n  final _codeController = TextEditingController();\n\n  Timer _countdownTimer;\n  String _codeCountdownStr = '获取验证码';\n  int _countdownNum = 59;\n\n  _getcode() async {\n    //获取验证码\n    var res = await Net().get('verification-code', {\n      'phone_number': widget.userinfo['phone_number'],\n      'type': \"change_phone\"\n    });\n    reGetCountdown();\n  }\n\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  void reGetCountdown() {\n    setState(() {\n      if (_countdownTimer != null) {\n        return;\n      }\n      // Timer的第一秒倒计时是有一点延迟的，为了立刻显示效果可以添加下一行\n      _codeCountdownStr = '${_countdownNum--}(s)';\n      _countdownTimer = new Timer.periodic(new Duration(seconds: 1), (timer) {\n        setState(() {\n          if (_countdownNum > 0) {\n            _codeCountdownStr = '${_countdownNum--}(s)';\n          } else {\n            _codeCountdownStr = '获取验证码';\n            _countdownNum = 59;\n            _countdownTimer.cancel();\n            _countdownTimer = null;\n          }\n        });\n      });\n    });\n  }\n\n// 不要忘记在这里释放掉Timer\n  @override\n  void dispose() {\n    _countdownTimer?.cancel();\n    _countdownTimer = null;\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('绑定手机号')),\n      body: Container(\n        padding: EdgeInsets.only(left: 10, right: 10, top: 10),\n        child: ListView(\n          children: <Widget>[\n            ListTile(\n              leading: Text('当前手机号'),\n              title: Text(widget.userinfo['phone_number']),\n            ),\n            Divider(),\n            ListTile(\n              title: TextField(\n                controller: _codeController,\n                decoration: InputDecoration(hintText: '请输入验证码'),\n              ),\n              trailing: RaisedButton(\n                onPressed: _countdownNum >= 59 ? _getcode : null,\n                child: Text(_codeCountdownStr),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/08/flutter中验证码倒计时","published":1,"updated":"2020-08-10T02:16:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53o002q1r0qd7j3es85","content":"<p>flutter中更换手机号，验证码倒计时的一种写法。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dart:async'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dart:convert'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/cupertino.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneNumber</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> userinfo;</span><br><span class=\"line\">  PhoneNumber(<span class=\"keyword\">this</span>.userinfo, &#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _PhoneNumberState createState() =&gt; _PhoneNumberState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_PhoneNumberState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">PhoneNumber</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _codeController = TextEditingController();</span><br><span class=\"line\"></span><br><span class=\"line\">  Timer _countdownTimer;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> _codeCountdownStr = <span class=\"string\">'获取验证码'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _countdownNum = <span class=\"number\">59</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  _getcode() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取验证码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> Net().<span class=\"keyword\">get</span>(<span class=\"string\">'verification-code'</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">'phone_number'</span>: widget.userinfo[<span class=\"string\">'phone_number'</span>],</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">\"change_phone\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    reGetCountdown();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> reGetCountdown() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_countdownTimer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// Timer的第一秒倒计时是有一点延迟的，为了立刻显示效果可以添加下一行</span></span><br><span class=\"line\">      _codeCountdownStr = <span class=\"string\">'<span class=\"subst\">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class=\"line\">      _countdownTimer = <span class=\"keyword\">new</span> Timer.periodic(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds: <span class=\"number\">1</span>), (timer) &#123;</span><br><span class=\"line\">        setState(() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_countdownNum &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            _codeCountdownStr = <span class=\"string\">'<span class=\"subst\">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _codeCountdownStr = <span class=\"string\">'获取验证码'</span>;</span><br><span class=\"line\">            _countdownNum = <span class=\"number\">59</span>;</span><br><span class=\"line\">            _countdownTimer.cancel();</span><br><span class=\"line\">            _countdownTimer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要忘记在这里释放掉Timer</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> dispose() &#123;</span><br><span class=\"line\">    _countdownTimer?.cancel();</span><br><span class=\"line\">    _countdownTimer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(<span class=\"string\">'绑定手机号'</span>)),</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        padding: EdgeInsets.only(left: <span class=\"number\">10</span>, right: <span class=\"number\">10</span>, top: <span class=\"number\">10</span>),</span><br><span class=\"line\">        child: ListView(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            ListTile(</span><br><span class=\"line\">              leading: Text(<span class=\"string\">'当前手机号'</span>),</span><br><span class=\"line\">              title: Text(widget.userinfo[<span class=\"string\">'phone_number'</span>]),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Divider(),</span><br><span class=\"line\">            ListTile(</span><br><span class=\"line\">              title: TextField(</span><br><span class=\"line\">                controller: _codeController,</span><br><span class=\"line\">                decoration: InputDecoration(hintText: <span class=\"string\">'请输入验证码'</span>),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              trailing: RaisedButton(</span><br><span class=\"line\">                onPressed: _countdownNum &gt;= <span class=\"number\">59</span> ? _getcode : <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                child: Text(_codeCountdownStr),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>flutter中更换手机号，验证码倒计时的一种写法。</p>","more":"<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dart:async'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dart:convert'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/cupertino.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneNumber</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> userinfo;</span><br><span class=\"line\">  PhoneNumber(<span class=\"keyword\">this</span>.userinfo, &#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _PhoneNumberState createState() =&gt; _PhoneNumberState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_PhoneNumberState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">PhoneNumber</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _codeController = TextEditingController();</span><br><span class=\"line\"></span><br><span class=\"line\">  Timer _countdownTimer;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> _codeCountdownStr = <span class=\"string\">'获取验证码'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _countdownNum = <span class=\"number\">59</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  _getcode() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取验证码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> Net().<span class=\"keyword\">get</span>(<span class=\"string\">'verification-code'</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">'phone_number'</span>: widget.userinfo[<span class=\"string\">'phone_number'</span>],</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">\"change_phone\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    reGetCountdown();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> reGetCountdown() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_countdownTimer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// Timer的第一秒倒计时是有一点延迟的，为了立刻显示效果可以添加下一行</span></span><br><span class=\"line\">      _codeCountdownStr = <span class=\"string\">'<span class=\"subst\">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class=\"line\">      _countdownTimer = <span class=\"keyword\">new</span> Timer.periodic(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds: <span class=\"number\">1</span>), (timer) &#123;</span><br><span class=\"line\">        setState(() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_countdownNum &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            _codeCountdownStr = <span class=\"string\">'<span class=\"subst\">$&#123;_countdownNum--&#125;</span>(s)'</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _codeCountdownStr = <span class=\"string\">'获取验证码'</span>;</span><br><span class=\"line\">            _countdownNum = <span class=\"number\">59</span>;</span><br><span class=\"line\">            _countdownTimer.cancel();</span><br><span class=\"line\">            _countdownTimer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要忘记在这里释放掉Timer</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> dispose() &#123;</span><br><span class=\"line\">    _countdownTimer?.cancel();</span><br><span class=\"line\">    _countdownTimer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(<span class=\"string\">'绑定手机号'</span>)),</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        padding: EdgeInsets.only(left: <span class=\"number\">10</span>, right: <span class=\"number\">10</span>, top: <span class=\"number\">10</span>),</span><br><span class=\"line\">        child: ListView(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            ListTile(</span><br><span class=\"line\">              leading: Text(<span class=\"string\">'当前手机号'</span>),</span><br><span class=\"line\">              title: Text(widget.userinfo[<span class=\"string\">'phone_number'</span>]),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Divider(),</span><br><span class=\"line\">            ListTile(</span><br><span class=\"line\">              title: TextField(</span><br><span class=\"line\">                controller: _codeController,</span><br><span class=\"line\">                decoration: InputDecoration(hintText: <span class=\"string\">'请输入验证码'</span>),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              trailing: RaisedButton(</span><br><span class=\"line\">                onPressed: _countdownNum &gt;= <span class=\"number\">59</span> ? _getcode : <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                child: Text(_codeCountdownStr),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"es6基础","date":"2021-01-08T01:46:24.000Z","description":null,"_content":"\n## ECMAScript 6 简介\n- JavaScript 三大组成部分\n    - ECMAScript \n    - DOM\n    - BOM \n- ECMAScript 发展历史 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources\n- ECMAScript 包含内容：JS 中的数据类型及相关操作，流程控制，运算符及相关运算……\n<!-- more -->\n\n## let 和 const\n\n1. let 和 var 的差异\n    ```js\n    var:\n        1.  var可以重复声明\n        2.  作用域：全局作用域和函数作用域\n        3.  会进行预解析\n    \n    let:\n        1.  同一作用域下不能重复声明   \n        2.  作用域： 全局作用域 和 块级作用域  {}\n        3.  不进行预解析\n    ```\n\n2. const 常量\n\n    - 声明时必须赋值\n    - 常量不能重新赋值\n    - 不能重复声明\n    - 块级作用域\n    - const 不会被预解析\n\n## 块级作用域\n\n```html\n<ul>\n    <li>列表1</li>\n    <li>列表2</li>\n    <li>列表3</li>\n</ul>\n<script>\n{\n    let lis = document.querySelectorAll('li')\n\n\n    for(let i=0;i<lis.length;i++){\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n    //以上for循环等效于\n    {\n        let i = 0;\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n    {\n        let i = 1;\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n    {\n        let i = 2;\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n}\n</script>\n```\n\n## 解构赋值\n\n- 对象的解构赋值\n    ```js\n    let obj = {\n        a:1,\n        b:2,\n        d:3\n    }\n    let {a,b} = obj \n    //相当于\n    //let a = obj.a\n    //let b = obj.b\n\n    // let {a,b,c} = obj\n    // console.log(a,b,c) //1,2,undefined\n\n    ```\n\n- 数组的解构赋值\n    ```js\n    let arr = [\"a\",\"b\",\"c\"]\n    let [e,f]=arr\n    console.log(e,f)//a b\n\n    let a=0;\n    let b=1;\n    //如何快速交换a,b的值\n    [a,b]=[b,a]\n    ```\n\n- 字符串的解构赋值\n    ```js\n    let str = \"abc\"\n    let [e,f] = str\n    console.log(e,f)//a b\n    //let nub = 123 无法解构\n    //let [c,d] = nub\n    //console.log(c,d)//报错\n    ```\n\n## 展开运算符\n\n- 对象展开\n    ```js\n    let obj = {\n        a:1,\n        b:2\n    }\n    let obj2 = {\n        c:3,\n        d:4\n    }\n    let obj3 = {\n        ...obj,\n        ...obj2\n    }\n    //剩余参数\n    let {a,b,...c} = obj3\n    console.log(a,b,c) //1 2 {c: 3, d: 4}\n\n    let obj4 = obj\n    obj4.a=10\n    console.log(obj) //{a:10,b:2}\n    let obj5 = {...obj}\n    obj5.a=10\n    console.log(obj) //{a:1,b:2}\n    ```\n\n- 数组展开\n    ```js\n    let arr=[1,2,3,4]\n    let arr2 = [\"a\",\"b\",\"c\",\"d\"]\n    //将arr插入arr2的'b'之后\n    let arr3=[\"a\",\"b\",...arr,\"c\",\"d\"]\n    //剩余参数\n    let [a,b,...c] = arr\n    console.log(a,b,c) // 1  2 [3,4]\n    ```\n\n## Set 对象\n\n构造函数：用来构建某一类型的对象 - 对象的实例化\n    ```js\n    let arr = [1,2,1,3,4,4,5,6,1,\"a\"]\n    let s = new Set(arr)\n    console.log(s.size); //去重后的长度  相当于length\n    s.delete(\"a\")  //删除某一项 console.log(s.delete(\"a\") ) true 删除不成功返回false\n    //s.add(7)//可以添加\n    //s.add(5)//添加不了 自动去重\n    console.log(s.has(1))//true\n    arr = [...s]\n    console.log(arr)//[1, 2, 3, 4, 5, 6]  //去重\n    //s.clear();//清空所有值  Set(0) {}    console.log(s.clear()) undefined\n    console.log(s)\n    ```\n\n## Map 对象\n\n```js\nlet arr = [\n    [\"a\",1],\n    [\"b\",2],\n    [\"c\",3],\n    [\"d\",4]\n]\nlet m = new Map(arr)\n// m.clear()\n// console.log(m.delete(\"a\"))\n// console.log(m.get(\"b\"))\n// console.log(m.set(\"e\",5))\nm.set(\"e\",5).set(\"a\",10)\nconsole.log(m)\n/*\nclear() 清空所有值\n\ndelete(key) 删除某一项\n    参数：\n        key   数据的key值\n    返回值：\n        true || false 是否删除成功(没有这个值才会出现删除不成功)\n\nget(key)   获取某一项的具体值\n    参数：\n        key   数据的key值\n    返回值：\n        key对应的value  \n\nhas(key)   是否包含某一项\n    参数：\n        key   数据的key值\n    返回值：\n        true || false  是否包含这个值\n\nset(key,val)  设置一个值\n    参数：\n        key   数据的key值\n        val   数据的value值\n    返回值：\n        map对象本身\n*/\n```\n\n## 函数新增扩展\n\n1. 箭头函数\n    ```js\n    let fn = () => {\n        console.log()\n    }\n    fn();\n    /*\n        箭头函数：\n        形参 => 返回值\n        let fun = nub => nub*2\n        console.log(fun(10))\n\n        (形参,形参) => 返回值\n        let fun2 = (nub,nub2) => nub*nub2\n        console.log(fun2(10,3))\n\n        ()=> 返回值\n        let fun3 = () => \"返回值\"\n        console.log(fun3())\n\n        ()=>{\n            执行语句\n            // return 返回值\n        }\n\n        let fun4 = ()=>{\n            console.log(\"天气不错\")\n        }\n\n        //箭头函数没有不定参\n\n        function fun5(){\n            console.log(arguments) //可以正常输出\n        }\n        let fun5 = ()=>{\n            console.log(arguments) //arguments is not defined\n        }\n        fun5(1,2,3,4)\n    */\n    ```\n\n2. rest 参数  剩余参数\n    ```js\n    let fun = (...arg)=>{\n        console.log(arg) //[1,2,3,4]\n    }\n    fun(1,2,3,4)\n    ```\n\n3. 参数默认值设置\n    ```js\n    let fun = (a=10,b=2)=>{\n        console.log(a*b)\n    }\n    fun()\n    ```\n\n\n> 箭头函数本身没有this,调用箭头函数的this时,指向其声明时所在作用域的this\n\n## 数组新增方法\n\n- Array.from(),Array.isArray()\n\n    ```html\n    <ul id=\"list\">\n        <li>1</li>\n        <li>2</li>\n        <li>3</li>\n        <li>4</li>\n    </ul>\n    <script>\n    /*\n    Array.from()  把一个类数组转换成真正的数组  或者 lis=[...lis]\n            类数组：有下标有length\n        返回值：\n            转换之后的新数组\n\n    Array.isArray()  判断是不是数组\n    */\n    {\n        let lis = document.querySelectorAll(\"#list li\")\n\n        console.log(Array.isArray(lis))  //false\n\n        let arr = []\n\n        //基本用法\n        //lis = Array.from(lis) \n\n\n        lis = Array.from(lis,function(item,index){\n            console.log(item,index,this)\n            return index\n        },arr)  //arr为this指向 存在时不能使用箭头函数\n\n        console.log(Array.isArray(lis))  //true\n        console.log(lis) //[0,1,2,3]\n    }\n    </script>\n    ```\n\n- Array.of() \n\n    ```js\n    console.log(Array.of(1,2,3,4,\"a\"))//[1, 2, 3, 4, \"a\"]\n    ```\n\n> Array.from(),Array.isArray(),Array.of()  都是Array这个构造函数下的方法\n\n- find()、findIndex()、includes()\n    ```js\n    //find() 查找数组中满足要求的第一个值\n    //findIndex()  查找数组中满足要求的第一个值的索引\n    //includes()  判断数组中是否存在某值\n    let arr = [1,2,3,4,5]//['a','b','c','d']\n    //arr.indexOf('a')\n    //let val = arr.find((item,index)=>{\n    //   if(item>3){\n    //        return true\n    //    }\n    //})\n    val =arr.find(item=>item>=3)\n    console.log(val)  //3\n    console.log(arr.findIndex(item=>item>=3))  //2\n    console.log(arr.includes(2))  //true\n    console.log(arr.includes(8))  // false\n    console.log(arr.includes(1,2))  // false 从第二位开始检索\n    ```\n\n- flat()、flatMap()  数组扁平化方法\n    ```js\n    let arr = [\n        [\"小明\",\"18\"],\n        [\"小刚\",\"18\"],\n        [\n            [1,\n                [3,4]\n            ]\n        ]\n    ]\n    console.log(arr.flat())  //向下提取一层 [\"小明\", \"18\", \"小刚\", \"18\", Array(2)]\n    console.log(arr.flat(3)) //向下提取三层 [\"小明\", \"18\", \"小刚\", \"18\", 1, 3, 4]\n    console.log(arr.flat(Infinity))  //无限层\n\n    let arr2 = [\n        [\"小明\",\"18\"],\n        [\"小刚\",\"18\"],\n    ]\n    //flatMap  只处理一层\n    let newArr = arr2.flatMap((item,index)=>{\n        console.log(item,index)\n        item = item.filter((item,index)=>{\n            return index==0  //只输出姓名\n        })\n        return item\n    })\n    console.log(newArr)\n    ```\n\n- fill()  数据填充\n    ```js\n    let arr = [0,1,2,3,4]\n    arr.fill(\"a\")\n    console.log(arr)  //[\"a\", \"a\", \"a\", \"a\", \"a\"]\n\n    arr.fill(\"a\",4)\n    console.log(arr)  //[0,1,2,3,\"a\"]\n\n    arr.fill(\"a\",1,2)\n    console.log(arr)  //[0, \"a\", 2, 3, 4]\n\n    arr.fill(\"a\",1,20)\n    console.log(arr)  //[0, \"a\", \"a\", \"a\", \"a\"] 不会改变原数组长度\n    ```\n\n## 字符串新增方法\n\n- includes()  与数组中includes使用方法相同\n- startsWith endsWith()  判断字符串是否以某个字符串开头 或结尾\n    ```js\n    let str = 'Joker is very smart!'\n    console.log(str.startsWith('Joker')) //true\n    console.log(str.startsWith('Joker',4)) //false  从第四位开始查找\n    console.log(str.endsWith('smart!'))  //true\n    console.log(str.endsWith('smart!',4))  //false    只看前四位\n    ```\n- repeat()   将字符串进行重复\n    ```js\n    let str = 'aaa'\n    console.log(str.repeat(3))  // aaaaaaaaa\n    ```\n\n## 模板字符串\n\n```html\n<p>\n    今年<strong>小明</strong>就要<strong>18</strong>岁了，终于要上<strong>大学</strong>了。\n</p>\n<script>\n    let p = document.querySelector(\"p\")\n    let name = \"小明\"\n    let age = 18\n    let school = \"大学\"\n    //p.innerHTML = '今年<strong>'+name+'</strong>就要<strong>'+age+'</strong>岁了，终于要上<strong>'+school+'</strong>了。'\n    //等同于\n    p.innerHTML = `今年<strong>${name}</strong>就要<strong>${age}</strong>岁了，终于要上<strong>${school}</strong>了。`\n</script>\n```\n> 模板字符串可以换行\n \n${}  差值表达式\n\n```js\nlet a = ()=>{\n    let b = 10\n    return b\n}\nlet d = 2\nlet c = `a的值为${a()},d${ d>8?'大于':'小于等于'}8`\n```\n\n## 对象新增方法\n\n- 简洁表示法\n    ```js\n    let a = 1\n    let b = 2\n    //let obj = {\n    //    a:a,\n    //    b:b,\n    //    c:function(){\n    //          console.log(a)\n    //     }\n    //}\n    // 可以写成\n    let obj = {\n        a,\n        b,\n        c(){\n            console.log(a)\n        }\n    }\n    ```\n\n- 属性名表达式\n    ```js\n    let name = \"小明\"\n    let obj = {\n        [name]:111\n    }\n    obj[name]=111\n    ```\n\n- 对象合并\n    ```js\n    let obj = {\n        a:1,\n        b:2\n    }\n    let obj2 = {\n        c:3,\n        d:4\n    }\n    //let obj3 = {...obj,...obj2}\n    //Object.assign(obj2,obj)  //将后面的对象合并到前面的对象中\n    obj2=Object.assign({},obj2,obj)  //将后面的对象合并到前面的空目标对象中\n    ```\n\n- 比较\n    ```js\n    console.log(Object.is(1,'1')) //fasle\n    /*\n        规则：\n            1.两个值都是undefined\n            2.两个值都是null\n            3.两个值都是true 或两个值都是false\n            4.两个值都是由相同个数的字符串按照相同的顺序组成的字符串\n            5.两个值都指向同一个对象\n            6.两个值都是数字并且：\n                    都是正零  +0\n                    都是负零  -0\n                    都是NAN\n            以上几种时候比较结果为true \n    */\n    ```\n    > 1-5条等同于 `===`，\n    > `-0===+0    true` ; `Object.is(-0,+0)  false`\n    > `NaN===NaN  false`; `Object.is(NaN,NaN)  true`\n\n## babel\n\n- Babel 是一个 JavaScript 编译器\n\n    ```html\n    <script src='babel.min.js'></script>\n    <script type=\"text/babel\">\n    let a = 1\n    let b = 2\n    let obj = {\n        a,\n        b,\n        c(){\n            console.log(1)\n        }\n    }\n    let obj2 = {\n        d:4,\n        ...obj,\n        e:5\n    }\n    </script>\n\n    ```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/01/es6基础.md","raw":"---\ntitle: es6基础\ndate: 2021-01-08 09:46:24\ntags:\n    - JavaScript\ncategories:\n    - JavaScript\ndescription:\n---\n\n## ECMAScript 6 简介\n- JavaScript 三大组成部分\n    - ECMAScript \n    - DOM\n    - BOM \n- ECMAScript 发展历史 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources\n- ECMAScript 包含内容：JS 中的数据类型及相关操作，流程控制，运算符及相关运算……\n<!-- more -->\n\n## let 和 const\n\n1. let 和 var 的差异\n    ```js\n    var:\n        1.  var可以重复声明\n        2.  作用域：全局作用域和函数作用域\n        3.  会进行预解析\n    \n    let:\n        1.  同一作用域下不能重复声明   \n        2.  作用域： 全局作用域 和 块级作用域  {}\n        3.  不进行预解析\n    ```\n\n2. const 常量\n\n    - 声明时必须赋值\n    - 常量不能重新赋值\n    - 不能重复声明\n    - 块级作用域\n    - const 不会被预解析\n\n## 块级作用域\n\n```html\n<ul>\n    <li>列表1</li>\n    <li>列表2</li>\n    <li>列表3</li>\n</ul>\n<script>\n{\n    let lis = document.querySelectorAll('li')\n\n\n    for(let i=0;i<lis.length;i++){\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n    //以上for循环等效于\n    {\n        let i = 0;\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n    {\n        let i = 1;\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n    {\n        let i = 2;\n        lis[i].onclick = function(){\n            console.log(i)\n        }\n    }\n}\n</script>\n```\n\n## 解构赋值\n\n- 对象的解构赋值\n    ```js\n    let obj = {\n        a:1,\n        b:2,\n        d:3\n    }\n    let {a,b} = obj \n    //相当于\n    //let a = obj.a\n    //let b = obj.b\n\n    // let {a,b,c} = obj\n    // console.log(a,b,c) //1,2,undefined\n\n    ```\n\n- 数组的解构赋值\n    ```js\n    let arr = [\"a\",\"b\",\"c\"]\n    let [e,f]=arr\n    console.log(e,f)//a b\n\n    let a=0;\n    let b=1;\n    //如何快速交换a,b的值\n    [a,b]=[b,a]\n    ```\n\n- 字符串的解构赋值\n    ```js\n    let str = \"abc\"\n    let [e,f] = str\n    console.log(e,f)//a b\n    //let nub = 123 无法解构\n    //let [c,d] = nub\n    //console.log(c,d)//报错\n    ```\n\n## 展开运算符\n\n- 对象展开\n    ```js\n    let obj = {\n        a:1,\n        b:2\n    }\n    let obj2 = {\n        c:3,\n        d:4\n    }\n    let obj3 = {\n        ...obj,\n        ...obj2\n    }\n    //剩余参数\n    let {a,b,...c} = obj3\n    console.log(a,b,c) //1 2 {c: 3, d: 4}\n\n    let obj4 = obj\n    obj4.a=10\n    console.log(obj) //{a:10,b:2}\n    let obj5 = {...obj}\n    obj5.a=10\n    console.log(obj) //{a:1,b:2}\n    ```\n\n- 数组展开\n    ```js\n    let arr=[1,2,3,4]\n    let arr2 = [\"a\",\"b\",\"c\",\"d\"]\n    //将arr插入arr2的'b'之后\n    let arr3=[\"a\",\"b\",...arr,\"c\",\"d\"]\n    //剩余参数\n    let [a,b,...c] = arr\n    console.log(a,b,c) // 1  2 [3,4]\n    ```\n\n## Set 对象\n\n构造函数：用来构建某一类型的对象 - 对象的实例化\n    ```js\n    let arr = [1,2,1,3,4,4,5,6,1,\"a\"]\n    let s = new Set(arr)\n    console.log(s.size); //去重后的长度  相当于length\n    s.delete(\"a\")  //删除某一项 console.log(s.delete(\"a\") ) true 删除不成功返回false\n    //s.add(7)//可以添加\n    //s.add(5)//添加不了 自动去重\n    console.log(s.has(1))//true\n    arr = [...s]\n    console.log(arr)//[1, 2, 3, 4, 5, 6]  //去重\n    //s.clear();//清空所有值  Set(0) {}    console.log(s.clear()) undefined\n    console.log(s)\n    ```\n\n## Map 对象\n\n```js\nlet arr = [\n    [\"a\",1],\n    [\"b\",2],\n    [\"c\",3],\n    [\"d\",4]\n]\nlet m = new Map(arr)\n// m.clear()\n// console.log(m.delete(\"a\"))\n// console.log(m.get(\"b\"))\n// console.log(m.set(\"e\",5))\nm.set(\"e\",5).set(\"a\",10)\nconsole.log(m)\n/*\nclear() 清空所有值\n\ndelete(key) 删除某一项\n    参数：\n        key   数据的key值\n    返回值：\n        true || false 是否删除成功(没有这个值才会出现删除不成功)\n\nget(key)   获取某一项的具体值\n    参数：\n        key   数据的key值\n    返回值：\n        key对应的value  \n\nhas(key)   是否包含某一项\n    参数：\n        key   数据的key值\n    返回值：\n        true || false  是否包含这个值\n\nset(key,val)  设置一个值\n    参数：\n        key   数据的key值\n        val   数据的value值\n    返回值：\n        map对象本身\n*/\n```\n\n## 函数新增扩展\n\n1. 箭头函数\n    ```js\n    let fn = () => {\n        console.log()\n    }\n    fn();\n    /*\n        箭头函数：\n        形参 => 返回值\n        let fun = nub => nub*2\n        console.log(fun(10))\n\n        (形参,形参) => 返回值\n        let fun2 = (nub,nub2) => nub*nub2\n        console.log(fun2(10,3))\n\n        ()=> 返回值\n        let fun3 = () => \"返回值\"\n        console.log(fun3())\n\n        ()=>{\n            执行语句\n            // return 返回值\n        }\n\n        let fun4 = ()=>{\n            console.log(\"天气不错\")\n        }\n\n        //箭头函数没有不定参\n\n        function fun5(){\n            console.log(arguments) //可以正常输出\n        }\n        let fun5 = ()=>{\n            console.log(arguments) //arguments is not defined\n        }\n        fun5(1,2,3,4)\n    */\n    ```\n\n2. rest 参数  剩余参数\n    ```js\n    let fun = (...arg)=>{\n        console.log(arg) //[1,2,3,4]\n    }\n    fun(1,2,3,4)\n    ```\n\n3. 参数默认值设置\n    ```js\n    let fun = (a=10,b=2)=>{\n        console.log(a*b)\n    }\n    fun()\n    ```\n\n\n> 箭头函数本身没有this,调用箭头函数的this时,指向其声明时所在作用域的this\n\n## 数组新增方法\n\n- Array.from(),Array.isArray()\n\n    ```html\n    <ul id=\"list\">\n        <li>1</li>\n        <li>2</li>\n        <li>3</li>\n        <li>4</li>\n    </ul>\n    <script>\n    /*\n    Array.from()  把一个类数组转换成真正的数组  或者 lis=[...lis]\n            类数组：有下标有length\n        返回值：\n            转换之后的新数组\n\n    Array.isArray()  判断是不是数组\n    */\n    {\n        let lis = document.querySelectorAll(\"#list li\")\n\n        console.log(Array.isArray(lis))  //false\n\n        let arr = []\n\n        //基本用法\n        //lis = Array.from(lis) \n\n\n        lis = Array.from(lis,function(item,index){\n            console.log(item,index,this)\n            return index\n        },arr)  //arr为this指向 存在时不能使用箭头函数\n\n        console.log(Array.isArray(lis))  //true\n        console.log(lis) //[0,1,2,3]\n    }\n    </script>\n    ```\n\n- Array.of() \n\n    ```js\n    console.log(Array.of(1,2,3,4,\"a\"))//[1, 2, 3, 4, \"a\"]\n    ```\n\n> Array.from(),Array.isArray(),Array.of()  都是Array这个构造函数下的方法\n\n- find()、findIndex()、includes()\n    ```js\n    //find() 查找数组中满足要求的第一个值\n    //findIndex()  查找数组中满足要求的第一个值的索引\n    //includes()  判断数组中是否存在某值\n    let arr = [1,2,3,4,5]//['a','b','c','d']\n    //arr.indexOf('a')\n    //let val = arr.find((item,index)=>{\n    //   if(item>3){\n    //        return true\n    //    }\n    //})\n    val =arr.find(item=>item>=3)\n    console.log(val)  //3\n    console.log(arr.findIndex(item=>item>=3))  //2\n    console.log(arr.includes(2))  //true\n    console.log(arr.includes(8))  // false\n    console.log(arr.includes(1,2))  // false 从第二位开始检索\n    ```\n\n- flat()、flatMap()  数组扁平化方法\n    ```js\n    let arr = [\n        [\"小明\",\"18\"],\n        [\"小刚\",\"18\"],\n        [\n            [1,\n                [3,4]\n            ]\n        ]\n    ]\n    console.log(arr.flat())  //向下提取一层 [\"小明\", \"18\", \"小刚\", \"18\", Array(2)]\n    console.log(arr.flat(3)) //向下提取三层 [\"小明\", \"18\", \"小刚\", \"18\", 1, 3, 4]\n    console.log(arr.flat(Infinity))  //无限层\n\n    let arr2 = [\n        [\"小明\",\"18\"],\n        [\"小刚\",\"18\"],\n    ]\n    //flatMap  只处理一层\n    let newArr = arr2.flatMap((item,index)=>{\n        console.log(item,index)\n        item = item.filter((item,index)=>{\n            return index==0  //只输出姓名\n        })\n        return item\n    })\n    console.log(newArr)\n    ```\n\n- fill()  数据填充\n    ```js\n    let arr = [0,1,2,3,4]\n    arr.fill(\"a\")\n    console.log(arr)  //[\"a\", \"a\", \"a\", \"a\", \"a\"]\n\n    arr.fill(\"a\",4)\n    console.log(arr)  //[0,1,2,3,\"a\"]\n\n    arr.fill(\"a\",1,2)\n    console.log(arr)  //[0, \"a\", 2, 3, 4]\n\n    arr.fill(\"a\",1,20)\n    console.log(arr)  //[0, \"a\", \"a\", \"a\", \"a\"] 不会改变原数组长度\n    ```\n\n## 字符串新增方法\n\n- includes()  与数组中includes使用方法相同\n- startsWith endsWith()  判断字符串是否以某个字符串开头 或结尾\n    ```js\n    let str = 'Joker is very smart!'\n    console.log(str.startsWith('Joker')) //true\n    console.log(str.startsWith('Joker',4)) //false  从第四位开始查找\n    console.log(str.endsWith('smart!'))  //true\n    console.log(str.endsWith('smart!',4))  //false    只看前四位\n    ```\n- repeat()   将字符串进行重复\n    ```js\n    let str = 'aaa'\n    console.log(str.repeat(3))  // aaaaaaaaa\n    ```\n\n## 模板字符串\n\n```html\n<p>\n    今年<strong>小明</strong>就要<strong>18</strong>岁了，终于要上<strong>大学</strong>了。\n</p>\n<script>\n    let p = document.querySelector(\"p\")\n    let name = \"小明\"\n    let age = 18\n    let school = \"大学\"\n    //p.innerHTML = '今年<strong>'+name+'</strong>就要<strong>'+age+'</strong>岁了，终于要上<strong>'+school+'</strong>了。'\n    //等同于\n    p.innerHTML = `今年<strong>${name}</strong>就要<strong>${age}</strong>岁了，终于要上<strong>${school}</strong>了。`\n</script>\n```\n> 模板字符串可以换行\n \n${}  差值表达式\n\n```js\nlet a = ()=>{\n    let b = 10\n    return b\n}\nlet d = 2\nlet c = `a的值为${a()},d${ d>8?'大于':'小于等于'}8`\n```\n\n## 对象新增方法\n\n- 简洁表示法\n    ```js\n    let a = 1\n    let b = 2\n    //let obj = {\n    //    a:a,\n    //    b:b,\n    //    c:function(){\n    //          console.log(a)\n    //     }\n    //}\n    // 可以写成\n    let obj = {\n        a,\n        b,\n        c(){\n            console.log(a)\n        }\n    }\n    ```\n\n- 属性名表达式\n    ```js\n    let name = \"小明\"\n    let obj = {\n        [name]:111\n    }\n    obj[name]=111\n    ```\n\n- 对象合并\n    ```js\n    let obj = {\n        a:1,\n        b:2\n    }\n    let obj2 = {\n        c:3,\n        d:4\n    }\n    //let obj3 = {...obj,...obj2}\n    //Object.assign(obj2,obj)  //将后面的对象合并到前面的对象中\n    obj2=Object.assign({},obj2,obj)  //将后面的对象合并到前面的空目标对象中\n    ```\n\n- 比较\n    ```js\n    console.log(Object.is(1,'1')) //fasle\n    /*\n        规则：\n            1.两个值都是undefined\n            2.两个值都是null\n            3.两个值都是true 或两个值都是false\n            4.两个值都是由相同个数的字符串按照相同的顺序组成的字符串\n            5.两个值都指向同一个对象\n            6.两个值都是数字并且：\n                    都是正零  +0\n                    都是负零  -0\n                    都是NAN\n            以上几种时候比较结果为true \n    */\n    ```\n    > 1-5条等同于 `===`，\n    > `-0===+0    true` ; `Object.is(-0,+0)  false`\n    > `NaN===NaN  false`; `Object.is(NaN,NaN)  true`\n\n## babel\n\n- Babel 是一个 JavaScript 编译器\n\n    ```html\n    <script src='babel.min.js'></script>\n    <script type=\"text/babel\">\n    let a = 1\n    let b = 2\n    let obj = {\n        a,\n        b,\n        c(){\n            console.log(1)\n        }\n    }\n    let obj2 = {\n        d:4,\n        ...obj,\n        e:5\n    }\n    </script>\n\n    ```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/01/es6基础","published":1,"updated":"2021-01-11T03:07:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53p002v1r0qh3khehtw","content":"<h2 id=\"ECMAScript-6-简介\"><a href=\"#ECMAScript-6-简介\" class=\"headerlink\" title=\"ECMAScript 6 简介\"></a>ECMAScript 6 简介</h2><ul>\n<li>JavaScript 三大组成部分<ul>\n<li>ECMAScript </li>\n<li>DOM</li>\n<li>BOM </li>\n</ul>\n</li>\n<li>ECMAScript 发展历史 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources</a></li>\n<li>ECMAScript 包含内容：JS 中的数据类型及相关操作，流程控制，运算符及相关运算……<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h2><ol>\n<li><p>let 和 var 的差异</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>:</span><br><span class=\"line\">    <span class=\"number\">1.</span>  <span class=\"keyword\">var</span>可以重复声明</span><br><span class=\"line\">    <span class=\"number\">2.</span>  作用域：全局作用域和函数作用域</span><br><span class=\"line\">    <span class=\"number\">3.</span>  会进行预解析</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>:</span><br><span class=\"line\">    <span class=\"number\">1.</span>  同一作用域下不能重复声明   </span><br><span class=\"line\">    <span class=\"number\">2.</span>  作用域： 全局作用域 和 块级作用域  &#123;&#125;</span><br><span class=\"line\">    <span class=\"number\">3.</span>  不进行预解析</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const 常量</p>\n<ul>\n<li>声明时必须赋值</li>\n<li>常量不能重新赋值</li>\n<li>不能重复声明</li>\n<li>块级作用域</li>\n<li>const 不会被预解析</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> lis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;lis.length;i++)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//以上for循环等效于</span></span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><ul>\n<li><p>对象的解构赋值</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span>,</span><br><span class=\"line\">    d:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a,b&#125; = obj </span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\"><span class=\"comment\">//let a = obj.a</span></span><br><span class=\"line\"><span class=\"comment\">//let b = obj.b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let &#123;a,b,c&#125; = obj</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(a,b,c) //1,2,undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组的解构赋值</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> [e,f]=arr</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e,f)<span class=\"comment\">//a b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//如何快速交换a,b的值</span></span><br><span class=\"line\">[a,b]=[b,a]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串的解构赋值</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e,f] = str</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e,f)<span class=\"comment\">//a b</span></span><br><span class=\"line\"><span class=\"comment\">//let nub = 123 无法解构</span></span><br><span class=\"line\"><span class=\"comment\">//let [c,d] = nub</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(c,d)//报错</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><ul>\n<li><p>对象展开</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    c:<span class=\"number\">3</span>,</span><br><span class=\"line\">    d:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = &#123;</span><br><span class=\"line\">    ...obj,</span><br><span class=\"line\">    ...obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//剩余参数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a,b,...c&#125; = obj3</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c) <span class=\"comment\">//1 2 &#123;c: 3, d: 4&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj4 = obj</span><br><span class=\"line\">obj4.a=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a:10,b:2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj5 = &#123;...obj&#125;</span><br><span class=\"line\">obj5.a=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组展开</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>]</span><br><span class=\"line\"><span class=\"comment\">//将arr插入arr2的'b'之后</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3=[<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,...arr,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>]</span><br><span class=\"line\"><span class=\"comment\">//剩余参数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,...c] = arr</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c) <span class=\"comment\">// 1  2 [3,4]</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Set-对象\"><a href=\"#Set-对象\" class=\"headerlink\" title=\"Set 对象\"></a>Set 对象</h2><p>构造函数：用来构建某一类型的对象 - 对象的实例化<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"string\">\"a\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.size); <span class=\"comment\">//去重后的长度  相当于length</span></span><br><span class=\"line\">s.delete(<span class=\"string\">\"a\"</span>)  <span class=\"comment\">//删除某一项 console.log(s.delete(\"a\") ) true 删除不成功返回false</span></span><br><span class=\"line\"><span class=\"comment\">//s.add(7)//可以添加</span></span><br><span class=\"line\"><span class=\"comment\">//s.add(5)//添加不了 自动去重</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.has(<span class=\"number\">1</span>))<span class=\"comment\">//true</span></span><br><span class=\"line\">arr = [...s]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[1, 2, 3, 4, 5, 6]  //去重</span></span><br><span class=\"line\"><span class=\"comment\">//s.clear();//清空所有值  Set(0) &#123;&#125;    console.log(s.clear()) undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Map-对象\"><a href=\"#Map-对象\" class=\"headerlink\" title=\"Map 对象\"></a>Map 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">    [<span class=\"string\">\"a\"</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"b\"</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"c\"</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"d\"</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(arr)</span><br><span class=\"line\"><span class=\"comment\">// m.clear()</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(m.delete(\"a\"))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(m.get(\"b\"))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(m.set(\"e\",5))</span></span><br><span class=\"line\">m.set(<span class=\"string\">\"e\"</span>,<span class=\"number\">5</span>).set(<span class=\"string\">\"a\"</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">clear() 清空所有值</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">delete(key) 删除某一项</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        true || false 是否删除成功(没有这个值才会出现删除不成功)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">get(key)   获取某一项的具体值</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        key对应的value  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">has(key)   是否包含某一项</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        true || false  是否包含这个值</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">set(key,val)  设置一个值</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">        val   数据的value值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        map对象本身</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数新增扩展\"><a href=\"#函数新增扩展\" class=\"headerlink\" title=\"函数新增扩展\"></a>函数新增扩展</h2><ol>\n<li><p>箭头函数</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    箭头函数：</span></span><br><span class=\"line\"><span class=\"comment\">    形参 =&gt; 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    let fun = nub =&gt; nub*2</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(fun(10))</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    (形参,形参) =&gt; 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    let fun2 = (nub,nub2) =&gt; nub*nub2</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(fun2(10,3))</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ()=&gt; 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    let fun3 = () =&gt; \"返回值\"</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(fun3())</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        执行语句</span></span><br><span class=\"line\"><span class=\"comment\">        // return 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    let fun4 = ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(\"天气不错\")</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    //箭头函数没有不定参</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    function fun5()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(arguments) //可以正常输出</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    let fun5 = ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(arguments) //arguments is not defined</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    fun5(1,2,3,4)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rest 参数  剩余参数</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\">(<span class=\"params\">...arg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg) <span class=\"comment\">//[1,2,3,4]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数默认值设置</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\">(<span class=\"params\">a=<span class=\"number\">10</span>,b=<span class=\"number\">2</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a*b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<blockquote>\n<p>箭头函数本身没有this,调用箭头函数的this时,指向其声明时所在作用域的this</p>\n</blockquote>\n<h2 id=\"数组新增方法\"><a href=\"#数组新增方法\" class=\"headerlink\" title=\"数组新增方法\"></a>数组新增方法</h2><ul>\n<li><p>Array.from(),Array.isArray()</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">Array</span>.from()  把一个类数组转换成真正的数组  或者 lis=[...lis]</span></span><br><span class=\"line\">        类数组：有下标有length</span><br><span class=\"line\">    返回值：</span><br><span class=\"line\">        转换之后的新数组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">Array</span>.isArray()  判断是不是数组</span></span><br><span class=\"line\">*/</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> lis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#list li\"</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(lis))  <span class=\"comment\">//false</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> arr = []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//基本用法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//lis = Array.from(lis) </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    lis = <span class=\"built_in\">Array</span>.from(lis,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(item,index,<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> index</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125;,arr)  <span class=\"comment\">//arr为this指向 存在时不能使用箭头函数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(lis))  <span class=\"comment\">//true</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(lis) <span class=\"comment\">//[0,1,2,3]</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Array.of() </p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"string\">\"a\"</span>))<span class=\"comment\">//[1, 2, 3, 4, \"a\"]</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Array.from(),Array.isArray(),Array.of()  都是Array这个构造函数下的方法</p>\n</blockquote>\n<ul>\n<li><p>find()、findIndex()、includes()</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//find() 查找数组中满足要求的第一个值</span></span><br><span class=\"line\"><span class=\"comment\">//findIndex()  查找数组中满足要求的第一个值的索引</span></span><br><span class=\"line\"><span class=\"comment\">//includes()  判断数组中是否存在某值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]<span class=\"comment\">//['a','b','c','d']</span></span><br><span class=\"line\"><span class=\"comment\">//arr.indexOf('a')</span></span><br><span class=\"line\"><span class=\"comment\">//let val = arr.find((item,index)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if(item&gt;3)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return true</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">val =arr.find(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item&gt;=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.findIndex(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item&gt;=<span class=\"number\">3</span>))  <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.includes(<span class=\"number\">2</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.includes(<span class=\"number\">8</span>))  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.includes(<span class=\"number\">1</span>,<span class=\"number\">2</span>))  <span class=\"comment\">// false 从第二位开始检索</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flat()、flatMap()  数组扁平化方法</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">    [<span class=\"string\">\"小明\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"小刚\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">1</span>,</span><br><span class=\"line\">            [<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat())  <span class=\"comment\">//向下提取一层 [\"小明\", \"18\", \"小刚\", \"18\", Array(2)]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"number\">3</span>)) <span class=\"comment\">//向下提取三层 [\"小明\", \"18\", \"小刚\", \"18\", 1, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"literal\">Infinity</span>))  <span class=\"comment\">//无限层</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [</span><br><span class=\"line\">    [<span class=\"string\">\"小明\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"小刚\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//flatMap  只处理一层</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr2.flatMap(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item,index)</span><br><span class=\"line\">    item = item.filter(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index==<span class=\"number\">0</span>  <span class=\"comment\">//只输出姓名</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fill()  数据填充</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[\"a\", \"a\", \"a\", \"a\", \"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0,1,2,3,\"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0, \"a\", 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>,<span class=\"number\">1</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0, \"a\", \"a\", \"a\", \"a\"] 不会改变原数组长度</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"字符串新增方法\"><a href=\"#字符串新增方法\" class=\"headerlink\" title=\"字符串新增方法\"></a>字符串新增方法</h2><ul>\n<li>includes()  与数组中includes使用方法相同</li>\n<li>startsWith endsWith()  判断字符串是否以某个字符串开头 或结尾  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'Joker is very smart!'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'Joker'</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'Joker'</span>,<span class=\"number\">4</span>)) <span class=\"comment\">//false  从第四位开始查找</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">'smart!'</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">'smart!'</span>,<span class=\"number\">4</span>))  <span class=\"comment\">//false    只看前四位</span></span><br></pre></td></tr></table></figure></li>\n<li>repeat()   将字符串进行重复  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'aaa'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.repeat(<span class=\"number\">3</span>))  <span class=\"comment\">// aaaaaaaaa</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    今年<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>小明<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>就要<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>岁了，终于要上<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>大学<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>了。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"p\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"小明\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> age = <span class=\"number\">18</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> school = <span class=\"string\">\"大学\"</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    //p.innerHTML = '今年<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>'+name+'<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>就要<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>'+age+'<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>岁了，终于要上<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>'+school+'<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>了。'</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//等同于</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    p.innerHTML = `今年<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>就要<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>$&#123;age&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>岁了，终于要上<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>$&#123;school&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>了。`</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>模板字符串可以换行</p>\n</blockquote>\n<p>${}  差值表达式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">`a的值为<span class=\"subst\">$&#123;a()&#125;</span>,d<span class=\"subst\">$&#123; d&gt;<span class=\"number\">8</span>?<span class=\"string\">'大于'</span>:<span class=\"string\">'小于等于'</span>&#125;</span>8`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象新增方法\"><a href=\"#对象新增方法\" class=\"headerlink\" title=\"对象新增方法\"></a>对象新增方法</h2><ul>\n<li><p>简洁表示法</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//let obj = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    a:a,</span></span><br><span class=\"line\"><span class=\"comment\">//    b:b,</span></span><br><span class=\"line\"><span class=\"comment\">//    c:function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          console.log(a)</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 可以写成</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a,</span><br><span class=\"line\">    b,</span><br><span class=\"line\">    c()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性名表达式</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"小明\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    [name]:<span class=\"number\">111</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj[name]=<span class=\"number\">111</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象合并</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    c:<span class=\"number\">3</span>,</span><br><span class=\"line\">    d:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//let obj3 = &#123;...obj,...obj2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Object.assign(obj2,obj)  //将后面的对象合并到前面的对象中</span></span><br><span class=\"line\">obj2=<span class=\"built_in\">Object</span>.assign(&#123;&#125;,obj2,obj)  <span class=\"comment\">//将后面的对象合并到前面的空目标对象中</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"number\">1</span>,<span class=\"string\">'1'</span>)) <span class=\"comment\">//fasle</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    规则：</span></span><br><span class=\"line\"><span class=\"comment\">        1.两个值都是undefined</span></span><br><span class=\"line\"><span class=\"comment\">        2.两个值都是null</span></span><br><span class=\"line\"><span class=\"comment\">        3.两个值都是true 或两个值都是false</span></span><br><span class=\"line\"><span class=\"comment\">        4.两个值都是由相同个数的字符串按照相同的顺序组成的字符串</span></span><br><span class=\"line\"><span class=\"comment\">        5.两个值都指向同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">        6.两个值都是数字并且：</span></span><br><span class=\"line\"><span class=\"comment\">                都是正零  +0</span></span><br><span class=\"line\"><span class=\"comment\">                都是负零  -0</span></span><br><span class=\"line\"><span class=\"comment\">                都是NAN</span></span><br><span class=\"line\"><span class=\"comment\">        以上几种时候比较结果为true </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1-5条等同于 <code>===</code>，<br><code>-0===+0    true</code> ; <code>Object.is(-0,+0)  false</code><br><code>NaN===NaN  false</code>; <code>Object.is(NaN,NaN)  true</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h2><ul>\n<li><p>Babel 是一个 JavaScript 编译器</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'babel.min.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> obj = &#123;</span></span><br><span class=\"line\">    a,</span><br><span class=\"line\">    b,</span><br><span class=\"line\">    c()&#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> obj2 = &#123;</span></span><br><span class=\"line\">    d:4,</span><br><span class=\"line\">    ...obj,</span><br><span class=\"line\">    e:5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<h2 id=\"ECMAScript-6-简介\"><a href=\"#ECMAScript-6-简介\" class=\"headerlink\" title=\"ECMAScript 6 简介\"></a>ECMAScript 6 简介</h2><ul>\n<li>JavaScript 三大组成部分<ul>\n<li>ECMAScript </li>\n<li>DOM</li>\n<li>BOM </li>\n</ul>\n</li>\n<li>ECMAScript 发展历史 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources</a></li>\n<li>ECMAScript 包含内容：JS 中的数据类型及相关操作，流程控制，运算符及相关运算……","more":"</li>\n</ul>\n<h2 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h2><ol>\n<li><p>let 和 var 的差异</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>:</span><br><span class=\"line\">    <span class=\"number\">1.</span>  <span class=\"keyword\">var</span>可以重复声明</span><br><span class=\"line\">    <span class=\"number\">2.</span>  作用域：全局作用域和函数作用域</span><br><span class=\"line\">    <span class=\"number\">3.</span>  会进行预解析</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>:</span><br><span class=\"line\">    <span class=\"number\">1.</span>  同一作用域下不能重复声明   </span><br><span class=\"line\">    <span class=\"number\">2.</span>  作用域： 全局作用域 和 块级作用域  &#123;&#125;</span><br><span class=\"line\">    <span class=\"number\">3.</span>  不进行预解析</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const 常量</p>\n<ul>\n<li>声明时必须赋值</li>\n<li>常量不能重新赋值</li>\n<li>不能重复声明</li>\n<li>块级作用域</li>\n<li>const 不会被预解析</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> lis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;lis.length;i++)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//以上for循环等效于</span></span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">        lis[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(i)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><ul>\n<li><p>对象的解构赋值</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span>,</span><br><span class=\"line\">    d:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a,b&#125; = obj </span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\"><span class=\"comment\">//let a = obj.a</span></span><br><span class=\"line\"><span class=\"comment\">//let b = obj.b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let &#123;a,b,c&#125; = obj</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(a,b,c) //1,2,undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组的解构赋值</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> [e,f]=arr</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e,f)<span class=\"comment\">//a b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//如何快速交换a,b的值</span></span><br><span class=\"line\">[a,b]=[b,a]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串的解构赋值</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e,f] = str</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e,f)<span class=\"comment\">//a b</span></span><br><span class=\"line\"><span class=\"comment\">//let nub = 123 无法解构</span></span><br><span class=\"line\"><span class=\"comment\">//let [c,d] = nub</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(c,d)//报错</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><ul>\n<li><p>对象展开</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    c:<span class=\"number\">3</span>,</span><br><span class=\"line\">    d:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = &#123;</span><br><span class=\"line\">    ...obj,</span><br><span class=\"line\">    ...obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//剩余参数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a,b,...c&#125; = obj3</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c) <span class=\"comment\">//1 2 &#123;c: 3, d: 4&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj4 = obj</span><br><span class=\"line\">obj4.a=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a:10,b:2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj5 = &#123;...obj&#125;</span><br><span class=\"line\">obj5.a=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组展开</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>]</span><br><span class=\"line\"><span class=\"comment\">//将arr插入arr2的'b'之后</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3=[<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,...arr,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>]</span><br><span class=\"line\"><span class=\"comment\">//剩余参数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,...c] = arr</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c) <span class=\"comment\">// 1  2 [3,4]</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Set-对象\"><a href=\"#Set-对象\" class=\"headerlink\" title=\"Set 对象\"></a>Set 对象</h2><p>构造函数：用来构建某一类型的对象 - 对象的实例化<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"string\">\"a\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.size); <span class=\"comment\">//去重后的长度  相当于length</span></span><br><span class=\"line\">s.delete(<span class=\"string\">\"a\"</span>)  <span class=\"comment\">//删除某一项 console.log(s.delete(\"a\") ) true 删除不成功返回false</span></span><br><span class=\"line\"><span class=\"comment\">//s.add(7)//可以添加</span></span><br><span class=\"line\"><span class=\"comment\">//s.add(5)//添加不了 自动去重</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.has(<span class=\"number\">1</span>))<span class=\"comment\">//true</span></span><br><span class=\"line\">arr = [...s]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[1, 2, 3, 4, 5, 6]  //去重</span></span><br><span class=\"line\"><span class=\"comment\">//s.clear();//清空所有值  Set(0) &#123;&#125;    console.log(s.clear()) undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Map-对象\"><a href=\"#Map-对象\" class=\"headerlink\" title=\"Map 对象\"></a>Map 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">    [<span class=\"string\">\"a\"</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"b\"</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"c\"</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"d\"</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(arr)</span><br><span class=\"line\"><span class=\"comment\">// m.clear()</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(m.delete(\"a\"))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(m.get(\"b\"))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(m.set(\"e\",5))</span></span><br><span class=\"line\">m.set(<span class=\"string\">\"e\"</span>,<span class=\"number\">5</span>).set(<span class=\"string\">\"a\"</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">clear() 清空所有值</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">delete(key) 删除某一项</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        true || false 是否删除成功(没有这个值才会出现删除不成功)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">get(key)   获取某一项的具体值</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        key对应的value  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">has(key)   是否包含某一项</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        true || false  是否包含这个值</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">set(key,val)  设置一个值</span></span><br><span class=\"line\"><span class=\"comment\">    参数：</span></span><br><span class=\"line\"><span class=\"comment\">        key   数据的key值</span></span><br><span class=\"line\"><span class=\"comment\">        val   数据的value值</span></span><br><span class=\"line\"><span class=\"comment\">    返回值：</span></span><br><span class=\"line\"><span class=\"comment\">        map对象本身</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数新增扩展\"><a href=\"#函数新增扩展\" class=\"headerlink\" title=\"函数新增扩展\"></a>函数新增扩展</h2><ol>\n<li><p>箭头函数</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    箭头函数：</span></span><br><span class=\"line\"><span class=\"comment\">    形参 =&gt; 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    let fun = nub =&gt; nub*2</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(fun(10))</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    (形参,形参) =&gt; 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    let fun2 = (nub,nub2) =&gt; nub*nub2</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(fun2(10,3))</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ()=&gt; 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    let fun3 = () =&gt; \"返回值\"</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(fun3())</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        执行语句</span></span><br><span class=\"line\"><span class=\"comment\">        // return 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    let fun4 = ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(\"天气不错\")</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    //箭头函数没有不定参</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    function fun5()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(arguments) //可以正常输出</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    let fun5 = ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(arguments) //arguments is not defined</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    fun5(1,2,3,4)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rest 参数  剩余参数</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\">(<span class=\"params\">...arg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg) <span class=\"comment\">//[1,2,3,4]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数默认值设置</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\">(<span class=\"params\">a=<span class=\"number\">10</span>,b=<span class=\"number\">2</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a*b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<blockquote>\n<p>箭头函数本身没有this,调用箭头函数的this时,指向其声明时所在作用域的this</p>\n</blockquote>\n<h2 id=\"数组新增方法\"><a href=\"#数组新增方法\" class=\"headerlink\" title=\"数组新增方法\"></a>数组新增方法</h2><ul>\n<li><p>Array.from(),Array.isArray()</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">Array</span>.from()  把一个类数组转换成真正的数组  或者 lis=[...lis]</span></span><br><span class=\"line\">        类数组：有下标有length</span><br><span class=\"line\">    返回值：</span><br><span class=\"line\">        转换之后的新数组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">Array</span>.isArray()  判断是不是数组</span></span><br><span class=\"line\">*/</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> lis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#list li\"</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(lis))  <span class=\"comment\">//false</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> arr = []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//基本用法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//lis = Array.from(lis) </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    lis = <span class=\"built_in\">Array</span>.from(lis,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(item,index,<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> index</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125;,arr)  <span class=\"comment\">//arr为this指向 存在时不能使用箭头函数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(lis))  <span class=\"comment\">//true</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(lis) <span class=\"comment\">//[0,1,2,3]</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Array.of() </p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"string\">\"a\"</span>))<span class=\"comment\">//[1, 2, 3, 4, \"a\"]</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Array.from(),Array.isArray(),Array.of()  都是Array这个构造函数下的方法</p>\n</blockquote>\n<ul>\n<li><p>find()、findIndex()、includes()</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//find() 查找数组中满足要求的第一个值</span></span><br><span class=\"line\"><span class=\"comment\">//findIndex()  查找数组中满足要求的第一个值的索引</span></span><br><span class=\"line\"><span class=\"comment\">//includes()  判断数组中是否存在某值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]<span class=\"comment\">//['a','b','c','d']</span></span><br><span class=\"line\"><span class=\"comment\">//arr.indexOf('a')</span></span><br><span class=\"line\"><span class=\"comment\">//let val = arr.find((item,index)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if(item&gt;3)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return true</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">val =arr.find(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item&gt;=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.findIndex(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item&gt;=<span class=\"number\">3</span>))  <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.includes(<span class=\"number\">2</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.includes(<span class=\"number\">8</span>))  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.includes(<span class=\"number\">1</span>,<span class=\"number\">2</span>))  <span class=\"comment\">// false 从第二位开始检索</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flat()、flatMap()  数组扁平化方法</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">    [<span class=\"string\">\"小明\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"小刚\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">1</span>,</span><br><span class=\"line\">            [<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat())  <span class=\"comment\">//向下提取一层 [\"小明\", \"18\", \"小刚\", \"18\", Array(2)]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"number\">3</span>)) <span class=\"comment\">//向下提取三层 [\"小明\", \"18\", \"小刚\", \"18\", 1, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"literal\">Infinity</span>))  <span class=\"comment\">//无限层</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [</span><br><span class=\"line\">    [<span class=\"string\">\"小明\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"小刚\"</span>,<span class=\"string\">\"18\"</span>],</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//flatMap  只处理一层</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr2.flatMap(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item,index)</span><br><span class=\"line\">    item = item.filter(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index==<span class=\"number\">0</span>  <span class=\"comment\">//只输出姓名</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fill()  数据填充</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[\"a\", \"a\", \"a\", \"a\", \"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0,1,2,3,\"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0, \"a\", 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.fill(<span class=\"string\">\"a\"</span>,<span class=\"number\">1</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0, \"a\", \"a\", \"a\", \"a\"] 不会改变原数组长度</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"字符串新增方法\"><a href=\"#字符串新增方法\" class=\"headerlink\" title=\"字符串新增方法\"></a>字符串新增方法</h2><ul>\n<li>includes()  与数组中includes使用方法相同</li>\n<li>startsWith endsWith()  判断字符串是否以某个字符串开头 或结尾  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'Joker is very smart!'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'Joker'</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'Joker'</span>,<span class=\"number\">4</span>)) <span class=\"comment\">//false  从第四位开始查找</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">'smart!'</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">'smart!'</span>,<span class=\"number\">4</span>))  <span class=\"comment\">//false    只看前四位</span></span><br></pre></td></tr></table></figure></li>\n<li>repeat()   将字符串进行重复  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'aaa'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.repeat(<span class=\"number\">3</span>))  <span class=\"comment\">// aaaaaaaaa</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    今年<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>小明<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>就要<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>岁了，终于要上<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>大学<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>了。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"p\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"小明\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> age = <span class=\"number\">18</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> school = <span class=\"string\">\"大学\"</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    //p.innerHTML = '今年<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>'+name+'<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>就要<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>'+age+'<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>岁了，终于要上<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>'+school+'<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>了。'</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//等同于</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    p.innerHTML = `今年<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>就要<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>$&#123;age&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>岁了，终于要上<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>$&#123;school&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>了。`</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>模板字符串可以换行</p>\n</blockquote>\n<p>${}  差值表达式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">`a的值为<span class=\"subst\">$&#123;a()&#125;</span>,d<span class=\"subst\">$&#123; d&gt;<span class=\"number\">8</span>?<span class=\"string\">'大于'</span>:<span class=\"string\">'小于等于'</span>&#125;</span>8`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象新增方法\"><a href=\"#对象新增方法\" class=\"headerlink\" title=\"对象新增方法\"></a>对象新增方法</h2><ul>\n<li><p>简洁表示法</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//let obj = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    a:a,</span></span><br><span class=\"line\"><span class=\"comment\">//    b:b,</span></span><br><span class=\"line\"><span class=\"comment\">//    c:function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          console.log(a)</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 可以写成</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a,</span><br><span class=\"line\">    b,</span><br><span class=\"line\">    c()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性名表达式</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"小明\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    [name]:<span class=\"number\">111</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj[name]=<span class=\"number\">111</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象合并</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    c:<span class=\"number\">3</span>,</span><br><span class=\"line\">    d:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//let obj3 = &#123;...obj,...obj2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Object.assign(obj2,obj)  //将后面的对象合并到前面的对象中</span></span><br><span class=\"line\">obj2=<span class=\"built_in\">Object</span>.assign(&#123;&#125;,obj2,obj)  <span class=\"comment\">//将后面的对象合并到前面的空目标对象中</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"number\">1</span>,<span class=\"string\">'1'</span>)) <span class=\"comment\">//fasle</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    规则：</span></span><br><span class=\"line\"><span class=\"comment\">        1.两个值都是undefined</span></span><br><span class=\"line\"><span class=\"comment\">        2.两个值都是null</span></span><br><span class=\"line\"><span class=\"comment\">        3.两个值都是true 或两个值都是false</span></span><br><span class=\"line\"><span class=\"comment\">        4.两个值都是由相同个数的字符串按照相同的顺序组成的字符串</span></span><br><span class=\"line\"><span class=\"comment\">        5.两个值都指向同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">        6.两个值都是数字并且：</span></span><br><span class=\"line\"><span class=\"comment\">                都是正零  +0</span></span><br><span class=\"line\"><span class=\"comment\">                都是负零  -0</span></span><br><span class=\"line\"><span class=\"comment\">                都是NAN</span></span><br><span class=\"line\"><span class=\"comment\">        以上几种时候比较结果为true </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1-5条等同于 <code>===</code>，<br><code>-0===+0    true</code> ; <code>Object.is(-0,+0)  false</code><br><code>NaN===NaN  false</code>; <code>Object.is(NaN,NaN)  true</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h2><ul>\n<li><p>Babel 是一个 JavaScript 编译器</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'babel.min.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> obj = &#123;</span></span><br><span class=\"line\">    a,</span><br><span class=\"line\">    b,</span><br><span class=\"line\">    c()&#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> obj2 = &#123;</span></span><br><span class=\"line\">    d:4,</span><br><span class=\"line\">    ...obj,</span><br><span class=\"line\">    e:5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"前端面试题(二)","date":"2020-07-21T12:54:46.000Z","description":null,"_content":"\n高频面试题\n\n<!-- more -->\n\n## vue-router原理\n\n大型单页应用最显著特点之一就是采用前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。\n\n页面都是由组件组成的，只需要把组件和路径相对应起来，就能把组件渲染出来。\n\n当用户点击`router-link`标签时，会去寻找它对应的to属性，它的to属性和js中配置的路径`{path:'/home',component:Home}`中的path一一对应，从而找到了匹配的组件，最后把组件渲染到`router-view`标签所在的地方。\n\n前端路由时通过改变url，在不重新请求页面的情况下，更新页面视图。\n\n目前在浏览器环境中实现这一功能主要有两种：\n\n- 利用url中的hash：\n\n    在改变url的情况下，保证页面的不刷新。在2014年之前，大家是通过hash来实现路由，url hash就类似于：\n    `https://www.xxx.com/#/login`\n    这种# 后面hash值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求也就不会刷新页面。另外每次hash值变化都会触发hashchange这个事件，通过这个事件我们就可以知道hash值发生了哪些变化。然后我们就可以通过监听hashchange来实现更新页面部分内容的操作\n    ```js\n    window.addEventListener('hashchange', matchAndUpdate)\n    function matchAndUpdate () {\n     // todo 匹配 hash 做 dom 更新操作\n    }\n    ```\n\n- 利用H5中history：\n\n    14年后，因为HTML5标准发布。多了两个Api，`pushState`和`replaceState`,通过这两个api可以改变url地址且不会发送请求。同时还有`popstate`事件，通过这些就能用另一种方式实现前端路由了，原理和hash实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。\n    内部使⽤`window.history.pushState`来处理url的变化，切换对应的组件\n\n[如果对具体代码实现感兴趣可以点击这里查看，**vue-router源码实现**](https://qytayh.github.io/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/)\n\n\n## 组件间通信方式\n\n[点击这里查看详情](https://qytayh.github.io/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/)\n\n## vue2和vue3区别\n\n1. **目录结构**\n\n    vue-cli2.0与3.0在目录结构方面，有明显的不同\n\n    vue-cli3.0移除了配置文件目录，config和build文件夹\n\n    同时移除了`static`静态文件夹，新增了`public`文件夹，打开层级目录还会发现，`index.html`移动到`public`中\n\n2. **配置项**\n\n    3.0中config文件已经被移除，但是多了`.env.production`和`.env.development`文件，除了文件位置，实际配置起来和2.0没什么不同\n\n    没了`config`文件，跨域需要配置域名时，从`config/index.js`挪到了`vue.config.js`中，配置方法不变\n\n3. **渲染**\n\n    Vue2.x使用的Virtual Dom实现的渲染\n\n    Vue3.0不论是原生的html标签还是vue组件，他们都会通过h函数来判断，如果是原生html标签，在运行时直接通过Virtual Dom来直接渲染，同样如果是组件会直接生成组件代码\n\n4. **数据监听**\n\n    Vue2.x大家都知道使用的是es5的`object.defineproperties`中`getter`和`setter`实现的，而vue3.0的版本，是基于`Proxy`进行监听的，其实基于`proxy`监听就是所谓的`lazy by default`，什么意思呢，就是只要你用到了才会监听，可以理解为‘按需监听’，官方给出的诠释是：速度加倍，同时内存占用还减半。\n\n5. **按需引入**\n\n    Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实无论你用到还是没用到，都会跑一变。而vue3.0中可以用ES module imports按需引入，如：keep-alive内置组件、v-model指令，等等。\n\n\n## 简述vue2双向绑定原理\n\n1. 由页面->数据的变化：通过给页面元素添加对应的事件监听来实现\n```javascript\n<input v-model=\"value\" oninput=\"()=>this.handleInput($event)\">\n\nfunction handleInput(e){\n    this.value = e.target.value\n}\n```\n\n2. 由数据->页面的变化:通过数据劫持(`Object.defineProperty`)+发布订阅模式来实现的\n    具体流程：\n    - Compile解析器会将⻚⾯上的插值表达式/指定翻译成对应Watcher以添加到订阅器维护的列表中\n\n    - 通过`Object.defineProperty`劫持数据的变化，⼀旦数据源发⽣变化会触发对应的set⽅法\n\n    - 在set⽅法中，通知订阅器(Dep)对象中维护的所有订阅者(Watcher)列表更新\n\n    - 每⼀个Watch会去更新对应的⻚⾯\n\n3. 关于发布订阅模式\n\n    发布订阅模式又叫观察者模式，他定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象的变化，当这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得他们能够自动更新自己。\n\n\n## 自定义指令\n\nVue里面有许多内置的指令，比如`v-if`和`v-show`，这些丰富的指令能满足我们的绝大部分业务需求，不过在需要一些特殊功能时，我们仍然希望对`DOM`进行底层的操作，这时就要用到自定义指令。\n\n```js\nVue.directive('focus', {\n    bind: function (el) { \n        // 每当指令绑定到元素上的时候，会立即执行这个bind 函数，只执行一次\n        // 注意： 在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生的JS对象\n        // 在元素刚绑定了指令的时候还没有插入到DOM中去的时候调用focus方法没有作用。因为，一个元素只有插入DOM之后才能获取焦点\n        // el.focus()\n    },\n    inserted: function (el) {  \n        // inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】。和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效\n        el.focus()\n    },\n    updated: function (el) {  \n        // 当VNode更新的时候，会执行 updated， 可能会触发多次\n    }\n})\n//使用\n<input v-focus>\n```\n\n## ES6特性\n\nES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。\n\n1. 新增箭头函数\n\n    - 简化了写法， 少打代码，结构清晰\n    - 明确了this。传统JS的this是在运行的时候确定的，而不是在定义的时候确定的；而箭头函数的this是在定义时就确定的，不能被改变，也不能被call,apply,bind这些方法修改。      \n\n2. 块级作用域\n\n    - ES6中的let声明的变量有块级作用域\n    - ES5中是没有块级作用域的，并且var有变量提升的概念\n    - let声明的变量在同一个作用域内只有一个\n    - 要声明常量使用const\n\n3. 解构赋值\n\n    ES6中变量的解构赋值，比如：\n    ```javascript\n    let [a,b,c] = [0,1,2];\n    let {foo:abc,bar} = {foo:'hello',bar:'hi'};\n    ```\n\n4. Symbol\n\n    ```javascript\n    //ES6新增了一种Symbol数据类型，表示全局唯一的对象\n\n    let a1 = Symbol();\n    let a2 = Symbol();\n    console.log(a1 === a2);   //false   a1和a2永远不相等\n\n    let a3 = Symbol.for(\"a3\");\n    let a4 = Symbol.for(\"a3\");\n    console.log(a3 === a4);  //true\n    ```\n\n5. 模板字符串\n\n    ```javascript\n    var name = \"张三\";\n    var age = 12;\n    var gender=\"男\";\n    let str = `姓名${name},年龄${age},性别${gender}`;\n    ```\n\n6. 展开运算符\n\n    ```javascript\n    let arr1 = [1,2,3];\n    let arr2 = [4,5,6];\n    let arr3 = [...arr1,...arr2];\n    ```\n\n7. 类\n\n    ES6引入Class这个概念，让JS拥有其他面向对象语言的语法糖。\n\n    ```javascript\n    // 继承传递参数\n    class Parent{\n        constructor(name='mukewang'){\n            this.name=name;\n        }\n    }\n\n    class Child extends Parent{\n        constructor(name='child'){\n            //先初始化父亲的信息，在初始化自己的信息  \n            super(name);\n            this.type='child';\n        }\n    }\n    console.log('继承传递参数',new Child('hello'));\n    ```\n\n8. Promise\n\n    ```javascript\n    //ES6的Promise主要用于解决JS回调地狱问题\n\n    var fs = require('fs')\n\n    function pReadFile(filePath) {\n    return new Promise(function (resolve, reject) {\n        fs.readFile(filePath, 'utf8', function (err, data) {\n        if (err) {\n            reject(err)\n        } else {\n            resolve(data)\n        }\n        })\n    })\n    }\n\n    pReadFile('./data/a.txt')\n    .then(function (data) {\n        console.log(data)\n        return pReadFile('./data/b.txt')\n    })\n    .then(function (data) {\n        console.log(data)\n        return pReadFile('./data/c.txt')\n    })\n    .then(function (data) {\n        console.log(data)\n    })\n    ```\n\n9. ES6的迭代器\n\n    ```javascript\n    //for ... of 是ES6中新增加的语法,主要用来循环实现了Iterator接口类型的对象\n    //for ... of 可以遍历Array、Set、Map不能遍历Object \n    let arr = ['China', 'America', 'Korea']\n    for (let o of arr) {\n        console.log(o) //China, America, Korea\n    }\n    ```\n\n10. ES6模块化\n\n    ```javascript\n    //1.导出\n    //导出单个成员\n    export let name = 'leo';\n    export let age= 30;\n    let name= 'leo';\n    let age= 30;\n    let kk = \"abc\"\n    //导出多个成员\n    export {name, age};\n    //导出默认成员\n    export default kk;\n\n    //2.引入\n    import kk,{name,age} from 'a.js'\n    ```\n\n## 跨域\n\n跨域问题产生的原因 ：浏览器的同源策略导致了跨域。当我们在前端开发中使用ajax/fetch这些技术发送网络请求的时候，当协议、主机、端口有任何一个不一致的时候，则构成跨域。\n\n跨域的作用 ：用于隔离潜在恶意文件的重要安全机制\n\n跨域问题的解决：\n\n1. jsonp，允许script加载第三方资源\n\n2. 在服务器使用cors实现跨域资源共享\n    res.writeHead(200, {\n        \"Content-Type\": \"text/html; charset=UTF-8\",\n        \"Access-Control-Allow-Origin\":'http://localhost',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'X-Requested-With, Content-Type'\n    });\n\n3. 在前端的工程化项目(webpack)中,我们可以通过配置devserver的proxy来解决跨域访问的问题。他的原理是在本地开启一个服务器向数据服务器发送请求，因为服务器和服务器之间是没有跨域\n\n4. 但是因为webpack的devserver只在开发环境下有效，当项目发布上线之后仍然会有跨域问题，为了解决项目上线的跨域问题，我们配置服务器的反向代理（Apache/ngix）来实现跨域请求 \n\n5. 除此之外，我还知道当项目打包成apk之后就不存在跨域问题了，所以如果项目要打包成apk，我们需要在项目中的所有请求中写全路径(此时我们可以配置axios.default.baseURL来解决)\n\n6. iframe 嵌套通讯，postmessage\n\n## 继承\n\n1. 借助构造函数实现继承\n```javascript\n//  定义父类\nfunction Parent1 () {\n    this.name = 'xxx',\n    this.age = 18\n}\n//  定义子类\nfunction Child1 () {\n    //通过call()方法改变Child1的this指向使子类的函数体内执行父级的构造函数从而实现继承效果\n    Parent1.call(this)\n    this.address = 'yyy'\n}\n//  构建子类的实例s1\nvar s1 = new Child1()\nconsole.log(s1.name)  //xxx\n```\n> 缺点:该方法的实力(s1)无法使用父类(Parent1)的原型(prototype)中的属性和方法\n\n2. 借助原型链实现继承\n```javascript\nfunction Parent2 () {\n    this.name = 'xx',\n    this.age = 19,\n    this.play = [1,2,3]\n}\n//  一样在父类添加say方法\nParent2.prototype = {\n    say () {\n        console.log('say')\n    }\n}\nfunction Child2 (address) {\n    this.address = 'yyy'\n}\n// 让子类的原型直接指向父类实例\nChild2.prototype = new Parent2()\n//  生成两个子类的实例s2、s3\nvar s2 = new Child2()\nvar s3 = new Child2()\n// s2实例继承了父类中的name属性\nconsole.log(s2.name)  //xx\n//  s2实例也同样继承了父类原型上的say方法\nconsole.log(s2.say())  //say\n```\n> 缺点:在子类调用构造函数创建对象的时候，无法入参所有的属性值\n\n3. 组合继承\n```javascript\nfunction Parent5 () {\n    this.name = 'xx',\n    this.age = 20,\n    this.play = [4,5,6]\n}\nfunction Child5 (name,age,address) {\n    Parent5.call(this,name,age)\n    this.address = address\n}\n// 比较关键的一步\nChild5.prototype = new Parent5()\nvar c = new Child5(\"zhangsan\",19,\"无锡\")\n```\n\n4. 实例继承(为父类实例添加新特性，作为子类实例返回)\n```js\nfunction Animal (name) {\n    // 属性\n    this.name = name || 'Animal';\n    // 实例方法\n    this.sleep = function(){\n        console.log(this.name + '正在睡觉！');\n    }\n}\n// 原型方法\nAnimal.prototype.eat = function(food) {\n    console.log(this.name + '正在吃：' + food);\n};\nfunction Cat(){\n    var instance = new Animal();\n    instance.name = name || 'Tom';\n    return instance;\n}\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // true\nconsole.log(cat instanceof Cat); // false\n```\n\n5. 拷贝继承\n```js\n// 定义一个动物类\nfunction Animal (name) {\n    // 属性\n    this.name = name || 'Animal';\n    // 实例方法\n    this.sleep = function(){\n        console.log(this.name + '正在睡觉！');\n    }\n}\n// 原型方法\nAnimal.prototype.eat = function(food) {\n    console.log(this.name + '正在吃：' + food);\n};\nfunction Cat(name){\n    var animal = new Animal();\n    // 遍历拷贝属性\n    for(var p in animal){\n        Cat.prototype[p] = animal[p];\n    }\n    Cat.prototype.name = name || 'Tom';\n}\n\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // false\nconsole.log(cat instanceof Cat); // true\n```\n\n## 宏微任务\n\n事件循环的任务队列有宏任务队列和微任务队列，每次一个宏任务执行完毕的时候，都会把微任务队列中的微任务执行完毕之后才会再次执行下一个宏任务。\n\n- 宏队列：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.\n\n- 微队列：process.nextTick, Promise.then, Object.observer, MutationObserver.\n```javascript\nconsole.log(\"datagrand1\");\nsetTimeOut(()=>{\n    console.log(\"datagrand2\")\n});\nconst p1 = new Promise(resolve=>{\n    console.log(\"datagrand3\");\n    resolve();\n});\np1.then(()=>{\n    console.log(\"datagrand4\");\n});\nconsole.log(\"datagrand5\");\nconst p2 = new Promise(resolve=>{\n    console.log(\"datagrand6\");\n    resolve();\n});\np2.then(()=>{\n    console.log(\"datagrand7\");\n});\n```\n\n> 打印顺序是：1,3,5,6,4,7,2\n\n## 说几个常用的meta标签\n\n详细看这篇\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/07/前端面试题(二).md","raw":"---\ntitle: 前端面试题(二)\ndate: 2020-07-21 20:54:46\ntags:\n    - 面试题\ncategories:\n    - 面试题\ndescription:\n---\n\n高频面试题\n\n<!-- more -->\n\n## vue-router原理\n\n大型单页应用最显著特点之一就是采用前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。\n\n页面都是由组件组成的，只需要把组件和路径相对应起来，就能把组件渲染出来。\n\n当用户点击`router-link`标签时，会去寻找它对应的to属性，它的to属性和js中配置的路径`{path:'/home',component:Home}`中的path一一对应，从而找到了匹配的组件，最后把组件渲染到`router-view`标签所在的地方。\n\n前端路由时通过改变url，在不重新请求页面的情况下，更新页面视图。\n\n目前在浏览器环境中实现这一功能主要有两种：\n\n- 利用url中的hash：\n\n    在改变url的情况下，保证页面的不刷新。在2014年之前，大家是通过hash来实现路由，url hash就类似于：\n    `https://www.xxx.com/#/login`\n    这种# 后面hash值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求也就不会刷新页面。另外每次hash值变化都会触发hashchange这个事件，通过这个事件我们就可以知道hash值发生了哪些变化。然后我们就可以通过监听hashchange来实现更新页面部分内容的操作\n    ```js\n    window.addEventListener('hashchange', matchAndUpdate)\n    function matchAndUpdate () {\n     // todo 匹配 hash 做 dom 更新操作\n    }\n    ```\n\n- 利用H5中history：\n\n    14年后，因为HTML5标准发布。多了两个Api，`pushState`和`replaceState`,通过这两个api可以改变url地址且不会发送请求。同时还有`popstate`事件，通过这些就能用另一种方式实现前端路由了，原理和hash实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。\n    内部使⽤`window.history.pushState`来处理url的变化，切换对应的组件\n\n[如果对具体代码实现感兴趣可以点击这里查看，**vue-router源码实现**](https://qytayh.github.io/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/)\n\n\n## 组件间通信方式\n\n[点击这里查看详情](https://qytayh.github.io/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/)\n\n## vue2和vue3区别\n\n1. **目录结构**\n\n    vue-cli2.0与3.0在目录结构方面，有明显的不同\n\n    vue-cli3.0移除了配置文件目录，config和build文件夹\n\n    同时移除了`static`静态文件夹，新增了`public`文件夹，打开层级目录还会发现，`index.html`移动到`public`中\n\n2. **配置项**\n\n    3.0中config文件已经被移除，但是多了`.env.production`和`.env.development`文件，除了文件位置，实际配置起来和2.0没什么不同\n\n    没了`config`文件，跨域需要配置域名时，从`config/index.js`挪到了`vue.config.js`中，配置方法不变\n\n3. **渲染**\n\n    Vue2.x使用的Virtual Dom实现的渲染\n\n    Vue3.0不论是原生的html标签还是vue组件，他们都会通过h函数来判断，如果是原生html标签，在运行时直接通过Virtual Dom来直接渲染，同样如果是组件会直接生成组件代码\n\n4. **数据监听**\n\n    Vue2.x大家都知道使用的是es5的`object.defineproperties`中`getter`和`setter`实现的，而vue3.0的版本，是基于`Proxy`进行监听的，其实基于`proxy`监听就是所谓的`lazy by default`，什么意思呢，就是只要你用到了才会监听，可以理解为‘按需监听’，官方给出的诠释是：速度加倍，同时内存占用还减半。\n\n5. **按需引入**\n\n    Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实无论你用到还是没用到，都会跑一变。而vue3.0中可以用ES module imports按需引入，如：keep-alive内置组件、v-model指令，等等。\n\n\n## 简述vue2双向绑定原理\n\n1. 由页面->数据的变化：通过给页面元素添加对应的事件监听来实现\n```javascript\n<input v-model=\"value\" oninput=\"()=>this.handleInput($event)\">\n\nfunction handleInput(e){\n    this.value = e.target.value\n}\n```\n\n2. 由数据->页面的变化:通过数据劫持(`Object.defineProperty`)+发布订阅模式来实现的\n    具体流程：\n    - Compile解析器会将⻚⾯上的插值表达式/指定翻译成对应Watcher以添加到订阅器维护的列表中\n\n    - 通过`Object.defineProperty`劫持数据的变化，⼀旦数据源发⽣变化会触发对应的set⽅法\n\n    - 在set⽅法中，通知订阅器(Dep)对象中维护的所有订阅者(Watcher)列表更新\n\n    - 每⼀个Watch会去更新对应的⻚⾯\n\n3. 关于发布订阅模式\n\n    发布订阅模式又叫观察者模式，他定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象的变化，当这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得他们能够自动更新自己。\n\n\n## 自定义指令\n\nVue里面有许多内置的指令，比如`v-if`和`v-show`，这些丰富的指令能满足我们的绝大部分业务需求，不过在需要一些特殊功能时，我们仍然希望对`DOM`进行底层的操作，这时就要用到自定义指令。\n\n```js\nVue.directive('focus', {\n    bind: function (el) { \n        // 每当指令绑定到元素上的时候，会立即执行这个bind 函数，只执行一次\n        // 注意： 在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生的JS对象\n        // 在元素刚绑定了指令的时候还没有插入到DOM中去的时候调用focus方法没有作用。因为，一个元素只有插入DOM之后才能获取焦点\n        // el.focus()\n    },\n    inserted: function (el) {  \n        // inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】。和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效\n        el.focus()\n    },\n    updated: function (el) {  \n        // 当VNode更新的时候，会执行 updated， 可能会触发多次\n    }\n})\n//使用\n<input v-focus>\n```\n\n## ES6特性\n\nES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。\n\n1. 新增箭头函数\n\n    - 简化了写法， 少打代码，结构清晰\n    - 明确了this。传统JS的this是在运行的时候确定的，而不是在定义的时候确定的；而箭头函数的this是在定义时就确定的，不能被改变，也不能被call,apply,bind这些方法修改。      \n\n2. 块级作用域\n\n    - ES6中的let声明的变量有块级作用域\n    - ES5中是没有块级作用域的，并且var有变量提升的概念\n    - let声明的变量在同一个作用域内只有一个\n    - 要声明常量使用const\n\n3. 解构赋值\n\n    ES6中变量的解构赋值，比如：\n    ```javascript\n    let [a,b,c] = [0,1,2];\n    let {foo:abc,bar} = {foo:'hello',bar:'hi'};\n    ```\n\n4. Symbol\n\n    ```javascript\n    //ES6新增了一种Symbol数据类型，表示全局唯一的对象\n\n    let a1 = Symbol();\n    let a2 = Symbol();\n    console.log(a1 === a2);   //false   a1和a2永远不相等\n\n    let a3 = Symbol.for(\"a3\");\n    let a4 = Symbol.for(\"a3\");\n    console.log(a3 === a4);  //true\n    ```\n\n5. 模板字符串\n\n    ```javascript\n    var name = \"张三\";\n    var age = 12;\n    var gender=\"男\";\n    let str = `姓名${name},年龄${age},性别${gender}`;\n    ```\n\n6. 展开运算符\n\n    ```javascript\n    let arr1 = [1,2,3];\n    let arr2 = [4,5,6];\n    let arr3 = [...arr1,...arr2];\n    ```\n\n7. 类\n\n    ES6引入Class这个概念，让JS拥有其他面向对象语言的语法糖。\n\n    ```javascript\n    // 继承传递参数\n    class Parent{\n        constructor(name='mukewang'){\n            this.name=name;\n        }\n    }\n\n    class Child extends Parent{\n        constructor(name='child'){\n            //先初始化父亲的信息，在初始化自己的信息  \n            super(name);\n            this.type='child';\n        }\n    }\n    console.log('继承传递参数',new Child('hello'));\n    ```\n\n8. Promise\n\n    ```javascript\n    //ES6的Promise主要用于解决JS回调地狱问题\n\n    var fs = require('fs')\n\n    function pReadFile(filePath) {\n    return new Promise(function (resolve, reject) {\n        fs.readFile(filePath, 'utf8', function (err, data) {\n        if (err) {\n            reject(err)\n        } else {\n            resolve(data)\n        }\n        })\n    })\n    }\n\n    pReadFile('./data/a.txt')\n    .then(function (data) {\n        console.log(data)\n        return pReadFile('./data/b.txt')\n    })\n    .then(function (data) {\n        console.log(data)\n        return pReadFile('./data/c.txt')\n    })\n    .then(function (data) {\n        console.log(data)\n    })\n    ```\n\n9. ES6的迭代器\n\n    ```javascript\n    //for ... of 是ES6中新增加的语法,主要用来循环实现了Iterator接口类型的对象\n    //for ... of 可以遍历Array、Set、Map不能遍历Object \n    let arr = ['China', 'America', 'Korea']\n    for (let o of arr) {\n        console.log(o) //China, America, Korea\n    }\n    ```\n\n10. ES6模块化\n\n    ```javascript\n    //1.导出\n    //导出单个成员\n    export let name = 'leo';\n    export let age= 30;\n    let name= 'leo';\n    let age= 30;\n    let kk = \"abc\"\n    //导出多个成员\n    export {name, age};\n    //导出默认成员\n    export default kk;\n\n    //2.引入\n    import kk,{name,age} from 'a.js'\n    ```\n\n## 跨域\n\n跨域问题产生的原因 ：浏览器的同源策略导致了跨域。当我们在前端开发中使用ajax/fetch这些技术发送网络请求的时候，当协议、主机、端口有任何一个不一致的时候，则构成跨域。\n\n跨域的作用 ：用于隔离潜在恶意文件的重要安全机制\n\n跨域问题的解决：\n\n1. jsonp，允许script加载第三方资源\n\n2. 在服务器使用cors实现跨域资源共享\n    res.writeHead(200, {\n        \"Content-Type\": \"text/html; charset=UTF-8\",\n        \"Access-Control-Allow-Origin\":'http://localhost',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'X-Requested-With, Content-Type'\n    });\n\n3. 在前端的工程化项目(webpack)中,我们可以通过配置devserver的proxy来解决跨域访问的问题。他的原理是在本地开启一个服务器向数据服务器发送请求，因为服务器和服务器之间是没有跨域\n\n4. 但是因为webpack的devserver只在开发环境下有效，当项目发布上线之后仍然会有跨域问题，为了解决项目上线的跨域问题，我们配置服务器的反向代理（Apache/ngix）来实现跨域请求 \n\n5. 除此之外，我还知道当项目打包成apk之后就不存在跨域问题了，所以如果项目要打包成apk，我们需要在项目中的所有请求中写全路径(此时我们可以配置axios.default.baseURL来解决)\n\n6. iframe 嵌套通讯，postmessage\n\n## 继承\n\n1. 借助构造函数实现继承\n```javascript\n//  定义父类\nfunction Parent1 () {\n    this.name = 'xxx',\n    this.age = 18\n}\n//  定义子类\nfunction Child1 () {\n    //通过call()方法改变Child1的this指向使子类的函数体内执行父级的构造函数从而实现继承效果\n    Parent1.call(this)\n    this.address = 'yyy'\n}\n//  构建子类的实例s1\nvar s1 = new Child1()\nconsole.log(s1.name)  //xxx\n```\n> 缺点:该方法的实力(s1)无法使用父类(Parent1)的原型(prototype)中的属性和方法\n\n2. 借助原型链实现继承\n```javascript\nfunction Parent2 () {\n    this.name = 'xx',\n    this.age = 19,\n    this.play = [1,2,3]\n}\n//  一样在父类添加say方法\nParent2.prototype = {\n    say () {\n        console.log('say')\n    }\n}\nfunction Child2 (address) {\n    this.address = 'yyy'\n}\n// 让子类的原型直接指向父类实例\nChild2.prototype = new Parent2()\n//  生成两个子类的实例s2、s3\nvar s2 = new Child2()\nvar s3 = new Child2()\n// s2实例继承了父类中的name属性\nconsole.log(s2.name)  //xx\n//  s2实例也同样继承了父类原型上的say方法\nconsole.log(s2.say())  //say\n```\n> 缺点:在子类调用构造函数创建对象的时候，无法入参所有的属性值\n\n3. 组合继承\n```javascript\nfunction Parent5 () {\n    this.name = 'xx',\n    this.age = 20,\n    this.play = [4,5,6]\n}\nfunction Child5 (name,age,address) {\n    Parent5.call(this,name,age)\n    this.address = address\n}\n// 比较关键的一步\nChild5.prototype = new Parent5()\nvar c = new Child5(\"zhangsan\",19,\"无锡\")\n```\n\n4. 实例继承(为父类实例添加新特性，作为子类实例返回)\n```js\nfunction Animal (name) {\n    // 属性\n    this.name = name || 'Animal';\n    // 实例方法\n    this.sleep = function(){\n        console.log(this.name + '正在睡觉！');\n    }\n}\n// 原型方法\nAnimal.prototype.eat = function(food) {\n    console.log(this.name + '正在吃：' + food);\n};\nfunction Cat(){\n    var instance = new Animal();\n    instance.name = name || 'Tom';\n    return instance;\n}\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // true\nconsole.log(cat instanceof Cat); // false\n```\n\n5. 拷贝继承\n```js\n// 定义一个动物类\nfunction Animal (name) {\n    // 属性\n    this.name = name || 'Animal';\n    // 实例方法\n    this.sleep = function(){\n        console.log(this.name + '正在睡觉！');\n    }\n}\n// 原型方法\nAnimal.prototype.eat = function(food) {\n    console.log(this.name + '正在吃：' + food);\n};\nfunction Cat(name){\n    var animal = new Animal();\n    // 遍历拷贝属性\n    for(var p in animal){\n        Cat.prototype[p] = animal[p];\n    }\n    Cat.prototype.name = name || 'Tom';\n}\n\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // false\nconsole.log(cat instanceof Cat); // true\n```\n\n## 宏微任务\n\n事件循环的任务队列有宏任务队列和微任务队列，每次一个宏任务执行完毕的时候，都会把微任务队列中的微任务执行完毕之后才会再次执行下一个宏任务。\n\n- 宏队列：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.\n\n- 微队列：process.nextTick, Promise.then, Object.observer, MutationObserver.\n```javascript\nconsole.log(\"datagrand1\");\nsetTimeOut(()=>{\n    console.log(\"datagrand2\")\n});\nconst p1 = new Promise(resolve=>{\n    console.log(\"datagrand3\");\n    resolve();\n});\np1.then(()=>{\n    console.log(\"datagrand4\");\n});\nconsole.log(\"datagrand5\");\nconst p2 = new Promise(resolve=>{\n    console.log(\"datagrand6\");\n    resolve();\n});\np2.then(()=>{\n    console.log(\"datagrand7\");\n});\n```\n\n> 打印顺序是：1,3,5,6,4,7,2\n\n## 说几个常用的meta标签\n\n详细看这篇\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/07/前端面试题(二)","published":1,"updated":"2020-08-03T13:40:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53q002y1r0qeo9a2dho","content":"<p>高频面试题</p>\n<a id=\"more\"></a>\n\n<h2 id=\"vue-router原理\"><a href=\"#vue-router原理\" class=\"headerlink\" title=\"vue-router原理\"></a>vue-router原理</h2><p>大型单页应用最显著特点之一就是采用前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。</p>\n<p>页面都是由组件组成的，只需要把组件和路径相对应起来，就能把组件渲染出来。</p>\n<p>当用户点击<code>router-link</code>标签时，会去寻找它对应的to属性，它的to属性和js中配置的路径<code>{path:&#39;/home&#39;,component:Home}</code>中的path一一对应，从而找到了匹配的组件，最后把组件渲染到<code>router-view</code>标签所在的地方。</p>\n<p>前端路由时通过改变url，在不重新请求页面的情况下，更新页面视图。</p>\n<p>目前在浏览器环境中实现这一功能主要有两种：</p>\n<ul>\n<li><p>利用url中的hash：</p>\n<p>  在改变url的情况下，保证页面的不刷新。在2014年之前，大家是通过hash来实现路由，url hash就类似于：<br>  <code>https://www.xxx.com/#/login</code><br>  这种# 后面hash值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求也就不会刷新页面。另外每次hash值变化都会触发hashchange这个事件，通过这个事件我们就可以知道hash值发生了哪些变化。然后我们就可以通过监听hashchange来实现更新页面部分内容的操作</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, matchAndUpdate)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAndUpdate</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// todo 匹配 hash 做 dom 更新操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用H5中history：</p>\n<p>  14年后，因为HTML5标准发布。多了两个Api，<code>pushState</code>和<code>replaceState</code>,通过这两个api可以改变url地址且不会发送请求。同时还有<code>popstate</code>事件，通过这些就能用另一种方式实现前端路由了，原理和hash实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。<br>  内部使⽤<code>window.history.pushState</code>来处理url的变化，切换对应的组件</p>\n</li>\n</ul>\n<p><a href=\"https://qytayh.github.io/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/\">如果对具体代码实现感兴趣可以点击这里查看，<strong>vue-router源码实现</strong></a></p>\n<h2 id=\"组件间通信方式\"><a href=\"#组件间通信方式\" class=\"headerlink\" title=\"组件间通信方式\"></a>组件间通信方式</h2><p><a href=\"https://qytayh.github.io/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/\">点击这里查看详情</a></p>\n<h2 id=\"vue2和vue3区别\"><a href=\"#vue2和vue3区别\" class=\"headerlink\" title=\"vue2和vue3区别\"></a>vue2和vue3区别</h2><ol>\n<li><p><strong>目录结构</strong></p>\n<p> vue-cli2.0与3.0在目录结构方面，有明显的不同</p>\n<p> vue-cli3.0移除了配置文件目录，config和build文件夹</p>\n<p> 同时移除了<code>static</code>静态文件夹，新增了<code>public</code>文件夹，打开层级目录还会发现，<code>index.html</code>移动到<code>public</code>中</p>\n</li>\n<li><p><strong>配置项</strong></p>\n<p> 3.0中config文件已经被移除，但是多了<code>.env.production</code>和<code>.env.development</code>文件，除了文件位置，实际配置起来和2.0没什么不同</p>\n<p> 没了<code>config</code>文件，跨域需要配置域名时，从<code>config/index.js</code>挪到了<code>vue.config.js</code>中，配置方法不变</p>\n</li>\n<li><p><strong>渲染</strong></p>\n<p> Vue2.x使用的Virtual Dom实现的渲染</p>\n<p> Vue3.0不论是原生的html标签还是vue组件，他们都会通过h函数来判断，如果是原生html标签，在运行时直接通过Virtual Dom来直接渲染，同样如果是组件会直接生成组件代码</p>\n</li>\n<li><p><strong>数据监听</strong></p>\n<p> Vue2.x大家都知道使用的是es5的<code>object.defineproperties</code>中<code>getter</code>和<code>setter</code>实现的，而vue3.0的版本，是基于<code>Proxy</code>进行监听的，其实基于<code>proxy</code>监听就是所谓的<code>lazy by default</code>，什么意思呢，就是只要你用到了才会监听，可以理解为‘按需监听’，官方给出的诠释是：速度加倍，同时内存占用还减半。</p>\n</li>\n<li><p><strong>按需引入</strong></p>\n<p> Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实无论你用到还是没用到，都会跑一变。而vue3.0中可以用ES module imports按需引入，如：keep-alive内置组件、v-model指令，等等。</p>\n</li>\n</ol>\n<h2 id=\"简述vue2双向绑定原理\"><a href=\"#简述vue2双向绑定原理\" class=\"headerlink\" title=\"简述vue2双向绑定原理\"></a>简述vue2双向绑定原理</h2><ol>\n<li><p>由页面-&gt;数据的变化：通过给页面元素添加对应的事件监听来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">\"value\"</span> oninput=<span class=\"string\">\"()=&gt;this.handleInput($event)\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleInput</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = e.target.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由数据-&gt;页面的变化:通过数据劫持(<code>Object.defineProperty</code>)+发布订阅模式来实现的<br> 具体流程：</p>\n<ul>\n<li><p>Compile解析器会将⻚⾯上的插值表达式/指定翻译成对应Watcher以添加到订阅器维护的列表中</p>\n</li>\n<li><p>通过<code>Object.defineProperty</code>劫持数据的变化，⼀旦数据源发⽣变化会触发对应的set⽅法</p>\n</li>\n<li><p>在set⽅法中，通知订阅器(Dep)对象中维护的所有订阅者(Watcher)列表更新</p>\n</li>\n<li><p>每⼀个Watch会去更新对应的⻚⾯</p>\n</li>\n</ul>\n</li>\n<li><p>关于发布订阅模式</p>\n<p> 发布订阅模式又叫观察者模式，他定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象的变化，当这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得他们能够自动更新自己。</p>\n</li>\n</ol>\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h2><p>Vue里面有许多内置的指令，比如<code>v-if</code>和<code>v-show</code>，这些丰富的指令能满足我们的绝大部分业务需求，不过在需要一些特殊功能时，我们仍然希望对<code>DOM</code>进行底层的操作，这时就要用到自定义指令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">    bind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// 每当指令绑定到元素上的时候，会立即执行这个bind 函数，只执行一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意： 在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生的JS对象</span></span><br><span class=\"line\">        <span class=\"comment\">// 在元素刚绑定了指令的时候还没有插入到DOM中去的时候调用focus方法没有作用。因为，一个元素只有插入DOM之后才能获取焦点</span></span><br><span class=\"line\">        <span class=\"comment\">// el.focus()</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】。和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</span></span><br><span class=\"line\">        el.focus()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">&lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6特性\"><a href=\"#ES6特性\" class=\"headerlink\" title=\"ES6特性\"></a>ES6特性</h2><p>ES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。</p>\n<ol>\n<li><p>新增箭头函数</p>\n<ul>\n<li>简化了写法， 少打代码，结构清晰</li>\n<li>明确了this。传统JS的this是在运行的时候确定的，而不是在定义的时候确定的；而箭头函数的this是在定义时就确定的，不能被改变，也不能被call,apply,bind这些方法修改。      </li>\n</ul>\n</li>\n<li><p>块级作用域</p>\n<ul>\n<li>ES6中的let声明的变量有块级作用域</li>\n<li>ES5中是没有块级作用域的，并且var有变量提升的概念</li>\n<li>let声明的变量在同一个作用域内只有一个</li>\n<li>要声明常量使用const</li>\n</ul>\n</li>\n<li><p>解构赋值</p>\n<p> ES6中变量的解构赋值，比如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">foo</span>:abc,bar&#125; = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">'hello'</span>,<span class=\"attr\">bar</span>:<span class=\"string\">'hi'</span>&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Symbol</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6新增了一种Symbol数据类型，表示全局唯一的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1 === a2);   <span class=\"comment\">//false   a1和a2永远不相等</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a3 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"a3\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> a4 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"a3\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a3 === a4);  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模板字符串</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gender=<span class=\"string\">\"男\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`姓名<span class=\"subst\">$&#123;name&#125;</span>,年龄<span class=\"subst\">$&#123;age&#125;</span>,性别<span class=\"subst\">$&#123;gender&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>展开运算符</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = [...arr1,...arr2];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类</p>\n<p> ES6引入Class这个概念，让JS拥有其他面向对象语言的语法糖。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承传递参数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name='mukewang')&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name='child')&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先初始化父亲的信息，在初始化自己的信息  </span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type=<span class=\"string\">'child'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'继承传递参数'</span>,<span class=\"keyword\">new</span> Child(<span class=\"string\">'hello'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Promise</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6的Promise主要用于解决JS回调地狱问题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filePath, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pReadFile(<span class=\"string\">'./data/a.txt'</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/b.txt'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/c.txt'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ES6的迭代器</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for ... of 是ES6中新增加的语法,主要用来循环实现了Iterator接口类型的对象</span></span><br><span class=\"line\"><span class=\"comment\">//for ... of 可以遍历Array、Set、Map不能遍历Object </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'China'</span>, <span class=\"string\">'America'</span>, <span class=\"string\">'Korea'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> o <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(o) <span class=\"comment\">//China, America, Korea</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ES6模块化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.导出</span></span><br><span class=\"line\"><span class=\"comment\">//导出单个成员</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> name = <span class=\"string\">'leo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> age= <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name= <span class=\"string\">'leo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age= <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kk = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"comment\">//导出多个成员</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name, age&#125;;</span><br><span class=\"line\"><span class=\"comment\">//导出默认成员</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> kk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> kk,&#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'a.js'</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><p>跨域问题产生的原因 ：浏览器的同源策略导致了跨域。当我们在前端开发中使用ajax/fetch这些技术发送网络请求的时候，当协议、主机、端口有任何一个不一致的时候，则构成跨域。</p>\n<p>跨域的作用 ：用于隔离潜在恶意文件的重要安全机制</p>\n<p>跨域问题的解决：</p>\n<ol>\n<li><p>jsonp，允许script加载第三方资源</p>\n</li>\n<li><p>在服务器使用cors实现跨域资源共享<br> res.writeHead(200, {</p>\n<pre><code>&quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;,\n&quot;Access-Control-Allow-Origin&quot;:&apos;http://localhost&apos;,\n&apos;Access-Control-Allow-Methods&apos;: &apos;GET, POST, OPTIONS&apos;,\n&apos;Access-Control-Allow-Headers&apos;: &apos;X-Requested-With, Content-Type&apos;</code></pre><p> });</p>\n</li>\n<li><p>在前端的工程化项目(webpack)中,我们可以通过配置devserver的proxy来解决跨域访问的问题。他的原理是在本地开启一个服务器向数据服务器发送请求，因为服务器和服务器之间是没有跨域</p>\n</li>\n<li><p>但是因为webpack的devserver只在开发环境下有效，当项目发布上线之后仍然会有跨域问题，为了解决项目上线的跨域问题，我们配置服务器的反向代理（Apache/ngix）来实现跨域请求 </p>\n</li>\n<li><p>除此之外，我还知道当项目打包成apk之后就不存在跨域问题了，所以如果项目要打包成apk，我们需要在项目中的所有请求中写全路径(此时我们可以配置axios.default.baseURL来解决)</p>\n</li>\n<li><p>iframe 嵌套通讯，postmessage</p>\n</li>\n</ol>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ol>\n<li><p>借助构造函数实现继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  定义父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  定义子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过call()方法改变Child1的this指向使子类的函数体内执行父级的构造函数从而实现继承效果</span></span><br><span class=\"line\">    Parent1.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address = <span class=\"string\">'yyy'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  构建子类的实例s1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child1()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.name)  <span class=\"comment\">//xxx</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点:该方法的实力(s1)无法使用父类(Parent1)的原型(prototype)中的属性和方法</p>\n</blockquote>\n</li>\n<li><p>借助原型链实现继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">19</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  一样在父类添加say方法</span></span><br><span class=\"line\">Parent2.prototype = &#123;</span><br><span class=\"line\">    say () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'say'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span> (<span class=\"params\">address</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address = <span class=\"string\">'yyy'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 让子类的原型直接指向父类实例</span></span><br><span class=\"line\">Child2.prototype = <span class=\"keyword\">new</span> Parent2()</span><br><span class=\"line\"><span class=\"comment\">//  生成两个子类的实例s2、s3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2()</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child2()</span><br><span class=\"line\"><span class=\"comment\">// s2实例继承了父类中的name属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2.name)  <span class=\"comment\">//xx</span></span><br><span class=\"line\"><span class=\"comment\">//  s2实例也同样继承了父类原型上的say方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2.say())  <span class=\"comment\">//say</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点:在子类调用构造函数创建对象的时候，无法入参所有的属性值</p>\n</blockquote>\n</li>\n<li><p>组合继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent5</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child5</span> (<span class=\"params\">name,age,address</span>) </span>&#123;</span><br><span class=\"line\">    Parent5.call(<span class=\"keyword\">this</span>,name,age)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address = address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 比较关键的一步</span></span><br><span class=\"line\">Child5.prototype = <span class=\"keyword\">new</span> Parent5()</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Child5(<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">19</span>,<span class=\"string\">\"无锡\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例继承(为父类实例添加新特性，作为子类实例返回)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Animal'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在睡觉！'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原型方法</span></span><br><span class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在吃：'</span> + food);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    instance.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拷贝继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Animal'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在睡觉！'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原型方法</span></span><br><span class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在吃：'</span> + food);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    <span class=\"comment\">// 遍历拷贝属性</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> animal)&#123;</span><br><span class=\"line\">        Cat.prototype[p] = animal[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Cat.prototype.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"宏微任务\"><a href=\"#宏微任务\" class=\"headerlink\" title=\"宏微任务\"></a>宏微任务</h2><p>事件循环的任务队列有宏任务队列和微任务队列，每次一个宏任务执行完毕的时候，都会把微任务队列中的微任务执行完毕之后才会再次执行下一个宏任务。</p>\n<ul>\n<li><p>宏队列：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.</p>\n</li>\n<li><p>微队列：process.nextTick, Promise.then, Object.observer, MutationObserver.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand1\"</span>);</span><br><span class=\"line\">setTimeOut(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand2\"</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand3\"</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand4\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand6\"</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p2.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand7\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>打印顺序是：1,3,5,6,4,7,2</p>\n</blockquote>\n<h2 id=\"说几个常用的meta标签\"><a href=\"#说几个常用的meta标签\" class=\"headerlink\" title=\"说几个常用的meta标签\"></a>说几个常用的meta标签</h2><p>详细看这篇</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>高频面试题</p>","more":"<h2 id=\"vue-router原理\"><a href=\"#vue-router原理\" class=\"headerlink\" title=\"vue-router原理\"></a>vue-router原理</h2><p>大型单页应用最显著特点之一就是采用前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。</p>\n<p>页面都是由组件组成的，只需要把组件和路径相对应起来，就能把组件渲染出来。</p>\n<p>当用户点击<code>router-link</code>标签时，会去寻找它对应的to属性，它的to属性和js中配置的路径<code>{path:&#39;/home&#39;,component:Home}</code>中的path一一对应，从而找到了匹配的组件，最后把组件渲染到<code>router-view</code>标签所在的地方。</p>\n<p>前端路由时通过改变url，在不重新请求页面的情况下，更新页面视图。</p>\n<p>目前在浏览器环境中实现这一功能主要有两种：</p>\n<ul>\n<li><p>利用url中的hash：</p>\n<p>  在改变url的情况下，保证页面的不刷新。在2014年之前，大家是通过hash来实现路由，url hash就类似于：<br>  <code>https://www.xxx.com/#/login</code><br>  这种# 后面hash值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求也就不会刷新页面。另外每次hash值变化都会触发hashchange这个事件，通过这个事件我们就可以知道hash值发生了哪些变化。然后我们就可以通过监听hashchange来实现更新页面部分内容的操作</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, matchAndUpdate)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAndUpdate</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// todo 匹配 hash 做 dom 更新操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用H5中history：</p>\n<p>  14年后，因为HTML5标准发布。多了两个Api，<code>pushState</code>和<code>replaceState</code>,通过这两个api可以改变url地址且不会发送请求。同时还有<code>popstate</code>事件，通过这些就能用另一种方式实现前端路由了，原理和hash实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。<br>  内部使⽤<code>window.history.pushState</code>来处理url的变化，切换对应的组件</p>\n</li>\n</ul>\n<p><a href=\"https://qytayh.github.io/2020/07/vue-router%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/\">如果对具体代码实现感兴趣可以点击这里查看，<strong>vue-router源码实现</strong></a></p>\n<h2 id=\"组件间通信方式\"><a href=\"#组件间通信方式\" class=\"headerlink\" title=\"组件间通信方式\"></a>组件间通信方式</h2><p><a href=\"https://qytayh.github.io/2020/06/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/\">点击这里查看详情</a></p>\n<h2 id=\"vue2和vue3区别\"><a href=\"#vue2和vue3区别\" class=\"headerlink\" title=\"vue2和vue3区别\"></a>vue2和vue3区别</h2><ol>\n<li><p><strong>目录结构</strong></p>\n<p> vue-cli2.0与3.0在目录结构方面，有明显的不同</p>\n<p> vue-cli3.0移除了配置文件目录，config和build文件夹</p>\n<p> 同时移除了<code>static</code>静态文件夹，新增了<code>public</code>文件夹，打开层级目录还会发现，<code>index.html</code>移动到<code>public</code>中</p>\n</li>\n<li><p><strong>配置项</strong></p>\n<p> 3.0中config文件已经被移除，但是多了<code>.env.production</code>和<code>.env.development</code>文件，除了文件位置，实际配置起来和2.0没什么不同</p>\n<p> 没了<code>config</code>文件，跨域需要配置域名时，从<code>config/index.js</code>挪到了<code>vue.config.js</code>中，配置方法不变</p>\n</li>\n<li><p><strong>渲染</strong></p>\n<p> Vue2.x使用的Virtual Dom实现的渲染</p>\n<p> Vue3.0不论是原生的html标签还是vue组件，他们都会通过h函数来判断，如果是原生html标签，在运行时直接通过Virtual Dom来直接渲染，同样如果是组件会直接生成组件代码</p>\n</li>\n<li><p><strong>数据监听</strong></p>\n<p> Vue2.x大家都知道使用的是es5的<code>object.defineproperties</code>中<code>getter</code>和<code>setter</code>实现的，而vue3.0的版本，是基于<code>Proxy</code>进行监听的，其实基于<code>proxy</code>监听就是所谓的<code>lazy by default</code>，什么意思呢，就是只要你用到了才会监听，可以理解为‘按需监听’，官方给出的诠释是：速度加倍，同时内存占用还减半。</p>\n</li>\n<li><p><strong>按需引入</strong></p>\n<p> Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实无论你用到还是没用到，都会跑一变。而vue3.0中可以用ES module imports按需引入，如：keep-alive内置组件、v-model指令，等等。</p>\n</li>\n</ol>\n<h2 id=\"简述vue2双向绑定原理\"><a href=\"#简述vue2双向绑定原理\" class=\"headerlink\" title=\"简述vue2双向绑定原理\"></a>简述vue2双向绑定原理</h2><ol>\n<li><p>由页面-&gt;数据的变化：通过给页面元素添加对应的事件监听来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">\"value\"</span> oninput=<span class=\"string\">\"()=&gt;this.handleInput($event)\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleInput</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = e.target.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由数据-&gt;页面的变化:通过数据劫持(<code>Object.defineProperty</code>)+发布订阅模式来实现的<br> 具体流程：</p>\n<ul>\n<li><p>Compile解析器会将⻚⾯上的插值表达式/指定翻译成对应Watcher以添加到订阅器维护的列表中</p>\n</li>\n<li><p>通过<code>Object.defineProperty</code>劫持数据的变化，⼀旦数据源发⽣变化会触发对应的set⽅法</p>\n</li>\n<li><p>在set⽅法中，通知订阅器(Dep)对象中维护的所有订阅者(Watcher)列表更新</p>\n</li>\n<li><p>每⼀个Watch会去更新对应的⻚⾯</p>\n</li>\n</ul>\n</li>\n<li><p>关于发布订阅模式</p>\n<p> 发布订阅模式又叫观察者模式，他定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象的变化，当这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得他们能够自动更新自己。</p>\n</li>\n</ol>\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h2><p>Vue里面有许多内置的指令，比如<code>v-if</code>和<code>v-show</code>，这些丰富的指令能满足我们的绝大部分业务需求，不过在需要一些特殊功能时，我们仍然希望对<code>DOM</code>进行底层的操作，这时就要用到自定义指令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">    bind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// 每当指令绑定到元素上的时候，会立即执行这个bind 函数，只执行一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意： 在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生的JS对象</span></span><br><span class=\"line\">        <span class=\"comment\">// 在元素刚绑定了指令的时候还没有插入到DOM中去的时候调用focus方法没有作用。因为，一个元素只有插入DOM之后才能获取焦点</span></span><br><span class=\"line\">        <span class=\"comment\">// el.focus()</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】。和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</span></span><br><span class=\"line\">        el.focus()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">&lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6特性\"><a href=\"#ES6特性\" class=\"headerlink\" title=\"ES6特性\"></a>ES6特性</h2><p>ES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。</p>\n<ol>\n<li><p>新增箭头函数</p>\n<ul>\n<li>简化了写法， 少打代码，结构清晰</li>\n<li>明确了this。传统JS的this是在运行的时候确定的，而不是在定义的时候确定的；而箭头函数的this是在定义时就确定的，不能被改变，也不能被call,apply,bind这些方法修改。      </li>\n</ul>\n</li>\n<li><p>块级作用域</p>\n<ul>\n<li>ES6中的let声明的变量有块级作用域</li>\n<li>ES5中是没有块级作用域的，并且var有变量提升的概念</li>\n<li>let声明的变量在同一个作用域内只有一个</li>\n<li>要声明常量使用const</li>\n</ul>\n</li>\n<li><p>解构赋值</p>\n<p> ES6中变量的解构赋值，比如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">foo</span>:abc,bar&#125; = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">'hello'</span>,<span class=\"attr\">bar</span>:<span class=\"string\">'hi'</span>&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Symbol</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6新增了一种Symbol数据类型，表示全局唯一的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1 === a2);   <span class=\"comment\">//false   a1和a2永远不相等</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a3 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"a3\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> a4 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"a3\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a3 === a4);  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模板字符串</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gender=<span class=\"string\">\"男\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`姓名<span class=\"subst\">$&#123;name&#125;</span>,年龄<span class=\"subst\">$&#123;age&#125;</span>,性别<span class=\"subst\">$&#123;gender&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>展开运算符</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = [...arr1,...arr2];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类</p>\n<p> ES6引入Class这个概念，让JS拥有其他面向对象语言的语法糖。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承传递参数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name='mukewang')&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name='child')&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先初始化父亲的信息，在初始化自己的信息  </span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type=<span class=\"string\">'child'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'继承传递参数'</span>,<span class=\"keyword\">new</span> Child(<span class=\"string\">'hello'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Promise</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6的Promise主要用于解决JS回调地狱问题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filePath, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pReadFile(<span class=\"string\">'./data/a.txt'</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/b.txt'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/c.txt'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ES6的迭代器</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for ... of 是ES6中新增加的语法,主要用来循环实现了Iterator接口类型的对象</span></span><br><span class=\"line\"><span class=\"comment\">//for ... of 可以遍历Array、Set、Map不能遍历Object </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'China'</span>, <span class=\"string\">'America'</span>, <span class=\"string\">'Korea'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> o <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(o) <span class=\"comment\">//China, America, Korea</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ES6模块化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.导出</span></span><br><span class=\"line\"><span class=\"comment\">//导出单个成员</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> name = <span class=\"string\">'leo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> age= <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name= <span class=\"string\">'leo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age= <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kk = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"comment\">//导出多个成员</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name, age&#125;;</span><br><span class=\"line\"><span class=\"comment\">//导出默认成员</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> kk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> kk,&#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'a.js'</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><p>跨域问题产生的原因 ：浏览器的同源策略导致了跨域。当我们在前端开发中使用ajax/fetch这些技术发送网络请求的时候，当协议、主机、端口有任何一个不一致的时候，则构成跨域。</p>\n<p>跨域的作用 ：用于隔离潜在恶意文件的重要安全机制</p>\n<p>跨域问题的解决：</p>\n<ol>\n<li><p>jsonp，允许script加载第三方资源</p>\n</li>\n<li><p>在服务器使用cors实现跨域资源共享<br> res.writeHead(200, {</p>\n<pre><code>&quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;,\n&quot;Access-Control-Allow-Origin&quot;:&apos;http://localhost&apos;,\n&apos;Access-Control-Allow-Methods&apos;: &apos;GET, POST, OPTIONS&apos;,\n&apos;Access-Control-Allow-Headers&apos;: &apos;X-Requested-With, Content-Type&apos;</code></pre><p> });</p>\n</li>\n<li><p>在前端的工程化项目(webpack)中,我们可以通过配置devserver的proxy来解决跨域访问的问题。他的原理是在本地开启一个服务器向数据服务器发送请求，因为服务器和服务器之间是没有跨域</p>\n</li>\n<li><p>但是因为webpack的devserver只在开发环境下有效，当项目发布上线之后仍然会有跨域问题，为了解决项目上线的跨域问题，我们配置服务器的反向代理（Apache/ngix）来实现跨域请求 </p>\n</li>\n<li><p>除此之外，我还知道当项目打包成apk之后就不存在跨域问题了，所以如果项目要打包成apk，我们需要在项目中的所有请求中写全路径(此时我们可以配置axios.default.baseURL来解决)</p>\n</li>\n<li><p>iframe 嵌套通讯，postmessage</p>\n</li>\n</ol>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ol>\n<li><p>借助构造函数实现继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  定义父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  定义子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过call()方法改变Child1的this指向使子类的函数体内执行父级的构造函数从而实现继承效果</span></span><br><span class=\"line\">    Parent1.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address = <span class=\"string\">'yyy'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  构建子类的实例s1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child1()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.name)  <span class=\"comment\">//xxx</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点:该方法的实力(s1)无法使用父类(Parent1)的原型(prototype)中的属性和方法</p>\n</blockquote>\n</li>\n<li><p>借助原型链实现继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">19</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  一样在父类添加say方法</span></span><br><span class=\"line\">Parent2.prototype = &#123;</span><br><span class=\"line\">    say () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'say'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span> (<span class=\"params\">address</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address = <span class=\"string\">'yyy'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 让子类的原型直接指向父类实例</span></span><br><span class=\"line\">Child2.prototype = <span class=\"keyword\">new</span> Parent2()</span><br><span class=\"line\"><span class=\"comment\">//  生成两个子类的实例s2、s3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2()</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child2()</span><br><span class=\"line\"><span class=\"comment\">// s2实例继承了父类中的name属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2.name)  <span class=\"comment\">//xx</span></span><br><span class=\"line\"><span class=\"comment\">//  s2实例也同样继承了父类原型上的say方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2.say())  <span class=\"comment\">//say</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点:在子类调用构造函数创建对象的时候，无法入参所有的属性值</p>\n</blockquote>\n</li>\n<li><p>组合继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent5</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child5</span> (<span class=\"params\">name,age,address</span>) </span>&#123;</span><br><span class=\"line\">    Parent5.call(<span class=\"keyword\">this</span>,name,age)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address = address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 比较关键的一步</span></span><br><span class=\"line\">Child5.prototype = <span class=\"keyword\">new</span> Parent5()</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Child5(<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">19</span>,<span class=\"string\">\"无锡\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例继承(为父类实例添加新特性，作为子类实例返回)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Animal'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在睡觉！'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原型方法</span></span><br><span class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在吃：'</span> + food);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    instance.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拷贝继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Animal'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在睡觉！'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原型方法</span></span><br><span class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在吃：'</span> + food);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    <span class=\"comment\">// 遍历拷贝属性</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> animal)&#123;</span><br><span class=\"line\">        Cat.prototype[p] = animal[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Cat.prototype.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"宏微任务\"><a href=\"#宏微任务\" class=\"headerlink\" title=\"宏微任务\"></a>宏微任务</h2><p>事件循环的任务队列有宏任务队列和微任务队列，每次一个宏任务执行完毕的时候，都会把微任务队列中的微任务执行完毕之后才会再次执行下一个宏任务。</p>\n<ul>\n<li><p>宏队列：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.</p>\n</li>\n<li><p>微队列：process.nextTick, Promise.then, Object.observer, MutationObserver.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand1\"</span>);</span><br><span class=\"line\">setTimeOut(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand2\"</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand3\"</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand4\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand6\"</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p2.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"datagrand7\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>打印顺序是：1,3,5,6,4,7,2</p>\n</blockquote>\n<h2 id=\"说几个常用的meta标签\"><a href=\"#说几个常用的meta标签\" class=\"headerlink\" title=\"说几个常用的meta标签\"></a>说几个常用的meta标签</h2><p>详细看这篇</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"在flutter中优雅的封装网络请求","date":"2020-08-03T12:30:25.000Z","description":null,"_content":"\n本文讲述如何封装dio网络请求，并在实际中使用。\n<!-- more -->\n\n## Dio http库\n\ndio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时等。\n\n## 引入\n\n引入dio:\n```yaml\ndependencies:\n  dio: ^x.x.x   #请使用pub上的最新版本\n```\n\n## 开始封装\n\n在lib文件夹下创建`utils/dio/dio.dart`,用于编写我们封装的代码\n\n```dart\nimport 'dart:convert';\nimport 'package:dio/dio.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n/// 自定义枚举\nenum Method { get, post, put, delete }\nclass Net {\n  // 工厂模式\n  factory Net() => _getInstance();\n  static Net get instance => _getInstance();\n  static Net _instance;\n\n  Dio dio;\n  Net._internal() {\n    // 初始化\n    dio = Dio(BaseOptions(\n      connectTimeout: 60000, // 连接服务器超时时间，单位是毫秒.\n      receiveTimeout: 10000, // 响应流上前后两次接受到数据的间隔，单位为毫秒, 这并不是接收数据的总时限.\n    ));\n  }\n  // 单列模式\n  static Net _getInstance() {\n    if (_instance == null) {\n      _instance = Net._internal();\n    }\n    return _instance;\n  }\n  get(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.get);\n  }\n  post(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.post);\n  }\n  put(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.put);\n  }\n  delete(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.delete);\n  }\n   _doRequest(\n    String url,\n    Map<String, dynamic> params,\n    Method method,\n  ) async {\n    try {\n      var _prefs = await SharedPreferences.getInstance();\n      var token = _prefs.getString('token')??'';\n      /// 可以添加header 设置token\n      dio.options.headers.addAll({'Authorization': 'Bearer ' + token});\n      String BASE_URL = '你的接口地址' + url;\n      Response response;\n      switch (method) {\n        case Method.get:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.get(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.get(BASE_URL);\n          }\n          break;\n        case Method.post:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.post(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.post(BASE_URL);\n          }\n          break;\n        case Method.put:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.put(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.put(BASE_URL);\n          }\n          break;\n        case Method.delete:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.delete(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.delete(BASE_URL);\n          }\n          break;\n      }\n      return json.decode(response.toString());\n    } catch (exception) {\n      print('错误：${exception.toString()}');\n    }\n  }\n}\nclass BaseModel {\n  int code;\n  dynamic data;\n  String error;\n  BaseModel({this.code, this.data, this.error});\n  BaseModel.fromJson(Map<String, dynamic> json) {\n    code = json['code'];\n    data = json['data'];\n    error = json['error'];\n  }\n}\n```\n\n## 使用\n\n我们以一个登陆的demo来看dio的用法\n```dart\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:zzc_app/utils/dio/dio.dart';\n\nclass LoginForm extends StatefulWidget {\n  LoginForm({Key key}) : super(key: key);\n  @override\n  _LoginFormState createState() => _LoginFormState();\n}\nclass _LoginFormState extends State<LoginForm> {\n  final _userNameController = TextEditingController();\n  final _pwdController = TextEditingController();\n\n  _onsubmit() async {//进行登陆操作\n    var params={\n      'username':_userNameController.text,\n      'password':_pwdController.text\n    };\n    var res = await Net().post('login', params);\n    if(res['code']==1){\n      //登陆成功的操作\n    }else{\n      //登陆失败的操作\n    }\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: Container(\n      padding: EdgeInsetsDirectional.fromSTEB(30, 100, 30, 10),\n      child: Column(\n        children: <Widget>[\n          TextField(\n            controller: _userNameController,\n            decoration: InputDecoration(\n              labelText: '用户名',\n            ),\n          ),\n          TextField(\n            controller: _pwdController,\n            decoration: InputDecoration(\n              labelText: '密码',\n            ),\n          ),\n          MaterialButton(onPressed: _onsubmit,//等同于我们常见的click事件\n           child: Text('登陆'))\n        ],\n      ),\n    ));\n  }\n}\n\n```\n\n\n>  [将uni-request进行axios化封装](https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/)\n>  [在vue中对axios进行二次封装](https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/)\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/08/在flutter中优雅的封装网络请求.md","raw":"---\ntitle: 在flutter中优雅的封装网络请求\ndate: 2020-08-03 20:30:25\ntags:\n  - flutter\n\t- 网络请求\ncategories:\n  - flutter\n\t- 网络请求\ndescription:\n---\n\n本文讲述如何封装dio网络请求，并在实际中使用。\n<!-- more -->\n\n## Dio http库\n\ndio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时等。\n\n## 引入\n\n引入dio:\n```yaml\ndependencies:\n  dio: ^x.x.x   #请使用pub上的最新版本\n```\n\n## 开始封装\n\n在lib文件夹下创建`utils/dio/dio.dart`,用于编写我们封装的代码\n\n```dart\nimport 'dart:convert';\nimport 'package:dio/dio.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n/// 自定义枚举\nenum Method { get, post, put, delete }\nclass Net {\n  // 工厂模式\n  factory Net() => _getInstance();\n  static Net get instance => _getInstance();\n  static Net _instance;\n\n  Dio dio;\n  Net._internal() {\n    // 初始化\n    dio = Dio(BaseOptions(\n      connectTimeout: 60000, // 连接服务器超时时间，单位是毫秒.\n      receiveTimeout: 10000, // 响应流上前后两次接受到数据的间隔，单位为毫秒, 这并不是接收数据的总时限.\n    ));\n  }\n  // 单列模式\n  static Net _getInstance() {\n    if (_instance == null) {\n      _instance = Net._internal();\n    }\n    return _instance;\n  }\n  get(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.get);\n  }\n  post(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.post);\n  }\n  put(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.put);\n  }\n  delete(String url, Map<String, dynamic> params) {\n    return _doRequest(url, params, Method.delete);\n  }\n   _doRequest(\n    String url,\n    Map<String, dynamic> params,\n    Method method,\n  ) async {\n    try {\n      var _prefs = await SharedPreferences.getInstance();\n      var token = _prefs.getString('token')??'';\n      /// 可以添加header 设置token\n      dio.options.headers.addAll({'Authorization': 'Bearer ' + token});\n      String BASE_URL = '你的接口地址' + url;\n      Response response;\n      switch (method) {\n        case Method.get:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.get(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.get(BASE_URL);\n          }\n          break;\n        case Method.post:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.post(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.post(BASE_URL);\n          }\n          break;\n        case Method.put:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.put(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.put(BASE_URL);\n          }\n          break;\n        case Method.delete:\n          if (params != null && params.isNotEmpty) {\n            response = await dio.delete(BASE_URL, queryParameters: params);\n          } else {\n            response = await dio.delete(BASE_URL);\n          }\n          break;\n      }\n      return json.decode(response.toString());\n    } catch (exception) {\n      print('错误：${exception.toString()}');\n    }\n  }\n}\nclass BaseModel {\n  int code;\n  dynamic data;\n  String error;\n  BaseModel({this.code, this.data, this.error});\n  BaseModel.fromJson(Map<String, dynamic> json) {\n    code = json['code'];\n    data = json['data'];\n    error = json['error'];\n  }\n}\n```\n\n## 使用\n\n我们以一个登陆的demo来看dio的用法\n```dart\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:zzc_app/utils/dio/dio.dart';\n\nclass LoginForm extends StatefulWidget {\n  LoginForm({Key key}) : super(key: key);\n  @override\n  _LoginFormState createState() => _LoginFormState();\n}\nclass _LoginFormState extends State<LoginForm> {\n  final _userNameController = TextEditingController();\n  final _pwdController = TextEditingController();\n\n  _onsubmit() async {//进行登陆操作\n    var params={\n      'username':_userNameController.text,\n      'password':_pwdController.text\n    };\n    var res = await Net().post('login', params);\n    if(res['code']==1){\n      //登陆成功的操作\n    }else{\n      //登陆失败的操作\n    }\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: Container(\n      padding: EdgeInsetsDirectional.fromSTEB(30, 100, 30, 10),\n      child: Column(\n        children: <Widget>[\n          TextField(\n            controller: _userNameController,\n            decoration: InputDecoration(\n              labelText: '用户名',\n            ),\n          ),\n          TextField(\n            controller: _pwdController,\n            decoration: InputDecoration(\n              labelText: '密码',\n            ),\n          ),\n          MaterialButton(onPressed: _onsubmit,//等同于我们常见的click事件\n           child: Text('登陆'))\n        ],\n      ),\n    ));\n  }\n}\n\n```\n\n\n>  [将uni-request进行axios化封装](https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/)\n>  [在vue中对axios进行二次封装](https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/)\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/08/在flutter中优雅的封装网络请求","published":1,"updated":"2021-06-09T01:13:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53r00331r0q60mg3238","content":"<p>本文讲述如何封装dio网络请求，并在实际中使用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Dio-http库\"><a href=\"#Dio-http库\" class=\"headerlink\" title=\"Dio http库\"></a>Dio http库</h2><p>dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时等。</p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>引入dio:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">dio:</span> <span class=\"string\">^x.x.x</span>   <span class=\"comment\">#请使用pub上的最新版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开始封装\"><a href=\"#开始封装\" class=\"headerlink\" title=\"开始封装\"></a>开始封装</h2><p>在lib文件夹下创建<code>utils/dio/dio.dart</code>,用于编写我们封装的代码</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dart:convert'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:dio/dio.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:shared_preferences/shared_preferences.dart'</span>;</span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"markdown\">自定义枚举</span></span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Method &#123; <span class=\"keyword\">get</span>, post, put, delete &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Net</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 工厂模式</span></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> Net() =&gt; _getInstance();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Net <span class=\"keyword\">get</span> instance =&gt; _getInstance();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Net _instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  Dio dio;</span><br><span class=\"line\">  Net._internal() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    dio = Dio(BaseOptions(</span><br><span class=\"line\">      connectTimeout: <span class=\"number\">60000</span>, <span class=\"comment\">// 连接服务器超时时间，单位是毫秒.</span></span><br><span class=\"line\">      receiveTimeout: <span class=\"number\">10000</span>, <span class=\"comment\">// 响应流上前后两次接受到数据的间隔，单位为毫秒, 这并不是接收数据的总时限.</span></span><br><span class=\"line\">    ));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 单列模式</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Net _getInstance() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      _instance = Net._internal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.<span class=\"keyword\">get</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.post);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  put(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.put);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.delete);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   _doRequest(</span><br><span class=\"line\">    <span class=\"built_in\">String</span> url,</span><br><span class=\"line\">    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params,</span><br><span class=\"line\">    Method method,</span><br><span class=\"line\">  ) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> _prefs = <span class=\"keyword\">await</span> SharedPreferences.getInstance();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> token = _prefs.getString(<span class=\"string\">'token'</span>)??<span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"comment\">/// <span class=\"markdown\">可以添加header 设置token</span></span></span><br><span class=\"line\">      dio.options.headers.addAll(&#123;<span class=\"string\">'Authorization'</span>: <span class=\"string\">'Bearer '</span> + token&#125;);</span><br><span class=\"line\">      <span class=\"built_in\">String</span> BASE_URL = <span class=\"string\">'你的接口地址'</span> + url;</span><br><span class=\"line\">      Response response;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.<span class=\"keyword\">get</span>:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.post:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.post(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.post(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.put:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.put(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.put(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.delete:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.delete(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.delete(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> json.decode(response.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (exception) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">'错误：<span class=\"subst\">$&#123;exception.toString()&#125;</span>'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseModel</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> code;</span><br><span class=\"line\">  <span class=\"built_in\">dynamic</span> data;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> error;</span><br><span class=\"line\">  BaseModel(&#123;<span class=\"keyword\">this</span>.code, <span class=\"keyword\">this</span>.data, <span class=\"keyword\">this</span>.error&#125;);</span><br><span class=\"line\">  BaseModel.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; json) &#123;</span><br><span class=\"line\">    code = json[<span class=\"string\">'code'</span>];</span><br><span class=\"line\">    data = json[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">    error = json[<span class=\"string\">'error'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>我们以一个登陆的demo来看dio的用法</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/cupertino.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  LoginForm(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _LoginFormState createState() =&gt; _LoginFormState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_LoginFormState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">LoginForm</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _userNameController = TextEditingController();</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _pwdController = TextEditingController();</span><br><span class=\"line\"></span><br><span class=\"line\">  _onsubmit() <span class=\"keyword\">async</span> &#123;<span class=\"comment\">//进行登陆操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> params=&#123;</span><br><span class=\"line\">      <span class=\"string\">'username'</span>:_userNameController.text,</span><br><span class=\"line\">      <span class=\"string\">'password'</span>:_pwdController.text</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> Net().post(<span class=\"string\">'login'</span>, params);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res[<span class=\"string\">'code'</span>]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//登陆成功的操作</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//登陆失败的操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        body: Container(</span><br><span class=\"line\">      padding: EdgeInsetsDirectional.fromSTEB(<span class=\"number\">30</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          TextField(</span><br><span class=\"line\">            controller: _userNameController,</span><br><span class=\"line\">            decoration: InputDecoration(</span><br><span class=\"line\">              labelText: <span class=\"string\">'用户名'</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          TextField(</span><br><span class=\"line\">            controller: _pwdController,</span><br><span class=\"line\">            decoration: InputDecoration(</span><br><span class=\"line\">              labelText: <span class=\"string\">'密码'</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          MaterialButton(onPressed: _onsubmit,<span class=\"comment\">//等同于我们常见的click事件</span></span><br><span class=\"line\">           child: Text(<span class=\"string\">'登陆'</span>))</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p> <a href=\"https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/\">将uni-request进行axios化封装</a><br> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/\">在vue中对axios进行二次封装</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本文讲述如何封装dio网络请求，并在实际中使用。</p>","more":"<h2 id=\"Dio-http库\"><a href=\"#Dio-http库\" class=\"headerlink\" title=\"Dio http库\"></a>Dio http库</h2><p>dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时等。</p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>引入dio:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">dio:</span> <span class=\"string\">^x.x.x</span>   <span class=\"comment\">#请使用pub上的最新版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开始封装\"><a href=\"#开始封装\" class=\"headerlink\" title=\"开始封装\"></a>开始封装</h2><p>在lib文件夹下创建<code>utils/dio/dio.dart</code>,用于编写我们封装的代码</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dart:convert'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:dio/dio.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:shared_preferences/shared_preferences.dart'</span>;</span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"markdown\">自定义枚举</span></span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Method &#123; <span class=\"keyword\">get</span>, post, put, delete &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Net</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 工厂模式</span></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> Net() =&gt; _getInstance();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Net <span class=\"keyword\">get</span> instance =&gt; _getInstance();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Net _instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  Dio dio;</span><br><span class=\"line\">  Net._internal() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    dio = Dio(BaseOptions(</span><br><span class=\"line\">      connectTimeout: <span class=\"number\">60000</span>, <span class=\"comment\">// 连接服务器超时时间，单位是毫秒.</span></span><br><span class=\"line\">      receiveTimeout: <span class=\"number\">10000</span>, <span class=\"comment\">// 响应流上前后两次接受到数据的间隔，单位为毫秒, 这并不是接收数据的总时限.</span></span><br><span class=\"line\">    ));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 单列模式</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Net _getInstance() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      _instance = Net._internal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.<span class=\"keyword\">get</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.post);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  put(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.put);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _doRequest(url, params, Method.delete);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   _doRequest(</span><br><span class=\"line\">    <span class=\"built_in\">String</span> url,</span><br><span class=\"line\">    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params,</span><br><span class=\"line\">    Method method,</span><br><span class=\"line\">  ) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> _prefs = <span class=\"keyword\">await</span> SharedPreferences.getInstance();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> token = _prefs.getString(<span class=\"string\">'token'</span>)??<span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"comment\">/// <span class=\"markdown\">可以添加header 设置token</span></span></span><br><span class=\"line\">      dio.options.headers.addAll(&#123;<span class=\"string\">'Authorization'</span>: <span class=\"string\">'Bearer '</span> + token&#125;);</span><br><span class=\"line\">      <span class=\"built_in\">String</span> BASE_URL = <span class=\"string\">'你的接口地址'</span> + url;</span><br><span class=\"line\">      Response response;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.<span class=\"keyword\">get</span>:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.post:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.post(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.post(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.put:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.put(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.put(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Method.delete:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.delete(BASE_URL, queryParameters: params);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> dio.delete(BASE_URL);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> json.decode(response.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (exception) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">'错误：<span class=\"subst\">$&#123;exception.toString()&#125;</span>'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseModel</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> code;</span><br><span class=\"line\">  <span class=\"built_in\">dynamic</span> data;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> error;</span><br><span class=\"line\">  BaseModel(&#123;<span class=\"keyword\">this</span>.code, <span class=\"keyword\">this</span>.data, <span class=\"keyword\">this</span>.error&#125;);</span><br><span class=\"line\">  BaseModel.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; json) &#123;</span><br><span class=\"line\">    code = json[<span class=\"string\">'code'</span>];</span><br><span class=\"line\">    data = json[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">    error = json[<span class=\"string\">'error'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>我们以一个登陆的demo来看dio的用法</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/cupertino.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:zzc_app/utils/dio/dio.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  LoginForm(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _LoginFormState createState() =&gt; _LoginFormState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_LoginFormState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">LoginForm</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _userNameController = TextEditingController();</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _pwdController = TextEditingController();</span><br><span class=\"line\"></span><br><span class=\"line\">  _onsubmit() <span class=\"keyword\">async</span> &#123;<span class=\"comment\">//进行登陆操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> params=&#123;</span><br><span class=\"line\">      <span class=\"string\">'username'</span>:_userNameController.text,</span><br><span class=\"line\">      <span class=\"string\">'password'</span>:_pwdController.text</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> Net().post(<span class=\"string\">'login'</span>, params);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res[<span class=\"string\">'code'</span>]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//登陆成功的操作</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//登陆失败的操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        body: Container(</span><br><span class=\"line\">      padding: EdgeInsetsDirectional.fromSTEB(<span class=\"number\">30</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          TextField(</span><br><span class=\"line\">            controller: _userNameController,</span><br><span class=\"line\">            decoration: InputDecoration(</span><br><span class=\"line\">              labelText: <span class=\"string\">'用户名'</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          TextField(</span><br><span class=\"line\">            controller: _pwdController,</span><br><span class=\"line\">            decoration: InputDecoration(</span><br><span class=\"line\">              labelText: <span class=\"string\">'密码'</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          MaterialButton(onPressed: _onsubmit,<span class=\"comment\">//等同于我们常见的click事件</span></span><br><span class=\"line\">           child: Text(<span class=\"string\">'登陆'</span>))</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p> <a href=\"https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/\">将uni-request进行axios化封装</a><br> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8vue%E4%B8%AD%E5%AF%B9axios%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/\">在vue中对axios进行二次封装</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"JS从入门到放弃——数据类型","date":"2020-08-06T13:15:58.000Z","description":null,"_content":"\n值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。\n\n引用数据类型：对象(Object)、数组(Array)、函数(Function)。\n\n> 注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。\n\n<!-- more -->\n\n## **JavaScript拥有动态类型**\n\nJavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：\n```js\nvar x;              //x为undefined\nvar x = 5;          //x为数字\nvar x = \"Joker\";    //x为字符串\n```\n\n## **字符串**\n\n字符串是存储字符（比如 \"Joker 真帅\"）的变量。\n字符串可以是引号中的任意文本。您可以使用单引号或双引号：\n```js\nvar name = \"Joker\";\nvar name = 'Joker';\n```\n也可以在字符串中使用引号，只要不匹配包围字符串的引号即可：\n```js\nvar area = \"Joker's Blog\";\nvar name = \"He is called 'Joker'\";\nvar name = 'He is called \"Joker\"';\n```\n\n## **数字**\n\nJavaScript 只有一种数字类型。数字可以带小数点，也可以不带：\n```js\nvar x1=34.00;      //使用小数点来写\nvar x2=34;         //不使用小数点来写\n```\n极大或极小的数字可以通过科学（指数）计数法来书写\n```js\nvar y=123e5;      // 12300000\nvar z=123e-5;     // 0.00123\n```\n\n## **布尔**\n\n布尔（逻辑）只能有两个值：true 或 false。\n```js\nvar x=true;\nvar y=false;\n```\n\n## **数组**\n\n下面的代码创建名为 cars 的数组：\n```js\nvar cars=new Array();\ncars[0]=\"Saab\";\ncars[1]=\"Volvo\";\ncars[2]=\"BMW\";\n```\n或者 (condensed array):\n```js\nvar cars=new Array(\"Saab\",\"Volvo\",\"BMW\");\n```\n或者 (literal array):\n```js\nvar cars=[\"Saab\",\"Volvo\",\"BMW\"];\n```\n数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。\n\n## **对象**\n\n对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：\n```js\nvar person={firstname:\"John\", lastname:\"Doe\", id:5566};\n```\n上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。\n\n对象属性有两种寻址方式：\n```js\nname=person.lastname;\nname=person[\"lastname\"];\n```\n\n## **Undefined 和 Null**\n\nundefined 的字面意思就是：未定义的值 。这个值的语义是，希望**表示一个变量最原始的状态，而非人为操作的结果**。\n\nnull 的字面意思是：空值。这个值的语义是，希望**表示一个对象被人为的重置为空对象，而非一个变量最原始的状态**。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/08/JS从入门到放弃——数据类型.md","raw":"---\ntitle: JS从入门到放弃——数据类型\ndate: 2020-08-06 21:15:58\ntags:\n    - JavaScript\ncategories:\n    - JavaScript\ndescription:\n---\n\n值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。\n\n引用数据类型：对象(Object)、数组(Array)、函数(Function)。\n\n> 注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。\n\n<!-- more -->\n\n## **JavaScript拥有动态类型**\n\nJavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：\n```js\nvar x;              //x为undefined\nvar x = 5;          //x为数字\nvar x = \"Joker\";    //x为字符串\n```\n\n## **字符串**\n\n字符串是存储字符（比如 \"Joker 真帅\"）的变量。\n字符串可以是引号中的任意文本。您可以使用单引号或双引号：\n```js\nvar name = \"Joker\";\nvar name = 'Joker';\n```\n也可以在字符串中使用引号，只要不匹配包围字符串的引号即可：\n```js\nvar area = \"Joker's Blog\";\nvar name = \"He is called 'Joker'\";\nvar name = 'He is called \"Joker\"';\n```\n\n## **数字**\n\nJavaScript 只有一种数字类型。数字可以带小数点，也可以不带：\n```js\nvar x1=34.00;      //使用小数点来写\nvar x2=34;         //不使用小数点来写\n```\n极大或极小的数字可以通过科学（指数）计数法来书写\n```js\nvar y=123e5;      // 12300000\nvar z=123e-5;     // 0.00123\n```\n\n## **布尔**\n\n布尔（逻辑）只能有两个值：true 或 false。\n```js\nvar x=true;\nvar y=false;\n```\n\n## **数组**\n\n下面的代码创建名为 cars 的数组：\n```js\nvar cars=new Array();\ncars[0]=\"Saab\";\ncars[1]=\"Volvo\";\ncars[2]=\"BMW\";\n```\n或者 (condensed array):\n```js\nvar cars=new Array(\"Saab\",\"Volvo\",\"BMW\");\n```\n或者 (literal array):\n```js\nvar cars=[\"Saab\",\"Volvo\",\"BMW\"];\n```\n数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。\n\n## **对象**\n\n对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：\n```js\nvar person={firstname:\"John\", lastname:\"Doe\", id:5566};\n```\n上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。\n\n对象属性有两种寻址方式：\n```js\nname=person.lastname;\nname=person[\"lastname\"];\n```\n\n## **Undefined 和 Null**\n\nundefined 的字面意思就是：未定义的值 。这个值的语义是，希望**表示一个变量最原始的状态，而非人为操作的结果**。\n\nnull 的字面意思是：空值。这个值的语义是，希望**表示一个对象被人为的重置为空对象，而非一个变量最原始的状态**。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/08/JS从入门到放弃——数据类型","published":1,"updated":"2020-08-06T13:57:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53s00361r0q4rna2x87","content":"<p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p>\n<p>引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p>\n<blockquote>\n<p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"JavaScript拥有动态类型\"><a href=\"#JavaScript拥有动态类型\" class=\"headerlink\" title=\"JavaScript拥有动态类型\"></a><strong>JavaScript拥有动态类型</strong></h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;              <span class=\"comment\">//x为undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;          <span class=\"comment\">//x为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"Joker\"</span>;    <span class=\"comment\">//x为字符串</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><strong>字符串</strong></h2><p>字符串是存储字符（比如 “Joker 真帅”）的变量。<br>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Joker\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Joker'</span>;</span><br></pre></td></tr></table></figure>\n<p>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> area = <span class=\"string\">\"Joker's Blog\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"He is called 'Joker'\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'He is called \"Joker\"'</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a><strong>数字</strong></h2><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x1=<span class=\"number\">34.00</span>;      <span class=\"comment\">//使用小数点来写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x2=<span class=\"number\">34</span>;         <span class=\"comment\">//不使用小数点来写</span></span><br></pre></td></tr></table></figure>\n<p>极大或极小的数字可以通过科学（指数）计数法来书写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y=<span class=\"number\">123e5</span>;      <span class=\"comment\">// 12300000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> z=<span class=\"number\">123e-5</span>;     <span class=\"comment\">// 0.00123</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"布尔\"><a href=\"#布尔\" class=\"headerlink\" title=\"布尔\"></a><strong>布尔</strong></h2><p>布尔（逻辑）只能有两个值：true 或 false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y=<span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h2><p>下面的代码创建名为 cars 的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">cars[<span class=\"number\">0</span>]=<span class=\"string\">\"Saab\"</span>;</span><br><span class=\"line\">cars[<span class=\"number\">1</span>]=<span class=\"string\">\"Volvo\"</span>;</span><br><span class=\"line\">cars[<span class=\"number\">2</span>]=<span class=\"string\">\"BMW\"</span>;</span><br></pre></td></tr></table></figure>\n<p>或者 (condensed array):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"Saab\"</span>,<span class=\"string\">\"Volvo\"</span>,<span class=\"string\">\"BMW\"</span>);</span><br></pre></td></tr></table></figure>\n<p>或者 (literal array):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars=[<span class=\"string\">\"Saab\"</span>,<span class=\"string\">\"Volvo\"</span>,<span class=\"string\">\"BMW\"</span>];</span><br></pre></td></tr></table></figure>\n<p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a><strong>对象</strong></h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person=&#123;<span class=\"attr\">firstname</span>:<span class=\"string\">\"John\"</span>, <span class=\"attr\">lastname</span>:<span class=\"string\">\"Doe\"</span>, <span class=\"attr\">id</span>:<span class=\"number\">5566</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p>\n<p>对象属性有两种寻址方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=person.lastname;</span><br><span class=\"line\">name=person[<span class=\"string\">\"lastname\"</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Undefined-和-Null\"><a href=\"#Undefined-和-Null\" class=\"headerlink\" title=\"Undefined 和 Null\"></a><strong>Undefined 和 Null</strong></h2><p>undefined 的字面意思就是：未定义的值 。这个值的语义是，希望<strong>表示一个变量最原始的状态，而非人为操作的结果</strong>。</p>\n<p>null 的字面意思是：空值。这个值的语义是，希望<strong>表示一个对象被人为的重置为空对象，而非一个变量最原始的状态</strong>。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p>\n<p>引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p>\n<blockquote>\n<p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>\n</blockquote>","more":"<h2 id=\"JavaScript拥有动态类型\"><a href=\"#JavaScript拥有动态类型\" class=\"headerlink\" title=\"JavaScript拥有动态类型\"></a><strong>JavaScript拥有动态类型</strong></h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;              <span class=\"comment\">//x为undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;          <span class=\"comment\">//x为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"Joker\"</span>;    <span class=\"comment\">//x为字符串</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><strong>字符串</strong></h2><p>字符串是存储字符（比如 “Joker 真帅”）的变量。<br>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Joker\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Joker'</span>;</span><br></pre></td></tr></table></figure>\n<p>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> area = <span class=\"string\">\"Joker's Blog\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"He is called 'Joker'\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'He is called \"Joker\"'</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a><strong>数字</strong></h2><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x1=<span class=\"number\">34.00</span>;      <span class=\"comment\">//使用小数点来写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x2=<span class=\"number\">34</span>;         <span class=\"comment\">//不使用小数点来写</span></span><br></pre></td></tr></table></figure>\n<p>极大或极小的数字可以通过科学（指数）计数法来书写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y=<span class=\"number\">123e5</span>;      <span class=\"comment\">// 12300000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> z=<span class=\"number\">123e-5</span>;     <span class=\"comment\">// 0.00123</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"布尔\"><a href=\"#布尔\" class=\"headerlink\" title=\"布尔\"></a><strong>布尔</strong></h2><p>布尔（逻辑）只能有两个值：true 或 false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y=<span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h2><p>下面的代码创建名为 cars 的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">cars[<span class=\"number\">0</span>]=<span class=\"string\">\"Saab\"</span>;</span><br><span class=\"line\">cars[<span class=\"number\">1</span>]=<span class=\"string\">\"Volvo\"</span>;</span><br><span class=\"line\">cars[<span class=\"number\">2</span>]=<span class=\"string\">\"BMW\"</span>;</span><br></pre></td></tr></table></figure>\n<p>或者 (condensed array):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"Saab\"</span>,<span class=\"string\">\"Volvo\"</span>,<span class=\"string\">\"BMW\"</span>);</span><br></pre></td></tr></table></figure>\n<p>或者 (literal array):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars=[<span class=\"string\">\"Saab\"</span>,<span class=\"string\">\"Volvo\"</span>,<span class=\"string\">\"BMW\"</span>];</span><br></pre></td></tr></table></figure>\n<p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a><strong>对象</strong></h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person=&#123;<span class=\"attr\">firstname</span>:<span class=\"string\">\"John\"</span>, <span class=\"attr\">lastname</span>:<span class=\"string\">\"Doe\"</span>, <span class=\"attr\">id</span>:<span class=\"number\">5566</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p>\n<p>对象属性有两种寻址方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=person.lastname;</span><br><span class=\"line\">name=person[<span class=\"string\">\"lastname\"</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Undefined-和-Null\"><a href=\"#Undefined-和-Null\" class=\"headerlink\" title=\"Undefined 和 Null\"></a><strong>Undefined 和 Null</strong></h2><p>undefined 的字面意思就是：未定义的值 。这个值的语义是，希望<strong>表示一个变量最原始的状态，而非人为操作的结果</strong>。</p>\n<p>null 的字面意思是：空值。这个值的语义是，希望<strong>表示一个对象被人为的重置为空对象，而非一个变量最原始的状态</strong>。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"从零开始进阶全栈之NODE基础api","date":"2021-09-18T13:56:40.000Z","description":null,"_content":"\n本篇内容：异步I/O概念、promisify用法、流、buffer，http服务\n\n<!-- more -->\n\n# 异步I/O概念\n\n对于这个概念，网上有一个很经典的例子\n\n隔壁王大爷有个水壶，王大爷经常用它来烧开水。\n- 王大爷把水壶放到火上烧，然后啥也不干在那等，直到水开了王大爷再去搞别的事情。（同步阻塞）\n- 王大爷觉得自己有点憨，不打算等了。把水壶放上去之后大爷就是去看电视，时不时来瞅一眼有没有开（同步非阻塞）\n- 王大爷去买了个响水壶，他把响水壶放在火上，然后也是等着水开，水开的时候水壶会发出声响（异步阻塞）\n- 王大爷又觉得自己有点憨，他把响水壶放在火上然后去看电视，这时他不用是不是来瞅一眼，因为水开的时候水壶会发出声音通知大爷。（异步非阻塞）\n\n上面四个例子里，阻塞非阻塞说明的是大爷的状态，同步非同步说明的是水壶的调用姿势。水壶能在烧好的时候主动响起，就等同于我们异步的定义，能在结束时通知主线程并且回调。所以异步一般配合非阻塞，才能发挥其作用。\n\n# promisify\n\n```js\nconst fs = require('fs')\n// 同步调用 \nconst data = fs.readFileSync('./xxx.js'); //代码会阻塞在这里 \nconsole.log(data);// 打出的是 buffer数据 如果要显示实际数据 打印 data.toString()\n\n// 异步调用\n// 错误优先的回调\nfs.readFile('./xxxx.js',(err,data)=>{\n    if(err) throw err\n    console.log(data.toString())\n})\n\n// promisify\n// promise风格接口\nconst {promisify} = require('util')\nconst readFile = promisify(fs.readFile)\nreadFile('./xxx.js').then(data=>console.log(data))\n\n// fs Promises API node v10 \nconst fsp = require(\"fs\").promises; \nfsp.readFile(\"./confs.js\")\n.then(data => console.log(data)) \n.catch(err => console.log(err));\n\n// async/await\n(async ()=>{\n    const fs = require('fs')\n    const {promisify} = require('util')\n    const readFile = promisify(fs.readFile)\n    const data = await readFile('./xxx.js')\n    console.log(data.toString())\n})()\n\n```\n\n# buffer对象\n\nBuffer - 用于在 TCP 流、文件系统操作、以及其他上下文中与八位字节流进行交互。 八位字节组成的数组，可以有效的在JS中存储二进制数据\n\n```js\n//创建一个长度为10字节以0填充的Buffer\nconst buf1 = Buffer.alloc(10) // 分配10字节的内存空间\n// 读取Buffer数据\nconsole.log(buf1)  // <Buffer 00 00 00 00 00 00 00 00 00 00>\n\n//创建一个Buffer包含ascii.\nconst buf2 = Buffer.from('a')\nconsole.log(buf2)  //<Buffer 61>\n\n// 创建Buffer 包含utf-8字节\n// UFT-8：一种变长的编码方案，使用 1~6 个字节来存储； \n// UFT-32：一种固定长度的编码方案，不管字符编号大小，始终使用 4 个字节来存储； \n// UTF-16：介于 UTF-8 和 UTF-32 之间，使用 2 个或者 4 个字节来存储，长度既固定又可变。\nconst buf3 = Buffer.from('中文')\nconsole.log(buf3,buf3.toString()) //<Buffer e4 b8 ad e6 96 87> 中文\n\n// 合并  图片的上传 二进制=> 分包  分包接收\nconst buf4 = Buffer.concat([buf2,buf3])\nconsole.log(buf4,buf4.toString())  // <Buffer 61 e4 b8 ad e6 96 87> 'a中文'\n\n// 写入buffer\nbuf1.write('hello')\nconsole.log(buf1,buf1.toString()) //<Buffer 68 65 6c 6c 6f 00 00 00 00 00> 'hello\\u0000\\u0000\\u0000\\u0000\\u0000'\n\n```\n> Buffer类似数组，所以很多数组方法它都有\n> GBK转码 icon-lite\n\n# http服务\n\n创建一个http服务器\n\n```js\nconst http = require('http')\nconst server = http.createServer((request,response) => {\n    console.log('request',request)\n    response.end('hello node')\n}) \nserver.listen(3000)\n// 使用 node/nodemon 启动\n// 访问localhost:3000 \n```\n\n显示一个首页\n```js\nconst http = require('http')\nconst server = http.createServer((request,response) => {\n    const {url, method} = request; \n    if (url === '/' && method === 'GET') { \n        fs.readFile('index.html', (err, data) => { \n            if (err) { \n                response.writeHead(500, { 'Content-Type': 'text/plain;charset=utf-8' }); \n                response.end('500，服务器错误'); \n                return;\n            }\n            response.statusCode = 200; \n            response.setHeader('Content-Type', 'text/html'); \n            response.end(data);\n        }); \n    }else if (url === '/users' && method === 'GET') { \n        // 编写一个接口\n        response.writeHead(200, { 'Content-Type': 'application/json' }); \n        response.end(JSON.stringify([{name:'tom',age:20}]));\n    } \n    else { \n        response.statusCode = 404; \n        response.setHeader('Content-Type', 'text/plain;charset=utf-8'); \n        response.end('404, 页面没有找到'); \n    }\n}) \nserver.listen(3000)\n```\n\n# Stream流\n\n```js\nconst fs = require('fs')\nconst rs =  fs.createReadStream('./1.jpg')\nconst ws = fs.createWriteStream('./2.jpg')\nrs.pipe(ws) // 占用内存少\n```\n\n```js\nconst http = require('http')\nconst fs = require('fs') \nconst server = http.createServer((request,response) => {\n    const {url, method, headers} = request; \n    if (url === '/' && method === 'GET') { \n        ...\n    }\n    ...\n    // 所有的图片请求\n    else if (method === 'GET' && headers.accept.includes('image/*')) { \n        // 不使用fs.readFile() ----> 读文件 全部存入内存 1k  100m\n        // 使用createReadStream 流的方式\n        fs.createReadStream('.'+url).pipe(response); \n    }\n    ...\n    else{\n        ...\n    }\n}) \nserver.listen(3000)\n```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/09/从零开始进阶全栈之NODE基础api.md","raw":"---\ntitle: 从零开始进阶全栈之NODE基础api\ndate: 2021-09-18 21:56:40\ntags:\n    - 全栈之路\n    - node\ncategories:\n    - node\ndescription: \n---\n\n本篇内容：异步I/O概念、promisify用法、流、buffer，http服务\n\n<!-- more -->\n\n# 异步I/O概念\n\n对于这个概念，网上有一个很经典的例子\n\n隔壁王大爷有个水壶，王大爷经常用它来烧开水。\n- 王大爷把水壶放到火上烧，然后啥也不干在那等，直到水开了王大爷再去搞别的事情。（同步阻塞）\n- 王大爷觉得自己有点憨，不打算等了。把水壶放上去之后大爷就是去看电视，时不时来瞅一眼有没有开（同步非阻塞）\n- 王大爷去买了个响水壶，他把响水壶放在火上，然后也是等着水开，水开的时候水壶会发出声响（异步阻塞）\n- 王大爷又觉得自己有点憨，他把响水壶放在火上然后去看电视，这时他不用是不是来瞅一眼，因为水开的时候水壶会发出声音通知大爷。（异步非阻塞）\n\n上面四个例子里，阻塞非阻塞说明的是大爷的状态，同步非同步说明的是水壶的调用姿势。水壶能在烧好的时候主动响起，就等同于我们异步的定义，能在结束时通知主线程并且回调。所以异步一般配合非阻塞，才能发挥其作用。\n\n# promisify\n\n```js\nconst fs = require('fs')\n// 同步调用 \nconst data = fs.readFileSync('./xxx.js'); //代码会阻塞在这里 \nconsole.log(data);// 打出的是 buffer数据 如果要显示实际数据 打印 data.toString()\n\n// 异步调用\n// 错误优先的回调\nfs.readFile('./xxxx.js',(err,data)=>{\n    if(err) throw err\n    console.log(data.toString())\n})\n\n// promisify\n// promise风格接口\nconst {promisify} = require('util')\nconst readFile = promisify(fs.readFile)\nreadFile('./xxx.js').then(data=>console.log(data))\n\n// fs Promises API node v10 \nconst fsp = require(\"fs\").promises; \nfsp.readFile(\"./confs.js\")\n.then(data => console.log(data)) \n.catch(err => console.log(err));\n\n// async/await\n(async ()=>{\n    const fs = require('fs')\n    const {promisify} = require('util')\n    const readFile = promisify(fs.readFile)\n    const data = await readFile('./xxx.js')\n    console.log(data.toString())\n})()\n\n```\n\n# buffer对象\n\nBuffer - 用于在 TCP 流、文件系统操作、以及其他上下文中与八位字节流进行交互。 八位字节组成的数组，可以有效的在JS中存储二进制数据\n\n```js\n//创建一个长度为10字节以0填充的Buffer\nconst buf1 = Buffer.alloc(10) // 分配10字节的内存空间\n// 读取Buffer数据\nconsole.log(buf1)  // <Buffer 00 00 00 00 00 00 00 00 00 00>\n\n//创建一个Buffer包含ascii.\nconst buf2 = Buffer.from('a')\nconsole.log(buf2)  //<Buffer 61>\n\n// 创建Buffer 包含utf-8字节\n// UFT-8：一种变长的编码方案，使用 1~6 个字节来存储； \n// UFT-32：一种固定长度的编码方案，不管字符编号大小，始终使用 4 个字节来存储； \n// UTF-16：介于 UTF-8 和 UTF-32 之间，使用 2 个或者 4 个字节来存储，长度既固定又可变。\nconst buf3 = Buffer.from('中文')\nconsole.log(buf3,buf3.toString()) //<Buffer e4 b8 ad e6 96 87> 中文\n\n// 合并  图片的上传 二进制=> 分包  分包接收\nconst buf4 = Buffer.concat([buf2,buf3])\nconsole.log(buf4,buf4.toString())  // <Buffer 61 e4 b8 ad e6 96 87> 'a中文'\n\n// 写入buffer\nbuf1.write('hello')\nconsole.log(buf1,buf1.toString()) //<Buffer 68 65 6c 6c 6f 00 00 00 00 00> 'hello\\u0000\\u0000\\u0000\\u0000\\u0000'\n\n```\n> Buffer类似数组，所以很多数组方法它都有\n> GBK转码 icon-lite\n\n# http服务\n\n创建一个http服务器\n\n```js\nconst http = require('http')\nconst server = http.createServer((request,response) => {\n    console.log('request',request)\n    response.end('hello node')\n}) \nserver.listen(3000)\n// 使用 node/nodemon 启动\n// 访问localhost:3000 \n```\n\n显示一个首页\n```js\nconst http = require('http')\nconst server = http.createServer((request,response) => {\n    const {url, method} = request; \n    if (url === '/' && method === 'GET') { \n        fs.readFile('index.html', (err, data) => { \n            if (err) { \n                response.writeHead(500, { 'Content-Type': 'text/plain;charset=utf-8' }); \n                response.end('500，服务器错误'); \n                return;\n            }\n            response.statusCode = 200; \n            response.setHeader('Content-Type', 'text/html'); \n            response.end(data);\n        }); \n    }else if (url === '/users' && method === 'GET') { \n        // 编写一个接口\n        response.writeHead(200, { 'Content-Type': 'application/json' }); \n        response.end(JSON.stringify([{name:'tom',age:20}]));\n    } \n    else { \n        response.statusCode = 404; \n        response.setHeader('Content-Type', 'text/plain;charset=utf-8'); \n        response.end('404, 页面没有找到'); \n    }\n}) \nserver.listen(3000)\n```\n\n# Stream流\n\n```js\nconst fs = require('fs')\nconst rs =  fs.createReadStream('./1.jpg')\nconst ws = fs.createWriteStream('./2.jpg')\nrs.pipe(ws) // 占用内存少\n```\n\n```js\nconst http = require('http')\nconst fs = require('fs') \nconst server = http.createServer((request,response) => {\n    const {url, method, headers} = request; \n    if (url === '/' && method === 'GET') { \n        ...\n    }\n    ...\n    // 所有的图片请求\n    else if (method === 'GET' && headers.accept.includes('image/*')) { \n        // 不使用fs.readFile() ----> 读文件 全部存入内存 1k  100m\n        // 使用createReadStream 流的方式\n        fs.createReadStream('.'+url).pipe(response); \n    }\n    ...\n    else{\n        ...\n    }\n}) \nserver.listen(3000)\n```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/09/从零开始进阶全栈之NODE基础api","published":1,"updated":"2021-09-20T14:05:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53s003b1r0q7iuhf9j5","content":"<p>本篇内容：异步I/O概念、promisify用法、流、buffer，http服务</p>\n<a id=\"more\"></a>\n\n<h1 id=\"异步I-O概念\"><a href=\"#异步I-O概念\" class=\"headerlink\" title=\"异步I/O概念\"></a>异步I/O概念</h1><p>对于这个概念，网上有一个很经典的例子</p>\n<p>隔壁王大爷有个水壶，王大爷经常用它来烧开水。</p>\n<ul>\n<li>王大爷把水壶放到火上烧，然后啥也不干在那等，直到水开了王大爷再去搞别的事情。（同步阻塞）</li>\n<li>王大爷觉得自己有点憨，不打算等了。把水壶放上去之后大爷就是去看电视，时不时来瞅一眼有没有开（同步非阻塞）</li>\n<li>王大爷去买了个响水壶，他把响水壶放在火上，然后也是等着水开，水开的时候水壶会发出声响（异步阻塞）</li>\n<li>王大爷又觉得自己有点憨，他把响水壶放在火上然后去看电视，这时他不用是不是来瞅一眼，因为水开的时候水壶会发出声音通知大爷。（异步非阻塞）</li>\n</ul>\n<p>上面四个例子里，阻塞非阻塞说明的是大爷的状态，同步非同步说明的是水壶的调用姿势。水壶能在烧好的时候主动响起，就等同于我们异步的定义，能在结束时通知主线程并且回调。所以异步一般配合非阻塞，才能发挥其作用。</p>\n<h1 id=\"promisify\"><a href=\"#promisify\" class=\"headerlink\" title=\"promisify\"></a>promisify</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 同步调用 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = fs.readFileSync(<span class=\"string\">'./xxx.js'</span>); <span class=\"comment\">//代码会阻塞在这里 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data);<span class=\"comment\">// 打出的是 buffer数据 如果要显示实际数据 打印 data.toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步调用</span></span><br><span class=\"line\"><span class=\"comment\">// 错误优先的回调</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./xxxx.js'</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promisify</span></span><br><span class=\"line\"><span class=\"comment\">// promise风格接口</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;promisify&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = promisify(fs.readFile)</span><br><span class=\"line\">readFile(<span class=\"string\">'./xxx.js'</span>).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span><span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fs Promises API node v10 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fsp = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>).promises; </span><br><span class=\"line\">fsp.readFile(<span class=\"string\">\"./confs.js\"</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)) </span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// async/await</span></span><br><span class=\"line\">(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;promisify&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> readFile = promisify(fs.readFile)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'./xxx.js'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"buffer对象\"><a href=\"#buffer对象\" class=\"headerlink\" title=\"buffer对象\"></a>buffer对象</h1><p>Buffer - 用于在 TCP 流、文件系统操作、以及其他上下文中与八位字节流进行交互。 八位字节组成的数组，可以有效的在JS中存储二进制数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个长度为10字节以0填充的Buffer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf1 = Buffer.alloc(<span class=\"number\">10</span>) <span class=\"comment\">// 分配10字节的内存空间</span></span><br><span class=\"line\"><span class=\"comment\">// 读取Buffer数据</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf1)  <span class=\"comment\">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个Buffer包含ascii.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf2 = Buffer.from(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf2)  <span class=\"comment\">//&lt;Buffer 61&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Buffer 包含utf-8字节</span></span><br><span class=\"line\"><span class=\"comment\">// UFT-8：一种变长的编码方案，使用 1~6 个字节来存储； </span></span><br><span class=\"line\"><span class=\"comment\">// UFT-32：一种固定长度的编码方案，不管字符编号大小，始终使用 4 个字节来存储； </span></span><br><span class=\"line\"><span class=\"comment\">// UTF-16：介于 UTF-8 和 UTF-32 之间，使用 2 个或者 4 个字节来存储，长度既固定又可变。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf3 = Buffer.from(<span class=\"string\">'中文'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf3,buf3.toString()) <span class=\"comment\">//&lt;Buffer e4 b8 ad e6 96 87&gt; 中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并  图片的上传 二进制=&gt; 分包  分包接收</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf4 = Buffer.concat([buf2,buf3])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf4,buf4.toString())  <span class=\"comment\">// &lt;Buffer 61 e4 b8 ad e6 96 87&gt; 'a中文'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入buffer</span></span><br><span class=\"line\">buf1.write(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf1,buf1.toString()) <span class=\"comment\">//&lt;Buffer 68 65 6c 6c 6f 00 00 00 00 00&gt; 'hello\\u0000\\u0000\\u0000\\u0000\\u0000'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Buffer类似数组，所以很多数组方法它都有<br>GBK转码 icon-lite</p>\n</blockquote>\n<h1 id=\"http服务\"><a href=\"#http服务\" class=\"headerlink\" title=\"http服务\"></a>http服务</h1><p>创建一个http服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'request'</span>,request)</span><br><span class=\"line\">    response.end(<span class=\"string\">'hello node'</span>)</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"comment\">// 使用 node/nodemon 启动</span></span><br><span class=\"line\"><span class=\"comment\">// 访问localhost:3000</span></span><br></pre></td></tr></table></figure>\n\n<p>显示一个首页</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;url, method&#125; = request; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123; </span><br><span class=\"line\">        fs.readFile(<span class=\"string\">'index.html'</span>, (err, data) =&gt; &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123; </span><br><span class=\"line\">                response.writeHead(<span class=\"number\">500</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain;charset=utf-8'</span> &#125;); </span><br><span class=\"line\">                response.end(<span class=\"string\">'500，服务器错误'</span>); </span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            response.statusCode = <span class=\"number\">200</span>; </span><br><span class=\"line\">            response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/html'</span>); </span><br><span class=\"line\">            response.end(data);</span><br><span class=\"line\">        &#125;); </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">'/users'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 编写一个接口</span></span><br><span class=\"line\">        response.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;); </span><br><span class=\"line\">        response.end(<span class=\"built_in\">JSON</span>.stringify([&#123;<span class=\"attr\">name</span>:<span class=\"string\">'tom'</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;]));</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        response.statusCode = <span class=\"number\">404</span>; </span><br><span class=\"line\">        response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain;charset=utf-8'</span>); </span><br><span class=\"line\">        response.end(<span class=\"string\">'404, 页面没有找到'</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> rs =  fs.createReadStream(<span class=\"string\">'./1.jpg'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ws = fs.createWriteStream(<span class=\"string\">'./2.jpg'</span>)</span><br><span class=\"line\">rs.pipe(ws) <span class=\"comment\">// 占用内存少</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;url, method, headers&#125; = request; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123; </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 所有的图片请求</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method === <span class=\"string\">'GET'</span> &amp;&amp; headers.accept.includes(<span class=\"string\">'image/*'</span>)) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 不使用fs.readFile() ----&gt; 读文件 全部存入内存 1k  100m</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用createReadStream 流的方式</span></span><br><span class=\"line\">        fs.createReadStream(<span class=\"string\">'.'</span>+url).pipe(response); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本篇内容：异步I/O概念、promisify用法、流、buffer，http服务</p>","more":"<h1 id=\"异步I-O概念\"><a href=\"#异步I-O概念\" class=\"headerlink\" title=\"异步I/O概念\"></a>异步I/O概念</h1><p>对于这个概念，网上有一个很经典的例子</p>\n<p>隔壁王大爷有个水壶，王大爷经常用它来烧开水。</p>\n<ul>\n<li>王大爷把水壶放到火上烧，然后啥也不干在那等，直到水开了王大爷再去搞别的事情。（同步阻塞）</li>\n<li>王大爷觉得自己有点憨，不打算等了。把水壶放上去之后大爷就是去看电视，时不时来瞅一眼有没有开（同步非阻塞）</li>\n<li>王大爷去买了个响水壶，他把响水壶放在火上，然后也是等着水开，水开的时候水壶会发出声响（异步阻塞）</li>\n<li>王大爷又觉得自己有点憨，他把响水壶放在火上然后去看电视，这时他不用是不是来瞅一眼，因为水开的时候水壶会发出声音通知大爷。（异步非阻塞）</li>\n</ul>\n<p>上面四个例子里，阻塞非阻塞说明的是大爷的状态，同步非同步说明的是水壶的调用姿势。水壶能在烧好的时候主动响起，就等同于我们异步的定义，能在结束时通知主线程并且回调。所以异步一般配合非阻塞，才能发挥其作用。</p>\n<h1 id=\"promisify\"><a href=\"#promisify\" class=\"headerlink\" title=\"promisify\"></a>promisify</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 同步调用 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = fs.readFileSync(<span class=\"string\">'./xxx.js'</span>); <span class=\"comment\">//代码会阻塞在这里 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data);<span class=\"comment\">// 打出的是 buffer数据 如果要显示实际数据 打印 data.toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步调用</span></span><br><span class=\"line\"><span class=\"comment\">// 错误优先的回调</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./xxxx.js'</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promisify</span></span><br><span class=\"line\"><span class=\"comment\">// promise风格接口</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;promisify&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = promisify(fs.readFile)</span><br><span class=\"line\">readFile(<span class=\"string\">'./xxx.js'</span>).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span><span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fs Promises API node v10 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fsp = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>).promises; </span><br><span class=\"line\">fsp.readFile(<span class=\"string\">\"./confs.js\"</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)) </span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// async/await</span></span><br><span class=\"line\">(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;promisify&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> readFile = promisify(fs.readFile)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'./xxx.js'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"buffer对象\"><a href=\"#buffer对象\" class=\"headerlink\" title=\"buffer对象\"></a>buffer对象</h1><p>Buffer - 用于在 TCP 流、文件系统操作、以及其他上下文中与八位字节流进行交互。 八位字节组成的数组，可以有效的在JS中存储二进制数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个长度为10字节以0填充的Buffer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf1 = Buffer.alloc(<span class=\"number\">10</span>) <span class=\"comment\">// 分配10字节的内存空间</span></span><br><span class=\"line\"><span class=\"comment\">// 读取Buffer数据</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf1)  <span class=\"comment\">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个Buffer包含ascii.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf2 = Buffer.from(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf2)  <span class=\"comment\">//&lt;Buffer 61&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Buffer 包含utf-8字节</span></span><br><span class=\"line\"><span class=\"comment\">// UFT-8：一种变长的编码方案，使用 1~6 个字节来存储； </span></span><br><span class=\"line\"><span class=\"comment\">// UFT-32：一种固定长度的编码方案，不管字符编号大小，始终使用 4 个字节来存储； </span></span><br><span class=\"line\"><span class=\"comment\">// UTF-16：介于 UTF-8 和 UTF-32 之间，使用 2 个或者 4 个字节来存储，长度既固定又可变。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf3 = Buffer.from(<span class=\"string\">'中文'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf3,buf3.toString()) <span class=\"comment\">//&lt;Buffer e4 b8 ad e6 96 87&gt; 中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并  图片的上传 二进制=&gt; 分包  分包接收</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf4 = Buffer.concat([buf2,buf3])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf4,buf4.toString())  <span class=\"comment\">// &lt;Buffer 61 e4 b8 ad e6 96 87&gt; 'a中文'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入buffer</span></span><br><span class=\"line\">buf1.write(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf1,buf1.toString()) <span class=\"comment\">//&lt;Buffer 68 65 6c 6c 6f 00 00 00 00 00&gt; 'hello\\u0000\\u0000\\u0000\\u0000\\u0000'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Buffer类似数组，所以很多数组方法它都有<br>GBK转码 icon-lite</p>\n</blockquote>\n<h1 id=\"http服务\"><a href=\"#http服务\" class=\"headerlink\" title=\"http服务\"></a>http服务</h1><p>创建一个http服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'request'</span>,request)</span><br><span class=\"line\">    response.end(<span class=\"string\">'hello node'</span>)</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"comment\">// 使用 node/nodemon 启动</span></span><br><span class=\"line\"><span class=\"comment\">// 访问localhost:3000</span></span><br></pre></td></tr></table></figure>\n\n<p>显示一个首页</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;url, method&#125; = request; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123; </span><br><span class=\"line\">        fs.readFile(<span class=\"string\">'index.html'</span>, (err, data) =&gt; &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123; </span><br><span class=\"line\">                response.writeHead(<span class=\"number\">500</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain;charset=utf-8'</span> &#125;); </span><br><span class=\"line\">                response.end(<span class=\"string\">'500，服务器错误'</span>); </span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            response.statusCode = <span class=\"number\">200</span>; </span><br><span class=\"line\">            response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/html'</span>); </span><br><span class=\"line\">            response.end(data);</span><br><span class=\"line\">        &#125;); </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">'/users'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 编写一个接口</span></span><br><span class=\"line\">        response.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;); </span><br><span class=\"line\">        response.end(<span class=\"built_in\">JSON</span>.stringify([&#123;<span class=\"attr\">name</span>:<span class=\"string\">'tom'</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;]));</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        response.statusCode = <span class=\"number\">404</span>; </span><br><span class=\"line\">        response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain;charset=utf-8'</span>); </span><br><span class=\"line\">        response.end(<span class=\"string\">'404, 页面没有找到'</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> rs =  fs.createReadStream(<span class=\"string\">'./1.jpg'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ws = fs.createWriteStream(<span class=\"string\">'./2.jpg'</span>)</span><br><span class=\"line\">rs.pipe(ws) <span class=\"comment\">// 占用内存少</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;url, method, headers&#125; = request; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123; </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 所有的图片请求</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method === <span class=\"string\">'GET'</span> &amp;&amp; headers.accept.includes(<span class=\"string\">'image/*'</span>)) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 不使用fs.readFile() ----&gt; 读文件 全部存入内存 1k  100m</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用createReadStream 流的方式</span></span><br><span class=\"line\">        fs.createReadStream(<span class=\"string\">'.'</span>+url).pipe(response); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"在vue中对axios进行二次封装","date":"2020-08-01T13:17:33.000Z","description":null,"_content":"\n为aixos配置统一请求地址，统一请求头等。\n<!-- more -->\n\n## 封装\n\n在`src`下新建`axios/axios.js`\n```js\nimport axios from 'axios';\nimport router from \"../router\"\nimport Tools from '@/components/Tools/index';\nimport store from '../store'\n\nlet token = '';\naxios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n\n//添加请求拦截器\naxios.interceptors.request.use(\n  config => {\n    let api_token = JSON.parse(sessionStorage.getItem('api_token')!)\n    if (api_token) {\n      token = api_token\n    }\n    config.headers.common['Authorization'] = 'Bearer ' + token;\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n//添加响应拦截器\naxios.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    return Promise.resolve(error.response);\n  }\n);\naxios.defaults.baseURL = process.env.VUE_APP_BASEURL\n\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.post[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.put[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.headers.delete[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.delete[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.timeout = 10000;\nfunction checkStatus(response ) {\n  return new Promise((resolve, reject) => {\n    if (\n      response &&\n      (response.status === 200 ||\n        response.status === 304 ||\n        response.status === 400)\n    ) {\n        resolve(response.data);\n    } else {\n      reject({\n        status: response.status,\n        message: response.data.message,\n        error: response.data.errors[Object.keys(response.data.errors)[0]][0]\n      });\n    }\n  });\n}\nexport default {\n  post(url, params) {\n    return axios({\n      method: \"post\",\n      url,\n      data: params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  },\n  get(url, params) {\n    return axios({\n      method: \"get\",\n      url,\n      params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  },\n  put(url, params) {\n    return axios({\n      method: \"put\",\n      url,\n      data: params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  },\n  delete(url, params) {\n    return axios({\n      method: \"delete\",\n      url,\n      data: params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  }\n};\n```\n\n## 使用\n\n首先在`main.js`中进行引用\n```js\nimport axios from './axios/axios'\n\nVue.prototype.$axios = axios;\n\n```\n然后在我们要使用的地方\n```js\nthis.$axios.post('接口地址',{}).then(res=>{\n    \n})\n```\n\n\n>  [将uni-request进行axios化封装](https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/)\n>  [在flutter中优雅的封装网络请求](https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/)\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2020/08/在vue中对axios进行二次封装.md","raw":"---\ntitle: 在vue中对axios进行二次封装\ndate: 2020-08-01 21:17:33\ntags:\n  - vue\n\t- 网络请求\ncategories:\n  - vue\n\t- 网络请求\ndescription:\n---\n\n为aixos配置统一请求地址，统一请求头等。\n<!-- more -->\n\n## 封装\n\n在`src`下新建`axios/axios.js`\n```js\nimport axios from 'axios';\nimport router from \"../router\"\nimport Tools from '@/components/Tools/index';\nimport store from '../store'\n\nlet token = '';\naxios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n\n//添加请求拦截器\naxios.interceptors.request.use(\n  config => {\n    let api_token = JSON.parse(sessionStorage.getItem('api_token')!)\n    if (api_token) {\n      token = api_token\n    }\n    config.headers.common['Authorization'] = 'Bearer ' + token;\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n//添加响应拦截器\naxios.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    return Promise.resolve(error.response);\n  }\n);\naxios.defaults.baseURL = process.env.VUE_APP_BASEURL\n\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.post[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.put[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.headers.delete[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.delete[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.timeout = 10000;\nfunction checkStatus(response ) {\n  return new Promise((resolve, reject) => {\n    if (\n      response &&\n      (response.status === 200 ||\n        response.status === 304 ||\n        response.status === 400)\n    ) {\n        resolve(response.data);\n    } else {\n      reject({\n        status: response.status,\n        message: response.data.message,\n        error: response.data.errors[Object.keys(response.data.errors)[0]][0]\n      });\n    }\n  });\n}\nexport default {\n  post(url, params) {\n    return axios({\n      method: \"post\",\n      url,\n      data: params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  },\n  get(url, params) {\n    return axios({\n      method: \"get\",\n      url,\n      params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  },\n  put(url, params) {\n    return axios({\n      method: \"put\",\n      url,\n      data: params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  },\n  delete(url, params) {\n    return axios({\n      method: \"delete\",\n      url,\n      data: params\n    }).then(response => {\n      return checkStatus(response);\n    });\n  }\n};\n```\n\n## 使用\n\n首先在`main.js`中进行引用\n```js\nimport axios from './axios/axios'\n\nVue.prototype.$axios = axios;\n\n```\n然后在我们要使用的地方\n```js\nthis.$axios.post('接口地址',{}).then(res=>{\n    \n})\n```\n\n\n>  [将uni-request进行axios化封装](https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/)\n>  [在flutter中优雅的封装网络请求](https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/)\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2020/08/在vue中对axios进行二次封装","published":1,"updated":"2021-06-09T01:13:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53t003e1r0q5yfia6xm","content":"<p>为aixos配置统一请求地址，统一请求头等。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>在<code>src</code>下新建<code>axios/axios.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"../router\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Tools <span class=\"keyword\">from</span> <span class=\"string\">'@/components/Tools/index'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../store'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">'Bearer '</span> + token;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> api_token = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">'api_token'</span>)!)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (api_token) &#123;</span><br><span class=\"line\">      token = api_token</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    config.headers.common[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">'Bearer '</span> + token;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//添加响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error.response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">axios.defaults.baseURL = process.env.VUE_APP_BASEURL</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">\"X-Requested-With\"</span>] = <span class=\"string\">\"XMLHttpRequest\"</span>;</span><br><span class=\"line\">axios.defaults.headers.put[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">axios.defaults.headers.put[<span class=\"string\">\"X-Requested-With\"</span>] = <span class=\"string\">\"XMLHttpRequest\"</span>;</span><br><span class=\"line\">axios.defaults.headers.delete[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">axios.defaults.headers.delete[<span class=\"string\">\"X-Requested-With\"</span>] = <span class=\"string\">\"XMLHttpRequest\"</span>;</span><br><span class=\"line\">axios.defaults.timeout = <span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span>(<span class=\"params\">response </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      response &amp;&amp;</span><br><span class=\"line\">      (response.status === <span class=\"number\">200</span> ||</span><br><span class=\"line\">        response.status === <span class=\"number\">304</span> ||</span><br><span class=\"line\">        response.status === <span class=\"number\">400</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        resolve(response.data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      reject(&#123;</span><br><span class=\"line\">        status: response.status,</span><br><span class=\"line\">        message: response.data.message,</span><br><span class=\"line\">        error: response.data.errors[<span class=\"built_in\">Object</span>.keys(response.data.errors)[<span class=\"number\">0</span>]][<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  post(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      data: params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"get\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  put(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"put\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      data: params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"delete\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      data: params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先在<code>main.js</code>中进行引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'./axios/axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure>\n<p>然后在我们要使用的地方</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$axios.post(<span class=\"string\">'接口地址'</span>,&#123;&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p> <a href=\"https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/\">将uni-request进行axios化封装</a><br> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/\">在flutter中优雅的封装网络请求</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>为aixos配置统一请求地址，统一请求头等。</p>","more":"<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>在<code>src</code>下新建<code>axios/axios.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"../router\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Tools <span class=\"keyword\">from</span> <span class=\"string\">'@/components/Tools/index'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../store'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">'Bearer '</span> + token;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> api_token = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">'api_token'</span>)!)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (api_token) &#123;</span><br><span class=\"line\">      token = api_token</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    config.headers.common[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">'Bearer '</span> + token;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//添加响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error.response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">axios.defaults.baseURL = process.env.VUE_APP_BASEURL</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">\"X-Requested-With\"</span>] = <span class=\"string\">\"XMLHttpRequest\"</span>;</span><br><span class=\"line\">axios.defaults.headers.put[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">axios.defaults.headers.put[<span class=\"string\">\"X-Requested-With\"</span>] = <span class=\"string\">\"XMLHttpRequest\"</span>;</span><br><span class=\"line\">axios.defaults.headers.delete[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">axios.defaults.headers.delete[<span class=\"string\">\"X-Requested-With\"</span>] = <span class=\"string\">\"XMLHttpRequest\"</span>;</span><br><span class=\"line\">axios.defaults.timeout = <span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span>(<span class=\"params\">response </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      response &amp;&amp;</span><br><span class=\"line\">      (response.status === <span class=\"number\">200</span> ||</span><br><span class=\"line\">        response.status === <span class=\"number\">304</span> ||</span><br><span class=\"line\">        response.status === <span class=\"number\">400</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        resolve(response.data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      reject(&#123;</span><br><span class=\"line\">        status: response.status,</span><br><span class=\"line\">        message: response.data.message,</span><br><span class=\"line\">        error: response.data.errors[<span class=\"built_in\">Object</span>.keys(response.data.errors)[<span class=\"number\">0</span>]][<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  post(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      data: params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"get\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  put(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"put\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      data: params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">\"delete\"</span>,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      data: params</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> checkStatus(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先在<code>main.js</code>中进行引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'./axios/axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure>\n<p>然后在我们要使用的地方</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$axios.post(<span class=\"string\">'接口地址'</span>,&#123;&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p> <a href=\"https://qytayh.github.io/2020/11/%E5%B0%86uni-request%E8%BF%9B%E8%A1%8Caxios%E5%8C%96%E5%B0%81%E8%A3%85/\">将uni-request进行axios化封装</a><br> <a href=\"https://qytayh.github.io/2020/08/%E5%9C%A8flutter%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/\">在flutter中优雅的封装网络请求</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"从零开始进阶全栈之koa源码","date":"2021-09-20T14:23:37.000Z","description":null,"_content":"\n深入了解koa原理\n<!-- more -->\n\n# koa原理\n\n⼀个基于nodejs的⼊⻔级http服务，类似下⾯代码：\n```js\nconst http = require('http')\nconst server = http.createServer((req, res) => {\n    // 业务逻辑\n    res.writeHead(200)\n    res.end('hello world!')\n})\nserver.listen(3000,()=>{\n    console.log('server listen at 3000')\n})\n```\nkoa的⽬标是⽤更简单化、流程化、模块化的⽅式实现回调部分\n\n```js\n// 创建 koa.js\nconst http = require('http')\nclass Koa {\n    listen(...args){\n        const server = http.createServer((req,res)=>{\n            this.callback(req,res)\n        })\n        server.listen(...args)\n    }\n    use(callback){\n        this.callback = callback\n    }\n}\n\nmodule.exports =  Koa\n\n// 使用 在inde.js中\nconst Koa = require('./koa')\nconst app = new Koa()\n\napp.use((req,res)=>{\n    res.writeHead(200)\n    res.end('hello world!')\n})\napp.listen(300,()=>{\n    console.log('server start at 3000')\n})\n```\n> ⽬前为⽌，Koa只是个⻢甲，要真正实现⽬标还需要引⼊上下⽂（context）和中间件机制\n\n# context\n\nkoa为了能够简化API，引⼊上下⽂context概念，将原始请求对象req和响应对象res封装并挂载到context上，并且在context上设置getter和setter，从⽽简化操作。\n\n```js \n// demo\napp.use(ctx=>{\n    ctx.body = 'hehe'\n})\n```\n封装 context、request、response\n\n```js\n// request.js\nmodule.exports = {\n    get url(){\n        return this.req.url\n    },\n    get method(){\n        return this.req.method.toLowerCase()\n    },\n}\n\n// response.js\nmodule.exports = {\n    get body() {\n        return this._body\n    },\n    set body(val) {\n        this._body = val\n    }\n}\n\n// context.js\nmodule.exports = {\n    get url(){\n        return this.req.url\n    },\n    get method(){\n        return this.req.method.toLowerCase()\n    },\n    get body() {\n        return this._body\n    },\n    set body(val) {\n        this._body = val\n    }\n}\n```\n在koa.js中引入\n```js\nconst http = require('http')\nconst context = require('./context')\nconst request = require('./request')\nconst response = require('./response')\n\nclass Koa {\n    listen(...args){\n        const server = http.createServer((req,res)=>{\n            // this.callback(req,res)\n            // 创建上下文\n            const ctx = this.createContext(req,res)\n            this.callback(ctx)\n            // 相应\n            res.end(ctx.body)\n        })\n        server.listen(...args)\n    }\n    ...\n    createContext(req,res){\n        const ctx = Object.create(context)\n        ctx.request = Object.create(request)\n        ctx.response = Object.create(response)\n        ctx.req = ctx.request.req = req\n        ctx.res = ctx.response.res = res\n        return ctx\n    }\n}\n```\n\n# 中间件\n\nKoa中间件机制：Koa中间件机制就是函数式 组合概念Compose的概念，将⼀组需要顺序执⾏的函数复合为⼀个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是源码中的精髓和难点。\n\n异步中间件：我们要⽀持async + await的中间件，要等异步结束后，再执⾏下⼀个中间件。\n\n```js\nfunction compose(middlewares){\n    return function(){\n        return dispatch(0)\n        function dispatch(i){\n            let fn = middlewares[i]\n            if(!fn){\n                return Promise.resolve()\n            }\n            return Promise.resolve(\n                fn(function next(){\n                    // promise完成后，再执⾏下⼀个\n                    return dispatch(i+1)\n                })\n            )\n        }\n    }\n}\n```\n\n# router\n\nroutes()的返回值是⼀个中间件，由于需要⽤到method，所以需要挂载method到ctx之上，修改request.js\n\n> 实现方式请移步[github---->write_koa](https://github.com/qytayh/write_koa)\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/09/从零开始进阶全栈之koa源码.md","raw":"---\ntitle: 从零开始进阶全栈之koa源码\ndate: 2021-09-20 22:23:37\ntags:\n    - 全栈之路\n    - node\ncategories:\n    - 全栈之路\n    - node\ndescription:\n---\n\n深入了解koa原理\n<!-- more -->\n\n# koa原理\n\n⼀个基于nodejs的⼊⻔级http服务，类似下⾯代码：\n```js\nconst http = require('http')\nconst server = http.createServer((req, res) => {\n    // 业务逻辑\n    res.writeHead(200)\n    res.end('hello world!')\n})\nserver.listen(3000,()=>{\n    console.log('server listen at 3000')\n})\n```\nkoa的⽬标是⽤更简单化、流程化、模块化的⽅式实现回调部分\n\n```js\n// 创建 koa.js\nconst http = require('http')\nclass Koa {\n    listen(...args){\n        const server = http.createServer((req,res)=>{\n            this.callback(req,res)\n        })\n        server.listen(...args)\n    }\n    use(callback){\n        this.callback = callback\n    }\n}\n\nmodule.exports =  Koa\n\n// 使用 在inde.js中\nconst Koa = require('./koa')\nconst app = new Koa()\n\napp.use((req,res)=>{\n    res.writeHead(200)\n    res.end('hello world!')\n})\napp.listen(300,()=>{\n    console.log('server start at 3000')\n})\n```\n> ⽬前为⽌，Koa只是个⻢甲，要真正实现⽬标还需要引⼊上下⽂（context）和中间件机制\n\n# context\n\nkoa为了能够简化API，引⼊上下⽂context概念，将原始请求对象req和响应对象res封装并挂载到context上，并且在context上设置getter和setter，从⽽简化操作。\n\n```js \n// demo\napp.use(ctx=>{\n    ctx.body = 'hehe'\n})\n```\n封装 context、request、response\n\n```js\n// request.js\nmodule.exports = {\n    get url(){\n        return this.req.url\n    },\n    get method(){\n        return this.req.method.toLowerCase()\n    },\n}\n\n// response.js\nmodule.exports = {\n    get body() {\n        return this._body\n    },\n    set body(val) {\n        this._body = val\n    }\n}\n\n// context.js\nmodule.exports = {\n    get url(){\n        return this.req.url\n    },\n    get method(){\n        return this.req.method.toLowerCase()\n    },\n    get body() {\n        return this._body\n    },\n    set body(val) {\n        this._body = val\n    }\n}\n```\n在koa.js中引入\n```js\nconst http = require('http')\nconst context = require('./context')\nconst request = require('./request')\nconst response = require('./response')\n\nclass Koa {\n    listen(...args){\n        const server = http.createServer((req,res)=>{\n            // this.callback(req,res)\n            // 创建上下文\n            const ctx = this.createContext(req,res)\n            this.callback(ctx)\n            // 相应\n            res.end(ctx.body)\n        })\n        server.listen(...args)\n    }\n    ...\n    createContext(req,res){\n        const ctx = Object.create(context)\n        ctx.request = Object.create(request)\n        ctx.response = Object.create(response)\n        ctx.req = ctx.request.req = req\n        ctx.res = ctx.response.res = res\n        return ctx\n    }\n}\n```\n\n# 中间件\n\nKoa中间件机制：Koa中间件机制就是函数式 组合概念Compose的概念，将⼀组需要顺序执⾏的函数复合为⼀个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是源码中的精髓和难点。\n\n异步中间件：我们要⽀持async + await的中间件，要等异步结束后，再执⾏下⼀个中间件。\n\n```js\nfunction compose(middlewares){\n    return function(){\n        return dispatch(0)\n        function dispatch(i){\n            let fn = middlewares[i]\n            if(!fn){\n                return Promise.resolve()\n            }\n            return Promise.resolve(\n                fn(function next(){\n                    // promise完成后，再执⾏下⼀个\n                    return dispatch(i+1)\n                })\n            )\n        }\n    }\n}\n```\n\n# router\n\nroutes()的返回值是⼀个中间件，由于需要⽤到method，所以需要挂载method到ctx之上，修改request.js\n\n> 实现方式请移步[github---->write_koa](https://github.com/qytayh/write_koa)\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/09/从零开始进阶全栈之koa源码","published":1,"updated":"2021-09-22T14:22:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53u003j1r0qcr9xcxs0","content":"<p>深入了解koa原理</p>\n<a id=\"more\"></a>\n\n<h1 id=\"koa原理\"><a href=\"#koa原理\" class=\"headerlink\" title=\"koa原理\"></a>koa原理</h1><p>⼀个基于nodejs的⼊⻔级http服务，类似下⾯代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>)</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello world!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server listen at 3000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>koa的⽬标是⽤更简单化、流程化、模块化的⽅式实现回调部分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 koa.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Koa</span> </span>&#123;</span><br><span class=\"line\">    listen(...args)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.callback(req,res)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        server.listen(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    use(callback)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callback = callback</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =  Koa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 在inde.js中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'./koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>)</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello world!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">300</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server start at 3000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>⽬前为⽌，Koa只是个⻢甲，要真正实现⽬标还需要引⼊上下⽂（context）和中间件机制</p>\n</blockquote>\n<h1 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h1><p>koa为了能够简化API，引⼊上下⽂context概念，将原始请求对象req和响应对象res封装并挂载到context上，并且在context上设置getter和setter，从⽽简化操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span>=&gt;</span>&#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'hehe'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>封装 context、request、response</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// request.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> url()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.url</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> method()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.method.toLowerCase()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// response.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> body() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._body</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> body(val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._body = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// context.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> url()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.url</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> method()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.method.toLowerCase()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> body() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._body</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> body(val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._body = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在koa.js中引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = <span class=\"built_in\">require</span>(<span class=\"string\">'./context'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'./request'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> response = <span class=\"built_in\">require</span>(<span class=\"string\">'./response'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Koa</span> </span>&#123;</span><br><span class=\"line\">    listen(...args)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// this.callback(req,res)</span></span><br><span class=\"line\">            <span class=\"comment\">// 创建上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">this</span>.createContext(req,res)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.callback(ctx)</span><br><span class=\"line\">            <span class=\"comment\">// 相应</span></span><br><span class=\"line\">            res.end(ctx.body)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        server.listen(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    createContext(req,res)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ctx = <span class=\"built_in\">Object</span>.create(context)</span><br><span class=\"line\">        ctx.request = <span class=\"built_in\">Object</span>.create(request)</span><br><span class=\"line\">        ctx.response = <span class=\"built_in\">Object</span>.create(response)</span><br><span class=\"line\">        ctx.req = ctx.request.req = req</span><br><span class=\"line\">        ctx.res = ctx.response.res = res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ctx</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><p>Koa中间件机制：Koa中间件机制就是函数式 组合概念Compose的概念，将⼀组需要顺序执⾏的函数复合为⼀个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是源码中的精髓和难点。</p>\n<p>异步中间件：我们要⽀持async + await的中间件，要等异步结束后，再执⾏下⼀个中间件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">middlewares</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dispatch(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> fn = middlewares[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!fn)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(</span><br><span class=\"line\">                fn(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// promise完成后，再执⾏下⼀个</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> dispatch(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h1><p>routes()的返回值是⼀个中间件，由于需要⽤到method，所以需要挂载method到ctx之上，修改request.js</p>\n<blockquote>\n<p>实现方式请移步<a href=\"https://github.com/qytayh/write_koa\" target=\"_blank\" rel=\"noopener\">github—-&gt;write_koa</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>深入了解koa原理</p>","more":"<h1 id=\"koa原理\"><a href=\"#koa原理\" class=\"headerlink\" title=\"koa原理\"></a>koa原理</h1><p>⼀个基于nodejs的⼊⻔级http服务，类似下⾯代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>)</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello world!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server listen at 3000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>koa的⽬标是⽤更简单化、流程化、模块化的⽅式实现回调部分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 koa.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Koa</span> </span>&#123;</span><br><span class=\"line\">    listen(...args)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.callback(req,res)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        server.listen(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    use(callback)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callback = callback</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =  Koa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 在inde.js中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'./koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>)</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello world!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">300</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server start at 3000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>⽬前为⽌，Koa只是个⻢甲，要真正实现⽬标还需要引⼊上下⽂（context）和中间件机制</p>\n</blockquote>\n<h1 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h1><p>koa为了能够简化API，引⼊上下⽂context概念，将原始请求对象req和响应对象res封装并挂载到context上，并且在context上设置getter和setter，从⽽简化操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span>=&gt;</span>&#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'hehe'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>封装 context、request、response</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// request.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> url()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.url</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> method()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.method.toLowerCase()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// response.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> body() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._body</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> body(val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._body = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// context.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> url()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.url</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> method()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.method.toLowerCase()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> body() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._body</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> body(val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._body = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在koa.js中引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = <span class=\"built_in\">require</span>(<span class=\"string\">'./context'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'./request'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> response = <span class=\"built_in\">require</span>(<span class=\"string\">'./response'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Koa</span> </span>&#123;</span><br><span class=\"line\">    listen(...args)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// this.callback(req,res)</span></span><br><span class=\"line\">            <span class=\"comment\">// 创建上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">this</span>.createContext(req,res)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.callback(ctx)</span><br><span class=\"line\">            <span class=\"comment\">// 相应</span></span><br><span class=\"line\">            res.end(ctx.body)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        server.listen(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    createContext(req,res)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ctx = <span class=\"built_in\">Object</span>.create(context)</span><br><span class=\"line\">        ctx.request = <span class=\"built_in\">Object</span>.create(request)</span><br><span class=\"line\">        ctx.response = <span class=\"built_in\">Object</span>.create(response)</span><br><span class=\"line\">        ctx.req = ctx.request.req = req</span><br><span class=\"line\">        ctx.res = ctx.response.res = res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ctx</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><p>Koa中间件机制：Koa中间件机制就是函数式 组合概念Compose的概念，将⼀组需要顺序执⾏的函数复合为⼀个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是源码中的精髓和难点。</p>\n<p>异步中间件：我们要⽀持async + await的中间件，要等异步结束后，再执⾏下⼀个中间件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">middlewares</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dispatch(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> fn = middlewares[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!fn)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(</span><br><span class=\"line\">                fn(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// promise完成后，再执⾏下⼀个</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> dispatch(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h1><p>routes()的返回值是⼀个中间件，由于需要⽤到method，所以需要挂载method到ctx之上，修改request.js</p>\n<blockquote>\n<p>实现方式请移步<a href=\"https://github.com/qytayh/write_koa\" target=\"_blank\" rel=\"noopener\">github—-&gt;write_koa</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"Browserslist","date":"2021-08-17T03:07:32.000Z","description":null,"_content":"\n`browserslist`实际上就是声明了⼀段浏览器的集合，我们的⼯具可以根据这段集合描述，针对性的输出兼容性代码。\n\n<!-- more -->\n\n[Browserslist](https://github.com/browserslist/browserslist)就是帮助我们来设置⽬标浏览器的⼯具。`Browserslist` 被⼴泛的应⽤到 `Babel`、`postcsspreset-env`、`autoprefixer` 等开发⼯具上。\n\n# 配置\n\n`Browserslist`的配置可以放在`package.json`中，也可以单独放在配置⽂件`.browserslistrc`中。所有的⼯具都会主动查找`browserslist`的配置⽂件，根据 `browserslist`配置找出对应的⽬标浏览器集合。\n\nBrowserslist 的数据都是来⾃Can I Use:https://browserl.ist/\n\n可惜⽹站关闭了，现在需要⼿动检测：\n\n```shell\nnpx browserslist \"last 1 version, >1%\"\n```\n\n在`package.json`中的配置是增加⼀个`browserslist`数组属性：\n```json\n{\n\"browserslist\": [\"last 2 version\", \"> 1%\", \"maintained node versions\", \"not\nie < 11\"]\n}\n```\n\n或者在项⽬的根⽬录下创建⼀个`.browserslistrc`⽂件：\n```\n# 注释是这样写的，以#号开头\n# 每⾏⼀个浏览器集合描述\nlast 2 version\n> 1%\nmaintained node versions\nnot ie < 11\n```\n\n# 常⻅集合范围说明\n\n| 范围 | 说明 |\n| ---- | ---- |\n| last 2 versions | caniuse.com⽹站跟踪的最新两个版本，假如 iOS 12 是最新版本，那么向后兼容两个版本就是 iOS 11 和 iOS 12 |\n| > 1% | 全球超过 1%⼈使⽤的浏览器，类似> 5% in US 则指代美国 5%以上⽤户 |\n| cover 99.5% | 覆盖 99.5%主流浏览器 |\n| chrome > 50   ie 6-8 | 指定某个浏览器版本范围 |\n| unreleased versions | 所有浏览器的 beta 版本 |\n| not ie < 11 | 排除 ie11 以下版本不兼容 |\n| since 2013  last 2 years | 某时间范围发布的所有浏览器版本 |\n| maintained node versions | 所有被 node 基⾦会维护的 node 版本 |\n| current node | 当前环境的 node 版本 |\n| dead | 通过last 2 versions 筛选的浏览器中，全球使⽤率低于0.5% 且官⽅声明不再维护或者事实上已经两年没有再更新的版本 |\n| defaults | 默认配置， > 0.5% last 2 versions Firefox ESR not dead |\n\n\n# 常见浏览器名称\n\n| 名称 | 中文对照 |\n| ---- | ---- |\n| Android | 安卓 webview 浏览器 |\n| Baidu | 百度浏览器 |\n| BlackBerry / bb | ⿊莓浏览器 |\n| Chrome  | chrome 浏览器 |\n| ChromeAndroid / and_chr | chrome 安卓移动浏览器 |\n| Edge | 微软 Edge 浏览器 |\n| Electron | Electron |\n| Explorer / ie | ie 浏览器 |\n| ExplorerMobile / ie_mob | ie 移动浏览器 |\n| Firefox / ff  | ⽕狐浏览器 |\n| FirefoxAndroid / and_ff | ⽕狐安卓浏览器 |\n| iOS / ios_saf | iOS Safari 浏览器 |\n| Node | nodejs |\n| Opera | Opera浏览器 |\n| OperaMini / op_mini | operaMini 浏览器 |\n| OperaMobile / op_mob | opera 移动浏览器 |\n| QQAndroid / and_qq | QQ安卓浏览器 |\n| Samsung | 三星浏览器 |\n| Safari | 桌⾯版本 Safari |\n| UCAndroid / and_uc | UC 安卓浏览器 |\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/Browserslist.md","raw":"---\ntitle: Browserslist\ndate: 2021-08-17 11:07:32\ntags:\n - webpack\ncategories:\n - webpack\ndescription:\n---\n\n`browserslist`实际上就是声明了⼀段浏览器的集合，我们的⼯具可以根据这段集合描述，针对性的输出兼容性代码。\n\n<!-- more -->\n\n[Browserslist](https://github.com/browserslist/browserslist)就是帮助我们来设置⽬标浏览器的⼯具。`Browserslist` 被⼴泛的应⽤到 `Babel`、`postcsspreset-env`、`autoprefixer` 等开发⼯具上。\n\n# 配置\n\n`Browserslist`的配置可以放在`package.json`中，也可以单独放在配置⽂件`.browserslistrc`中。所有的⼯具都会主动查找`browserslist`的配置⽂件，根据 `browserslist`配置找出对应的⽬标浏览器集合。\n\nBrowserslist 的数据都是来⾃Can I Use:https://browserl.ist/\n\n可惜⽹站关闭了，现在需要⼿动检测：\n\n```shell\nnpx browserslist \"last 1 version, >1%\"\n```\n\n在`package.json`中的配置是增加⼀个`browserslist`数组属性：\n```json\n{\n\"browserslist\": [\"last 2 version\", \"> 1%\", \"maintained node versions\", \"not\nie < 11\"]\n}\n```\n\n或者在项⽬的根⽬录下创建⼀个`.browserslistrc`⽂件：\n```\n# 注释是这样写的，以#号开头\n# 每⾏⼀个浏览器集合描述\nlast 2 version\n> 1%\nmaintained node versions\nnot ie < 11\n```\n\n# 常⻅集合范围说明\n\n| 范围 | 说明 |\n| ---- | ---- |\n| last 2 versions | caniuse.com⽹站跟踪的最新两个版本，假如 iOS 12 是最新版本，那么向后兼容两个版本就是 iOS 11 和 iOS 12 |\n| > 1% | 全球超过 1%⼈使⽤的浏览器，类似> 5% in US 则指代美国 5%以上⽤户 |\n| cover 99.5% | 覆盖 99.5%主流浏览器 |\n| chrome > 50   ie 6-8 | 指定某个浏览器版本范围 |\n| unreleased versions | 所有浏览器的 beta 版本 |\n| not ie < 11 | 排除 ie11 以下版本不兼容 |\n| since 2013  last 2 years | 某时间范围发布的所有浏览器版本 |\n| maintained node versions | 所有被 node 基⾦会维护的 node 版本 |\n| current node | 当前环境的 node 版本 |\n| dead | 通过last 2 versions 筛选的浏览器中，全球使⽤率低于0.5% 且官⽅声明不再维护或者事实上已经两年没有再更新的版本 |\n| defaults | 默认配置， > 0.5% last 2 versions Firefox ESR not dead |\n\n\n# 常见浏览器名称\n\n| 名称 | 中文对照 |\n| ---- | ---- |\n| Android | 安卓 webview 浏览器 |\n| Baidu | 百度浏览器 |\n| BlackBerry / bb | ⿊莓浏览器 |\n| Chrome  | chrome 浏览器 |\n| ChromeAndroid / and_chr | chrome 安卓移动浏览器 |\n| Edge | 微软 Edge 浏览器 |\n| Electron | Electron |\n| Explorer / ie | ie 浏览器 |\n| ExplorerMobile / ie_mob | ie 移动浏览器 |\n| Firefox / ff  | ⽕狐浏览器 |\n| FirefoxAndroid / and_ff | ⽕狐安卓浏览器 |\n| iOS / ios_saf | iOS Safari 浏览器 |\n| Node | nodejs |\n| Opera | Opera浏览器 |\n| OperaMini / op_mini | operaMini 浏览器 |\n| OperaMobile / op_mob | opera 移动浏览器 |\n| QQAndroid / and_qq | QQ安卓浏览器 |\n| Samsung | 三星浏览器 |\n| Safari | 桌⾯版本 Safari |\n| UCAndroid / and_uc | UC 安卓浏览器 |\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/Browserslist","published":1,"updated":"2021-08-17T06:29:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53v003m1r0qdr5uhoce","content":"<p><code>browserslist</code>实际上就是声明了⼀段浏览器的集合，我们的⼯具可以根据这段集合描述，针对性的输出兼容性代码。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"https://github.com/browserslist/browserslist\" target=\"_blank\" rel=\"noopener\">Browserslist</a>就是帮助我们来设置⽬标浏览器的⼯具。<code>Browserslist</code> 被⼴泛的应⽤到 <code>Babel</code>、<code>postcsspreset-env</code>、<code>autoprefixer</code> 等开发⼯具上。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><code>Browserslist</code>的配置可以放在<code>package.json</code>中，也可以单独放在配置⽂件<code>.browserslistrc</code>中。所有的⼯具都会主动查找<code>browserslist</code>的配置⽂件，根据 <code>browserslist</code>配置找出对应的⽬标浏览器集合。</p>\n<p>Browserslist 的数据都是来⾃Can I Use:<a href=\"https://browserl.ist/\" target=\"_blank\" rel=\"noopener\">https://browserl.ist/</a></p>\n<p>可惜⽹站关闭了，现在需要⼿动检测：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx browserslist \"last 1 version, &gt;1%\"</span><br></pre></td></tr></table></figure>\n\n<p>在<code>package.json</code>中的配置是增加⼀个<code>browserslist</code>数组属性：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"browserslist\"</span>: [<span class=\"string\">\"last 2 version\"</span>, <span class=\"string\">\"&gt; 1%\"</span>, <span class=\"string\">\"maintained node versions\"</span>, <span class=\"string\">\"not</span></span><br><span class=\"line\"><span class=\"string\">ie &lt; 11\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者在项⽬的根⽬录下创建⼀个<code>.browserslistrc</code>⽂件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释是这样写的，以#号开头</span><br><span class=\"line\"># 每⾏⼀个浏览器集合描述</span><br><span class=\"line\">last 2 version</span><br><span class=\"line\">&gt; 1%</span><br><span class=\"line\">maintained node versions</span><br><span class=\"line\">not ie &lt; 11</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常⻅集合范围说明\"><a href=\"#常⻅集合范围说明\" class=\"headerlink\" title=\"常⻅集合范围说明\"></a>常⻅集合范围说明</h1><table>\n<thead>\n<tr>\n<th>范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>last 2 versions</td>\n<td>caniuse.com⽹站跟踪的最新两个版本，假如 iOS 12 是最新版本，那么向后兼容两个版本就是 iOS 11 和 iOS 12</td>\n</tr>\n<tr>\n<td>&gt; 1%</td>\n<td>全球超过 1%⼈使⽤的浏览器，类似&gt; 5% in US 则指代美国 5%以上⽤户</td>\n</tr>\n<tr>\n<td>cover 99.5%</td>\n<td>覆盖 99.5%主流浏览器</td>\n</tr>\n<tr>\n<td>chrome &gt; 50   ie 6-8</td>\n<td>指定某个浏览器版本范围</td>\n</tr>\n<tr>\n<td>unreleased versions</td>\n<td>所有浏览器的 beta 版本</td>\n</tr>\n<tr>\n<td>not ie &lt; 11</td>\n<td>排除 ie11 以下版本不兼容</td>\n</tr>\n<tr>\n<td>since 2013  last 2 years</td>\n<td>某时间范围发布的所有浏览器版本</td>\n</tr>\n<tr>\n<td>maintained node versions</td>\n<td>所有被 node 基⾦会维护的 node 版本</td>\n</tr>\n<tr>\n<td>current node</td>\n<td>当前环境的 node 版本</td>\n</tr>\n<tr>\n<td>dead</td>\n<td>通过last 2 versions 筛选的浏览器中，全球使⽤率低于0.5% 且官⽅声明不再维护或者事实上已经两年没有再更新的版本</td>\n</tr>\n<tr>\n<td>defaults</td>\n<td>默认配置， &gt; 0.5% last 2 versions Firefox ESR not dead</td>\n</tr>\n</tbody></table>\n<h1 id=\"常见浏览器名称\"><a href=\"#常见浏览器名称\" class=\"headerlink\" title=\"常见浏览器名称\"></a>常见浏览器名称</h1><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>中文对照</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Android</td>\n<td>安卓 webview 浏览器</td>\n</tr>\n<tr>\n<td>Baidu</td>\n<td>百度浏览器</td>\n</tr>\n<tr>\n<td>BlackBerry / bb</td>\n<td>⿊莓浏览器</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td>chrome 浏览器</td>\n</tr>\n<tr>\n<td>ChromeAndroid / and_chr</td>\n<td>chrome 安卓移动浏览器</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>微软 Edge 浏览器</td>\n</tr>\n<tr>\n<td>Electron</td>\n<td>Electron</td>\n</tr>\n<tr>\n<td>Explorer / ie</td>\n<td>ie 浏览器</td>\n</tr>\n<tr>\n<td>ExplorerMobile / ie_mob</td>\n<td>ie 移动浏览器</td>\n</tr>\n<tr>\n<td>Firefox / ff</td>\n<td>⽕狐浏览器</td>\n</tr>\n<tr>\n<td>FirefoxAndroid / and_ff</td>\n<td>⽕狐安卓浏览器</td>\n</tr>\n<tr>\n<td>iOS / ios_saf</td>\n<td>iOS Safari 浏览器</td>\n</tr>\n<tr>\n<td>Node</td>\n<td>nodejs</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>Opera浏览器</td>\n</tr>\n<tr>\n<td>OperaMini / op_mini</td>\n<td>operaMini 浏览器</td>\n</tr>\n<tr>\n<td>OperaMobile / op_mob</td>\n<td>opera 移动浏览器</td>\n</tr>\n<tr>\n<td>QQAndroid / and_qq</td>\n<td>QQ安卓浏览器</td>\n</tr>\n<tr>\n<td>Samsung</td>\n<td>三星浏览器</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>桌⾯版本 Safari</td>\n</tr>\n<tr>\n<td>UCAndroid / and_uc</td>\n<td>UC 安卓浏览器</td>\n</tr>\n</tbody></table>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p><code>browserslist</code>实际上就是声明了⼀段浏览器的集合，我们的⼯具可以根据这段集合描述，针对性的输出兼容性代码。</p>","more":"<p><a href=\"https://github.com/browserslist/browserslist\" target=\"_blank\" rel=\"noopener\">Browserslist</a>就是帮助我们来设置⽬标浏览器的⼯具。<code>Browserslist</code> 被⼴泛的应⽤到 <code>Babel</code>、<code>postcsspreset-env</code>、<code>autoprefixer</code> 等开发⼯具上。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><code>Browserslist</code>的配置可以放在<code>package.json</code>中，也可以单独放在配置⽂件<code>.browserslistrc</code>中。所有的⼯具都会主动查找<code>browserslist</code>的配置⽂件，根据 <code>browserslist</code>配置找出对应的⽬标浏览器集合。</p>\n<p>Browserslist 的数据都是来⾃Can I Use:<a href=\"https://browserl.ist/\" target=\"_blank\" rel=\"noopener\">https://browserl.ist/</a></p>\n<p>可惜⽹站关闭了，现在需要⼿动检测：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx browserslist \"last 1 version, &gt;1%\"</span><br></pre></td></tr></table></figure>\n\n<p>在<code>package.json</code>中的配置是增加⼀个<code>browserslist</code>数组属性：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"browserslist\"</span>: [<span class=\"string\">\"last 2 version\"</span>, <span class=\"string\">\"&gt; 1%\"</span>, <span class=\"string\">\"maintained node versions\"</span>, <span class=\"string\">\"not</span></span><br><span class=\"line\"><span class=\"string\">ie &lt; 11\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者在项⽬的根⽬录下创建⼀个<code>.browserslistrc</code>⽂件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释是这样写的，以#号开头</span><br><span class=\"line\"># 每⾏⼀个浏览器集合描述</span><br><span class=\"line\">last 2 version</span><br><span class=\"line\">&gt; 1%</span><br><span class=\"line\">maintained node versions</span><br><span class=\"line\">not ie &lt; 11</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常⻅集合范围说明\"><a href=\"#常⻅集合范围说明\" class=\"headerlink\" title=\"常⻅集合范围说明\"></a>常⻅集合范围说明</h1><table>\n<thead>\n<tr>\n<th>范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>last 2 versions</td>\n<td>caniuse.com⽹站跟踪的最新两个版本，假如 iOS 12 是最新版本，那么向后兼容两个版本就是 iOS 11 和 iOS 12</td>\n</tr>\n<tr>\n<td>&gt; 1%</td>\n<td>全球超过 1%⼈使⽤的浏览器，类似&gt; 5% in US 则指代美国 5%以上⽤户</td>\n</tr>\n<tr>\n<td>cover 99.5%</td>\n<td>覆盖 99.5%主流浏览器</td>\n</tr>\n<tr>\n<td>chrome &gt; 50   ie 6-8</td>\n<td>指定某个浏览器版本范围</td>\n</tr>\n<tr>\n<td>unreleased versions</td>\n<td>所有浏览器的 beta 版本</td>\n</tr>\n<tr>\n<td>not ie &lt; 11</td>\n<td>排除 ie11 以下版本不兼容</td>\n</tr>\n<tr>\n<td>since 2013  last 2 years</td>\n<td>某时间范围发布的所有浏览器版本</td>\n</tr>\n<tr>\n<td>maintained node versions</td>\n<td>所有被 node 基⾦会维护的 node 版本</td>\n</tr>\n<tr>\n<td>current node</td>\n<td>当前环境的 node 版本</td>\n</tr>\n<tr>\n<td>dead</td>\n<td>通过last 2 versions 筛选的浏览器中，全球使⽤率低于0.5% 且官⽅声明不再维护或者事实上已经两年没有再更新的版本</td>\n</tr>\n<tr>\n<td>defaults</td>\n<td>默认配置， &gt; 0.5% last 2 versions Firefox ESR not dead</td>\n</tr>\n</tbody></table>\n<h1 id=\"常见浏览器名称\"><a href=\"#常见浏览器名称\" class=\"headerlink\" title=\"常见浏览器名称\"></a>常见浏览器名称</h1><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>中文对照</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Android</td>\n<td>安卓 webview 浏览器</td>\n</tr>\n<tr>\n<td>Baidu</td>\n<td>百度浏览器</td>\n</tr>\n<tr>\n<td>BlackBerry / bb</td>\n<td>⿊莓浏览器</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td>chrome 浏览器</td>\n</tr>\n<tr>\n<td>ChromeAndroid / and_chr</td>\n<td>chrome 安卓移动浏览器</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>微软 Edge 浏览器</td>\n</tr>\n<tr>\n<td>Electron</td>\n<td>Electron</td>\n</tr>\n<tr>\n<td>Explorer / ie</td>\n<td>ie 浏览器</td>\n</tr>\n<tr>\n<td>ExplorerMobile / ie_mob</td>\n<td>ie 移动浏览器</td>\n</tr>\n<tr>\n<td>Firefox / ff</td>\n<td>⽕狐浏览器</td>\n</tr>\n<tr>\n<td>FirefoxAndroid / and_ff</td>\n<td>⽕狐安卓浏览器</td>\n</tr>\n<tr>\n<td>iOS / ios_saf</td>\n<td>iOS Safari 浏览器</td>\n</tr>\n<tr>\n<td>Node</td>\n<td>nodejs</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>Opera浏览器</td>\n</tr>\n<tr>\n<td>OperaMini / op_mini</td>\n<td>operaMini 浏览器</td>\n</tr>\n<tr>\n<td>OperaMobile / op_mob</td>\n<td>opera 移动浏览器</td>\n</tr>\n<tr>\n<td>QQAndroid / and_qq</td>\n<td>QQ安卓浏览器</td>\n</tr>\n<tr>\n<td>Samsung</td>\n<td>三星浏览器</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>桌⾯版本 Safari</td>\n</tr>\n<tr>\n<td>UCAndroid / and_uc</td>\n<td>UC 安卓浏览器</td>\n</tr>\n</tbody></table>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"nodejs文件操作","date":"2021-03-16T08:33:58.000Z","description":null,"_content":"\n使用nodejs进行文件以及目录的创建，删除，修改，复制。\n\n<!-- more -->\n\n```js\nconst fs = require('fs') //文件操作\n// 增删改查;\n// 1.文件操作   2.目录操作\n\n// 文件操作\nfs.writeFile('1.txt',\"我是写入的文字\",function(err){\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// a:追加写入;w:写入;r:读取\nfs.writeFile('1.txt',\"我是zhuijia的文字\",{flag:\"a\"},function(err){\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 读取\nfs.readFile('1.txt',\"utf8\",(err,data)=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(data)\n})\nfs.readFile('1.txt',(err,data)=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(data,toString())\n})\n\n// 所有的文件操作  没有加Sync都是异步  否则是同步\nlet data = fs.readFileSync('1.txt')\nconsole.log(data.toString())\n\n// 修改文件名\nfs.rename(\"1.txt\",\"2.txt\",function(err){\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 删除\nfs.unlink('2.txt',err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 复制\nfs.copyFile('1.js',\"2.js\",err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n\n// 复制\nfunction myCopy(src,dest){\n    fs.writeFileSync(dest,fs.readFileSync(src))\n}\n\n// 目录操作\n\n// 创建目录\nfs.mkdir('test',err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 修改目录名称\nfs.rename('test',\"test1\",err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 读取目录\nfs.readdir('test1',(err,data)=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(data)\n})\n\n// 删除目录(空文件夹/目录)\nfs.rmdir('test1',err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 判断文件/目录是否存在  true/false\nfs.exists(\"test\",exists=>{\n    console.log(exists)\n})\n\n// 获取文件活目录的详细信息\nfs.stat('1.js',(err,stat)=>{\n    if(err){\n        return console.log(err)\n    }\n    // console.log(stat)\n    // let res =stat.isFile()//判断是否是文件\n    let res =stat.isDirectory()//判断是否是文件夹\n    console.log(res)\n})\n\n// 删除非空文件夹\n// 先把目录里文件删除->删除空目录\nremoveDir('test1')\nfunction removeDir(path){\n    let data=fs.readdirSync(path)\n    data.forEach(v=>{\n        //是文件直接删除    目录继续查找\n        let url = `${path}/${v}`\n        let stat=fs.statSync(url)\n        if(stat.isFile()){\n            // 文件 删除\n            fs.unlinkSync(url)\n        }else{\n            //目录 继续查找\n            removeDir(url)\n        }\n    })\n    fs.rmdirSync(path)\n}\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/03/nodejs文件操作.md","raw":"---\ntitle: nodejs文件操作\ndate: 2021-03-16 16:33:58\ntags:\n  - node\ncategories:\n  - node\ndescription:\n---\n\n使用nodejs进行文件以及目录的创建，删除，修改，复制。\n\n<!-- more -->\n\n```js\nconst fs = require('fs') //文件操作\n// 增删改查;\n// 1.文件操作   2.目录操作\n\n// 文件操作\nfs.writeFile('1.txt',\"我是写入的文字\",function(err){\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// a:追加写入;w:写入;r:读取\nfs.writeFile('1.txt',\"我是zhuijia的文字\",{flag:\"a\"},function(err){\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 读取\nfs.readFile('1.txt',\"utf8\",(err,data)=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(data)\n})\nfs.readFile('1.txt',(err,data)=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(data,toString())\n})\n\n// 所有的文件操作  没有加Sync都是异步  否则是同步\nlet data = fs.readFileSync('1.txt')\nconsole.log(data.toString())\n\n// 修改文件名\nfs.rename(\"1.txt\",\"2.txt\",function(err){\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 删除\nfs.unlink('2.txt',err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 复制\nfs.copyFile('1.js',\"2.js\",err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n\n// 复制\nfunction myCopy(src,dest){\n    fs.writeFileSync(dest,fs.readFileSync(src))\n}\n\n// 目录操作\n\n// 创建目录\nfs.mkdir('test',err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 修改目录名称\nfs.rename('test',\"test1\",err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 读取目录\nfs.readdir('test1',(err,data)=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(data)\n})\n\n// 删除目录(空文件夹/目录)\nfs.rmdir('test1',err=>{\n    if(err){\n        return console.log(err)\n    }\n    console.log(\"success\")\n})\n\n// 判断文件/目录是否存在  true/false\nfs.exists(\"test\",exists=>{\n    console.log(exists)\n})\n\n// 获取文件活目录的详细信息\nfs.stat('1.js',(err,stat)=>{\n    if(err){\n        return console.log(err)\n    }\n    // console.log(stat)\n    // let res =stat.isFile()//判断是否是文件\n    let res =stat.isDirectory()//判断是否是文件夹\n    console.log(res)\n})\n\n// 删除非空文件夹\n// 先把目录里文件删除->删除空目录\nremoveDir('test1')\nfunction removeDir(path){\n    let data=fs.readdirSync(path)\n    data.forEach(v=>{\n        //是文件直接删除    目录继续查找\n        let url = `${path}/${v}`\n        let stat=fs.statSync(url)\n        if(stat.isFile()){\n            // 文件 删除\n            fs.unlinkSync(url)\n        }else{\n            //目录 继续查找\n            removeDir(url)\n        }\n    })\n    fs.rmdirSync(path)\n}\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/03/nodejs文件操作","published":1,"updated":"2021-03-16T08:36:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53x003q1r0q66k15vlo","content":"<p>使用nodejs进行文件以及目录的创建，删除，修改，复制。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>) <span class=\"comment\">//文件操作</span></span><br><span class=\"line\"><span class=\"comment\">// 增删改查;</span></span><br><span class=\"line\"><span class=\"comment\">// 1.文件操作   2.目录操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件操作</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'1.txt'</span>,<span class=\"string\">\"我是写入的文字\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a:追加写入;w:写入;r:读取</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'1.txt'</span>,<span class=\"string\">\"我是zhuijia的文字\"</span>,&#123;<span class=\"attr\">flag</span>:<span class=\"string\">\"a\"</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'1.txt'</span>,<span class=\"string\">\"utf8\"</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'1.txt'</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data,toString())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有的文件操作  没有加Sync都是异步  否则是同步</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = fs.readFileSync(<span class=\"string\">'1.txt'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改文件名</span></span><br><span class=\"line\">fs.rename(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"2.txt\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">fs.unlink(<span class=\"string\">'2.txt'</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制</span></span><br><span class=\"line\">fs.copyFile(<span class=\"string\">'1.js'</span>,<span class=\"string\">\"2.js\"</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCopy</span>(<span class=\"params\">src,dest</span>)</span>&#123;</span><br><span class=\"line\">    fs.writeFileSync(dest,fs.readFileSync(src))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 目录操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建目录</span></span><br><span class=\"line\">fs.mkdir(<span class=\"string\">'test'</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改目录名称</span></span><br><span class=\"line\">fs.rename(<span class=\"string\">'test'</span>,<span class=\"string\">\"test1\"</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取目录</span></span><br><span class=\"line\">fs.readdir(<span class=\"string\">'test1'</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除目录(空文件夹/目录)</span></span><br><span class=\"line\">fs.rmdir(<span class=\"string\">'test1'</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断文件/目录是否存在  true/false</span></span><br><span class=\"line\">fs.exists(<span class=\"string\">\"test\"</span>,exists=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(exists)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取文件活目录的详细信息</span></span><br><span class=\"line\">fs.stat(<span class=\"string\">'1.js'</span>,(err,stat)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(stat)</span></span><br><span class=\"line\">    <span class=\"comment\">// let res =stat.isFile()//判断是否是文件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res =stat.isDirectory()<span class=\"comment\">//判断是否是文件夹</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除非空文件夹</span></span><br><span class=\"line\"><span class=\"comment\">// 先把目录里文件删除-&gt;删除空目录</span></span><br><span class=\"line\">removeDir(<span class=\"string\">'test1'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeDir</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data=fs.readdirSync(path)</span><br><span class=\"line\">    data.forEach(<span class=\"function\"><span class=\"params\">v</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//是文件直接删除    目录继续查找</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;path&#125;</span>/<span class=\"subst\">$&#123;v&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> stat=fs.statSync(url)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stat.isFile())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 文件 删除</span></span><br><span class=\"line\">            fs.unlinkSync(url)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//目录 继续查找</span></span><br><span class=\"line\">            removeDir(url)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.rmdirSync(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>使用nodejs进行文件以及目录的创建，删除，修改，复制。</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>) <span class=\"comment\">//文件操作</span></span><br><span class=\"line\"><span class=\"comment\">// 增删改查;</span></span><br><span class=\"line\"><span class=\"comment\">// 1.文件操作   2.目录操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件操作</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'1.txt'</span>,<span class=\"string\">\"我是写入的文字\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a:追加写入;w:写入;r:读取</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'1.txt'</span>,<span class=\"string\">\"我是zhuijia的文字\"</span>,&#123;<span class=\"attr\">flag</span>:<span class=\"string\">\"a\"</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'1.txt'</span>,<span class=\"string\">\"utf8\"</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'1.txt'</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data,toString())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有的文件操作  没有加Sync都是异步  否则是同步</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = fs.readFileSync(<span class=\"string\">'1.txt'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改文件名</span></span><br><span class=\"line\">fs.rename(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"2.txt\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">fs.unlink(<span class=\"string\">'2.txt'</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制</span></span><br><span class=\"line\">fs.copyFile(<span class=\"string\">'1.js'</span>,<span class=\"string\">\"2.js\"</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCopy</span>(<span class=\"params\">src,dest</span>)</span>&#123;</span><br><span class=\"line\">    fs.writeFileSync(dest,fs.readFileSync(src))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 目录操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建目录</span></span><br><span class=\"line\">fs.mkdir(<span class=\"string\">'test'</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改目录名称</span></span><br><span class=\"line\">fs.rename(<span class=\"string\">'test'</span>,<span class=\"string\">\"test1\"</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取目录</span></span><br><span class=\"line\">fs.readdir(<span class=\"string\">'test1'</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除目录(空文件夹/目录)</span></span><br><span class=\"line\">fs.rmdir(<span class=\"string\">'test1'</span>,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断文件/目录是否存在  true/false</span></span><br><span class=\"line\">fs.exists(<span class=\"string\">\"test\"</span>,exists=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(exists)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取文件活目录的详细信息</span></span><br><span class=\"line\">fs.stat(<span class=\"string\">'1.js'</span>,(err,stat)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(stat)</span></span><br><span class=\"line\">    <span class=\"comment\">// let res =stat.isFile()//判断是否是文件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res =stat.isDirectory()<span class=\"comment\">//判断是否是文件夹</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除非空文件夹</span></span><br><span class=\"line\"><span class=\"comment\">// 先把目录里文件删除-&gt;删除空目录</span></span><br><span class=\"line\">removeDir(<span class=\"string\">'test1'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeDir</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data=fs.readdirSync(path)</span><br><span class=\"line\">    data.forEach(<span class=\"function\"><span class=\"params\">v</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//是文件直接删除    目录继续查找</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;path&#125;</span>/<span class=\"subst\">$&#123;v&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> stat=fs.statSync(url)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stat.isFile())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 文件 删除</span></span><br><span class=\"line\">            fs.unlinkSync(url)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//目录 继续查找</span></span><br><span class=\"line\">            removeDir(url)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.rmdirSync(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"从零开始进阶全栈之数据库(二)","date":"2021-09-15T13:22:51.000Z","description":null,"_content":"\n本篇主要介绍nodejs中的orm框架 ---> Sequelize\n\n<!-- more -->\n\n# 概述\n\n基于Promise的ORM(Object Relation Mapping)，是一种数据库中间件支持多种数据库、事务、关联等\n\n> 中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功\n能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。目前，它并没有很严格的定义，但是普遍接受IDC的定义：中间件是一种独立的系统软件服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。从这个意义上可以用一个等式来表示中间件：中间件=平台+通信，这也就限定了只有用于分布式系统中才能叫中间件，同时也把它与支撑软件和实用软件区分开来。\n\n# 安装\n\n```shell\nnpm i sequelize mysql2 -S\n```\n\n# orm和sql的对照关系\n\n| sql | orm |\n|  ----  | ----  |\n| select | findAll(`查询多条`),findOne(`获取第一个条目`),findByPk(`findById不支持了`),findOrCreate(`查询,不存在就新建一个`),findAndCountAll(`分页查询/查询多条并统计数量`) |\n| update | update |\n| insert | create |\n| delete | destroy |\n\n# 数据类型\n\n| orm | sql | \n|  ----  | ----  |\n| Sequelize.STRING | VARCHAR(255) |\n| Sequelize.STRING(1234) | VARCHAR(1234) |\n| Sequelize.TEXT | TEXT |\n| Sequelize.TEXT('tiny') | TINYTEXT |\n| Sequelize.CITEXT | CITEXT  仅 PostgreSQL 和 SQLite. |\n| Sequelize.TSVECTOR | TSVECTOR  仅 PostgreSQL. |\n| Sequelize.BOOLEAN | TINYINT(1) |\n| Sequelize.INTEGER | INTEGER |\n| Sequelize.BIGINT | BIGINT |\n| Sequelize.BIGINT(11) | BIGINT(11) |\n| Sequelize.FLOAT | FLOAT |\n| Sequelize.FLOAT(11) | FLOAT(11) |\n| Sequelize.FLOAT(11, 10) | FLOAT(11,10) |\n| Sequelize.REAL | REAL  仅 PostgreSQL. |\n| Sequelize.REAL(11) | REAL(11)  仅 PostgreSQL. |\n| Sequelize.REAL(11, 12) | REAL(11,12) 仅 PostgreSQL. |\n| Sequelize.DOUBLE | DOUBLE |\n| Sequelize.DOUBLE(11) | DOUBLE(11) |\n| Sequelize.DOUBLE(11, 10) | DOUBLE(11,10) |\n| Sequelize.DATE | DATETIME 适用于 mysql / sqlite, 带时区的TIMESTAMP 适用于 postgres |\n| Sequelize.DATE(6) | DATETIME(6) 适用于 mysql 5.6.4+. 支持6位精度的小数秒 |\n| Sequelize.DATEONLY | 不带时间的 DATE |\n\n\n# 前期准备\n\n1. 建立连接\n```js\nconst Sequelize = require('sequelize')\nconst sequelize = new Sequelize(db.database, db.user, db.password, { //表名 用户名 密码\n    host: db.host, //地址\n    port: db.port, //端口\n    dialect: 'mysql', //数据库类型：'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql'\n    pool: { // 连接池配置\n        max: 5,\n        min: 0,\n        acquire: 30000,\n        idle: 10000,\n    },\n    timezone: '+08:00' //时区转换\n})\n```\n\n2. 定义模型\n```js\nconst User = sequelize.define('user',{\n    id: {\n        type: Sequelize.STRING(255),\n        primaryKey: true, //主键\n        autoIncrement: true,  // 自增长\n        allowNull:false  \n    },\n    name: {\n        type: Sequelize.STRING,\n        defaultValue: 'name1', //设置默认值\n        comment: \"姓名\"  //注释\n    }\n    role: Sequelize.INTEGER(11),\n})\n```\n\n3. 同步数据库\n```js\n// 严重：force := true 会强制删除表及数据后重建,请一定慎用！！！\nUser.sync({ force: false }).then(() => {});\n\n// 强制同步：创建表之前先删除已存在的表\nUser.sync({ force: true }).then(() => {});\n\n```\n\n4. 避免自动生成时间戳字段\n```js\nconst User = sequelize.define('user',{},{\n    timestamps:false\n})\n```\n\n5. 指定表名\n- freezeTableName:true  \n- tableName:'xxx' \n\n> 前者以modelName作为表名，后者则按其值作为表名\n> 蛇形命名 underscored:true\n> 默认驼峰 命名\n\n6. 实例用法\n- 更新\n```js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\njane.name = \"Ada\";\n// 数据库中的名称仍然是 \"Jane\"\nawait jane.save();\n// 现在该名称已在数据库中更新为 \"Ada\"！\n```\n- 删除\n```js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\nawait jane.destroy();\n// 现在该条目已从数据库中删除\n```\n- 重载\n```js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\njane.name = \"Ada\";\n// 数据库中的名称依然是 \"Jane\"\nawait jane.reload();\nconsole.log(jane.name); // \"Jane\"\n```\n> reload 调用生成一个 SELECT 查询,以从数据库中获取最新数据.\n\n7. UUID\n```js\nid: {\n    type: Sequelize.UUID,\n    primaryKey: true, //主键\n    autoIncrement: true,  // 自增长\n    allowNull:false,\n    defaultValue: Sequelize.UUIDV1,\n}\n```\n\n8. Getters & Setters\n\n```js\n// 定义为属性的一部分\nname: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    get() { \n        const fname = this.getDataValue(\"name\");\n        const price = this.getDataValue(\"price\");\n        const stock = this.getDataValue(\"stock\"); \n        return `${fname}(价格：￥${price} 库存：${stock}kg)`;\n    }\n}\n// 定义为模型选项 options中\n{\n    getterMethods: {\n        amount() {\n            return this.getDataValue(\"stock\") + \"kg\";\n        }\n    }, \n    setterMethods: {\n        amount(val) {\n            const idx = val.indexOf('kg');\n            const v = val.slice(0, idx);\n            this.setDataValue('stock', v);\n        }\n    }\n}\n// 通过模型实例触发setterMethods\nFruit.findAll().then(fruits => {\n    console.log(JSON.stringify(fruits));\n     // 修改amount，触发setterMethods\n    fruits[0].amount = '150kg'; \n    fruits[0].save(); \n});\n\n```\n\n\n# 基本增删改查\n\n1. 增\n```js\nconst res = User.create({\n    name:\"joker\",\n    role:1\n})\nconsoole.log('create',res)\n```\n\n2. 改\n```js\nconst res = User.update(\n    {role:2},\n    {where:{id:1}}\n)\nconsoole.log('update',res)\n```\n\n3. 查\n    - 单条\n    ```js\n    User.findOne({ \n    attributes: ['id', 'name', 'role'], // 指定需要返回的字段\n    where: {\n        id: id\n    }\n    }).then(result => {\n        console.log(result)\n    }).catch(err => {\n        console.log(err)\n    });\n    ```\n    - 多条\n    ```js\n    const Op = Sequelize.Op\n\n    const res = User.findAll(\n        {where:{role:{[Op.lt]:3,[Op.gt]:1}}}\n    )\n    consoole.log('findAll',res)\n    ```\n4. 删\n    - 方式1\n    ```js\n    User.destroy({\n        where: {\n            id: 1\n        }\n    }).then(result => {\n        console.log(result)\n    }).catch(err => {\n        console.log(err)\n    });\n    ```\n    - 方式2\n    ```js\n    User.findOne({\n        where: {\n            id: 1\n        }\n    }).then(result => {\n    result.destroy()\n    }).catch(err => {\n        console.log(err)\n    });\n    ```\n\n\n# 进阶用法\n\n## 查询特定属性\n\n```js\nModel.findAll({\n  attributes: ['foo', 'bar']\n});\n```\n可以使用嵌套数组来**重命名**属性\n```js\nModel.findAll({\n  attributes: ['foo', ['bar', 'baz'], 'qux']\n});\n```\n添加聚合\n```js\n// 获取帽子数量\nModel.findAll({\n  attributes: {\n    include: [\n      [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']\n    ]\n  }\n});\n```\n\n## 排除某些属性\n\n```js\nModel.findAll({\n  attributes: { exclude: ['baz'] }\n});\n```\n\n## 分页查询\n\n```js\nModel.findAndCountAll({\n    limit:10,//每页10条\n    offset:x*10,//第x页*每页个数\n    where:{}\n});\n```\n\n## 查询,不存在就新建一个\n\n```js\nModel.findOrCreate({\n    where: {},\n    defaults: {}\n})\n```\n\n## 批量新增\n\n```js\nconst data = [{id: 1, name: '张三'}, {id: 1, name: '李四'}]\nModel.bulkCreate(data, {\n    raw: true,\n}).then(res => res)\n```\n\n## 排序\n\n```js\nModel.findAll({\n    order:[\n        ['id','DESC']\n    ]\n})\n```\n\n> DESC表示降序,默认ASC升序\n> [更多用法](https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84)\n\n## 实用方法\n\n- count\n```js\nconst num = await User.count({\n  where: {\n    age: {\n      [Op.gt]: 25\n    }\n  }\n});\n// 统计年龄大于25的人数\n```\n\n- max, min\n```js\nawait User.max('age'); // 最大年龄\nawait User.min('age'); // 最小年龄\nawait User.min('age', { where: { age: { [Op.gt]: 5 } } }); // 大于五岁的最小年龄\n```\n\n- sum\n```js\nawait User.sum('age'); // 年龄总和\nawait User.sum('age', { where: { age: { [Op.gt]: 5 } } }); // 大于五岁的年龄总和\n```\n\n# 关联查询\n\n## 一对一\n\n```js\nModelA.belongsTo(ModelB,{\n    // onDelete: 'RESTRICT',  // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL\n    // onUpdate: 'RESTRICT', // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL\n    // 一对一关联的默认值, ON DELETE 为 SET NULL 而 ON UPDATE 为 CASCADE\n    // foreignKey: 'aId',\n    // as:\"mobelb\"\n})\nModelB.hasOne(ModelA,{\n    // foreignKey: 'aId',\n    // as:\"mobela\"\n})\n\n// 使用\nModelA.findAll({\n    where:{},\n    include:{\n        model: ModelB,\n        as: 'mobelb'\n        where: {}，\n        required: false \n    }\n})\n// 或\nModelA.findAll({\n    where:{\n        '$mobelb.id$': { // 跨表查询\n          [Sequelize.Op.substring]: ''\n        }\n    },\n    include: [\n        'mobelb'\n    ]\n})\n\n```\n\n\n## 一对多\n\n```js\nModelA.belongsTo(ModelB)\nModelB.hasMany(ModelA)\n```\n\n## 多对多\n\n```js\nModelA.belongToMany(ModelB)\nModelB.hasMany(ModelA)\n```\n\n# 常用符号运算符\n\n```js\n[Op.eq]: 3,                              // = 3\n[Op.ne]: 20,                             // != 20\n[Op.is]: null,                           // IS NULL\n[Op.not]: true,                          // IS NOT TRUE\n[Op.or]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n// 使用方言特定的列标识符 (以下示例中使用 PG):\n[Op.col]: 'user.organization_id',        // = \"user\".\"organization_id\"\n// 数字比较\n[Op.gt]: 6,                              // > 6\n[Op.gte]: 6,                             // >= 6\n[Op.lt]: 10,                             // < 10\n[Op.lte]: 10,                            // <= 10\n[Op.between]: [6, 10],                   // BETWEEN 6 AND 10\n[Op.notBetween]: [11, 15],               // NOT BETWEEN 11 AND 15\n// 其它操作符\n[Op.all]: sequelize.literal('SELECT 1'), // > ALL (SELECT 1)\n[Op.in]: [1, 2],                         // IN [1, 2]\n[Op.notIn]: [1, 2],                      // NOT IN [1, 2]\n[Op.like]: '%hat',                       // LIKE '%hat'\n[Op.notLike]: '%hat',                    // NOT LIKE '%hat'\n[Op.startsWith]: 'hat',                  // LIKE 'hat%'\n[Op.endsWith]: 'hat',                    // LIKE '%hat'\n[Op.substring]: 'hat',                   // LIKE '%hat%'\n[Op.iLike]: '%hat',                      // ILIKE '%hat' (不区分大小写) (仅 PG)\n[Op.notILike]: '%hat',                   // NOT ILIKE '%hat'  (仅 PG)\n[Op.regexp]: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (仅 MySQL/PG)\n[Op.notRegexp]: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (仅 MySQL/PG)\n[Op.iRegexp]: '^[h|a|t]',                // ~* '^[h|a|t]' (仅 PG)\n[Op.notIRegexp]: '^[h|a|t]',             // !~* '^[h|a|t]' (仅 PG)\n[Op.any]: [2, 3],                        // ANY ARRAY[2, 3]::INTEGER (仅 PG)\n[Op.match]: Sequelize.fn('to_tsquery', 'fat & rat') // 匹配文本搜索字符串 'fat' 和 'rat' (仅 PG)\n// 在 Postgres 中, Op.like/Op.iLike/Op.notLike 可以结合 Op.any 使用:\n[Op.like]: { [Op.any]: ['cat', 'hat'] }  // LIKE ANY ARRAY['cat', 'hat']\n```\n\n# 一些踩过的坑\n\n## 在查询结果中添加自定义属性\n\n```js\nrlt.rows[i] =rlt.rows[i].toJSON()  // 先进行toJSON 操作  然后才能赋值\nrlt.rows[i].xxx = 'xxx'\n\n//不这么做的表现，当然 返回给前端的数据中也没有此字段\n\nconsole.log(rlt.rows[i]) // 读取不到 midWayPortsArr \nconsole.log(rlt.rows[i].xxx) // 可以获取到\nconsole.log(rlt.rows[i].hasOwnProperty('xxx')) // true\n\n\nconsole.log(rlt.rows[i]) // 读取不到 midWayPortsArr \nconsole.log(rlt.rows[i].midWayPortsArr) // 可以获取到\nconsole.log(rlt.rows[i].hasOwnProperty('midWayPortsArr')) // true\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/09/从零开始进阶全栈之数据库(二).md","raw":"---\ntitle: 从零开始进阶全栈之数据库(二)\ndate: 2021-09-15 21:22:51\ntags:\n    - 全栈之路\n    - 数据库\ncategories:\n    - 数据库\ndescription:\n---\n\n本篇主要介绍nodejs中的orm框架 ---> Sequelize\n\n<!-- more -->\n\n# 概述\n\n基于Promise的ORM(Object Relation Mapping)，是一种数据库中间件支持多种数据库、事务、关联等\n\n> 中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功\n能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。目前，它并没有很严格的定义，但是普遍接受IDC的定义：中间件是一种独立的系统软件服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。从这个意义上可以用一个等式来表示中间件：中间件=平台+通信，这也就限定了只有用于分布式系统中才能叫中间件，同时也把它与支撑软件和实用软件区分开来。\n\n# 安装\n\n```shell\nnpm i sequelize mysql2 -S\n```\n\n# orm和sql的对照关系\n\n| sql | orm |\n|  ----  | ----  |\n| select | findAll(`查询多条`),findOne(`获取第一个条目`),findByPk(`findById不支持了`),findOrCreate(`查询,不存在就新建一个`),findAndCountAll(`分页查询/查询多条并统计数量`) |\n| update | update |\n| insert | create |\n| delete | destroy |\n\n# 数据类型\n\n| orm | sql | \n|  ----  | ----  |\n| Sequelize.STRING | VARCHAR(255) |\n| Sequelize.STRING(1234) | VARCHAR(1234) |\n| Sequelize.TEXT | TEXT |\n| Sequelize.TEXT('tiny') | TINYTEXT |\n| Sequelize.CITEXT | CITEXT  仅 PostgreSQL 和 SQLite. |\n| Sequelize.TSVECTOR | TSVECTOR  仅 PostgreSQL. |\n| Sequelize.BOOLEAN | TINYINT(1) |\n| Sequelize.INTEGER | INTEGER |\n| Sequelize.BIGINT | BIGINT |\n| Sequelize.BIGINT(11) | BIGINT(11) |\n| Sequelize.FLOAT | FLOAT |\n| Sequelize.FLOAT(11) | FLOAT(11) |\n| Sequelize.FLOAT(11, 10) | FLOAT(11,10) |\n| Sequelize.REAL | REAL  仅 PostgreSQL. |\n| Sequelize.REAL(11) | REAL(11)  仅 PostgreSQL. |\n| Sequelize.REAL(11, 12) | REAL(11,12) 仅 PostgreSQL. |\n| Sequelize.DOUBLE | DOUBLE |\n| Sequelize.DOUBLE(11) | DOUBLE(11) |\n| Sequelize.DOUBLE(11, 10) | DOUBLE(11,10) |\n| Sequelize.DATE | DATETIME 适用于 mysql / sqlite, 带时区的TIMESTAMP 适用于 postgres |\n| Sequelize.DATE(6) | DATETIME(6) 适用于 mysql 5.6.4+. 支持6位精度的小数秒 |\n| Sequelize.DATEONLY | 不带时间的 DATE |\n\n\n# 前期准备\n\n1. 建立连接\n```js\nconst Sequelize = require('sequelize')\nconst sequelize = new Sequelize(db.database, db.user, db.password, { //表名 用户名 密码\n    host: db.host, //地址\n    port: db.port, //端口\n    dialect: 'mysql', //数据库类型：'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql'\n    pool: { // 连接池配置\n        max: 5,\n        min: 0,\n        acquire: 30000,\n        idle: 10000,\n    },\n    timezone: '+08:00' //时区转换\n})\n```\n\n2. 定义模型\n```js\nconst User = sequelize.define('user',{\n    id: {\n        type: Sequelize.STRING(255),\n        primaryKey: true, //主键\n        autoIncrement: true,  // 自增长\n        allowNull:false  \n    },\n    name: {\n        type: Sequelize.STRING,\n        defaultValue: 'name1', //设置默认值\n        comment: \"姓名\"  //注释\n    }\n    role: Sequelize.INTEGER(11),\n})\n```\n\n3. 同步数据库\n```js\n// 严重：force := true 会强制删除表及数据后重建,请一定慎用！！！\nUser.sync({ force: false }).then(() => {});\n\n// 强制同步：创建表之前先删除已存在的表\nUser.sync({ force: true }).then(() => {});\n\n```\n\n4. 避免自动生成时间戳字段\n```js\nconst User = sequelize.define('user',{},{\n    timestamps:false\n})\n```\n\n5. 指定表名\n- freezeTableName:true  \n- tableName:'xxx' \n\n> 前者以modelName作为表名，后者则按其值作为表名\n> 蛇形命名 underscored:true\n> 默认驼峰 命名\n\n6. 实例用法\n- 更新\n```js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\njane.name = \"Ada\";\n// 数据库中的名称仍然是 \"Jane\"\nawait jane.save();\n// 现在该名称已在数据库中更新为 \"Ada\"！\n```\n- 删除\n```js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\nawait jane.destroy();\n// 现在该条目已从数据库中删除\n```\n- 重载\n```js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\njane.name = \"Ada\";\n// 数据库中的名称依然是 \"Jane\"\nawait jane.reload();\nconsole.log(jane.name); // \"Jane\"\n```\n> reload 调用生成一个 SELECT 查询,以从数据库中获取最新数据.\n\n7. UUID\n```js\nid: {\n    type: Sequelize.UUID,\n    primaryKey: true, //主键\n    autoIncrement: true,  // 自增长\n    allowNull:false,\n    defaultValue: Sequelize.UUIDV1,\n}\n```\n\n8. Getters & Setters\n\n```js\n// 定义为属性的一部分\nname: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    get() { \n        const fname = this.getDataValue(\"name\");\n        const price = this.getDataValue(\"price\");\n        const stock = this.getDataValue(\"stock\"); \n        return `${fname}(价格：￥${price} 库存：${stock}kg)`;\n    }\n}\n// 定义为模型选项 options中\n{\n    getterMethods: {\n        amount() {\n            return this.getDataValue(\"stock\") + \"kg\";\n        }\n    }, \n    setterMethods: {\n        amount(val) {\n            const idx = val.indexOf('kg');\n            const v = val.slice(0, idx);\n            this.setDataValue('stock', v);\n        }\n    }\n}\n// 通过模型实例触发setterMethods\nFruit.findAll().then(fruits => {\n    console.log(JSON.stringify(fruits));\n     // 修改amount，触发setterMethods\n    fruits[0].amount = '150kg'; \n    fruits[0].save(); \n});\n\n```\n\n\n# 基本增删改查\n\n1. 增\n```js\nconst res = User.create({\n    name:\"joker\",\n    role:1\n})\nconsoole.log('create',res)\n```\n\n2. 改\n```js\nconst res = User.update(\n    {role:2},\n    {where:{id:1}}\n)\nconsoole.log('update',res)\n```\n\n3. 查\n    - 单条\n    ```js\n    User.findOne({ \n    attributes: ['id', 'name', 'role'], // 指定需要返回的字段\n    where: {\n        id: id\n    }\n    }).then(result => {\n        console.log(result)\n    }).catch(err => {\n        console.log(err)\n    });\n    ```\n    - 多条\n    ```js\n    const Op = Sequelize.Op\n\n    const res = User.findAll(\n        {where:{role:{[Op.lt]:3,[Op.gt]:1}}}\n    )\n    consoole.log('findAll',res)\n    ```\n4. 删\n    - 方式1\n    ```js\n    User.destroy({\n        where: {\n            id: 1\n        }\n    }).then(result => {\n        console.log(result)\n    }).catch(err => {\n        console.log(err)\n    });\n    ```\n    - 方式2\n    ```js\n    User.findOne({\n        where: {\n            id: 1\n        }\n    }).then(result => {\n    result.destroy()\n    }).catch(err => {\n        console.log(err)\n    });\n    ```\n\n\n# 进阶用法\n\n## 查询特定属性\n\n```js\nModel.findAll({\n  attributes: ['foo', 'bar']\n});\n```\n可以使用嵌套数组来**重命名**属性\n```js\nModel.findAll({\n  attributes: ['foo', ['bar', 'baz'], 'qux']\n});\n```\n添加聚合\n```js\n// 获取帽子数量\nModel.findAll({\n  attributes: {\n    include: [\n      [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']\n    ]\n  }\n});\n```\n\n## 排除某些属性\n\n```js\nModel.findAll({\n  attributes: { exclude: ['baz'] }\n});\n```\n\n## 分页查询\n\n```js\nModel.findAndCountAll({\n    limit:10,//每页10条\n    offset:x*10,//第x页*每页个数\n    where:{}\n});\n```\n\n## 查询,不存在就新建一个\n\n```js\nModel.findOrCreate({\n    where: {},\n    defaults: {}\n})\n```\n\n## 批量新增\n\n```js\nconst data = [{id: 1, name: '张三'}, {id: 1, name: '李四'}]\nModel.bulkCreate(data, {\n    raw: true,\n}).then(res => res)\n```\n\n## 排序\n\n```js\nModel.findAll({\n    order:[\n        ['id','DESC']\n    ]\n})\n```\n\n> DESC表示降序,默认ASC升序\n> [更多用法](https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84)\n\n## 实用方法\n\n- count\n```js\nconst num = await User.count({\n  where: {\n    age: {\n      [Op.gt]: 25\n    }\n  }\n});\n// 统计年龄大于25的人数\n```\n\n- max, min\n```js\nawait User.max('age'); // 最大年龄\nawait User.min('age'); // 最小年龄\nawait User.min('age', { where: { age: { [Op.gt]: 5 } } }); // 大于五岁的最小年龄\n```\n\n- sum\n```js\nawait User.sum('age'); // 年龄总和\nawait User.sum('age', { where: { age: { [Op.gt]: 5 } } }); // 大于五岁的年龄总和\n```\n\n# 关联查询\n\n## 一对一\n\n```js\nModelA.belongsTo(ModelB,{\n    // onDelete: 'RESTRICT',  // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL\n    // onUpdate: 'RESTRICT', // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL\n    // 一对一关联的默认值, ON DELETE 为 SET NULL 而 ON UPDATE 为 CASCADE\n    // foreignKey: 'aId',\n    // as:\"mobelb\"\n})\nModelB.hasOne(ModelA,{\n    // foreignKey: 'aId',\n    // as:\"mobela\"\n})\n\n// 使用\nModelA.findAll({\n    where:{},\n    include:{\n        model: ModelB,\n        as: 'mobelb'\n        where: {}，\n        required: false \n    }\n})\n// 或\nModelA.findAll({\n    where:{\n        '$mobelb.id$': { // 跨表查询\n          [Sequelize.Op.substring]: ''\n        }\n    },\n    include: [\n        'mobelb'\n    ]\n})\n\n```\n\n\n## 一对多\n\n```js\nModelA.belongsTo(ModelB)\nModelB.hasMany(ModelA)\n```\n\n## 多对多\n\n```js\nModelA.belongToMany(ModelB)\nModelB.hasMany(ModelA)\n```\n\n# 常用符号运算符\n\n```js\n[Op.eq]: 3,                              // = 3\n[Op.ne]: 20,                             // != 20\n[Op.is]: null,                           // IS NULL\n[Op.not]: true,                          // IS NOT TRUE\n[Op.or]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n// 使用方言特定的列标识符 (以下示例中使用 PG):\n[Op.col]: 'user.organization_id',        // = \"user\".\"organization_id\"\n// 数字比较\n[Op.gt]: 6,                              // > 6\n[Op.gte]: 6,                             // >= 6\n[Op.lt]: 10,                             // < 10\n[Op.lte]: 10,                            // <= 10\n[Op.between]: [6, 10],                   // BETWEEN 6 AND 10\n[Op.notBetween]: [11, 15],               // NOT BETWEEN 11 AND 15\n// 其它操作符\n[Op.all]: sequelize.literal('SELECT 1'), // > ALL (SELECT 1)\n[Op.in]: [1, 2],                         // IN [1, 2]\n[Op.notIn]: [1, 2],                      // NOT IN [1, 2]\n[Op.like]: '%hat',                       // LIKE '%hat'\n[Op.notLike]: '%hat',                    // NOT LIKE '%hat'\n[Op.startsWith]: 'hat',                  // LIKE 'hat%'\n[Op.endsWith]: 'hat',                    // LIKE '%hat'\n[Op.substring]: 'hat',                   // LIKE '%hat%'\n[Op.iLike]: '%hat',                      // ILIKE '%hat' (不区分大小写) (仅 PG)\n[Op.notILike]: '%hat',                   // NOT ILIKE '%hat'  (仅 PG)\n[Op.regexp]: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (仅 MySQL/PG)\n[Op.notRegexp]: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (仅 MySQL/PG)\n[Op.iRegexp]: '^[h|a|t]',                // ~* '^[h|a|t]' (仅 PG)\n[Op.notIRegexp]: '^[h|a|t]',             // !~* '^[h|a|t]' (仅 PG)\n[Op.any]: [2, 3],                        // ANY ARRAY[2, 3]::INTEGER (仅 PG)\n[Op.match]: Sequelize.fn('to_tsquery', 'fat & rat') // 匹配文本搜索字符串 'fat' 和 'rat' (仅 PG)\n// 在 Postgres 中, Op.like/Op.iLike/Op.notLike 可以结合 Op.any 使用:\n[Op.like]: { [Op.any]: ['cat', 'hat'] }  // LIKE ANY ARRAY['cat', 'hat']\n```\n\n# 一些踩过的坑\n\n## 在查询结果中添加自定义属性\n\n```js\nrlt.rows[i] =rlt.rows[i].toJSON()  // 先进行toJSON 操作  然后才能赋值\nrlt.rows[i].xxx = 'xxx'\n\n//不这么做的表现，当然 返回给前端的数据中也没有此字段\n\nconsole.log(rlt.rows[i]) // 读取不到 midWayPortsArr \nconsole.log(rlt.rows[i].xxx) // 可以获取到\nconsole.log(rlt.rows[i].hasOwnProperty('xxx')) // true\n\n\nconsole.log(rlt.rows[i]) // 读取不到 midWayPortsArr \nconsole.log(rlt.rows[i].midWayPortsArr) // 可以获取到\nconsole.log(rlt.rows[i].hasOwnProperty('midWayPortsArr')) // true\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/09/从零开始进阶全栈之数据库(二)","published":1,"updated":"2021-09-18T13:57:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53y003u1r0qh9kmhoq8","content":"<p>本篇主要介绍nodejs中的orm框架 —&gt; Sequelize</p>\n<a id=\"more\"></a>\n\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>基于Promise的ORM(Object Relation Mapping)，是一种数据库中间件支持多种数据库、事务、关联等</p>\n<blockquote>\n<p>中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功<br>能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。目前，它并没有很严格的定义，但是普遍接受IDC的定义：中间件是一种独立的系统软件服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。从这个意义上可以用一个等式来表示中间件：中间件=平台+通信，这也就限定了只有用于分布式系统中才能叫中间件，同时也把它与支撑软件和实用软件区分开来。</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sequelize mysql2 -S</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"orm和sql的对照关系\"><a href=\"#orm和sql的对照关系\" class=\"headerlink\" title=\"orm和sql的对照关系\"></a>orm和sql的对照关系</h1><table>\n<thead>\n<tr>\n<th>sql</th>\n<th>orm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>select</td>\n<td>findAll(<code>查询多条</code>),findOne(<code>获取第一个条目</code>),findByPk(<code>findById不支持了</code>),findOrCreate(<code>查询,不存在就新建一个</code>),findAndCountAll(<code>分页查询/查询多条并统计数量</code>)</td>\n</tr>\n<tr>\n<td>update</td>\n<td>update</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>create</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>destroy</td>\n</tr>\n</tbody></table>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><table>\n<thead>\n<tr>\n<th>orm</th>\n<th>sql</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Sequelize.STRING</td>\n<td>VARCHAR(255)</td>\n</tr>\n<tr>\n<td>Sequelize.STRING(1234)</td>\n<td>VARCHAR(1234)</td>\n</tr>\n<tr>\n<td>Sequelize.TEXT</td>\n<td>TEXT</td>\n</tr>\n<tr>\n<td>Sequelize.TEXT(‘tiny’)</td>\n<td>TINYTEXT</td>\n</tr>\n<tr>\n<td>Sequelize.CITEXT</td>\n<td>CITEXT  仅 PostgreSQL 和 SQLite.</td>\n</tr>\n<tr>\n<td>Sequelize.TSVECTOR</td>\n<td>TSVECTOR  仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.BOOLEAN</td>\n<td>TINYINT(1)</td>\n</tr>\n<tr>\n<td>Sequelize.INTEGER</td>\n<td>INTEGER</td>\n</tr>\n<tr>\n<td>Sequelize.BIGINT</td>\n<td>BIGINT</td>\n</tr>\n<tr>\n<td>Sequelize.BIGINT(11)</td>\n<td>BIGINT(11)</td>\n</tr>\n<tr>\n<td>Sequelize.FLOAT</td>\n<td>FLOAT</td>\n</tr>\n<tr>\n<td>Sequelize.FLOAT(11)</td>\n<td>FLOAT(11)</td>\n</tr>\n<tr>\n<td>Sequelize.FLOAT(11, 10)</td>\n<td>FLOAT(11,10)</td>\n</tr>\n<tr>\n<td>Sequelize.REAL</td>\n<td>REAL  仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.REAL(11)</td>\n<td>REAL(11)  仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.REAL(11, 12)</td>\n<td>REAL(11,12) 仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.DOUBLE</td>\n<td>DOUBLE</td>\n</tr>\n<tr>\n<td>Sequelize.DOUBLE(11)</td>\n<td>DOUBLE(11)</td>\n</tr>\n<tr>\n<td>Sequelize.DOUBLE(11, 10)</td>\n<td>DOUBLE(11,10)</td>\n</tr>\n<tr>\n<td>Sequelize.DATE</td>\n<td>DATETIME 适用于 mysql / sqlite, 带时区的TIMESTAMP 适用于 postgres</td>\n</tr>\n<tr>\n<td>Sequelize.DATE(6)</td>\n<td>DATETIME(6) 适用于 mysql 5.6.4+. 支持6位精度的小数秒</td>\n</tr>\n<tr>\n<td>Sequelize.DATEONLY</td>\n<td>不带时间的 DATE</td>\n</tr>\n</tbody></table>\n<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><ol>\n<li><p>建立连接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">'sequelize'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(db.database, db.user, db.password, &#123; <span class=\"comment\">//表名 用户名 密码</span></span><br><span class=\"line\">    host: db.host, <span class=\"comment\">//地址</span></span><br><span class=\"line\">    port: db.port, <span class=\"comment\">//端口</span></span><br><span class=\"line\">    dialect: <span class=\"string\">'mysql'</span>, <span class=\"comment\">//数据库类型：'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql'</span></span><br><span class=\"line\">    pool: &#123; <span class=\"comment\">// 连接池配置</span></span><br><span class=\"line\">        max: <span class=\"number\">5</span>,</span><br><span class=\"line\">        min: <span class=\"number\">0</span>,</span><br><span class=\"line\">        acquire: <span class=\"number\">30000</span>,</span><br><span class=\"line\">        idle: <span class=\"number\">10000</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    timezone: <span class=\"string\">'+08:00'</span> <span class=\"comment\">//时区转换</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义模型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>,&#123;</span><br><span class=\"line\">    id: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">255</span>),</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>, <span class=\"comment\">//主键</span></span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,  <span class=\"comment\">// 自增长</span></span><br><span class=\"line\">        allowNull:<span class=\"literal\">false</span>  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">'name1'</span>, <span class=\"comment\">//设置默认值</span></span><br><span class=\"line\">        comment: <span class=\"string\">\"姓名\"</span>  <span class=\"comment\">//注释</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    role: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 严重：force := true 会强制删除表及数据后重建,请一定慎用！！！</span></span><br><span class=\"line\">User.sync(&#123; <span class=\"attr\">force</span>: <span class=\"literal\">false</span> &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强制同步：创建表之前先删除已存在的表</span></span><br><span class=\"line\">User.sync(&#123; <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免自动生成时间戳字段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>,&#123;&#125;,&#123;</span><br><span class=\"line\">    timestamps:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定表名</p>\n</li>\n</ol>\n<ul>\n<li>freezeTableName:true  </li>\n<li>tableName:’xxx’ </li>\n</ul>\n<blockquote>\n<p>前者以modelName作为表名，后者则按其值作为表名<br>蛇形命名 underscored:true<br>默认驼峰 命名</p>\n</blockquote>\n<ol start=\"6\">\n<li>实例用法</li>\n</ol>\n<ul>\n<li>更新<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">await</span> User.create(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br><span class=\"line\">jane.name = <span class=\"string\">\"Ada\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 数据库中的名称仍然是 \"Jane\"</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> jane.save();</span><br><span class=\"line\"><span class=\"comment\">// 现在该名称已在数据库中更新为 \"Ada\"！</span></span><br></pre></td></tr></table></figure></li>\n<li>删除<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">await</span> User.create(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> jane.destroy();</span><br><span class=\"line\"><span class=\"comment\">// 现在该条目已从数据库中删除</span></span><br></pre></td></tr></table></figure></li>\n<li>重载<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">await</span> User.create(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br><span class=\"line\">jane.name = <span class=\"string\">\"Ada\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 数据库中的名称依然是 \"Jane\"</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> jane.reload();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>reload 调用生成一个 SELECT 查询,以从数据库中获取最新数据.</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>UUID</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id: &#123;</span><br><span class=\"line\">    type: Sequelize.UUID,</span><br><span class=\"line\">    primaryKey: <span class=\"literal\">true</span>, <span class=\"comment\">//主键</span></span><br><span class=\"line\">    autoIncrement: <span class=\"literal\">true</span>,  <span class=\"comment\">// 自增长</span></span><br><span class=\"line\">    allowNull:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    defaultValue: Sequelize.UUIDV1,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Getters &amp; Setters</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义为属性的一部分</span></span><br><span class=\"line\">name: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123; </span><br><span class=\"line\">        <span class=\"keyword\">const</span> fname = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> price = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"price\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> stock = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"stock\"</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;fname&#125;</span>(价格：￥<span class=\"subst\">$&#123;price&#125;</span> 库存：<span class=\"subst\">$&#123;stock&#125;</span>kg)`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义为模型选项 options中</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    getterMethods: &#123;</span><br><span class=\"line\">        amount() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"stock\"</span>) + <span class=\"string\">\"kg\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    setterMethods: &#123;</span><br><span class=\"line\">        amount(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> idx = val.indexOf(<span class=\"string\">'kg'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> v = val.slice(<span class=\"number\">0</span>, idx);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setDataValue(<span class=\"string\">'stock'</span>, v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过模型实例触发setterMethods</span></span><br><span class=\"line\">Fruit.findAll().then(<span class=\"function\"><span class=\"params\">fruits</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(fruits));</span><br><span class=\"line\">     <span class=\"comment\">// 修改amount，触发setterMethods</span></span><br><span class=\"line\">    fruits[<span class=\"number\">0</span>].amount = <span class=\"string\">'150kg'</span>; </span><br><span class=\"line\">    fruits[<span class=\"number\">0</span>].save(); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"基本增删改查\"><a href=\"#基本增删改查\" class=\"headerlink\" title=\"基本增删改查\"></a>基本增删改查</h1><ol>\n<li><p>增</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = User.create(&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"joker\"</span>,</span><br><span class=\"line\">    role:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">consoole.log(<span class=\"string\">'create'</span>,res)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = User.update(</span><br><span class=\"line\">    &#123;<span class=\"attr\">role</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">where</span>:&#123;<span class=\"attr\">id</span>:<span class=\"number\">1</span>&#125;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">consoole.log(<span class=\"string\">'update'</span>,res)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查</p>\n<ul>\n<li>单条<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123; </span><br><span class=\"line\">attributes: [<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>, <span class=\"string\">'role'</span>], <span class=\"comment\">// 指定需要返回的字段</span></span><br><span class=\"line\">where: &#123;</span><br><span class=\"line\">    id: id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>多条<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Op = Sequelize.Op</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = User.findAll(</span><br><span class=\"line\">    &#123;<span class=\"attr\">where</span>:&#123;<span class=\"attr\">role</span>:&#123;[Op.lt]:<span class=\"number\">3</span>,[Op.gt]:<span class=\"number\">1</span>&#125;&#125;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">consoole.log(<span class=\"string\">'findAll'</span>,res)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>删</p>\n<ul>\n<li>方式1<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.destroy(&#123;</span><br><span class=\"line\">    where: &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>方式2<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">    where: &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">result.destroy()</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h1><h2 id=\"查询特定属性\"><a href=\"#查询特定属性\" class=\"headerlink\" title=\"查询特定属性\"></a>查询特定属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: [<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以使用嵌套数组来<strong>重命名</strong>属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: [<span class=\"string\">'foo'</span>, [<span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>], <span class=\"string\">'qux'</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>添加聚合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取帽子数量</span></span><br><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: &#123;</span><br><span class=\"line\">    include: [</span><br><span class=\"line\">      [sequelize.fn(<span class=\"string\">'COUNT'</span>, sequelize.col(<span class=\"string\">'hats'</span>)), <span class=\"string\">'n_hats'</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"排除某些属性\"><a href=\"#排除某些属性\" class=\"headerlink\" title=\"排除某些属性\"></a>排除某些属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: &#123; <span class=\"attr\">exclude</span>: [<span class=\"string\">'baz'</span>] &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAndCountAll(&#123;</span><br><span class=\"line\">    limit:<span class=\"number\">10</span>,<span class=\"comment\">//每页10条</span></span><br><span class=\"line\">    offset:x*<span class=\"number\">10</span>,<span class=\"comment\">//第x页*每页个数</span></span><br><span class=\"line\">    where:&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询-不存在就新建一个\"><a href=\"#查询-不存在就新建一个\" class=\"headerlink\" title=\"查询,不存在就新建一个\"></a>查询,不存在就新建一个</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findOrCreate(&#123;</span><br><span class=\"line\">    where: &#123;&#125;,</span><br><span class=\"line\">    defaults: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"批量新增\"><a href=\"#批量新增\" class=\"headerlink\" title=\"批量新增\"></a>批量新增</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = [&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>&#125;]</span><br><span class=\"line\">Model.bulkCreate(data, &#123;</span><br><span class=\"line\">    raw: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">    order:[</span><br><span class=\"line\">        [<span class=\"string\">'id'</span>,<span class=\"string\">'DESC'</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>DESC表示降序,默认ASC升序<br><a href=\"https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84\" target=\"_blank\" rel=\"noopener\">更多用法</a></p>\n</blockquote>\n<h2 id=\"实用方法\"><a href=\"#实用方法\" class=\"headerlink\" title=\"实用方法\"></a>实用方法</h2><ul>\n<li><p>count</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"keyword\">await</span> User.count(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">      [Op.gt]: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 统计年龄大于25的人数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>max, min</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> User.max(<span class=\"string\">'age'</span>); <span class=\"comment\">// 最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> User.min(<span class=\"string\">'age'</span>); <span class=\"comment\">// 最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> User.min(<span class=\"string\">'age'</span>, &#123; <span class=\"attr\">where</span>: &#123; <span class=\"attr\">age</span>: &#123; [Op.gt]: <span class=\"number\">5</span> &#125; &#125; &#125;); <span class=\"comment\">// 大于五岁的最小年龄</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sum</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> User.sum(<span class=\"string\">'age'</span>); <span class=\"comment\">// 年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> User.sum(<span class=\"string\">'age'</span>, &#123; <span class=\"attr\">where</span>: &#123; <span class=\"attr\">age</span>: &#123; [Op.gt]: <span class=\"number\">5</span> &#125; &#125; &#125;); <span class=\"comment\">// 大于五岁的年龄总和</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h1><h2 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelA.belongsTo(ModelB,&#123;</span><br><span class=\"line\">    <span class=\"comment\">// onDelete: 'RESTRICT',  // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL</span></span><br><span class=\"line\">    <span class=\"comment\">// onUpdate: 'RESTRICT', // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL</span></span><br><span class=\"line\">    <span class=\"comment\">// 一对一关联的默认值, ON DELETE 为 SET NULL 而 ON UPDATE 为 CASCADE</span></span><br><span class=\"line\">    <span class=\"comment\">// foreignKey: 'aId',</span></span><br><span class=\"line\">    <span class=\"comment\">// as:\"mobelb\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">ModelB.hasOne(ModelA,&#123;</span><br><span class=\"line\">    <span class=\"comment\">// foreignKey: 'aId',</span></span><br><span class=\"line\">    <span class=\"comment\">// as:\"mobela\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">ModelA.findAll(&#123;</span><br><span class=\"line\">    where:&#123;&#125;,</span><br><span class=\"line\">    include:&#123;</span><br><span class=\"line\">        model: ModelB,</span><br><span class=\"line\">        <span class=\"keyword\">as</span>: <span class=\"string\">'mobelb'</span></span><br><span class=\"line\">        where: &#123;&#125;，</span><br><span class=\"line\">        required: <span class=\"literal\">false</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">ModelA.findAll(&#123;</span><br><span class=\"line\">    where:&#123;</span><br><span class=\"line\">        <span class=\"string\">'$mobelb.id$'</span>: &#123; <span class=\"comment\">// 跨表查询</span></span><br><span class=\"line\">          [Sequelize.Op.substring]: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    include: [</span><br><span class=\"line\">        <span class=\"string\">'mobelb'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelA.belongsTo(ModelB)</span><br><span class=\"line\">ModelB.hasMany(ModelA)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelA.belongToMany(ModelB)</span><br><span class=\"line\">ModelB.hasMany(ModelA)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用符号运算符\"><a href=\"#常用符号运算符\" class=\"headerlink\" title=\"常用符号运算符\"></a>常用符号运算符</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Op.eq]: <span class=\"number\">3</span>,                              <span class=\"comment\">// = 3</span></span><br><span class=\"line\">[Op.ne]: <span class=\"number\">20</span>,                             <span class=\"comment\">// != 20</span></span><br><span class=\"line\">[Op.is]: <span class=\"literal\">null</span>,                           <span class=\"comment\">// IS NULL</span></span><br><span class=\"line\">[Op.not]: <span class=\"literal\">true</span>,                          <span class=\"comment\">// IS NOT TRUE</span></span><br><span class=\"line\">[Op.or]: [<span class=\"number\">5</span>, <span class=\"number\">6</span>],                         <span class=\"comment\">// (someAttribute = 5) OR (someAttribute = 6)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用方言特定的列标识符 (以下示例中使用 PG):</span></span><br><span class=\"line\">[Op.col]: <span class=\"string\">'user.organization_id'</span>,        <span class=\"comment\">// = \"user\".\"organization_id\"</span></span><br><span class=\"line\"><span class=\"comment\">// 数字比较</span></span><br><span class=\"line\">[Op.gt]: <span class=\"number\">6</span>,                              <span class=\"comment\">// &gt; 6</span></span><br><span class=\"line\">[Op.gte]: <span class=\"number\">6</span>,                             <span class=\"comment\">// &gt;= 6</span></span><br><span class=\"line\">[Op.lt]: <span class=\"number\">10</span>,                             <span class=\"comment\">// &lt; 10</span></span><br><span class=\"line\">[Op.lte]: <span class=\"number\">10</span>,                            <span class=\"comment\">// &lt;= 10</span></span><br><span class=\"line\">[Op.between]: [<span class=\"number\">6</span>, <span class=\"number\">10</span>],                   <span class=\"comment\">// BETWEEN 6 AND 10</span></span><br><span class=\"line\">[Op.notBetween]: [<span class=\"number\">11</span>, <span class=\"number\">15</span>],               <span class=\"comment\">// NOT BETWEEN 11 AND 15</span></span><br><span class=\"line\"><span class=\"comment\">// 其它操作符</span></span><br><span class=\"line\">[Op.all]: sequelize.literal(<span class=\"string\">'SELECT 1'</span>), <span class=\"comment\">// &gt; ALL (SELECT 1)</span></span><br><span class=\"line\">[Op.in]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],                         <span class=\"comment\">// IN [1, 2]</span></span><br><span class=\"line\">[Op.notIn]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],                      <span class=\"comment\">// NOT IN [1, 2]</span></span><br><span class=\"line\">[Op.like]: <span class=\"string\">'%hat'</span>,                       <span class=\"comment\">// LIKE '%hat'</span></span><br><span class=\"line\">[Op.notLike]: <span class=\"string\">'%hat'</span>,                    <span class=\"comment\">// NOT LIKE '%hat'</span></span><br><span class=\"line\">[Op.startsWith]: <span class=\"string\">'hat'</span>,                  <span class=\"comment\">// LIKE 'hat%'</span></span><br><span class=\"line\">[Op.endsWith]: <span class=\"string\">'hat'</span>,                    <span class=\"comment\">// LIKE '%hat'</span></span><br><span class=\"line\">[Op.substring]: <span class=\"string\">'hat'</span>,                   <span class=\"comment\">// LIKE '%hat%'</span></span><br><span class=\"line\">[Op.iLike]: <span class=\"string\">'%hat'</span>,                      <span class=\"comment\">// ILIKE '%hat' (不区分大小写) (仅 PG)</span></span><br><span class=\"line\">[Op.notILike]: <span class=\"string\">'%hat'</span>,                   <span class=\"comment\">// NOT ILIKE '%hat'  (仅 PG)</span></span><br><span class=\"line\">[Op.regexp]: <span class=\"string\">'^[h|a|t]'</span>,                 <span class=\"comment\">// REGEXP/~ '^[h|a|t]' (仅 MySQL/PG)</span></span><br><span class=\"line\">[Op.notRegexp]: <span class=\"string\">'^[h|a|t]'</span>,              <span class=\"comment\">// NOT REGEXP/!~ '^[h|a|t]' (仅 MySQL/PG)</span></span><br><span class=\"line\">[Op.iRegexp]: <span class=\"string\">'^[h|a|t]'</span>,                <span class=\"comment\">// ~* '^[h|a|t]' (仅 PG)</span></span><br><span class=\"line\">[Op.notIRegexp]: <span class=\"string\">'^[h|a|t]'</span>,             <span class=\"comment\">// !~* '^[h|a|t]' (仅 PG)</span></span><br><span class=\"line\">[Op.any]: [<span class=\"number\">2</span>, <span class=\"number\">3</span>],                        <span class=\"comment\">// ANY ARRAY[2, 3]::INTEGER (仅 PG)</span></span><br><span class=\"line\">[Op.match]: Sequelize.fn(<span class=\"string\">'to_tsquery'</span>, <span class=\"string\">'fat &amp; rat'</span>) <span class=\"comment\">// 匹配文本搜索字符串 'fat' 和 'rat' (仅 PG)</span></span><br><span class=\"line\"><span class=\"comment\">// 在 Postgres 中, Op.like/Op.iLike/Op.notLike 可以结合 Op.any 使用:</span></span><br><span class=\"line\">[Op.like]: &#123; [Op.any]: [<span class=\"string\">'cat'</span>, <span class=\"string\">'hat'</span>] &#125;  <span class=\"comment\">// LIKE ANY ARRAY['cat', 'hat']</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"一些踩过的坑\"><a href=\"#一些踩过的坑\" class=\"headerlink\" title=\"一些踩过的坑\"></a>一些踩过的坑</h1><h2 id=\"在查询结果中添加自定义属性\"><a href=\"#在查询结果中添加自定义属性\" class=\"headerlink\" title=\"在查询结果中添加自定义属性\"></a>在查询结果中添加自定义属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rlt.rows[i] =rlt.rows[i].toJSON()  <span class=\"comment\">// 先进行toJSON 操作  然后才能赋值</span></span><br><span class=\"line\">rlt.rows[i].xxx = <span class=\"string\">'xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不这么做的表现，当然 返回给前端的数据中也没有此字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i]) <span class=\"comment\">// 读取不到 midWayPortsArr </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].xxx) <span class=\"comment\">// 可以获取到</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].hasOwnProperty(<span class=\"string\">'xxx'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i]) <span class=\"comment\">// 读取不到 midWayPortsArr </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].midWayPortsArr) <span class=\"comment\">// 可以获取到</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].hasOwnProperty(<span class=\"string\">'midWayPortsArr'</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>本篇主要介绍nodejs中的orm框架 —&gt; Sequelize</p>","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>基于Promise的ORM(Object Relation Mapping)，是一种数据库中间件支持多种数据库、事务、关联等</p>\n<blockquote>\n<p>中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功<br>能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。目前，它并没有很严格的定义，但是普遍接受IDC的定义：中间件是一种独立的系统软件服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。从这个意义上可以用一个等式来表示中间件：中间件=平台+通信，这也就限定了只有用于分布式系统中才能叫中间件，同时也把它与支撑软件和实用软件区分开来。</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sequelize mysql2 -S</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"orm和sql的对照关系\"><a href=\"#orm和sql的对照关系\" class=\"headerlink\" title=\"orm和sql的对照关系\"></a>orm和sql的对照关系</h1><table>\n<thead>\n<tr>\n<th>sql</th>\n<th>orm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>select</td>\n<td>findAll(<code>查询多条</code>),findOne(<code>获取第一个条目</code>),findByPk(<code>findById不支持了</code>),findOrCreate(<code>查询,不存在就新建一个</code>),findAndCountAll(<code>分页查询/查询多条并统计数量</code>)</td>\n</tr>\n<tr>\n<td>update</td>\n<td>update</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>create</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>destroy</td>\n</tr>\n</tbody></table>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><table>\n<thead>\n<tr>\n<th>orm</th>\n<th>sql</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Sequelize.STRING</td>\n<td>VARCHAR(255)</td>\n</tr>\n<tr>\n<td>Sequelize.STRING(1234)</td>\n<td>VARCHAR(1234)</td>\n</tr>\n<tr>\n<td>Sequelize.TEXT</td>\n<td>TEXT</td>\n</tr>\n<tr>\n<td>Sequelize.TEXT(‘tiny’)</td>\n<td>TINYTEXT</td>\n</tr>\n<tr>\n<td>Sequelize.CITEXT</td>\n<td>CITEXT  仅 PostgreSQL 和 SQLite.</td>\n</tr>\n<tr>\n<td>Sequelize.TSVECTOR</td>\n<td>TSVECTOR  仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.BOOLEAN</td>\n<td>TINYINT(1)</td>\n</tr>\n<tr>\n<td>Sequelize.INTEGER</td>\n<td>INTEGER</td>\n</tr>\n<tr>\n<td>Sequelize.BIGINT</td>\n<td>BIGINT</td>\n</tr>\n<tr>\n<td>Sequelize.BIGINT(11)</td>\n<td>BIGINT(11)</td>\n</tr>\n<tr>\n<td>Sequelize.FLOAT</td>\n<td>FLOAT</td>\n</tr>\n<tr>\n<td>Sequelize.FLOAT(11)</td>\n<td>FLOAT(11)</td>\n</tr>\n<tr>\n<td>Sequelize.FLOAT(11, 10)</td>\n<td>FLOAT(11,10)</td>\n</tr>\n<tr>\n<td>Sequelize.REAL</td>\n<td>REAL  仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.REAL(11)</td>\n<td>REAL(11)  仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.REAL(11, 12)</td>\n<td>REAL(11,12) 仅 PostgreSQL.</td>\n</tr>\n<tr>\n<td>Sequelize.DOUBLE</td>\n<td>DOUBLE</td>\n</tr>\n<tr>\n<td>Sequelize.DOUBLE(11)</td>\n<td>DOUBLE(11)</td>\n</tr>\n<tr>\n<td>Sequelize.DOUBLE(11, 10)</td>\n<td>DOUBLE(11,10)</td>\n</tr>\n<tr>\n<td>Sequelize.DATE</td>\n<td>DATETIME 适用于 mysql / sqlite, 带时区的TIMESTAMP 适用于 postgres</td>\n</tr>\n<tr>\n<td>Sequelize.DATE(6)</td>\n<td>DATETIME(6) 适用于 mysql 5.6.4+. 支持6位精度的小数秒</td>\n</tr>\n<tr>\n<td>Sequelize.DATEONLY</td>\n<td>不带时间的 DATE</td>\n</tr>\n</tbody></table>\n<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><ol>\n<li><p>建立连接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">'sequelize'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(db.database, db.user, db.password, &#123; <span class=\"comment\">//表名 用户名 密码</span></span><br><span class=\"line\">    host: db.host, <span class=\"comment\">//地址</span></span><br><span class=\"line\">    port: db.port, <span class=\"comment\">//端口</span></span><br><span class=\"line\">    dialect: <span class=\"string\">'mysql'</span>, <span class=\"comment\">//数据库类型：'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql'</span></span><br><span class=\"line\">    pool: &#123; <span class=\"comment\">// 连接池配置</span></span><br><span class=\"line\">        max: <span class=\"number\">5</span>,</span><br><span class=\"line\">        min: <span class=\"number\">0</span>,</span><br><span class=\"line\">        acquire: <span class=\"number\">30000</span>,</span><br><span class=\"line\">        idle: <span class=\"number\">10000</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    timezone: <span class=\"string\">'+08:00'</span> <span class=\"comment\">//时区转换</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义模型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>,&#123;</span><br><span class=\"line\">    id: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">255</span>),</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>, <span class=\"comment\">//主键</span></span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,  <span class=\"comment\">// 自增长</span></span><br><span class=\"line\">        allowNull:<span class=\"literal\">false</span>  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">'name1'</span>, <span class=\"comment\">//设置默认值</span></span><br><span class=\"line\">        comment: <span class=\"string\">\"姓名\"</span>  <span class=\"comment\">//注释</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    role: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 严重：force := true 会强制删除表及数据后重建,请一定慎用！！！</span></span><br><span class=\"line\">User.sync(&#123; <span class=\"attr\">force</span>: <span class=\"literal\">false</span> &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强制同步：创建表之前先删除已存在的表</span></span><br><span class=\"line\">User.sync(&#123; <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免自动生成时间戳字段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>,&#123;&#125;,&#123;</span><br><span class=\"line\">    timestamps:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定表名</p>\n</li>\n</ol>\n<ul>\n<li>freezeTableName:true  </li>\n<li>tableName:’xxx’ </li>\n</ul>\n<blockquote>\n<p>前者以modelName作为表名，后者则按其值作为表名<br>蛇形命名 underscored:true<br>默认驼峰 命名</p>\n</blockquote>\n<ol start=\"6\">\n<li>实例用法</li>\n</ol>\n<ul>\n<li>更新<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">await</span> User.create(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br><span class=\"line\">jane.name = <span class=\"string\">\"Ada\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 数据库中的名称仍然是 \"Jane\"</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> jane.save();</span><br><span class=\"line\"><span class=\"comment\">// 现在该名称已在数据库中更新为 \"Ada\"！</span></span><br></pre></td></tr></table></figure></li>\n<li>删除<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">await</span> User.create(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> jane.destroy();</span><br><span class=\"line\"><span class=\"comment\">// 现在该条目已从数据库中删除</span></span><br></pre></td></tr></table></figure></li>\n<li>重载<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">await</span> User.create(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br><span class=\"line\">jane.name = <span class=\"string\">\"Ada\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 数据库中的名称依然是 \"Jane\"</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> jane.reload();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jane.name); <span class=\"comment\">// \"Jane\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>reload 调用生成一个 SELECT 查询,以从数据库中获取最新数据.</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>UUID</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id: &#123;</span><br><span class=\"line\">    type: Sequelize.UUID,</span><br><span class=\"line\">    primaryKey: <span class=\"literal\">true</span>, <span class=\"comment\">//主键</span></span><br><span class=\"line\">    autoIncrement: <span class=\"literal\">true</span>,  <span class=\"comment\">// 自增长</span></span><br><span class=\"line\">    allowNull:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    defaultValue: Sequelize.UUIDV1,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Getters &amp; Setters</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义为属性的一部分</span></span><br><span class=\"line\">name: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123; </span><br><span class=\"line\">        <span class=\"keyword\">const</span> fname = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> price = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"price\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> stock = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"stock\"</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;fname&#125;</span>(价格：￥<span class=\"subst\">$&#123;price&#125;</span> 库存：<span class=\"subst\">$&#123;stock&#125;</span>kg)`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义为模型选项 options中</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    getterMethods: &#123;</span><br><span class=\"line\">        amount() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">\"stock\"</span>) + <span class=\"string\">\"kg\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    setterMethods: &#123;</span><br><span class=\"line\">        amount(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> idx = val.indexOf(<span class=\"string\">'kg'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> v = val.slice(<span class=\"number\">0</span>, idx);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setDataValue(<span class=\"string\">'stock'</span>, v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过模型实例触发setterMethods</span></span><br><span class=\"line\">Fruit.findAll().then(<span class=\"function\"><span class=\"params\">fruits</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(fruits));</span><br><span class=\"line\">     <span class=\"comment\">// 修改amount，触发setterMethods</span></span><br><span class=\"line\">    fruits[<span class=\"number\">0</span>].amount = <span class=\"string\">'150kg'</span>; </span><br><span class=\"line\">    fruits[<span class=\"number\">0</span>].save(); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"基本增删改查\"><a href=\"#基本增删改查\" class=\"headerlink\" title=\"基本增删改查\"></a>基本增删改查</h1><ol>\n<li><p>增</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = User.create(&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"joker\"</span>,</span><br><span class=\"line\">    role:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">consoole.log(<span class=\"string\">'create'</span>,res)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = User.update(</span><br><span class=\"line\">    &#123;<span class=\"attr\">role</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">where</span>:&#123;<span class=\"attr\">id</span>:<span class=\"number\">1</span>&#125;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">consoole.log(<span class=\"string\">'update'</span>,res)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查</p>\n<ul>\n<li>单条<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123; </span><br><span class=\"line\">attributes: [<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>, <span class=\"string\">'role'</span>], <span class=\"comment\">// 指定需要返回的字段</span></span><br><span class=\"line\">where: &#123;</span><br><span class=\"line\">    id: id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>多条<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Op = Sequelize.Op</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = User.findAll(</span><br><span class=\"line\">    &#123;<span class=\"attr\">where</span>:&#123;<span class=\"attr\">role</span>:&#123;[Op.lt]:<span class=\"number\">3</span>,[Op.gt]:<span class=\"number\">1</span>&#125;&#125;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">consoole.log(<span class=\"string\">'findAll'</span>,res)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>删</p>\n<ul>\n<li>方式1<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.destroy(&#123;</span><br><span class=\"line\">    where: &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>方式2<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">    where: &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">result.destroy()</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h1><h2 id=\"查询特定属性\"><a href=\"#查询特定属性\" class=\"headerlink\" title=\"查询特定属性\"></a>查询特定属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: [<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以使用嵌套数组来<strong>重命名</strong>属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: [<span class=\"string\">'foo'</span>, [<span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>], <span class=\"string\">'qux'</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>添加聚合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取帽子数量</span></span><br><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: &#123;</span><br><span class=\"line\">    include: [</span><br><span class=\"line\">      [sequelize.fn(<span class=\"string\">'COUNT'</span>, sequelize.col(<span class=\"string\">'hats'</span>)), <span class=\"string\">'n_hats'</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"排除某些属性\"><a href=\"#排除某些属性\" class=\"headerlink\" title=\"排除某些属性\"></a>排除某些属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: &#123; <span class=\"attr\">exclude</span>: [<span class=\"string\">'baz'</span>] &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAndCountAll(&#123;</span><br><span class=\"line\">    limit:<span class=\"number\">10</span>,<span class=\"comment\">//每页10条</span></span><br><span class=\"line\">    offset:x*<span class=\"number\">10</span>,<span class=\"comment\">//第x页*每页个数</span></span><br><span class=\"line\">    where:&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询-不存在就新建一个\"><a href=\"#查询-不存在就新建一个\" class=\"headerlink\" title=\"查询,不存在就新建一个\"></a>查询,不存在就新建一个</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findOrCreate(&#123;</span><br><span class=\"line\">    where: &#123;&#125;,</span><br><span class=\"line\">    defaults: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"批量新增\"><a href=\"#批量新增\" class=\"headerlink\" title=\"批量新增\"></a>批量新增</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = [&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>&#125;]</span><br><span class=\"line\">Model.bulkCreate(data, &#123;</span><br><span class=\"line\">    raw: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">    order:[</span><br><span class=\"line\">        [<span class=\"string\">'id'</span>,<span class=\"string\">'DESC'</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>DESC表示降序,默认ASC升序<br><a href=\"https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84\" target=\"_blank\" rel=\"noopener\">更多用法</a></p>\n</blockquote>\n<h2 id=\"实用方法\"><a href=\"#实用方法\" class=\"headerlink\" title=\"实用方法\"></a>实用方法</h2><ul>\n<li><p>count</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"keyword\">await</span> User.count(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">      [Op.gt]: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 统计年龄大于25的人数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>max, min</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> User.max(<span class=\"string\">'age'</span>); <span class=\"comment\">// 最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> User.min(<span class=\"string\">'age'</span>); <span class=\"comment\">// 最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> User.min(<span class=\"string\">'age'</span>, &#123; <span class=\"attr\">where</span>: &#123; <span class=\"attr\">age</span>: &#123; [Op.gt]: <span class=\"number\">5</span> &#125; &#125; &#125;); <span class=\"comment\">// 大于五岁的最小年龄</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sum</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> User.sum(<span class=\"string\">'age'</span>); <span class=\"comment\">// 年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> User.sum(<span class=\"string\">'age'</span>, &#123; <span class=\"attr\">where</span>: &#123; <span class=\"attr\">age</span>: &#123; [Op.gt]: <span class=\"number\">5</span> &#125; &#125; &#125;); <span class=\"comment\">// 大于五岁的年龄总和</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h1><h2 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelA.belongsTo(ModelB,&#123;</span><br><span class=\"line\">    <span class=\"comment\">// onDelete: 'RESTRICT',  // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL</span></span><br><span class=\"line\">    <span class=\"comment\">// onUpdate: 'RESTRICT', // RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL</span></span><br><span class=\"line\">    <span class=\"comment\">// 一对一关联的默认值, ON DELETE 为 SET NULL 而 ON UPDATE 为 CASCADE</span></span><br><span class=\"line\">    <span class=\"comment\">// foreignKey: 'aId',</span></span><br><span class=\"line\">    <span class=\"comment\">// as:\"mobelb\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">ModelB.hasOne(ModelA,&#123;</span><br><span class=\"line\">    <span class=\"comment\">// foreignKey: 'aId',</span></span><br><span class=\"line\">    <span class=\"comment\">// as:\"mobela\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">ModelA.findAll(&#123;</span><br><span class=\"line\">    where:&#123;&#125;,</span><br><span class=\"line\">    include:&#123;</span><br><span class=\"line\">        model: ModelB,</span><br><span class=\"line\">        <span class=\"keyword\">as</span>: <span class=\"string\">'mobelb'</span></span><br><span class=\"line\">        where: &#123;&#125;，</span><br><span class=\"line\">        required: <span class=\"literal\">false</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">ModelA.findAll(&#123;</span><br><span class=\"line\">    where:&#123;</span><br><span class=\"line\">        <span class=\"string\">'$mobelb.id$'</span>: &#123; <span class=\"comment\">// 跨表查询</span></span><br><span class=\"line\">          [Sequelize.Op.substring]: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    include: [</span><br><span class=\"line\">        <span class=\"string\">'mobelb'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelA.belongsTo(ModelB)</span><br><span class=\"line\">ModelB.hasMany(ModelA)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelA.belongToMany(ModelB)</span><br><span class=\"line\">ModelB.hasMany(ModelA)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用符号运算符\"><a href=\"#常用符号运算符\" class=\"headerlink\" title=\"常用符号运算符\"></a>常用符号运算符</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Op.eq]: <span class=\"number\">3</span>,                              <span class=\"comment\">// = 3</span></span><br><span class=\"line\">[Op.ne]: <span class=\"number\">20</span>,                             <span class=\"comment\">// != 20</span></span><br><span class=\"line\">[Op.is]: <span class=\"literal\">null</span>,                           <span class=\"comment\">// IS NULL</span></span><br><span class=\"line\">[Op.not]: <span class=\"literal\">true</span>,                          <span class=\"comment\">// IS NOT TRUE</span></span><br><span class=\"line\">[Op.or]: [<span class=\"number\">5</span>, <span class=\"number\">6</span>],                         <span class=\"comment\">// (someAttribute = 5) OR (someAttribute = 6)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用方言特定的列标识符 (以下示例中使用 PG):</span></span><br><span class=\"line\">[Op.col]: <span class=\"string\">'user.organization_id'</span>,        <span class=\"comment\">// = \"user\".\"organization_id\"</span></span><br><span class=\"line\"><span class=\"comment\">// 数字比较</span></span><br><span class=\"line\">[Op.gt]: <span class=\"number\">6</span>,                              <span class=\"comment\">// &gt; 6</span></span><br><span class=\"line\">[Op.gte]: <span class=\"number\">6</span>,                             <span class=\"comment\">// &gt;= 6</span></span><br><span class=\"line\">[Op.lt]: <span class=\"number\">10</span>,                             <span class=\"comment\">// &lt; 10</span></span><br><span class=\"line\">[Op.lte]: <span class=\"number\">10</span>,                            <span class=\"comment\">// &lt;= 10</span></span><br><span class=\"line\">[Op.between]: [<span class=\"number\">6</span>, <span class=\"number\">10</span>],                   <span class=\"comment\">// BETWEEN 6 AND 10</span></span><br><span class=\"line\">[Op.notBetween]: [<span class=\"number\">11</span>, <span class=\"number\">15</span>],               <span class=\"comment\">// NOT BETWEEN 11 AND 15</span></span><br><span class=\"line\"><span class=\"comment\">// 其它操作符</span></span><br><span class=\"line\">[Op.all]: sequelize.literal(<span class=\"string\">'SELECT 1'</span>), <span class=\"comment\">// &gt; ALL (SELECT 1)</span></span><br><span class=\"line\">[Op.in]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],                         <span class=\"comment\">// IN [1, 2]</span></span><br><span class=\"line\">[Op.notIn]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],                      <span class=\"comment\">// NOT IN [1, 2]</span></span><br><span class=\"line\">[Op.like]: <span class=\"string\">'%hat'</span>,                       <span class=\"comment\">// LIKE '%hat'</span></span><br><span class=\"line\">[Op.notLike]: <span class=\"string\">'%hat'</span>,                    <span class=\"comment\">// NOT LIKE '%hat'</span></span><br><span class=\"line\">[Op.startsWith]: <span class=\"string\">'hat'</span>,                  <span class=\"comment\">// LIKE 'hat%'</span></span><br><span class=\"line\">[Op.endsWith]: <span class=\"string\">'hat'</span>,                    <span class=\"comment\">// LIKE '%hat'</span></span><br><span class=\"line\">[Op.substring]: <span class=\"string\">'hat'</span>,                   <span class=\"comment\">// LIKE '%hat%'</span></span><br><span class=\"line\">[Op.iLike]: <span class=\"string\">'%hat'</span>,                      <span class=\"comment\">// ILIKE '%hat' (不区分大小写) (仅 PG)</span></span><br><span class=\"line\">[Op.notILike]: <span class=\"string\">'%hat'</span>,                   <span class=\"comment\">// NOT ILIKE '%hat'  (仅 PG)</span></span><br><span class=\"line\">[Op.regexp]: <span class=\"string\">'^[h|a|t]'</span>,                 <span class=\"comment\">// REGEXP/~ '^[h|a|t]' (仅 MySQL/PG)</span></span><br><span class=\"line\">[Op.notRegexp]: <span class=\"string\">'^[h|a|t]'</span>,              <span class=\"comment\">// NOT REGEXP/!~ '^[h|a|t]' (仅 MySQL/PG)</span></span><br><span class=\"line\">[Op.iRegexp]: <span class=\"string\">'^[h|a|t]'</span>,                <span class=\"comment\">// ~* '^[h|a|t]' (仅 PG)</span></span><br><span class=\"line\">[Op.notIRegexp]: <span class=\"string\">'^[h|a|t]'</span>,             <span class=\"comment\">// !~* '^[h|a|t]' (仅 PG)</span></span><br><span class=\"line\">[Op.any]: [<span class=\"number\">2</span>, <span class=\"number\">3</span>],                        <span class=\"comment\">// ANY ARRAY[2, 3]::INTEGER (仅 PG)</span></span><br><span class=\"line\">[Op.match]: Sequelize.fn(<span class=\"string\">'to_tsquery'</span>, <span class=\"string\">'fat &amp; rat'</span>) <span class=\"comment\">// 匹配文本搜索字符串 'fat' 和 'rat' (仅 PG)</span></span><br><span class=\"line\"><span class=\"comment\">// 在 Postgres 中, Op.like/Op.iLike/Op.notLike 可以结合 Op.any 使用:</span></span><br><span class=\"line\">[Op.like]: &#123; [Op.any]: [<span class=\"string\">'cat'</span>, <span class=\"string\">'hat'</span>] &#125;  <span class=\"comment\">// LIKE ANY ARRAY['cat', 'hat']</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"一些踩过的坑\"><a href=\"#一些踩过的坑\" class=\"headerlink\" title=\"一些踩过的坑\"></a>一些踩过的坑</h1><h2 id=\"在查询结果中添加自定义属性\"><a href=\"#在查询结果中添加自定义属性\" class=\"headerlink\" title=\"在查询结果中添加自定义属性\"></a>在查询结果中添加自定义属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rlt.rows[i] =rlt.rows[i].toJSON()  <span class=\"comment\">// 先进行toJSON 操作  然后才能赋值</span></span><br><span class=\"line\">rlt.rows[i].xxx = <span class=\"string\">'xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不这么做的表现，当然 返回给前端的数据中也没有此字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i]) <span class=\"comment\">// 读取不到 midWayPortsArr </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].xxx) <span class=\"comment\">// 可以获取到</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].hasOwnProperty(<span class=\"string\">'xxx'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i]) <span class=\"comment\">// 读取不到 midWayPortsArr </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].midWayPortsArr) <span class=\"comment\">// 可以获取到</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rlt.rows[i].hasOwnProperty(<span class=\"string\">'midWayPortsArr'</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"TS装饰器之防抖节流","date":"2021-08-31T12:54:11.000Z","description":null,"_content":"\n首先，我们先来了解一下什么是防抖和节流。\n\n<!-- more -->\n\n# 防抖（debounce）\n\n**函数防抖，这里的抖动就是执行的意思，而一般的抖动都是持续的，多次的。假设函数持续多次执行，我们希望让它冷静下来再执行。也就是当持续触发事件的时候，函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行**\n\n特点：\n\n- 持续触发不执行\n- 最后一次触发过了一段时间之后再执行\n\n我们写 js 的时候通常会这么来写\n\n```js\nfunction debounce(fn, delay) {\n  let timer = null\n  return function () {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(fn, delay);\n  };\n}\n\nfunction test(){\n  console.log('test')\n}\n\n// 调用的时候 以滚动为例\nwindow.onscroll = debounce(test, 1000);\n```\n\n\n\n# 节流（throttle）\n\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。**\n\n说的通俗一点就是设计一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间）。\n\n特点:\n\n- 如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效.\n\njs中我们的常见写法\n```js\nfunction throttle(fun, wait) {\n    let timeout = null;\n    return function() {\n      if (!timeout) {\n        timeout = setTimeout(function(){\n          timeout = null;\n          fun()\n        }, wait)\n      }\n    }\n}\nfunction test(){\n  console.log('test')\n}\n\n// 调用的时候 我们还是以滚动为例\nwindow.onscroll = throttle(test, 500);\n```\n\n# 进阶（TS装饰器）\n\n> 在你阅读这节之前，希望你已经了解了[TS基础](https://qytayh.github.io/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/)以及[装饰器的基本用法](https://qytayh.github.io/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/)。\n\n```TS\n// 工具函数\nconst delayDefault = 500;\n\n// 防抖\nexport const debounce = (delay = delayDefault) => {\n  return function(target, key, descriptor) {\n    const oldValue = descriptor.value;\n    let timer: any = null;\n    descriptor.value = function() {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        oldValue.apply(this, arguments);\n      }, delay);\n    };\n    return descriptor;\n  };\n};\n\n// 节流 时间戳写法\nexport const throttle = (delay = delayDefault) => {\n  return function(target, key, descriptor) {\n    let lastTime, timer;\n    const oldFunction = descriptor.value;\n    descriptor.value = function() {\n      let nowTime = +new Date();\n      if (lastTime && nowTime - lastTime < delay) {\n        if (timer) {\n          clearTimeout(timer);\n        }\n        timer = setTimeout(() => {\n          oldFunction.apply(this, arguments);\n          lastTime = nowTime;\n        }, delay);\n      } else {\n        oldFunction.apply(this, arguments);\n        lastTime = nowTime;\n      }\n    };\n    return descriptor;\n  };\n};\n\n// 节流  定时器写法\nexport const throttle = (delay = delayDefault) => {\n  return function(target, key, descriptor) {\n    let timer: any = null;\n    const oldFunction = descriptor.value;\n    descriptor.value = function() {\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          oldFunction.apply(this, arguments);\n        }, delay);\n      }\n    };\n    return descriptor;\n  };\n};\n\n```\n\n以上两种节流都可正常使用，没有好坏之分，看个人喜好。\n\n```TS\n// 使用\nclass Test{\n\n  @debounce()\n  funA(){\n    console.log('A')\n  }\n\n  @throttle()\n  funB(){\n    console.log('B')\n  }\n\n}\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002-->\n","source":"_posts/2021/08/TS装饰器之防抖节流.md","raw":"---\ntitle: TS装饰器之防抖节流\ndate: 2021-08-31 20:54:11\ntags:\n  - TypeScript\ncategories:\n  - TypeScript\ndescription:\n---\n\n首先，我们先来了解一下什么是防抖和节流。\n\n<!-- more -->\n\n# 防抖（debounce）\n\n**函数防抖，这里的抖动就是执行的意思，而一般的抖动都是持续的，多次的。假设函数持续多次执行，我们希望让它冷静下来再执行。也就是当持续触发事件的时候，函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行**\n\n特点：\n\n- 持续触发不执行\n- 最后一次触发过了一段时间之后再执行\n\n我们写 js 的时候通常会这么来写\n\n```js\nfunction debounce(fn, delay) {\n  let timer = null\n  return function () {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(fn, delay);\n  };\n}\n\nfunction test(){\n  console.log('test')\n}\n\n// 调用的时候 以滚动为例\nwindow.onscroll = debounce(test, 1000);\n```\n\n\n\n# 节流（throttle）\n\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。**\n\n说的通俗一点就是设计一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间）。\n\n特点:\n\n- 如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效.\n\njs中我们的常见写法\n```js\nfunction throttle(fun, wait) {\n    let timeout = null;\n    return function() {\n      if (!timeout) {\n        timeout = setTimeout(function(){\n          timeout = null;\n          fun()\n        }, wait)\n      }\n    }\n}\nfunction test(){\n  console.log('test')\n}\n\n// 调用的时候 我们还是以滚动为例\nwindow.onscroll = throttle(test, 500);\n```\n\n# 进阶（TS装饰器）\n\n> 在你阅读这节之前，希望你已经了解了[TS基础](https://qytayh.github.io/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/)以及[装饰器的基本用法](https://qytayh.github.io/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/)。\n\n```TS\n// 工具函数\nconst delayDefault = 500;\n\n// 防抖\nexport const debounce = (delay = delayDefault) => {\n  return function(target, key, descriptor) {\n    const oldValue = descriptor.value;\n    let timer: any = null;\n    descriptor.value = function() {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        oldValue.apply(this, arguments);\n      }, delay);\n    };\n    return descriptor;\n  };\n};\n\n// 节流 时间戳写法\nexport const throttle = (delay = delayDefault) => {\n  return function(target, key, descriptor) {\n    let lastTime, timer;\n    const oldFunction = descriptor.value;\n    descriptor.value = function() {\n      let nowTime = +new Date();\n      if (lastTime && nowTime - lastTime < delay) {\n        if (timer) {\n          clearTimeout(timer);\n        }\n        timer = setTimeout(() => {\n          oldFunction.apply(this, arguments);\n          lastTime = nowTime;\n        }, delay);\n      } else {\n        oldFunction.apply(this, arguments);\n        lastTime = nowTime;\n      }\n    };\n    return descriptor;\n  };\n};\n\n// 节流  定时器写法\nexport const throttle = (delay = delayDefault) => {\n  return function(target, key, descriptor) {\n    let timer: any = null;\n    const oldFunction = descriptor.value;\n    descriptor.value = function() {\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          oldFunction.apply(this, arguments);\n        }, delay);\n      }\n    };\n    return descriptor;\n  };\n};\n\n```\n\n以上两种节流都可正常使用，没有好坏之分，看个人喜好。\n\n```TS\n// 使用\nclass Test{\n\n  @debounce()\n  funA(){\n    console.log('A')\n  }\n\n  @throttle()\n  funB(){\n    console.log('B')\n  }\n\n}\n```\n\n\n\n<!-- markdownlint-disable MD041 MD002-->\n","slug":"2021/08/TS装饰器之防抖节流","published":1,"updated":"2021-08-31T13:42:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj53z003x1r0q5r6k5w3z","content":"<p>首先，我们先来了解一下什么是防抖和节流。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h1><p><strong>函数防抖，这里的抖动就是执行的意思，而一般的抖动都是持续的，多次的。假设函数持续多次执行，我们希望让它冷静下来再执行。也就是当持续触发事件的时候，函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行</strong></p>\n<p>特点：</p>\n<ul>\n<li>持续触发不执行</li>\n<li>最后一次触发过了一段时间之后再执行</li>\n</ul>\n<p>我们写 js 的时候通常会这么来写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(fn, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用的时候 以滚动为例</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = debounce(test, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h1><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。</strong></p>\n<p>说的通俗一点就是设计一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间）。</p>\n<p>特点:</p>\n<ul>\n<li>如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效.</li>\n</ul>\n<p>js中我们的常见写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fun, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          fun()</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用的时候 我们还是以滚动为例</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = throttle(test, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"进阶（TS装饰器）\"><a href=\"#进阶（TS装饰器）\" class=\"headerlink\" title=\"进阶（TS装饰器）\"></a>进阶（TS装饰器）</h1><blockquote>\n<p>在你阅读这节之前，希望你已经了解了<a href=\"https://qytayh.github.io/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/\">TS基础</a>以及<a href=\"https://qytayh.github.io/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/\">装饰器的基本用法</a>。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工具函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> delayDefault = <span class=\"number\">500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 防抖</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = descriptor.value;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        oldValue.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流 时间戳写法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastTime, timer;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldFunction = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> nowTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (lastTime &amp;&amp; nowTime - lastTime &lt; delay) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">          clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          oldFunction.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">          lastTime = nowTime;</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        oldFunction.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        lastTime = nowTime;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流  定时器写法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldFunction = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          oldFunction.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以上两种节流都可正常使用，没有好坏之分，看个人喜好。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Test&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@debounce</span>()</span><br><span class=\"line\">  funA()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@throttle</span>()</span><br><span class=\"line\">  funB()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002-->\n","site":{"data":{}},"excerpt":"<p>首先，我们先来了解一下什么是防抖和节流。</p>","more":"<h1 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h1><p><strong>函数防抖，这里的抖动就是执行的意思，而一般的抖动都是持续的，多次的。假设函数持续多次执行，我们希望让它冷静下来再执行。也就是当持续触发事件的时候，函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行</strong></p>\n<p>特点：</p>\n<ul>\n<li>持续触发不执行</li>\n<li>最后一次触发过了一段时间之后再执行</li>\n</ul>\n<p>我们写 js 的时候通常会这么来写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(fn, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用的时候 以滚动为例</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = debounce(test, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h1><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。</strong></p>\n<p>说的通俗一点就是设计一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间）。</p>\n<p>特点:</p>\n<ul>\n<li>如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效.</li>\n</ul>\n<p>js中我们的常见写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fun, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          fun()</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用的时候 我们还是以滚动为例</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = throttle(test, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"进阶（TS装饰器）\"><a href=\"#进阶（TS装饰器）\" class=\"headerlink\" title=\"进阶（TS装饰器）\"></a>进阶（TS装饰器）</h1><blockquote>\n<p>在你阅读这节之前，希望你已经了解了<a href=\"https://qytayh.github.io/2021/08/TypeScript%E8%BF%98%E4%B8%8D%E4%BC%9A-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E8%A1%8C%E4%BA%86/\">TS基础</a>以及<a href=\"https://qytayh.github.io/2021/08/TS%E8%BF%9B%E9%98%B6%E4%B9%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/\">装饰器的基本用法</a>。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工具函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> delayDefault = <span class=\"number\">500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 防抖</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = descriptor.value;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        oldValue.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流 时间戳写法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastTime, timer;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldFunction = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> nowTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (lastTime &amp;&amp; nowTime - lastTime &lt; delay) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">          clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          oldFunction.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">          lastTime = nowTime;</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        oldFunction.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        lastTime = nowTime;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流  定时器写法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">delay = delayDefault</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldFunction = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          oldFunction.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以上两种节流都可正常使用，没有好坏之分，看个人喜好。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Test&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@debounce</span>()</span><br><span class=\"line\">  funA()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@throttle</span>()</span><br><span class=\"line\">  funB()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"JavaScript基础之变量提升","date":"2021-08-29T00:50:52.000Z","description":null,"_content":"\n直觉上我们一般会认为JavaScript代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确\n\n<!-- more -->\n\n# 前言\n\n有一些特殊情况会导致这个假设是错误的。\n\n```js\na = 2\nvar a\nconsole.log(a)  \n```\n那么`console.log(a)`会输出什么呢？\n\n我们很多人会认为是`undefined`，因为`var a`的声明在`a=2`的后面，因此就认为变量`a`被重新赋上默认值`undefined`。但是，实际输出的结果却是**2**。\n\n再看一个例子\n\n```js\nconsole.log(a)\nvar a = 2\n```\n\n从上个代码块所变现出来的某种自上而下的行为特点，大家可能又会认为这个代码块也会输出`2`,甚至还会有人认为，由于变量`a`在使用前没有事先声明，所以会抛出异常。\n\n但是实际上，输出的会是`undefined`。\n\n> 所以我们就面临了一个问题，到底是声明在前还是赋值在前？\n\n# 从编译器的角度来以上看问题\n\n引擎会在解释`JavaScript`代码之前首先对其进行编译。\n\n编译阶段中的一部分工作就是**找到所有的声明**，并用合适的作用域将它们关联起来。\n\n所以，正确的思路应该是，包括变量和函数在内的所有**声明**都会在**任何代码被执行前首先被处理**。\n\n在我们看到`var a = 2`的时候，可能会认为这是一个声明，但是`JavaScript`实际上会将其看成两个声明`var a`和`a = 2`。第一个声明是在编译阶段进行的，第二个赋值声明会被留在原地等待执行。\n\n因此，我们上面的第一个代码块其实会被以如下方式进行处理\n```js\nvar a\na = 2\nconsole.log(a)\n```\n类似的，我们的第二个代码块 实际上是按这个流程来处理的：\n```js\nvar a\nconsole.log(a)\na = 2\n```\n这个过程就好像变量和函数声明从它们在代码中出现的位置被移动到了最上面，这个过程就叫做**提升**。\n\n> 简单的说就是，先声明，后赋值\n\n# 函数声明\n\n```js\nfoo();\n\nfunction foo(){\n  console.log(a) // undefined\n  var a =2\n}\n```\n`foo`的声明被提升了，因此在第一行的调用中可以正常运行。\n\n另外，值得注意的是，每个作用域都会进行提升操作，就像我们正在讨论的`foo`也会在其内部对`var a`进行提升。因此，这段代码可以被理解为\n```js\nfunction foo(){\n  var a\n  console.log(a)\n  a = 2\n}\nfoo()\n```\n> 注意**函数声明会被提升，但是函数表达式不会**\n\n```js\nfoo() // 不是ReferenceError，而是TypeError\nvar foo = function(){\n  //...\n}\n```\n这段程序的变量标识符`foo()`被提升并分配给所在作用域，因此`foo()`不会导致`ReferenceError`，但是`foo`没有被赋值（如果它是函数声明而不是函数表达式，那么就会被赋值）。`foo`由于对`undefined`值进行函数调用而导致非法操作，所以抛出`TypeError`。\n\n实际上这段代码会被解析为：\n```js\nvar foo;\nfoo()\nfoo = function(){\n  //...\n}\n```\n> [ReferenceError解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)        \n> [TypeError解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\n# 函数优先\n\n函数声明和变量声明都会被提升，但是有一点值得注意：**函数会首先被提升，然后才是变量**。\n\n以这段代码来举个例子：\n```js\nfoo()\nvar foo\nfunction foo(){\n  console.log(1)\n}\nfoo = function(){\n  console.log(2)\n}\n```\n结果会输出`1`而不是`2`。这段代码会被引擎解析为：\n```js\nfunction foo(){\n  console.log(1)\n}\n\nfoo()\n\nfoo = function(){\n  console.log(2)\n}\n```\n尽管`var foo`出现在`function foo()`的声明之前，但它是重复声明（因此被忽略掉了），因为函数声明会被提到变量声明之前。\n\n于此同时，**后面出现的函数声明可以覆盖前面的**。\n\n```js\nfoo() // 3\nfunction foo(){\n  console.log(1)\n}\nvar foo = function(){\n  console.log(2)\n}\nfunction foo(){\n  console.log(3)\n}\n```\n\n# 小结\n\n我们习惯的将`var a = 2`看做一个声明，但是实际上`JavaScript`引擎并不这么认为，它将`var a`和`a = 2`当做两个单独的声明，第一个是编译阶段的任务，第二个是执行阶段的任务。\n\n这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。所有的函数和变量声明都会被移到各自作用域的最顶端，这个过程就是**提升**。\n\n声明本身会被提升，但是包括函数表达式在内的赋值操作不会被提升。\n\n函数优先原则。\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/JavaScript基础之变量提升.md","raw":"---\ntitle: JavaScript基础之变量提升\ndate: 2021-08-29 08:50:52\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\ndescription:\n---\n\n直觉上我们一般会认为JavaScript代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确\n\n<!-- more -->\n\n# 前言\n\n有一些特殊情况会导致这个假设是错误的。\n\n```js\na = 2\nvar a\nconsole.log(a)  \n```\n那么`console.log(a)`会输出什么呢？\n\n我们很多人会认为是`undefined`，因为`var a`的声明在`a=2`的后面，因此就认为变量`a`被重新赋上默认值`undefined`。但是，实际输出的结果却是**2**。\n\n再看一个例子\n\n```js\nconsole.log(a)\nvar a = 2\n```\n\n从上个代码块所变现出来的某种自上而下的行为特点，大家可能又会认为这个代码块也会输出`2`,甚至还会有人认为，由于变量`a`在使用前没有事先声明，所以会抛出异常。\n\n但是实际上，输出的会是`undefined`。\n\n> 所以我们就面临了一个问题，到底是声明在前还是赋值在前？\n\n# 从编译器的角度来以上看问题\n\n引擎会在解释`JavaScript`代码之前首先对其进行编译。\n\n编译阶段中的一部分工作就是**找到所有的声明**，并用合适的作用域将它们关联起来。\n\n所以，正确的思路应该是，包括变量和函数在内的所有**声明**都会在**任何代码被执行前首先被处理**。\n\n在我们看到`var a = 2`的时候，可能会认为这是一个声明，但是`JavaScript`实际上会将其看成两个声明`var a`和`a = 2`。第一个声明是在编译阶段进行的，第二个赋值声明会被留在原地等待执行。\n\n因此，我们上面的第一个代码块其实会被以如下方式进行处理\n```js\nvar a\na = 2\nconsole.log(a)\n```\n类似的，我们的第二个代码块 实际上是按这个流程来处理的：\n```js\nvar a\nconsole.log(a)\na = 2\n```\n这个过程就好像变量和函数声明从它们在代码中出现的位置被移动到了最上面，这个过程就叫做**提升**。\n\n> 简单的说就是，先声明，后赋值\n\n# 函数声明\n\n```js\nfoo();\n\nfunction foo(){\n  console.log(a) // undefined\n  var a =2\n}\n```\n`foo`的声明被提升了，因此在第一行的调用中可以正常运行。\n\n另外，值得注意的是，每个作用域都会进行提升操作，就像我们正在讨论的`foo`也会在其内部对`var a`进行提升。因此，这段代码可以被理解为\n```js\nfunction foo(){\n  var a\n  console.log(a)\n  a = 2\n}\nfoo()\n```\n> 注意**函数声明会被提升，但是函数表达式不会**\n\n```js\nfoo() // 不是ReferenceError，而是TypeError\nvar foo = function(){\n  //...\n}\n```\n这段程序的变量标识符`foo()`被提升并分配给所在作用域，因此`foo()`不会导致`ReferenceError`，但是`foo`没有被赋值（如果它是函数声明而不是函数表达式，那么就会被赋值）。`foo`由于对`undefined`值进行函数调用而导致非法操作，所以抛出`TypeError`。\n\n实际上这段代码会被解析为：\n```js\nvar foo;\nfoo()\nfoo = function(){\n  //...\n}\n```\n> [ReferenceError解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)        \n> [TypeError解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\n# 函数优先\n\n函数声明和变量声明都会被提升，但是有一点值得注意：**函数会首先被提升，然后才是变量**。\n\n以这段代码来举个例子：\n```js\nfoo()\nvar foo\nfunction foo(){\n  console.log(1)\n}\nfoo = function(){\n  console.log(2)\n}\n```\n结果会输出`1`而不是`2`。这段代码会被引擎解析为：\n```js\nfunction foo(){\n  console.log(1)\n}\n\nfoo()\n\nfoo = function(){\n  console.log(2)\n}\n```\n尽管`var foo`出现在`function foo()`的声明之前，但它是重复声明（因此被忽略掉了），因为函数声明会被提到变量声明之前。\n\n于此同时，**后面出现的函数声明可以覆盖前面的**。\n\n```js\nfoo() // 3\nfunction foo(){\n  console.log(1)\n}\nvar foo = function(){\n  console.log(2)\n}\nfunction foo(){\n  console.log(3)\n}\n```\n\n# 小结\n\n我们习惯的将`var a = 2`看做一个声明，但是实际上`JavaScript`引擎并不这么认为，它将`var a`和`a = 2`当做两个单独的声明，第一个是编译阶段的任务，第二个是执行阶段的任务。\n\n这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。所有的函数和变量声明都会被移到各自作用域的最顶端，这个过程就是**提升**。\n\n声明本身会被提升，但是包括函数表达式在内的赋值操作不会被提升。\n\n函数优先原则。\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/JavaScript基础之变量提升","published":1,"updated":"2021-08-29T01:47:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54000421r0qhiuqeqxn","content":"<p>直觉上我们一般会认为JavaScript代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确</p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有一些特殊情况会导致这个假设是错误的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>那么<code>console.log(a)</code>会输出什么呢？</p>\n<p>我们很多人会认为是<code>undefined</code>，因为<code>var a</code>的声明在<code>a=2</code>的后面，因此就认为变量<code>a</code>被重新赋上默认值<code>undefined</code>。但是，实际输出的结果却是<strong>2</strong>。</p>\n<p>再看一个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>从上个代码块所变现出来的某种自上而下的行为特点，大家可能又会认为这个代码块也会输出<code>2</code>,甚至还会有人认为，由于变量<code>a</code>在使用前没有事先声明，所以会抛出异常。</p>\n<p>但是实际上，输出的会是<code>undefined</code>。</p>\n<blockquote>\n<p>所以我们就面临了一个问题，到底是声明在前还是赋值在前？</p>\n</blockquote>\n<h1 id=\"从编译器的角度来以上看问题\"><a href=\"#从编译器的角度来以上看问题\" class=\"headerlink\" title=\"从编译器的角度来以上看问题\"></a>从编译器的角度来以上看问题</h1><p>引擎会在解释<code>JavaScript</code>代码之前首先对其进行编译。</p>\n<p>编译阶段中的一部分工作就是<strong>找到所有的声明</strong>，并用合适的作用域将它们关联起来。</p>\n<p>所以，正确的思路应该是，包括变量和函数在内的所有<strong>声明</strong>都会在<strong>任何代码被执行前首先被处理</strong>。</p>\n<p>在我们看到<code>var a = 2</code>的时候，可能会认为这是一个声明，但是<code>JavaScript</code>实际上会将其看成两个声明<code>var a</code>和<code>a = 2</code>。第一个声明是在编译阶段进行的，第二个赋值声明会被留在原地等待执行。</p>\n<p>因此，我们上面的第一个代码块其实会被以如下方式进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a</span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>类似的，我们的第二个代码块 实际上是按这个流程来处理的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>这个过程就好像变量和函数声明从它们在代码中出现的位置被移动到了最上面，这个过程就叫做<strong>提升</strong>。</p>\n<blockquote>\n<p>简单的说就是，先声明，后赋值</p>\n</blockquote>\n<h1 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a =<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>foo</code>的声明被提升了，因此在第一行的调用中可以正常运行。</p>\n<p>另外，值得注意的是，每个作用域都会进行提升操作，就像我们正在讨论的<code>foo</code>也会在其内部对<code>var a</code>进行提升。因此，这段代码可以被理解为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<strong>函数声明会被提升，但是函数表达式不会</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() <span class=\"comment\">// 不是ReferenceError，而是TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段程序的变量标识符<code>foo()</code>被提升并分配给所在作用域，因此<code>foo()</code>不会导致<code>ReferenceError</code>，但是<code>foo</code>没有被赋值（如果它是函数声明而不是函数表达式，那么就会被赋值）。<code>foo</code>由于对<code>undefined</code>值进行函数调用而导致非法操作，所以抛出<code>TypeError</code>。</p>\n<p>实际上这段代码会被解析为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo()</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" target=\"_blank\" rel=\"noopener\">ReferenceError解释</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" target=\"_blank\" rel=\"noopener\">TypeError解释</a></p>\n</blockquote>\n<h1 id=\"函数优先\"><a href=\"#函数优先\" class=\"headerlink\" title=\"函数优先\"></a>函数优先</h1><p>函数声明和变量声明都会被提升，但是有一点值得注意：<strong>函数会首先被提升，然后才是变量</strong>。</p>\n<p>以这段代码来举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果会输出<code>1</code>而不是<code>2</code>。这段代码会被引擎解析为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尽管<code>var foo</code>出现在<code>function foo()</code>的声明之前，但它是重复声明（因此被忽略掉了），因为函数声明会被提到变量声明之前。</p>\n<p>于此同时，<strong>后面出现的函数声明可以覆盖前面的</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>我们习惯的将<code>var a = 2</code>看做一个声明，但是实际上<code>JavaScript</code>引擎并不这么认为，它将<code>var a</code>和<code>a = 2</code>当做两个单独的声明，第一个是编译阶段的任务，第二个是执行阶段的任务。</p>\n<p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。所有的函数和变量声明都会被移到各自作用域的最顶端，这个过程就是<strong>提升</strong>。</p>\n<p>声明本身会被提升，但是包括函数表达式在内的赋值操作不会被提升。</p>\n<p>函数优先原则。</p>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>直觉上我们一般会认为JavaScript代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确</p>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有一些特殊情况会导致这个假设是错误的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>那么<code>console.log(a)</code>会输出什么呢？</p>\n<p>我们很多人会认为是<code>undefined</code>，因为<code>var a</code>的声明在<code>a=2</code>的后面，因此就认为变量<code>a</code>被重新赋上默认值<code>undefined</code>。但是，实际输出的结果却是<strong>2</strong>。</p>\n<p>再看一个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>从上个代码块所变现出来的某种自上而下的行为特点，大家可能又会认为这个代码块也会输出<code>2</code>,甚至还会有人认为，由于变量<code>a</code>在使用前没有事先声明，所以会抛出异常。</p>\n<p>但是实际上，输出的会是<code>undefined</code>。</p>\n<blockquote>\n<p>所以我们就面临了一个问题，到底是声明在前还是赋值在前？</p>\n</blockquote>\n<h1 id=\"从编译器的角度来以上看问题\"><a href=\"#从编译器的角度来以上看问题\" class=\"headerlink\" title=\"从编译器的角度来以上看问题\"></a>从编译器的角度来以上看问题</h1><p>引擎会在解释<code>JavaScript</code>代码之前首先对其进行编译。</p>\n<p>编译阶段中的一部分工作就是<strong>找到所有的声明</strong>，并用合适的作用域将它们关联起来。</p>\n<p>所以，正确的思路应该是，包括变量和函数在内的所有<strong>声明</strong>都会在<strong>任何代码被执行前首先被处理</strong>。</p>\n<p>在我们看到<code>var a = 2</code>的时候，可能会认为这是一个声明，但是<code>JavaScript</code>实际上会将其看成两个声明<code>var a</code>和<code>a = 2</code>。第一个声明是在编译阶段进行的，第二个赋值声明会被留在原地等待执行。</p>\n<p>因此，我们上面的第一个代码块其实会被以如下方式进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a</span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>类似的，我们的第二个代码块 实际上是按这个流程来处理的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>这个过程就好像变量和函数声明从它们在代码中出现的位置被移动到了最上面，这个过程就叫做<strong>提升</strong>。</p>\n<blockquote>\n<p>简单的说就是，先声明，后赋值</p>\n</blockquote>\n<h1 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a =<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>foo</code>的声明被提升了，因此在第一行的调用中可以正常运行。</p>\n<p>另外，值得注意的是，每个作用域都会进行提升操作，就像我们正在讨论的<code>foo</code>也会在其内部对<code>var a</code>进行提升。因此，这段代码可以被理解为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<strong>函数声明会被提升，但是函数表达式不会</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() <span class=\"comment\">// 不是ReferenceError，而是TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段程序的变量标识符<code>foo()</code>被提升并分配给所在作用域，因此<code>foo()</code>不会导致<code>ReferenceError</code>，但是<code>foo</code>没有被赋值（如果它是函数声明而不是函数表达式，那么就会被赋值）。<code>foo</code>由于对<code>undefined</code>值进行函数调用而导致非法操作，所以抛出<code>TypeError</code>。</p>\n<p>实际上这段代码会被解析为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo()</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" target=\"_blank\" rel=\"noopener\">ReferenceError解释</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" target=\"_blank\" rel=\"noopener\">TypeError解释</a></p>\n</blockquote>\n<h1 id=\"函数优先\"><a href=\"#函数优先\" class=\"headerlink\" title=\"函数优先\"></a>函数优先</h1><p>函数声明和变量声明都会被提升，但是有一点值得注意：<strong>函数会首先被提升，然后才是变量</strong>。</p>\n<p>以这段代码来举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果会输出<code>1</code>而不是<code>2</code>。这段代码会被引擎解析为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尽管<code>var foo</code>出现在<code>function foo()</code>的声明之前，但它是重复声明（因此被忽略掉了），因为函数声明会被提到变量声明之前。</p>\n<p>于此同时，<strong>后面出现的函数声明可以覆盖前面的</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>我们习惯的将<code>var a = 2</code>看做一个声明，但是实际上<code>JavaScript</code>引擎并不这么认为，它将<code>var a</code>和<code>a = 2</code>当做两个单独的声明，第一个是编译阶段的任务，第二个是执行阶段的任务。</p>\n<p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。所有的函数和变量声明都会被移到各自作用域的最顶端，这个过程就是<strong>提升</strong>。</p>\n<p>声明本身会被提升，但是包括函数表达式在内的赋值操作不会被提升。</p>\n<p>函数优先原则。</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"TS进阶之--装饰器","date":"2021-08-10T06:47:43.000Z","description":null,"_content":"\n\n# 什么是装饰器\n\n`装饰器-Decorators` 在 `TypeScript` 中是一种可以在不修改类代码的基础上通过添加标注的方式来对类型进行扩展的一种方式\n\n<!-- more -->\n\n\n- 减少代码量\n- 提高代码扩展性、可读性和维护性\n\n> 在 `TypeScript` 中，装饰器只能在类中使用\n\n# 装饰器语法\n\n装饰器的使用极其的简单\n\n- 装饰器本质就是一个函数\n- 通过特定语法在特定的位置调用装饰器函数即可对数据（类、方法、甚至参数等）进行扩展\n\n**启用装饰器特性**\n\n- `experimentalDecorators: true`\n\n> `tsconfig.json`中进行配置\n\n```ts\nfunction log(target:Function,name:string,descriptor:PropertyDescriptor){\n  /**\n  *    target:被装饰的方法所属的类\n  *    被装饰的方法的名称\n  *    descriptor: 描述符\n  **/\n  // 把原始的方法提取出来\n  let fn = descriptor.value\n  descriptor.value = function(a:number,b:number){\n    let result = fn(a,b)  // 原先方法行为\n    console.log('日志：',{\n      name,\n      a,\n      b,\n      result\n    }) // 扩展行为\n\n    return result\n  }\n}\n\nclass M {\n  @log\n  static add(a:number,b:number){\n    return a+b\n  }\n}\n```\n\n# 装饰器细节\n\n`装饰器` 是一个函数，它可以通过 `@装饰器函数` 这种特殊的语法附加在 `类`、`方法` 、`访问符`、`属性`、`参数` 上，对它们进行包装，然后返回一个包装后的目标对象（`类`、`方法` 、`访问符`、`属性`、`参数` ），**装饰器工作在类的构建阶段，而不是使用阶段**\n\n```ts\nfunction d1(target:Function){\n  console.log(typeof target,target)\n}\nfunction d11(target:Function){\n  console.log(typeof target,target)\n}\n\nfunction d2(target:any,name:string){\n  console.log(typeof target,name)\n}\n\nfunction d3(target:any,name:string,descriptor: PropertyDescriptor){\n  console.log(typeof target,name,descriptor)\n}\n\nfunction d4(target:any,name:string,descriptor: PropertyDescriptor){\n  console.log(typeof target,name,descriptor)\n}\n\nfunction d5(target:any,name:string,index: number){\n  // name为当前参数所在的方法的名称\n  console.log(typeof target,name,index)\n}\n\n@d1 \n@d11  // 多个装饰器时 或 @d1 @d11\nclass MyClass {\n  \n  @d2\n  a: number;\n  \n  @d2\n  static property1: number;\n  \n  @d3\n  get b() { \n    return 1; \n  }\n  \n  @d3\n  static get c() {\n    return 2;\n  }\n  \n  @d4\n  public method1(@d5 x: number,@d5 y:number) {\n    //\n  }\n  \n  @d4\n  public static method2() {}\n}\n```\n\n\n## 类装饰器\n\n目标\n\n- 应用于类的构造函数\n\n参数\n\n- 第一个参数（也只有一个参数）\n  + 类的构造函数作为其唯一的参数\n\n\n## 属性装饰器\n\n目标\n\n- 应用于类的属性上\n\n参数\n\n- 第一个参数\n  + 静态方法：类的构造函数 (装饰`static property1`那么为`MyClass`)\n  + 实例方法：类的原型对象 (装饰的`a: number;`那么为`new MyClass()`实例后的对象)\n- 第二个参数\n  + 属性名称\n\n\n## 访问器装饰器\n\n目标\n\n- 应用于类的访问器（getter、setter）上\n\n参数\n\n- 第一个参数 (同属性装饰器)\n  - 静态方法：类的构造函数\n  - 实例方法：类的原型对象\n- 第二个参数\n  - 属性名称\n- 第三个参数\n  - 方法描述符对象\n\n\n## 方法装饰器\n\n目标\n\n- 应用于类的方法上\n\n参数\n\n- 第一个参数\n  - 静态方法：类的构造函数\n  - 实例方法：类的原型对象\n- 第二个参数\n  - 方法名称\n- 第三个参数\n  - 方法描述符对象\n\n\n## 参数装饰器\n\n目标\n\n- 应用在参数上\n\n参数\n\n- 第一个参数\n  - 静态方法：类的构造函数\n  - 实例方法：类的原型对象\n- 第二个参数\n  - 方法名称\n- 第三个参数\n  - 参数在函数参数列表中的索引\n\n\n# 装饰器执行顺序\n\n实例装饰器\n\n​\t\t属性 => 访问符 => 参数 => 方法\n\n静态装饰器\n\n​\t\t属性 => 访问符 => 参数 => 方法\n\n类\n\n​\t\t类\n\n\n# 装饰器工厂\n\n如果我们需要给装饰器执行过程中传入一些参数的时候，就可以使用装饰器工厂来实现\n\n```ts\nfunction log(callback: Function){\n  return function(target:Function,name:string,descriptor:PropertyDescriptor){\n    let value = descriptor.value\n    descriptor.value = function(x: number, y: number){\n      let result = value(x,y)\n      callback({\n        type,\n        a,\n        b,\n        result\n      });\n      return result;\n    }\n  }\n}\n\nclass M{\n  @log(function(result:any){\n    console.log('1111',result)\n  })\n  static add(x: number, y: number){\n    return x + y\n  }\n  @log(function(result:any){\n    console.log('222',result)\n  })\n  static sub(x: number, y: number){\n    return x - y\n  }\n}\nlet v1 = M.add(1, 2);\nconsole.log(v1);\nlet v2 = M.sub(1, 2);\nconsole.log(v2);\n```\n\n\n# 元数据\n\n在 `装饰器` 函数中 ，我们可以拿到 `类`、`方法` 、`访问符`、`属性`、`参数` 的基本信息，如它们的名称，描述符 等，但是我们想获取更多信息就需要通过另外的方式来进行：`元数据`\n\n## 什么是元数据？ \n\n`元数据` ：用来描述数据的数据，在我们的程序中，`对象`、`类` 等都是数据，它们描述了某种数据，另外还有一种数据，它可以用来描述 `对象`、`类`，这些用来描述数据的数据就是 `元数据`\n\n> 比如一首歌曲本身就是一组数据，同时还有一组用来描述歌曲的歌手、格式、时长的数据，那么这组数据就是歌曲数据的元数据\n\n```ts\n// 不使用元数据\nfunction L(type?:string){\n  return function(target:Function){\n    target.prototype.type = type\n  }\n}\nfunction log(type?: string){\n  return function(target:Function,name:string,descriptor:PropertyDescriptor){\n    // log方法装饰器是比L类方法装饰器先执行的\n    let value = descriptor.value\n    descriptor.value = function(x: number, y: number){\n      let result = value(x,y)\n      let _type = type\n      if(!_type){\n        _type = typeof target ===='function'?target.prototype.type : target.type\n      }\n      console.log({\n        _type,\n        a,\n        b,\n        result\n      });\n      return result;\n    }\n  }\n}\n\n@L('log')\nclass M{\n  @log('local')\n  static add(x: number, y: number){\n    return x + y\n  }\n  @log()\n  static sub(x: number, y: number){\n    return x - y\n  }\n}\nlet v1 = M.add(1, 2);\nconsole.log(v1);\nlet v2 = M.sub(1, 2);\nconsole.log(v2);\n```\n> 会添加额外的属性\n\n## 定义元数据\n\n使用 [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n\n\n首先，需要安装 `reflect-metadata`\n\n```shell\nnpm install reflect-metadata\n```\n\n我们可以 `类`、`方法` 等数据定义元数据\n\n- 元数据会被附加到指定的 `类`、`方法` 等数据之上，但是又不会影响 `类`、`方法` 本身的代码\n\n设置\n\n`Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)`\n\n- metadataKey：meta 数据的 key\n- metadataValue：meta 数据的 值\n- target：meta 数据附加的目标\n- propertyKey：对应的 property key\n\n调用方式\n\n- 通过  `Reflect.defineMetadata` 方法调用来添加 元数据\n\n- 通过 `@Reflect.metadata` 装饰器来添加 元数据\n\n\n```typescript\nimport \"reflect-metadata\"\n\n@Reflect.metadata(\"n\", 1)\nclass A {\n    @Reflect.metadata(\"n\", 2)\n    public static method1() {\n    }\n  \n  \t@Reflect.metadata(\"n\", 4)\n  \tpublic method2() {\n    }\n}\n\n// or\nReflect.defineMetadata('n', 1, A);\nReflect.defineMetadata('n', 2, A, 'method1');\n\nlet obj = new A();\nReflect.defineMetadata('n', 3, obj);\nReflect.defineMetadata('n', 4, obj, 'method2');\n\nconsole.log(Reflect.getMetadata('n', A));\nconsole.log(Reflect.getMetadata('n', A, ));\n```\n获取\n\n`Reflect.getMetadata(metadataKey, target, propertyKey)`\n\n参数的含义与 `defineMetadata` 对应\n\n## 使用元数据的 log 装饰器\n\n```typescript\nimport \"reflect-metadata\"\n// function L(type?:string){\n//   return function(target:Function){\n//     Reflect.defineMetadata(\"type\", type, target);\n//   }\n// }\nfunction log(type?: string){\n  return function(target:Function,name:string,descriptor:PropertyDescriptor){\n    // log方法装饰器是比L类方法装饰器先执行的\n    let value = descriptor.value\n    descriptor.value = function(x: number, y: number){\n      let result = value(x,y)\n      let _type = type\n      if(!_type){\n        if(typeof target ===='function'){\n          _type = Reflect.getMetadata(\"type\", target);\n        }else{\n          _type = Reflect.getMetadata('type',target.constructor)\n        }\n      }\n      console.log({\n        _type,\n        a,\n        b,\n        result\n      });\n      return result;\n    }\n  }\n}\n\n// @L('log')\n@Reflect.metadata('type','storage')\nclass M{\n  @log('local')\n  static add(x: number, y: number){\n    return x + y\n  }\n  @log()\n  static sub(x: number, y: number){\n    return x - y\n  }\n}\nlet v1 = M.add(1, 2);\nconsole.log(v1);\nlet v2 = M.sub(1, 2);\nconsole.log(v2);\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/TS进阶之-装饰器.md","raw":"---\ntitle: TS进阶之--装饰器\ndate: 2021-08-10 14:47:43\ntags:\n  - TypeScript\ncategories:\n  - TypeScript\ndescription:\n---\n\n\n# 什么是装饰器\n\n`装饰器-Decorators` 在 `TypeScript` 中是一种可以在不修改类代码的基础上通过添加标注的方式来对类型进行扩展的一种方式\n\n<!-- more -->\n\n\n- 减少代码量\n- 提高代码扩展性、可读性和维护性\n\n> 在 `TypeScript` 中，装饰器只能在类中使用\n\n# 装饰器语法\n\n装饰器的使用极其的简单\n\n- 装饰器本质就是一个函数\n- 通过特定语法在特定的位置调用装饰器函数即可对数据（类、方法、甚至参数等）进行扩展\n\n**启用装饰器特性**\n\n- `experimentalDecorators: true`\n\n> `tsconfig.json`中进行配置\n\n```ts\nfunction log(target:Function,name:string,descriptor:PropertyDescriptor){\n  /**\n  *    target:被装饰的方法所属的类\n  *    被装饰的方法的名称\n  *    descriptor: 描述符\n  **/\n  // 把原始的方法提取出来\n  let fn = descriptor.value\n  descriptor.value = function(a:number,b:number){\n    let result = fn(a,b)  // 原先方法行为\n    console.log('日志：',{\n      name,\n      a,\n      b,\n      result\n    }) // 扩展行为\n\n    return result\n  }\n}\n\nclass M {\n  @log\n  static add(a:number,b:number){\n    return a+b\n  }\n}\n```\n\n# 装饰器细节\n\n`装饰器` 是一个函数，它可以通过 `@装饰器函数` 这种特殊的语法附加在 `类`、`方法` 、`访问符`、`属性`、`参数` 上，对它们进行包装，然后返回一个包装后的目标对象（`类`、`方法` 、`访问符`、`属性`、`参数` ），**装饰器工作在类的构建阶段，而不是使用阶段**\n\n```ts\nfunction d1(target:Function){\n  console.log(typeof target,target)\n}\nfunction d11(target:Function){\n  console.log(typeof target,target)\n}\n\nfunction d2(target:any,name:string){\n  console.log(typeof target,name)\n}\n\nfunction d3(target:any,name:string,descriptor: PropertyDescriptor){\n  console.log(typeof target,name,descriptor)\n}\n\nfunction d4(target:any,name:string,descriptor: PropertyDescriptor){\n  console.log(typeof target,name,descriptor)\n}\n\nfunction d5(target:any,name:string,index: number){\n  // name为当前参数所在的方法的名称\n  console.log(typeof target,name,index)\n}\n\n@d1 \n@d11  // 多个装饰器时 或 @d1 @d11\nclass MyClass {\n  \n  @d2\n  a: number;\n  \n  @d2\n  static property1: number;\n  \n  @d3\n  get b() { \n    return 1; \n  }\n  \n  @d3\n  static get c() {\n    return 2;\n  }\n  \n  @d4\n  public method1(@d5 x: number,@d5 y:number) {\n    //\n  }\n  \n  @d4\n  public static method2() {}\n}\n```\n\n\n## 类装饰器\n\n目标\n\n- 应用于类的构造函数\n\n参数\n\n- 第一个参数（也只有一个参数）\n  + 类的构造函数作为其唯一的参数\n\n\n## 属性装饰器\n\n目标\n\n- 应用于类的属性上\n\n参数\n\n- 第一个参数\n  + 静态方法：类的构造函数 (装饰`static property1`那么为`MyClass`)\n  + 实例方法：类的原型对象 (装饰的`a: number;`那么为`new MyClass()`实例后的对象)\n- 第二个参数\n  + 属性名称\n\n\n## 访问器装饰器\n\n目标\n\n- 应用于类的访问器（getter、setter）上\n\n参数\n\n- 第一个参数 (同属性装饰器)\n  - 静态方法：类的构造函数\n  - 实例方法：类的原型对象\n- 第二个参数\n  - 属性名称\n- 第三个参数\n  - 方法描述符对象\n\n\n## 方法装饰器\n\n目标\n\n- 应用于类的方法上\n\n参数\n\n- 第一个参数\n  - 静态方法：类的构造函数\n  - 实例方法：类的原型对象\n- 第二个参数\n  - 方法名称\n- 第三个参数\n  - 方法描述符对象\n\n\n## 参数装饰器\n\n目标\n\n- 应用在参数上\n\n参数\n\n- 第一个参数\n  - 静态方法：类的构造函数\n  - 实例方法：类的原型对象\n- 第二个参数\n  - 方法名称\n- 第三个参数\n  - 参数在函数参数列表中的索引\n\n\n# 装饰器执行顺序\n\n实例装饰器\n\n​\t\t属性 => 访问符 => 参数 => 方法\n\n静态装饰器\n\n​\t\t属性 => 访问符 => 参数 => 方法\n\n类\n\n​\t\t类\n\n\n# 装饰器工厂\n\n如果我们需要给装饰器执行过程中传入一些参数的时候，就可以使用装饰器工厂来实现\n\n```ts\nfunction log(callback: Function){\n  return function(target:Function,name:string,descriptor:PropertyDescriptor){\n    let value = descriptor.value\n    descriptor.value = function(x: number, y: number){\n      let result = value(x,y)\n      callback({\n        type,\n        a,\n        b,\n        result\n      });\n      return result;\n    }\n  }\n}\n\nclass M{\n  @log(function(result:any){\n    console.log('1111',result)\n  })\n  static add(x: number, y: number){\n    return x + y\n  }\n  @log(function(result:any){\n    console.log('222',result)\n  })\n  static sub(x: number, y: number){\n    return x - y\n  }\n}\nlet v1 = M.add(1, 2);\nconsole.log(v1);\nlet v2 = M.sub(1, 2);\nconsole.log(v2);\n```\n\n\n# 元数据\n\n在 `装饰器` 函数中 ，我们可以拿到 `类`、`方法` 、`访问符`、`属性`、`参数` 的基本信息，如它们的名称，描述符 等，但是我们想获取更多信息就需要通过另外的方式来进行：`元数据`\n\n## 什么是元数据？ \n\n`元数据` ：用来描述数据的数据，在我们的程序中，`对象`、`类` 等都是数据，它们描述了某种数据，另外还有一种数据，它可以用来描述 `对象`、`类`，这些用来描述数据的数据就是 `元数据`\n\n> 比如一首歌曲本身就是一组数据，同时还有一组用来描述歌曲的歌手、格式、时长的数据，那么这组数据就是歌曲数据的元数据\n\n```ts\n// 不使用元数据\nfunction L(type?:string){\n  return function(target:Function){\n    target.prototype.type = type\n  }\n}\nfunction log(type?: string){\n  return function(target:Function,name:string,descriptor:PropertyDescriptor){\n    // log方法装饰器是比L类方法装饰器先执行的\n    let value = descriptor.value\n    descriptor.value = function(x: number, y: number){\n      let result = value(x,y)\n      let _type = type\n      if(!_type){\n        _type = typeof target ===='function'?target.prototype.type : target.type\n      }\n      console.log({\n        _type,\n        a,\n        b,\n        result\n      });\n      return result;\n    }\n  }\n}\n\n@L('log')\nclass M{\n  @log('local')\n  static add(x: number, y: number){\n    return x + y\n  }\n  @log()\n  static sub(x: number, y: number){\n    return x - y\n  }\n}\nlet v1 = M.add(1, 2);\nconsole.log(v1);\nlet v2 = M.sub(1, 2);\nconsole.log(v2);\n```\n> 会添加额外的属性\n\n## 定义元数据\n\n使用 [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n\n\n首先，需要安装 `reflect-metadata`\n\n```shell\nnpm install reflect-metadata\n```\n\n我们可以 `类`、`方法` 等数据定义元数据\n\n- 元数据会被附加到指定的 `类`、`方法` 等数据之上，但是又不会影响 `类`、`方法` 本身的代码\n\n设置\n\n`Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)`\n\n- metadataKey：meta 数据的 key\n- metadataValue：meta 数据的 值\n- target：meta 数据附加的目标\n- propertyKey：对应的 property key\n\n调用方式\n\n- 通过  `Reflect.defineMetadata` 方法调用来添加 元数据\n\n- 通过 `@Reflect.metadata` 装饰器来添加 元数据\n\n\n```typescript\nimport \"reflect-metadata\"\n\n@Reflect.metadata(\"n\", 1)\nclass A {\n    @Reflect.metadata(\"n\", 2)\n    public static method1() {\n    }\n  \n  \t@Reflect.metadata(\"n\", 4)\n  \tpublic method2() {\n    }\n}\n\n// or\nReflect.defineMetadata('n', 1, A);\nReflect.defineMetadata('n', 2, A, 'method1');\n\nlet obj = new A();\nReflect.defineMetadata('n', 3, obj);\nReflect.defineMetadata('n', 4, obj, 'method2');\n\nconsole.log(Reflect.getMetadata('n', A));\nconsole.log(Reflect.getMetadata('n', A, ));\n```\n获取\n\n`Reflect.getMetadata(metadataKey, target, propertyKey)`\n\n参数的含义与 `defineMetadata` 对应\n\n## 使用元数据的 log 装饰器\n\n```typescript\nimport \"reflect-metadata\"\n// function L(type?:string){\n//   return function(target:Function){\n//     Reflect.defineMetadata(\"type\", type, target);\n//   }\n// }\nfunction log(type?: string){\n  return function(target:Function,name:string,descriptor:PropertyDescriptor){\n    // log方法装饰器是比L类方法装饰器先执行的\n    let value = descriptor.value\n    descriptor.value = function(x: number, y: number){\n      let result = value(x,y)\n      let _type = type\n      if(!_type){\n        if(typeof target ===='function'){\n          _type = Reflect.getMetadata(\"type\", target);\n        }else{\n          _type = Reflect.getMetadata('type',target.constructor)\n        }\n      }\n      console.log({\n        _type,\n        a,\n        b,\n        result\n      });\n      return result;\n    }\n  }\n}\n\n// @L('log')\n@Reflect.metadata('type','storage')\nclass M{\n  @log('local')\n  static add(x: number, y: number){\n    return x + y\n  }\n  @log()\n  static sub(x: number, y: number){\n    return x - y\n  }\n}\nlet v1 = M.add(1, 2);\nconsole.log(v1);\nlet v2 = M.sub(1, 2);\nconsole.log(v2);\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/TS进阶之-装饰器","published":1,"updated":"2021-08-10T08:17:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54100451r0qca78f0bn","content":"<h1 id=\"什么是装饰器\"><a href=\"#什么是装饰器\" class=\"headerlink\" title=\"什么是装饰器\"></a>什么是装饰器</h1><p><code>装饰器-Decorators</code> 在 <code>TypeScript</code> 中是一种可以在不修改类代码的基础上通过添加标注的方式来对类型进行扩展的一种方式</p>\n<a id=\"more\"></a>\n\n\n<ul>\n<li>减少代码量</li>\n<li>提高代码扩展性、可读性和维护性</li>\n</ul>\n<blockquote>\n<p>在 <code>TypeScript</code> 中，装饰器只能在类中使用</p>\n</blockquote>\n<h1 id=\"装饰器语法\"><a href=\"#装饰器语法\" class=\"headerlink\" title=\"装饰器语法\"></a>装饰器语法</h1><p>装饰器的使用极其的简单</p>\n<ul>\n<li>装饰器本质就是一个函数</li>\n<li>通过特定语法在特定的位置调用装饰器函数即可对数据（类、方法、甚至参数等）进行扩展</li>\n</ul>\n<p><strong>启用装饰器特性</strong></p>\n<ul>\n<li><code>experimentalDecorators: true</code></li>\n</ul>\n<blockquote>\n<p><code>tsconfig.json</code>中进行配置</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  *    target:被装饰的方法所属的类</span></span><br><span class=\"line\"><span class=\"comment\">  *    被装饰的方法的名称</span></span><br><span class=\"line\"><span class=\"comment\">  *    descriptor: 描述符</span></span><br><span class=\"line\"><span class=\"comment\">  **/</span></span><br><span class=\"line\">  <span class=\"comment\">// 把原始的方法提取出来</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = descriptor.value</span><br><span class=\"line\">  descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = fn(a,b)  <span class=\"comment\">// 原先方法行为</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'日志：'</span>,&#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      a,</span><br><span class=\"line\">      b,</span><br><span class=\"line\">      result</span><br><span class=\"line\">    &#125;) <span class=\"comment\">// 扩展行为</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> M &#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"装饰器细节\"><a href=\"#装饰器细节\" class=\"headerlink\" title=\"装饰器细节\"></a>装饰器细节</h1><p><code>装饰器</code> 是一个函数，它可以通过 <code>@装饰器函数</code> 这种特殊的语法附加在 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 上，对它们进行包装，然后返回一个包装后的目标对象（<code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> ），<strong>装饰器工作在类的构建阶段，而不是使用阶段</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d1</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,target)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d11</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,target)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d2</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d3</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name,descriptor)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d4</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name,descriptor)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d5</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span>,index: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// name为当前参数所在的方法的名称</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name,index)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d1</span> </span><br><span class=\"line\"><span class=\"meta\">@d11</span>  <span class=\"comment\">// 多个装饰器时 或 @d1 @d11</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyClass &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d2</span></span><br><span class=\"line\">  a: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d2</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> property1: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d3</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> b() &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d3</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> c() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d4</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> method1(<span class=\"meta\">@d5</span> x: <span class=\"built_in\">number</span>,<span class=\"meta\">@d5</span> y:<span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d4</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> method2() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的构造函数</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数（也只有一个参数）<ul>\n<li>类的构造函数作为其唯一的参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的属性上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数<ul>\n<li>静态方法：类的构造函数 (装饰<code>static property1</code>那么为<code>MyClass</code>)</li>\n<li>实例方法：类的原型对象 (装饰的<code>a: number;</code>那么为<code>new MyClass()</code>实例后的对象)</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>属性名称</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"访问器装饰器\"><a href=\"#访问器装饰器\" class=\"headerlink\" title=\"访问器装饰器\"></a>访问器装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的访问器（getter、setter）上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数 (同属性装饰器)<ul>\n<li>静态方法：类的构造函数</li>\n<li>实例方法：类的原型对象</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>属性名称</li>\n</ul>\n</li>\n<li>第三个参数<ul>\n<li>方法描述符对象</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的方法上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数<ul>\n<li>静态方法：类的构造函数</li>\n<li>实例方法：类的原型对象</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>方法名称</li>\n</ul>\n</li>\n<li>第三个参数<ul>\n<li>方法描述符对象</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h2><p>目标</p>\n<ul>\n<li>应用在参数上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数<ul>\n<li>静态方法：类的构造函数</li>\n<li>实例方法：类的原型对象</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>方法名称</li>\n</ul>\n</li>\n<li>第三个参数<ul>\n<li>参数在函数参数列表中的索引</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"装饰器执行顺序\"><a href=\"#装饰器执行顺序\" class=\"headerlink\" title=\"装饰器执行顺序\"></a>装饰器执行顺序</h1><p>实例装饰器</p>\n<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>\n<p>静态装饰器</p>\n<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>\n<p>类</p>\n<p>​        类</p>\n<h1 id=\"装饰器工厂\"><a href=\"#装饰器工厂\" class=\"headerlink\" title=\"装饰器工厂\"></a>装饰器工厂</h1><p>如果我们需要给装饰器执行过程中传入一些参数的时候，就可以使用装饰器工厂来实现</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">callback: <span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = descriptor.value</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = value(x,y)</span><br><span class=\"line\">      callback(&#123;</span><br><span class=\"line\">        <span class=\"keyword\">type</span>,</span><br><span class=\"line\">        a,</span><br><span class=\"line\">        b,</span><br><span class=\"line\">        result</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> M&#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result:<span class=\"built_in\">any</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1111'</span>,result)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result:<span class=\"built_in\">any</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'222'</span>,result)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> sub(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = M.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = M.sub(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v2);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h1><p>在 <code>装饰器</code> 函数中 ，我们可以拿到 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 的基本信息，如它们的名称，描述符 等，但是我们想获取更多信息就需要通过另外的方式来进行：<code>元数据</code></p>\n<h2 id=\"什么是元数据？\"><a href=\"#什么是元数据？\" class=\"headerlink\" title=\"什么是元数据？\"></a>什么是元数据？</h2><p><code>元数据</code> ：用来描述数据的数据，在我们的程序中，<code>对象</code>、<code>类</code> 等都是数据，它们描述了某种数据，另外还有一种数据，它可以用来描述 <code>对象</code>、<code>类</code>，这些用来描述数据的数据就是 <code>元数据</code></p>\n<blockquote>\n<p>比如一首歌曲本身就是一组数据，同时还有一组用来描述歌曲的歌手、格式、时长的数据，那么这组数据就是歌曲数据的元数据</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用元数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">L</span>(<span class=\"params\"><span class=\"keyword\">type</span>?:<span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">    target.prototype.type = <span class=\"keyword\">type</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"><span class=\"keyword\">type</span>?: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = descriptor.value</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = value(x,y)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _type = <span class=\"keyword\">type</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!_type)&#123;</span><br><span class=\"line\">        _type = <span class=\"keyword\">typeof</span> target ====<span class=\"string\">'function'</span>?target.prototype.type : target.type</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(&#123;</span><br><span class=\"line\">        _type,</span><br><span class=\"line\">        a,</span><br><span class=\"line\">        b,</span><br><span class=\"line\">        result</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@L</span>(<span class=\"string\">'log'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> M&#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"string\">'local'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>()</span><br><span class=\"line\">  <span class=\"keyword\">static</span> sub(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = M.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = M.sub(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v2);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>会添加额外的属性</p>\n</blockquote>\n<h2 id=\"定义元数据\"><a href=\"#定义元数据\" class=\"headerlink\" title=\"定义元数据\"></a>定义元数据</h2><p>使用 <a href=\"https://www.npmjs.com/package/reflect-metadata\" target=\"_blank\" rel=\"noopener\">reflect-metadata</a></p>\n<p>首先，需要安装 <code>reflect-metadata</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install reflect-metadata</span><br></pre></td></tr></table></figure>\n\n<p>我们可以 <code>类</code>、<code>方法</code> 等数据定义元数据</p>\n<ul>\n<li>元数据会被附加到指定的 <code>类</code>、<code>方法</code> 等数据之上，但是又不会影响 <code>类</code>、<code>方法</code> 本身的代码</li>\n</ul>\n<p>设置</p>\n<p><code>Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)</code></p>\n<ul>\n<li>metadataKey：meta 数据的 key</li>\n<li>metadataValue：meta 数据的 值</li>\n<li>target：meta 数据附加的目标</li>\n<li>propertyKey：对应的 property key</li>\n</ul>\n<p>调用方式</p>\n<ul>\n<li><p>通过  <code>Reflect.defineMetadata</code> 方法调用来添加 元数据</p>\n</li>\n<li><p>通过 <code>@Reflect.metadata</code> 装饰器来添加 元数据</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">\"n\"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">\"n\"</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> method1() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \t<span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">\"n\"</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  \t<span class=\"keyword\">public</span> method2() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">1</span>, A);</span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">2</span>, A, <span class=\"string\">'method1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">3</span>, obj);</span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">4</span>, obj, <span class=\"string\">'method2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Reflect.getMetadata(<span class=\"string\">'n'</span>, A));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Reflect.getMetadata(<span class=\"string\">'n'</span>, A, ));</span><br></pre></td></tr></table></figure>\n<p>获取</p>\n<p><code>Reflect.getMetadata(metadataKey, target, propertyKey)</code></p>\n<p>参数的含义与 <code>defineMetadata</code> 对应</p>\n<h2 id=\"使用元数据的-log-装饰器\"><a href=\"#使用元数据的-log-装饰器\" class=\"headerlink\" title=\"使用元数据的 log 装饰器\"></a>使用元数据的 log 装饰器</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span></span><br><span class=\"line\"><span class=\"comment\">// function L(type?:string)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return function(target:Function)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     Reflect.defineMetadata(\"type\", type, target);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"><span class=\"keyword\">type</span>?: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = descriptor.value</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = value(x,y)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _type = <span class=\"keyword\">type</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!_type)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target ====<span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">          _type = Reflect.getMetadata(<span class=\"string\">\"type\"</span>, target);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          _type = Reflect.getMetadata(<span class=\"string\">'type'</span>,target.<span class=\"keyword\">constructor</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      console.log(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\">        _type,</span></span><br><span class=\"line\"><span class=\"params\">        a,</span></span><br><span class=\"line\"><span class=\"params\">        b,</span></span><br><span class=\"line\"><span class=\"params\">        result</span></span><br><span class=\"line\"><span class=\"params\">      &#125;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @L('log')</span></span><br><span class=\"line\"><span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">'type'</span>,<span class=\"string\">'storage'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> M&#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"string\">'local'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>()</span><br><span class=\"line\">  <span class=\"keyword\">static</span> sub(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = M.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = M.sub(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v2);</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<h1 id=\"什么是装饰器\"><a href=\"#什么是装饰器\" class=\"headerlink\" title=\"什么是装饰器\"></a>什么是装饰器</h1><p><code>装饰器-Decorators</code> 在 <code>TypeScript</code> 中是一种可以在不修改类代码的基础上通过添加标注的方式来对类型进行扩展的一种方式</p>","more":"<ul>\n<li>减少代码量</li>\n<li>提高代码扩展性、可读性和维护性</li>\n</ul>\n<blockquote>\n<p>在 <code>TypeScript</code> 中，装饰器只能在类中使用</p>\n</blockquote>\n<h1 id=\"装饰器语法\"><a href=\"#装饰器语法\" class=\"headerlink\" title=\"装饰器语法\"></a>装饰器语法</h1><p>装饰器的使用极其的简单</p>\n<ul>\n<li>装饰器本质就是一个函数</li>\n<li>通过特定语法在特定的位置调用装饰器函数即可对数据（类、方法、甚至参数等）进行扩展</li>\n</ul>\n<p><strong>启用装饰器特性</strong></p>\n<ul>\n<li><code>experimentalDecorators: true</code></li>\n</ul>\n<blockquote>\n<p><code>tsconfig.json</code>中进行配置</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  *    target:被装饰的方法所属的类</span></span><br><span class=\"line\"><span class=\"comment\">  *    被装饰的方法的名称</span></span><br><span class=\"line\"><span class=\"comment\">  *    descriptor: 描述符</span></span><br><span class=\"line\"><span class=\"comment\">  **/</span></span><br><span class=\"line\">  <span class=\"comment\">// 把原始的方法提取出来</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = descriptor.value</span><br><span class=\"line\">  descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = fn(a,b)  <span class=\"comment\">// 原先方法行为</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'日志：'</span>,&#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      a,</span><br><span class=\"line\">      b,</span><br><span class=\"line\">      result</span><br><span class=\"line\">    &#125;) <span class=\"comment\">// 扩展行为</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> M &#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"装饰器细节\"><a href=\"#装饰器细节\" class=\"headerlink\" title=\"装饰器细节\"></a>装饰器细节</h1><p><code>装饰器</code> 是一个函数，它可以通过 <code>@装饰器函数</code> 这种特殊的语法附加在 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 上，对它们进行包装，然后返回一个包装后的目标对象（<code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> ），<strong>装饰器工作在类的构建阶段，而不是使用阶段</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d1</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,target)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d11</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,target)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d2</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d3</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name,descriptor)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d4</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span>,descriptor: PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name,descriptor)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d5</span>(<span class=\"params\">target:<span class=\"built_in\">any</span>,name:<span class=\"built_in\">string</span>,index: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// name为当前参数所在的方法的名称</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> target,name,index)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d1</span> </span><br><span class=\"line\"><span class=\"meta\">@d11</span>  <span class=\"comment\">// 多个装饰器时 或 @d1 @d11</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyClass &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d2</span></span><br><span class=\"line\">  a: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d2</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> property1: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d3</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> b() &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d3</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> c() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d4</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> method1(<span class=\"meta\">@d5</span> x: <span class=\"built_in\">number</span>,<span class=\"meta\">@d5</span> y:<span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@d4</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> method2() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的构造函数</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数（也只有一个参数）<ul>\n<li>类的构造函数作为其唯一的参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的属性上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数<ul>\n<li>静态方法：类的构造函数 (装饰<code>static property1</code>那么为<code>MyClass</code>)</li>\n<li>实例方法：类的原型对象 (装饰的<code>a: number;</code>那么为<code>new MyClass()</code>实例后的对象)</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>属性名称</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"访问器装饰器\"><a href=\"#访问器装饰器\" class=\"headerlink\" title=\"访问器装饰器\"></a>访问器装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的访问器（getter、setter）上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数 (同属性装饰器)<ul>\n<li>静态方法：类的构造函数</li>\n<li>实例方法：类的原型对象</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>属性名称</li>\n</ul>\n</li>\n<li>第三个参数<ul>\n<li>方法描述符对象</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h2><p>目标</p>\n<ul>\n<li>应用于类的方法上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数<ul>\n<li>静态方法：类的构造函数</li>\n<li>实例方法：类的原型对象</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>方法名称</li>\n</ul>\n</li>\n<li>第三个参数<ul>\n<li>方法描述符对象</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h2><p>目标</p>\n<ul>\n<li>应用在参数上</li>\n</ul>\n<p>参数</p>\n<ul>\n<li>第一个参数<ul>\n<li>静态方法：类的构造函数</li>\n<li>实例方法：类的原型对象</li>\n</ul>\n</li>\n<li>第二个参数<ul>\n<li>方法名称</li>\n</ul>\n</li>\n<li>第三个参数<ul>\n<li>参数在函数参数列表中的索引</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"装饰器执行顺序\"><a href=\"#装饰器执行顺序\" class=\"headerlink\" title=\"装饰器执行顺序\"></a>装饰器执行顺序</h1><p>实例装饰器</p>\n<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>\n<p>静态装饰器</p>\n<p>​        属性 =&gt; 访问符 =&gt; 参数 =&gt; 方法</p>\n<p>类</p>\n<p>​        类</p>\n<h1 id=\"装饰器工厂\"><a href=\"#装饰器工厂\" class=\"headerlink\" title=\"装饰器工厂\"></a>装饰器工厂</h1><p>如果我们需要给装饰器执行过程中传入一些参数的时候，就可以使用装饰器工厂来实现</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">callback: <span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = descriptor.value</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = value(x,y)</span><br><span class=\"line\">      callback(&#123;</span><br><span class=\"line\">        <span class=\"keyword\">type</span>,</span><br><span class=\"line\">        a,</span><br><span class=\"line\">        b,</span><br><span class=\"line\">        result</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> M&#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result:<span class=\"built_in\">any</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1111'</span>,result)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result:<span class=\"built_in\">any</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'222'</span>,result)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> sub(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = M.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = M.sub(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v2);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h1><p>在 <code>装饰器</code> 函数中 ，我们可以拿到 <code>类</code>、<code>方法</code> 、<code>访问符</code>、<code>属性</code>、<code>参数</code> 的基本信息，如它们的名称，描述符 等，但是我们想获取更多信息就需要通过另外的方式来进行：<code>元数据</code></p>\n<h2 id=\"什么是元数据？\"><a href=\"#什么是元数据？\" class=\"headerlink\" title=\"什么是元数据？\"></a>什么是元数据？</h2><p><code>元数据</code> ：用来描述数据的数据，在我们的程序中，<code>对象</code>、<code>类</code> 等都是数据，它们描述了某种数据，另外还有一种数据，它可以用来描述 <code>对象</code>、<code>类</code>，这些用来描述数据的数据就是 <code>元数据</code></p>\n<blockquote>\n<p>比如一首歌曲本身就是一组数据，同时还有一组用来描述歌曲的歌手、格式、时长的数据，那么这组数据就是歌曲数据的元数据</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用元数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">L</span>(<span class=\"params\"><span class=\"keyword\">type</span>?:<span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span></span>)</span>&#123;</span><br><span class=\"line\">    target.prototype.type = <span class=\"keyword\">type</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"><span class=\"keyword\">type</span>?: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = descriptor.value</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = value(x,y)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _type = <span class=\"keyword\">type</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!_type)&#123;</span><br><span class=\"line\">        _type = <span class=\"keyword\">typeof</span> target ====<span class=\"string\">'function'</span>?target.prototype.type : target.type</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(&#123;</span><br><span class=\"line\">        _type,</span><br><span class=\"line\">        a,</span><br><span class=\"line\">        b,</span><br><span class=\"line\">        result</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@L</span>(<span class=\"string\">'log'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> M&#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"string\">'local'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>()</span><br><span class=\"line\">  <span class=\"keyword\">static</span> sub(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = M.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = M.sub(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v2);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>会添加额外的属性</p>\n</blockquote>\n<h2 id=\"定义元数据\"><a href=\"#定义元数据\" class=\"headerlink\" title=\"定义元数据\"></a>定义元数据</h2><p>使用 <a href=\"https://www.npmjs.com/package/reflect-metadata\" target=\"_blank\" rel=\"noopener\">reflect-metadata</a></p>\n<p>首先，需要安装 <code>reflect-metadata</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install reflect-metadata</span><br></pre></td></tr></table></figure>\n\n<p>我们可以 <code>类</code>、<code>方法</code> 等数据定义元数据</p>\n<ul>\n<li>元数据会被附加到指定的 <code>类</code>、<code>方法</code> 等数据之上，但是又不会影响 <code>类</code>、<code>方法</code> 本身的代码</li>\n</ul>\n<p>设置</p>\n<p><code>Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)</code></p>\n<ul>\n<li>metadataKey：meta 数据的 key</li>\n<li>metadataValue：meta 数据的 值</li>\n<li>target：meta 数据附加的目标</li>\n<li>propertyKey：对应的 property key</li>\n</ul>\n<p>调用方式</p>\n<ul>\n<li><p>通过  <code>Reflect.defineMetadata</code> 方法调用来添加 元数据</p>\n</li>\n<li><p>通过 <code>@Reflect.metadata</code> 装饰器来添加 元数据</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">\"n\"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">\"n\"</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> method1() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \t<span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">\"n\"</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  \t<span class=\"keyword\">public</span> method2() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">1</span>, A);</span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">2</span>, A, <span class=\"string\">'method1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">3</span>, obj);</span><br><span class=\"line\">Reflect.defineMetadata(<span class=\"string\">'n'</span>, <span class=\"number\">4</span>, obj, <span class=\"string\">'method2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Reflect.getMetadata(<span class=\"string\">'n'</span>, A));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Reflect.getMetadata(<span class=\"string\">'n'</span>, A, ));</span><br></pre></td></tr></table></figure>\n<p>获取</p>\n<p><code>Reflect.getMetadata(metadataKey, target, propertyKey)</code></p>\n<p>参数的含义与 <code>defineMetadata</code> 对应</p>\n<h2 id=\"使用元数据的-log-装饰器\"><a href=\"#使用元数据的-log-装饰器\" class=\"headerlink\" title=\"使用元数据的 log 装饰器\"></a>使用元数据的 log 装饰器</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span></span><br><span class=\"line\"><span class=\"comment\">// function L(type?:string)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return function(target:Function)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     Reflect.defineMetadata(\"type\", type, target);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"><span class=\"keyword\">type</span>?: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target:<span class=\"built_in\">Function</span>,name:<span class=\"built_in\">string</span>,descriptor:PropertyDescriptor</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// log方法装饰器是比L类方法装饰器先执行的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = descriptor.value</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = value(x,y)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _type = <span class=\"keyword\">type</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!_type)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target ====<span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">          _type = Reflect.getMetadata(<span class=\"string\">\"type\"</span>, target);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          _type = Reflect.getMetadata(<span class=\"string\">'type'</span>,target.<span class=\"keyword\">constructor</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      console.log(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\">        _type,</span></span><br><span class=\"line\"><span class=\"params\">        a,</span></span><br><span class=\"line\"><span class=\"params\">        b,</span></span><br><span class=\"line\"><span class=\"params\">        result</span></span><br><span class=\"line\"><span class=\"params\">      &#125;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @L('log')</span></span><br><span class=\"line\"><span class=\"meta\">@Reflect</span>.metadata(<span class=\"string\">'type'</span>,<span class=\"string\">'storage'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> M&#123;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>(<span class=\"string\">'local'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> add(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@log</span>()</span><br><span class=\"line\">  <span class=\"keyword\">static</span> sub(x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = M.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = M.sub(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v2);</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"TypeScript还不会?看完这篇就行了","date":"2021-08-09T06:29:26.000Z","description":null,"_content":"\n# TypeScript究竟是什么呢？\n\n<!-- more -->\n\n- JavaScript that scales\n\n- 静态类型风格的类型系统\n\n- 从es6到es10甚至是esnext的语法支持\n\n- 兼容各种浏览器、各种系统、各种服务器，完全开源\n\n>  [ts官网](https://tslang.cn)\n\n## 为什么要使用TS\n\n- 程序更容易理解\n\n  > 函数或者方法输入输出的类型参数，外部条件等 \n  > 动态语言的约束：需要手动调试等过程\n  > 有了TS:代码本事就可以回答上述问题\n\n- 效率更高\n \n > 在不同的代码块和定义中进行跳转 \n > 代码自动补全\n > 丰富的接口提示\n\n- 更少的错误\n\n  > 编译期间能够发现大部分错误\n  > 杜绝一些常见错误\n\n- 非常好的包容性\n \n  > 完全兼容JavaScript\n  > 第三方库可以单独编写类型文件\n\n## 一些缺点：\n\n+ 增加了一些学习成本\n\n+ 短时间内增加了一些开发成本\n\n# 安装TypeScript\n\n```cmd\nnpm install -g typescript\n```\n\n# 原始数据类型和any类型\n\n```ts\nlet isDone:boolen = false\nlet age:number = 10\nlet firstName:string = 'Joker'\nlet message:string = `Hello ${firstName}!`\nlet u:undefined = undefined\nlet n:null = null\n\nlet num:number = undefined\n\nlet notSure:any = 4\nnotSure = 'Maybe a string'\nnotSure = true\n\nnotSure.myName\nnotSure.getName()\n// 如果有明确类型要避免使用any，any可以任意调用方法和属性很有可能出现错误，就失去了类型检查的作用\n\n```\n\n# 数组和元祖\n\n```ts\nlet arrOfNumber:number[] = [1,2,3]\narrOfNumber.push(4)\n\n\n// 元祖\nlet user:[string,number] = ['Joker',666]\nuser.push('123')\n```\n\n# interface 接口\n\n> - 对对象的形状（shape)进行描述\n> - Duck Typing(鸭子类型)\n\n```ts\ninterface IPerson{\n  readonly id:number;//只读属性\n  name:string;\n  age:number;\n  tel?:number;  //可选属性\n}\nlet Joker:IPerson = {\n  id:1,\n  name:'Joker',\n  age:25\n}\n```\n\n# function 函数\n\n> 在js中function是一等公民\n\n```ts\n// z 为可选参\nfunction add(x:number,y:number,z?:number):number{\n  if(typeof z === 'number'){\n    return x + y + z\n  }\n  return x + y\n}\nconst sum = （x:number,y:number,z?:number):number => {\n  if(typeof z === 'number'){\n    return x + y + z\n  }\n  return x + y\n}\n\nlet result = add(1,2)\n\ninterface ISum {\n  (x:number,y:number,z?:number):number\n}\n\nlet add2:(x:number,y:number,z?:number)=>number = add\nlet add3:ISum = add\n\n```\n\n## 类型推论 联合类型和类型断言\n\n```ts\nlet str = 'str'\n\n// union types\nlet numberOrString:number|string  //连盒类型\nnumberOrString='abc'\nnumberOrString=123\n\nfunction getLength(input:string:number):number{\n  const str = input as string // 类型断言\n  if(str.length){\n    return str.length\n  }else{\n    const number = input as number\n    return number.toString().length\n  }\n}\n\n// type guard\n\nfunction getLength2(input:string:number):number{\n  if(typeof input ==='string'){\n    return input.length\n  }else{\n    return input.toString().length\n  }\n}\n\n```\n\n# 类Class\n\n## js中的类\n\n- 类(Class):定义了一切事物的抽象特点\n\n- 对象（Object):类的实例\n\n- 面向对象(OOP)三大特性:封装、继承、多态\n\n```ts\nclass Animal{\n  constructor(name){\n    this.name = name\n  }\n  run(){\n    return `${this.name} is running!`\n  }\n}\n\nconst dog = new Animal('japan')\n\nconsole.log(dog.run())\n\nclass Pig extends Animal{\n  bark(){\n    return `${this.name} is barking!`\n  }\n}\n\nconst tlp = new Pig('tlp')\nconsole.log(tlp.run())\nconsole.log(tlp.bark())\n\nclass Cat extends Animal{\n  static categories = ['cat']\n  constructor(name){\n    super(name)\n  }\n  run(){\n    return 'Meow, ' + super.run()\n  }\n}\nconst maomao = new Cat('maomao')\nconsole.log(maomao.run())\nconsole.log(Cat.categories)\n\n```\n\n\n## TS中的类\n\n- Public:修饰的属性是共有的\n\n- Private:修饰的属性或者方法是私有的\n\n- Protected:修饰的属性或方法是受保护的\n\n```ts\nclass Animal{\n  readonly name:string //只读\n  constructor(name){\n    this.name = name\n  }\n  private eat(){ // 仅在本事和\n    return 'eat'\n  }\n  protected run(){  // 本身和子类\n    return `${this.name} is running!`\n  }\n}\n\nconst dog = new Animal('japan')\n\nconsole.log(dog.run())  //error\n\nclass Pig extends Animal{\n  bark(){\n    return `${this.name} is barking!`\n  }\n}\n\nconst tlp = new Pig('tlp')\nconsole.log(tlp.eat())  // error\n\nclass Cat extends Animal{\n  static categories = ['cat']\n  constructor(name){\n    super(name)\n  }\n  run(){\n    return 'Meow, ' + super.run() // true\n  }\n}\nconst maomao = new Cat('maomao')\nconsole.log(maomao.run())\nconsole.log(Cat.categories)\n\n```\n\n# 类和接口\n\n- 继承的困境\n\n- 类可以使用implements来实现接口\n\n```ts\n\ninterface Radio {\n  switchRadio(trigger:boolean):void,\n}\n\ninterface Battery {\n  checkBatteryStatus():void\n}\n\ninterface RadioWithBattery extends Radio {\n  checkBatteryStatus():void\n}\n\nclass Car implements Radio {\n  switchRadio(trigger:boolean){\n\n  }\n}\n\nclass CellPhone implements Radio,Battery{\n  switchRadio(trigger:boolean){\n    \n  }\n  checkBatteryStatus(){\n\n  }\n}\n\nclass MobilePhone implements RadioWithBattery{\n  switchRadio(trigger:boolean){\n    \n  }\n  checkBatteryStatus(){\n\n  }\n}\n```\n\n# 枚举\n\n```ts\nenum Direction {\n  Up,\n  Down,\n  Left=10,\n  Right\n}\nconsole.log(Direction.Up) // 0\nconsole.log(Direction.Down) // 1\nconsole.log(Direction[0]) // 'Up'\nconsole.log(Direction.Left) // 10\nconsole.log(Direction.Right) // 11\n```\n\n```ts\nconst enum Direction { // 加上const 变成常量枚举可以提升性能  只有常量值可以使用const\n  Up = 'Up',\n  Down = 'Down',\n  Left = 'Left',\n  Right = 'Right'\n}\nconst value = 'Up'\nif(value === Direction.Up){\n  console.log('go up')\n}\n\n```\n\n\n# 泛型\n\n在定义函数接口或类的时候不预先指定类型，在使用的时候再指定\n\n```ts\nfunction echo<T>(arg:T):T{\n  return arg\n}\n\nconst str:string='str'\nconst result0 = echo(str)\nconst result1 = echo(123)\nconst result2 = echo(true)\n\n\nfunction swap<T,U>(tuple:[T,U]):[U,T]{\n  return [tuple[1],tuple[0]]\n}\nconst result3 = swap(['abc',123])\n\n\n// 约束泛型\nfunction echoWithArr<T>(arg:T[]):T[]{\n  console.log(arg.length)\n  return arg\n}\nconst arr1 = echoWithArr([1,2,3])\n\ninterface IWithLength{\n  length:number\n}\nfunction echoWithLength<T extends IWithLength>(arg:T):T{\n  console.log(arg.length)\n  return arg\n}\nconst str = echoWithLength('str')\nconst obj = echoWithLength({length:10})\nconst arr2 = echoWithLength([1,2,3])\n\n\nclass Queue<T>{\n  private data = []\n  push(item:T){\n    return this.data.push(item)\n  }\n  pop():T{\n    return this.data.shift()\n  }\n}\nconst queue = new Queue<number>()\nqueue.push(1)\nconsole.log(queue.pop().toFixed())\n\n\ninterface KeyPair<T,U> {\n  key:T,\n  value:U\n}\nlet kp1:KeyPair<number,string> = {key:1,value:'str'}\nlet kp2:KeyPair<string,number> = {key:'str',value:123}\n\nlet arr:number[] = [1,2,3]\nlet arr2:Array<number> = [1,2,3]\n\n```\n\n\n# 类型别名,字面量和交叉类型\n\n```ts\nlet sum:(x:number,y:number)=>number \nconst result = sum(1,2)\n\ntype PlusType = (x:number,y:number)=>number\nlet sum2:PlusType\nconst result = sum2(2,3)\n\ntype StrOrNumber = string | number\nlet result3:StrOrNumber = '123'\nresult3 = 123\nresult3 = true //error\n\nconst str:'name' = 'name'\nconst str2:'name' = 'name1'  //error\nconst number:1 = 1\n\ntype Direction = 'Up'|'Down'|'Left'|'Right'\nlet toWards:Direction = 'Down' // 只能四个里面的一个值\n\n\ninterface IName {\n  name:string\n}\ntype TPerson = IName & {age:number}\nlet person:TPerson = {name:'123',age:123}\n\n```\n\n# 声明文件\n\n一般是`.d.ts`结尾，只是实现了类型的定义并未实现真正代码功能\n\n\n# 内置类型\n\n```ts\nconst a:Array<number> = [1,2,3]\nconst date = new Date()\ndate.getTime()\nconst reg = /abc/\nreg.test('abc')\n\n//build-in object\nMath.pow(2,2)\n\n// Dom and Bom\nlet body = document.body\nlet allLis = document.querySelectorAll('li')\nallLis.keys()\n\ndocument.addEventListener('click',(e)=>{\n  e.preventDefault()\n})\n\n// Utility Types\ninterface IPerson {\n  name:string,\n  age:number\n}\nlet Joker:IPerson = {name:'Joker',age:25}\ntype TPartical = Partical<IPerson> //将所有参数变为可选\nlet Joker2:IPerson = {name:'Joker'}\ntype TOmit = Omit<IPerson,'name'> // 忽略一个选项\nlet Joker3:IPerson = {age:25}\n\n```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/TypeScript还不会-看完这篇就行了.md","raw":"---\ntitle: TypeScript还不会?看完这篇就行了\ndate: 2021-08-09 14:29:26\ntags:\n  - TypeScript\ncategories:\n  - TypeScript\ndescription:\n---\n\n# TypeScript究竟是什么呢？\n\n<!-- more -->\n\n- JavaScript that scales\n\n- 静态类型风格的类型系统\n\n- 从es6到es10甚至是esnext的语法支持\n\n- 兼容各种浏览器、各种系统、各种服务器，完全开源\n\n>  [ts官网](https://tslang.cn)\n\n## 为什么要使用TS\n\n- 程序更容易理解\n\n  > 函数或者方法输入输出的类型参数，外部条件等 \n  > 动态语言的约束：需要手动调试等过程\n  > 有了TS:代码本事就可以回答上述问题\n\n- 效率更高\n \n > 在不同的代码块和定义中进行跳转 \n > 代码自动补全\n > 丰富的接口提示\n\n- 更少的错误\n\n  > 编译期间能够发现大部分错误\n  > 杜绝一些常见错误\n\n- 非常好的包容性\n \n  > 完全兼容JavaScript\n  > 第三方库可以单独编写类型文件\n\n## 一些缺点：\n\n+ 增加了一些学习成本\n\n+ 短时间内增加了一些开发成本\n\n# 安装TypeScript\n\n```cmd\nnpm install -g typescript\n```\n\n# 原始数据类型和any类型\n\n```ts\nlet isDone:boolen = false\nlet age:number = 10\nlet firstName:string = 'Joker'\nlet message:string = `Hello ${firstName}!`\nlet u:undefined = undefined\nlet n:null = null\n\nlet num:number = undefined\n\nlet notSure:any = 4\nnotSure = 'Maybe a string'\nnotSure = true\n\nnotSure.myName\nnotSure.getName()\n// 如果有明确类型要避免使用any，any可以任意调用方法和属性很有可能出现错误，就失去了类型检查的作用\n\n```\n\n# 数组和元祖\n\n```ts\nlet arrOfNumber:number[] = [1,2,3]\narrOfNumber.push(4)\n\n\n// 元祖\nlet user:[string,number] = ['Joker',666]\nuser.push('123')\n```\n\n# interface 接口\n\n> - 对对象的形状（shape)进行描述\n> - Duck Typing(鸭子类型)\n\n```ts\ninterface IPerson{\n  readonly id:number;//只读属性\n  name:string;\n  age:number;\n  tel?:number;  //可选属性\n}\nlet Joker:IPerson = {\n  id:1,\n  name:'Joker',\n  age:25\n}\n```\n\n# function 函数\n\n> 在js中function是一等公民\n\n```ts\n// z 为可选参\nfunction add(x:number,y:number,z?:number):number{\n  if(typeof z === 'number'){\n    return x + y + z\n  }\n  return x + y\n}\nconst sum = （x:number,y:number,z?:number):number => {\n  if(typeof z === 'number'){\n    return x + y + z\n  }\n  return x + y\n}\n\nlet result = add(1,2)\n\ninterface ISum {\n  (x:number,y:number,z?:number):number\n}\n\nlet add2:(x:number,y:number,z?:number)=>number = add\nlet add3:ISum = add\n\n```\n\n## 类型推论 联合类型和类型断言\n\n```ts\nlet str = 'str'\n\n// union types\nlet numberOrString:number|string  //连盒类型\nnumberOrString='abc'\nnumberOrString=123\n\nfunction getLength(input:string:number):number{\n  const str = input as string // 类型断言\n  if(str.length){\n    return str.length\n  }else{\n    const number = input as number\n    return number.toString().length\n  }\n}\n\n// type guard\n\nfunction getLength2(input:string:number):number{\n  if(typeof input ==='string'){\n    return input.length\n  }else{\n    return input.toString().length\n  }\n}\n\n```\n\n# 类Class\n\n## js中的类\n\n- 类(Class):定义了一切事物的抽象特点\n\n- 对象（Object):类的实例\n\n- 面向对象(OOP)三大特性:封装、继承、多态\n\n```ts\nclass Animal{\n  constructor(name){\n    this.name = name\n  }\n  run(){\n    return `${this.name} is running!`\n  }\n}\n\nconst dog = new Animal('japan')\n\nconsole.log(dog.run())\n\nclass Pig extends Animal{\n  bark(){\n    return `${this.name} is barking!`\n  }\n}\n\nconst tlp = new Pig('tlp')\nconsole.log(tlp.run())\nconsole.log(tlp.bark())\n\nclass Cat extends Animal{\n  static categories = ['cat']\n  constructor(name){\n    super(name)\n  }\n  run(){\n    return 'Meow, ' + super.run()\n  }\n}\nconst maomao = new Cat('maomao')\nconsole.log(maomao.run())\nconsole.log(Cat.categories)\n\n```\n\n\n## TS中的类\n\n- Public:修饰的属性是共有的\n\n- Private:修饰的属性或者方法是私有的\n\n- Protected:修饰的属性或方法是受保护的\n\n```ts\nclass Animal{\n  readonly name:string //只读\n  constructor(name){\n    this.name = name\n  }\n  private eat(){ // 仅在本事和\n    return 'eat'\n  }\n  protected run(){  // 本身和子类\n    return `${this.name} is running!`\n  }\n}\n\nconst dog = new Animal('japan')\n\nconsole.log(dog.run())  //error\n\nclass Pig extends Animal{\n  bark(){\n    return `${this.name} is barking!`\n  }\n}\n\nconst tlp = new Pig('tlp')\nconsole.log(tlp.eat())  // error\n\nclass Cat extends Animal{\n  static categories = ['cat']\n  constructor(name){\n    super(name)\n  }\n  run(){\n    return 'Meow, ' + super.run() // true\n  }\n}\nconst maomao = new Cat('maomao')\nconsole.log(maomao.run())\nconsole.log(Cat.categories)\n\n```\n\n# 类和接口\n\n- 继承的困境\n\n- 类可以使用implements来实现接口\n\n```ts\n\ninterface Radio {\n  switchRadio(trigger:boolean):void,\n}\n\ninterface Battery {\n  checkBatteryStatus():void\n}\n\ninterface RadioWithBattery extends Radio {\n  checkBatteryStatus():void\n}\n\nclass Car implements Radio {\n  switchRadio(trigger:boolean){\n\n  }\n}\n\nclass CellPhone implements Radio,Battery{\n  switchRadio(trigger:boolean){\n    \n  }\n  checkBatteryStatus(){\n\n  }\n}\n\nclass MobilePhone implements RadioWithBattery{\n  switchRadio(trigger:boolean){\n    \n  }\n  checkBatteryStatus(){\n\n  }\n}\n```\n\n# 枚举\n\n```ts\nenum Direction {\n  Up,\n  Down,\n  Left=10,\n  Right\n}\nconsole.log(Direction.Up) // 0\nconsole.log(Direction.Down) // 1\nconsole.log(Direction[0]) // 'Up'\nconsole.log(Direction.Left) // 10\nconsole.log(Direction.Right) // 11\n```\n\n```ts\nconst enum Direction { // 加上const 变成常量枚举可以提升性能  只有常量值可以使用const\n  Up = 'Up',\n  Down = 'Down',\n  Left = 'Left',\n  Right = 'Right'\n}\nconst value = 'Up'\nif(value === Direction.Up){\n  console.log('go up')\n}\n\n```\n\n\n# 泛型\n\n在定义函数接口或类的时候不预先指定类型，在使用的时候再指定\n\n```ts\nfunction echo<T>(arg:T):T{\n  return arg\n}\n\nconst str:string='str'\nconst result0 = echo(str)\nconst result1 = echo(123)\nconst result2 = echo(true)\n\n\nfunction swap<T,U>(tuple:[T,U]):[U,T]{\n  return [tuple[1],tuple[0]]\n}\nconst result3 = swap(['abc',123])\n\n\n// 约束泛型\nfunction echoWithArr<T>(arg:T[]):T[]{\n  console.log(arg.length)\n  return arg\n}\nconst arr1 = echoWithArr([1,2,3])\n\ninterface IWithLength{\n  length:number\n}\nfunction echoWithLength<T extends IWithLength>(arg:T):T{\n  console.log(arg.length)\n  return arg\n}\nconst str = echoWithLength('str')\nconst obj = echoWithLength({length:10})\nconst arr2 = echoWithLength([1,2,3])\n\n\nclass Queue<T>{\n  private data = []\n  push(item:T){\n    return this.data.push(item)\n  }\n  pop():T{\n    return this.data.shift()\n  }\n}\nconst queue = new Queue<number>()\nqueue.push(1)\nconsole.log(queue.pop().toFixed())\n\n\ninterface KeyPair<T,U> {\n  key:T,\n  value:U\n}\nlet kp1:KeyPair<number,string> = {key:1,value:'str'}\nlet kp2:KeyPair<string,number> = {key:'str',value:123}\n\nlet arr:number[] = [1,2,3]\nlet arr2:Array<number> = [1,2,3]\n\n```\n\n\n# 类型别名,字面量和交叉类型\n\n```ts\nlet sum:(x:number,y:number)=>number \nconst result = sum(1,2)\n\ntype PlusType = (x:number,y:number)=>number\nlet sum2:PlusType\nconst result = sum2(2,3)\n\ntype StrOrNumber = string | number\nlet result3:StrOrNumber = '123'\nresult3 = 123\nresult3 = true //error\n\nconst str:'name' = 'name'\nconst str2:'name' = 'name1'  //error\nconst number:1 = 1\n\ntype Direction = 'Up'|'Down'|'Left'|'Right'\nlet toWards:Direction = 'Down' // 只能四个里面的一个值\n\n\ninterface IName {\n  name:string\n}\ntype TPerson = IName & {age:number}\nlet person:TPerson = {name:'123',age:123}\n\n```\n\n# 声明文件\n\n一般是`.d.ts`结尾，只是实现了类型的定义并未实现真正代码功能\n\n\n# 内置类型\n\n```ts\nconst a:Array<number> = [1,2,3]\nconst date = new Date()\ndate.getTime()\nconst reg = /abc/\nreg.test('abc')\n\n//build-in object\nMath.pow(2,2)\n\n// Dom and Bom\nlet body = document.body\nlet allLis = document.querySelectorAll('li')\nallLis.keys()\n\ndocument.addEventListener('click',(e)=>{\n  e.preventDefault()\n})\n\n// Utility Types\ninterface IPerson {\n  name:string,\n  age:number\n}\nlet Joker:IPerson = {name:'Joker',age:25}\ntype TPartical = Partical<IPerson> //将所有参数变为可选\nlet Joker2:IPerson = {name:'Joker'}\ntype TOmit = Omit<IPerson,'name'> // 忽略一个选项\nlet Joker3:IPerson = {age:25}\n\n```\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/TypeScript还不会-看完这篇就行了","published":1,"updated":"2021-08-10T06:43:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54200491r0q0gyga1kr","content":"<h1 id=\"TypeScript究竟是什么呢？\"><a href=\"#TypeScript究竟是什么呢？\" class=\"headerlink\" title=\"TypeScript究竟是什么呢？\"></a>TypeScript究竟是什么呢？</h1><a id=\"more\"></a>\n\n<ul>\n<li><p>JavaScript that scales</p>\n</li>\n<li><p>静态类型风格的类型系统</p>\n</li>\n<li><p>从es6到es10甚至是esnext的语法支持</p>\n</li>\n<li><p>兼容各种浏览器、各种系统、各种服务器，完全开源</p>\n</li>\n</ul>\n<blockquote>\n<p> <a href=\"https://tslang.cn\" target=\"_blank\" rel=\"noopener\">ts官网</a></p>\n</blockquote>\n<h2 id=\"为什么要使用TS\"><a href=\"#为什么要使用TS\" class=\"headerlink\" title=\"为什么要使用TS\"></a>为什么要使用TS</h2><ul>\n<li><p>程序更容易理解</p>\n<blockquote>\n<p>函数或者方法输入输出的类型参数，外部条件等<br>动态语言的约束：需要手动调试等过程<br>有了TS:代码本事就可以回答上述问题</p>\n</blockquote>\n</li>\n<li><p>效率更高</p>\n<blockquote>\n<p>在不同的代码块和定义中进行跳转<br>代码自动补全<br>丰富的接口提示</p>\n</blockquote>\n</li>\n<li><p>更少的错误</p>\n<blockquote>\n<p>编译期间能够发现大部分错误<br>杜绝一些常见错误</p>\n</blockquote>\n</li>\n<li><p>非常好的包容性</p>\n<blockquote>\n<p>完全兼容JavaScript<br>第三方库可以单独编写类型文件</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"一些缺点：\"><a href=\"#一些缺点：\" class=\"headerlink\" title=\"一些缺点：\"></a>一些缺点：</h2><ul>\n<li><p>增加了一些学习成本</p>\n</li>\n<li><p>短时间内增加了一些开发成本</p>\n</li>\n</ul>\n<h1 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h1><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原始数据类型和any类型\"><a href=\"#原始数据类型和any类型\" class=\"headerlink\" title=\"原始数据类型和any类型\"></a>原始数据类型和any类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isDone:boolen = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age:<span class=\"built_in\">number</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName:<span class=\"built_in\">string</span> = <span class=\"string\">'Joker'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message:<span class=\"built_in\">string</span> = <span class=\"string\">`Hello <span class=\"subst\">$&#123;firstName&#125;</span>!`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n:<span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num:<span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> notSure:<span class=\"built_in\">any</span> = <span class=\"number\">4</span></span><br><span class=\"line\">notSure = <span class=\"string\">'Maybe a string'</span></span><br><span class=\"line\">notSure = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">notSure.myName</span><br><span class=\"line\">notSure.getName()</span><br><span class=\"line\"><span class=\"comment\">// 如果有明确类型要避免使用any，any可以任意调用方法和属性很有可能出现错误，就失去了类型检查的作用</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组和元祖\"><a href=\"#数组和元祖\" class=\"headerlink\" title=\"数组和元祖\"></a>数组和元祖</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrOfNumber:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">arrOfNumber.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元祖</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>] = [<span class=\"string\">'Joker'</span>,<span class=\"number\">666</span>]</span><br><span class=\"line\">user.push(<span class=\"string\">'123'</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"interface-接口\"><a href=\"#interface-接口\" class=\"headerlink\" title=\"interface 接口\"></a>interface 接口</h1><blockquote>\n<ul>\n<li>对对象的形状（shape)进行描述</li>\n<li>Duck Typing(鸭子类型)</li>\n</ul>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> IPerson&#123;</span><br><span class=\"line\">  readonly id:<span class=\"built_in\">number</span>;<span class=\"comment\">//只读属性</span></span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  age:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">  tel?:<span class=\"built_in\">number</span>;  <span class=\"comment\">//可选属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker:IPerson = &#123;</span><br><span class=\"line\">  id:<span class=\"number\">1</span>,</span><br><span class=\"line\">  name:<span class=\"string\">'Joker'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">25</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"function-函数\"><a href=\"#function-函数\" class=\"headerlink\" title=\"function 函数\"></a>function 函数</h1><blockquote>\n<p>在js中function是一等公民</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// z 为可选参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = （x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span>):<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = add(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ISum &#123;</span><br><span class=\"line\">  (x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span>):<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> add2:<span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span></span>)=&gt;</span><span class=\"built_in\">number</span> = add</span><br><span class=\"line\"><span class=\"keyword\">let</span> add3:ISum = add</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型推论-联合类型和类型断言\"><a href=\"#类型推论-联合类型和类型断言\" class=\"headerlink\" title=\"类型推论 联合类型和类型断言\"></a>类型推论 联合类型和类型断言</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'str'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// union types</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOrString:<span class=\"built_in\">number</span>|<span class=\"built_in\">string</span>  <span class=\"comment\">//连盒类型</span></span><br><span class=\"line\">numberOrString=<span class=\"string\">'abc'</span></span><br><span class=\"line\">numberOrString=<span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength</span>(<span class=\"params\">input:<span class=\"built_in\">string</span>:<span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = input <span class=\"keyword\">as</span> <span class=\"built_in\">string</span> <span class=\"comment\">// 类型断言</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.length)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.length</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">number</span> = input <span class=\"keyword\">as</span> <span class=\"built_in\">number</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">number</span>.toString().length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type guard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength2</span>(<span class=\"params\">input:<span class=\"built_in\">string</span>:<span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> input ===<span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.length</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.toString().length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类Class\"><a href=\"#类Class\" class=\"headerlink\" title=\"类Class\"></a>类Class</h1><h2 id=\"js中的类\"><a href=\"#js中的类\" class=\"headerlink\" title=\"js中的类\"></a>js中的类</h2><ul>\n<li><p>类(Class):定义了一切事物的抽象特点</p>\n</li>\n<li><p>对象（Object):类的实例</p>\n</li>\n<li><p>面向对象(OOP)三大特性:封装、继承、多态</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  run()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is running!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dog = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'japan'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.run())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Pig <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  bark()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is barking!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tlp = <span class=\"keyword\">new</span> Pig(<span class=\"string\">'tlp'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tlp.run())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tlp.bark())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> categories = [<span class=\"string\">'cat'</span>]</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  run()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Meow, '</span> + <span class=\"keyword\">super</span>.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> maomao = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'maomao'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maomao.run())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"TS中的类\"><a href=\"#TS中的类\" class=\"headerlink\" title=\"TS中的类\"></a>TS中的类</h2><ul>\n<li><p>Public:修饰的属性是共有的</p>\n</li>\n<li><p>Private:修饰的属性或者方法是私有的</p>\n</li>\n<li><p>Protected:修饰的属性或方法是受保护的</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal&#123;</span><br><span class=\"line\">  readonly name:<span class=\"built_in\">string</span> <span class=\"comment\">//只读</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> eat()&#123; <span class=\"comment\">// 仅在本事和</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'eat'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> run()&#123;  <span class=\"comment\">// 本身和子类</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is running!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dog = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'japan'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.run())  <span class=\"comment\">//error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Pig <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  bark()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is barking!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tlp = <span class=\"keyword\">new</span> Pig(<span class=\"string\">'tlp'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tlp.eat())  <span class=\"comment\">// error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> categories = [<span class=\"string\">'cat'</span>]</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  run()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Meow, '</span> + <span class=\"keyword\">super</span>.run() <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> maomao = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'maomao'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maomao.run())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类和接口\"><a href=\"#类和接口\" class=\"headerlink\" title=\"类和接口\"></a>类和接口</h1><ul>\n<li><p>继承的困境</p>\n</li>\n<li><p>类可以使用implements来实现接口</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Radio &#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>):<span class=\"built_in\">void</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Battery &#123;</span><br><span class=\"line\">  checkBatteryStatus():<span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> RadioWithBattery <span class=\"keyword\">extends</span> Radio &#123;</span><br><span class=\"line\">  checkBatteryStatus():<span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Car <span class=\"keyword\">implements</span> Radio &#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> CellPhone <span class=\"keyword\">implements</span> Radio,Battery&#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkBatteryStatus()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MobilePhone <span class=\"keyword\">implements</span> RadioWithBattery&#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkBatteryStatus()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Direction &#123;</span><br><span class=\"line\">  Up,</span><br><span class=\"line\">  Down,</span><br><span class=\"line\">  Left=<span class=\"number\">10</span>,</span><br><span class=\"line\">  Right</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Up) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Down) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction[<span class=\"number\">0</span>]) <span class=\"comment\">// 'Up'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Left) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Right) <span class=\"comment\">// 11</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> Direction &#123; <span class=\"comment\">// 加上const 变成常量枚举可以提升性能  只有常量值可以使用const</span></span><br><span class=\"line\">  Up = <span class=\"string\">'Up'</span>,</span><br><span class=\"line\">  Down = <span class=\"string\">'Down'</span>,</span><br><span class=\"line\">  Left = <span class=\"string\">'Left'</span>,</span><br><span class=\"line\">  Right = <span class=\"string\">'Right'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> value = <span class=\"string\">'Up'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(value === Direction.Up)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'go up'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>在定义函数接口或类的时候不预先指定类型，在使用的时候再指定</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echo</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str:<span class=\"built_in\">string</span>=<span class=\"string\">'str'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result0 = echo(str)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = echo(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = echo(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>&lt;<span class=\"title\">T</span>,<span class=\"title\">U</span>&gt;(<span class=\"params\">tuple:[T,U]</span>):[<span class=\"title\">U</span>,<span class=\"title\">T</span>]</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [tuple[<span class=\"number\">1</span>],tuple[<span class=\"number\">0</span>]]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result3 = swap([<span class=\"string\">'abc'</span>,<span class=\"number\">123</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 约束泛型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echoWithArr</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T[]</span>):<span class=\"title\">T</span>[]</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg.length)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = echoWithArr([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> IWithLength&#123;</span><br><span class=\"line\">  length:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echoWithLength</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">IWithLength</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg.length)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = echoWithLength(<span class=\"string\">'str'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = echoWithLength(&#123;length:<span class=\"number\">10</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = echoWithLength([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Queue&lt;T&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> data = []</span><br><span class=\"line\">  push(item:T)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pop():T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> Queue&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queue.pop().toFixed())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> KeyPair&lt;T,U&gt; &#123;</span><br><span class=\"line\">  key:T,</span><br><span class=\"line\">  value:U</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kp1:KeyPair&lt;<span class=\"built_in\">number</span>,<span class=\"built_in\">string</span>&gt; = &#123;key:<span class=\"number\">1</span>,value:<span class=\"string\">'str'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kp2:KeyPair&lt;<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>&gt; = &#123;key:<span class=\"string\">'str'</span>,value:<span class=\"number\">123</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"类型别名-字面量和交叉类型\"><a href=\"#类型别名-字面量和交叉类型\" class=\"headerlink\" title=\"类型别名,字面量和交叉类型\"></a>类型别名,字面量和交叉类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sum:<span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>)=&gt;</span><span class=\"built_in\">number</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> result = sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> PlusType = <span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>)=&gt;</span><span class=\"built_in\">number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum2:PlusType</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = sum2(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> StrOrNumber = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result3:StrOrNumber = <span class=\"string\">'123'</span></span><br><span class=\"line\">result3 = <span class=\"number\">123</span></span><br><span class=\"line\">result3 = <span class=\"literal\">true</span> <span class=\"comment\">//error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str:<span class=\"string\">'name'</span> = <span class=\"string\">'name'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str2:<span class=\"string\">'name'</span> = <span class=\"string\">'name1'</span>  <span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">number</span>:<span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Direction = <span class=\"string\">'Up'</span>|<span class=\"string\">'Down'</span>|<span class=\"string\">'Left'</span>|<span class=\"string\">'Right'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> toWards:Direction = <span class=\"string\">'Down'</span> <span class=\"comment\">// 只能四个里面的一个值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> IName &#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TPerson = IName &amp; &#123;age:<span class=\"built_in\">number</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person:TPerson = &#123;name:<span class=\"string\">'123'</span>,age:<span class=\"number\">123</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"声明文件\"><a href=\"#声明文件\" class=\"headerlink\" title=\"声明文件\"></a>声明文件</h1><p>一般是<code>.d.ts</code>结尾，只是实现了类型的定义并未实现真正代码功能</p>\n<h1 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">date.getTime()</span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/abc/</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//build-in object</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dom and Bom</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.body</span><br><span class=\"line\"><span class=\"keyword\">let</span> allLis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">allLis.keys()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Utility Types</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> IPerson &#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker:IPerson = &#123;name:<span class=\"string\">'Joker'</span>,age:<span class=\"number\">25</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TPartical = Partical&lt;IPerson&gt; <span class=\"comment\">//将所有参数变为可选</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker2:IPerson = &#123;name:<span class=\"string\">'Joker'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TOmit = Omit&lt;IPerson,<span class=\"string\">'name'</span>&gt; <span class=\"comment\">// 忽略一个选项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker3:IPerson = &#123;age:<span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<h1 id=\"TypeScript究竟是什么呢？\"><a href=\"#TypeScript究竟是什么呢？\" class=\"headerlink\" title=\"TypeScript究竟是什么呢？\"></a>TypeScript究竟是什么呢？</h1>","more":"<ul>\n<li><p>JavaScript that scales</p>\n</li>\n<li><p>静态类型风格的类型系统</p>\n</li>\n<li><p>从es6到es10甚至是esnext的语法支持</p>\n</li>\n<li><p>兼容各种浏览器、各种系统、各种服务器，完全开源</p>\n</li>\n</ul>\n<blockquote>\n<p> <a href=\"https://tslang.cn\" target=\"_blank\" rel=\"noopener\">ts官网</a></p>\n</blockquote>\n<h2 id=\"为什么要使用TS\"><a href=\"#为什么要使用TS\" class=\"headerlink\" title=\"为什么要使用TS\"></a>为什么要使用TS</h2><ul>\n<li><p>程序更容易理解</p>\n<blockquote>\n<p>函数或者方法输入输出的类型参数，外部条件等<br>动态语言的约束：需要手动调试等过程<br>有了TS:代码本事就可以回答上述问题</p>\n</blockquote>\n</li>\n<li><p>效率更高</p>\n<blockquote>\n<p>在不同的代码块和定义中进行跳转<br>代码自动补全<br>丰富的接口提示</p>\n</blockquote>\n</li>\n<li><p>更少的错误</p>\n<blockquote>\n<p>编译期间能够发现大部分错误<br>杜绝一些常见错误</p>\n</blockquote>\n</li>\n<li><p>非常好的包容性</p>\n<blockquote>\n<p>完全兼容JavaScript<br>第三方库可以单独编写类型文件</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"一些缺点：\"><a href=\"#一些缺点：\" class=\"headerlink\" title=\"一些缺点：\"></a>一些缺点：</h2><ul>\n<li><p>增加了一些学习成本</p>\n</li>\n<li><p>短时间内增加了一些开发成本</p>\n</li>\n</ul>\n<h1 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h1><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原始数据类型和any类型\"><a href=\"#原始数据类型和any类型\" class=\"headerlink\" title=\"原始数据类型和any类型\"></a>原始数据类型和any类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isDone:boolen = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age:<span class=\"built_in\">number</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName:<span class=\"built_in\">string</span> = <span class=\"string\">'Joker'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message:<span class=\"built_in\">string</span> = <span class=\"string\">`Hello <span class=\"subst\">$&#123;firstName&#125;</span>!`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n:<span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num:<span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> notSure:<span class=\"built_in\">any</span> = <span class=\"number\">4</span></span><br><span class=\"line\">notSure = <span class=\"string\">'Maybe a string'</span></span><br><span class=\"line\">notSure = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">notSure.myName</span><br><span class=\"line\">notSure.getName()</span><br><span class=\"line\"><span class=\"comment\">// 如果有明确类型要避免使用any，any可以任意调用方法和属性很有可能出现错误，就失去了类型检查的作用</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组和元祖\"><a href=\"#数组和元祖\" class=\"headerlink\" title=\"数组和元祖\"></a>数组和元祖</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrOfNumber:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">arrOfNumber.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元祖</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>] = [<span class=\"string\">'Joker'</span>,<span class=\"number\">666</span>]</span><br><span class=\"line\">user.push(<span class=\"string\">'123'</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"interface-接口\"><a href=\"#interface-接口\" class=\"headerlink\" title=\"interface 接口\"></a>interface 接口</h1><blockquote>\n<ul>\n<li>对对象的形状（shape)进行描述</li>\n<li>Duck Typing(鸭子类型)</li>\n</ul>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> IPerson&#123;</span><br><span class=\"line\">  readonly id:<span class=\"built_in\">number</span>;<span class=\"comment\">//只读属性</span></span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  age:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">  tel?:<span class=\"built_in\">number</span>;  <span class=\"comment\">//可选属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker:IPerson = &#123;</span><br><span class=\"line\">  id:<span class=\"number\">1</span>,</span><br><span class=\"line\">  name:<span class=\"string\">'Joker'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">25</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"function-函数\"><a href=\"#function-函数\" class=\"headerlink\" title=\"function 函数\"></a>function 函数</h1><blockquote>\n<p>在js中function是一等公民</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// z 为可选参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = （x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span>):<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = add(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ISum &#123;</span><br><span class=\"line\">  (x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span>):<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> add2:<span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span>,z?:<span class=\"built_in\">number</span></span>)=&gt;</span><span class=\"built_in\">number</span> = add</span><br><span class=\"line\"><span class=\"keyword\">let</span> add3:ISum = add</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型推论-联合类型和类型断言\"><a href=\"#类型推论-联合类型和类型断言\" class=\"headerlink\" title=\"类型推论 联合类型和类型断言\"></a>类型推论 联合类型和类型断言</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'str'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// union types</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOrString:<span class=\"built_in\">number</span>|<span class=\"built_in\">string</span>  <span class=\"comment\">//连盒类型</span></span><br><span class=\"line\">numberOrString=<span class=\"string\">'abc'</span></span><br><span class=\"line\">numberOrString=<span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength</span>(<span class=\"params\">input:<span class=\"built_in\">string</span>:<span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = input <span class=\"keyword\">as</span> <span class=\"built_in\">string</span> <span class=\"comment\">// 类型断言</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.length)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.length</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">number</span> = input <span class=\"keyword\">as</span> <span class=\"built_in\">number</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">number</span>.toString().length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type guard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength2</span>(<span class=\"params\">input:<span class=\"built_in\">string</span>:<span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> input ===<span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.length</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.toString().length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类Class\"><a href=\"#类Class\" class=\"headerlink\" title=\"类Class\"></a>类Class</h1><h2 id=\"js中的类\"><a href=\"#js中的类\" class=\"headerlink\" title=\"js中的类\"></a>js中的类</h2><ul>\n<li><p>类(Class):定义了一切事物的抽象特点</p>\n</li>\n<li><p>对象（Object):类的实例</p>\n</li>\n<li><p>面向对象(OOP)三大特性:封装、继承、多态</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  run()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is running!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dog = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'japan'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.run())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Pig <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  bark()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is barking!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tlp = <span class=\"keyword\">new</span> Pig(<span class=\"string\">'tlp'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tlp.run())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tlp.bark())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> categories = [<span class=\"string\">'cat'</span>]</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  run()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Meow, '</span> + <span class=\"keyword\">super</span>.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> maomao = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'maomao'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maomao.run())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"TS中的类\"><a href=\"#TS中的类\" class=\"headerlink\" title=\"TS中的类\"></a>TS中的类</h2><ul>\n<li><p>Public:修饰的属性是共有的</p>\n</li>\n<li><p>Private:修饰的属性或者方法是私有的</p>\n</li>\n<li><p>Protected:修饰的属性或方法是受保护的</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal&#123;</span><br><span class=\"line\">  readonly name:<span class=\"built_in\">string</span> <span class=\"comment\">//只读</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> eat()&#123; <span class=\"comment\">// 仅在本事和</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'eat'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> run()&#123;  <span class=\"comment\">// 本身和子类</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is running!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dog = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'japan'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.run())  <span class=\"comment\">//error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Pig <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  bark()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> is barking!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tlp = <span class=\"keyword\">new</span> Pig(<span class=\"string\">'tlp'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tlp.eat())  <span class=\"comment\">// error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> categories = [<span class=\"string\">'cat'</span>]</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  run()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Meow, '</span> + <span class=\"keyword\">super</span>.run() <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> maomao = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'maomao'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maomao.run())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cat.categories)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类和接口\"><a href=\"#类和接口\" class=\"headerlink\" title=\"类和接口\"></a>类和接口</h1><ul>\n<li><p>继承的困境</p>\n</li>\n<li><p>类可以使用implements来实现接口</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Radio &#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>):<span class=\"built_in\">void</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Battery &#123;</span><br><span class=\"line\">  checkBatteryStatus():<span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> RadioWithBattery <span class=\"keyword\">extends</span> Radio &#123;</span><br><span class=\"line\">  checkBatteryStatus():<span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Car <span class=\"keyword\">implements</span> Radio &#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> CellPhone <span class=\"keyword\">implements</span> Radio,Battery&#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkBatteryStatus()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MobilePhone <span class=\"keyword\">implements</span> RadioWithBattery&#123;</span><br><span class=\"line\">  switchRadio(trigger:<span class=\"built_in\">boolean</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkBatteryStatus()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Direction &#123;</span><br><span class=\"line\">  Up,</span><br><span class=\"line\">  Down,</span><br><span class=\"line\">  Left=<span class=\"number\">10</span>,</span><br><span class=\"line\">  Right</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Up) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Down) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction[<span class=\"number\">0</span>]) <span class=\"comment\">// 'Up'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Left) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Right) <span class=\"comment\">// 11</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> Direction &#123; <span class=\"comment\">// 加上const 变成常量枚举可以提升性能  只有常量值可以使用const</span></span><br><span class=\"line\">  Up = <span class=\"string\">'Up'</span>,</span><br><span class=\"line\">  Down = <span class=\"string\">'Down'</span>,</span><br><span class=\"line\">  Left = <span class=\"string\">'Left'</span>,</span><br><span class=\"line\">  Right = <span class=\"string\">'Right'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> value = <span class=\"string\">'Up'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(value === Direction.Up)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'go up'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>在定义函数接口或类的时候不预先指定类型，在使用的时候再指定</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echo</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str:<span class=\"built_in\">string</span>=<span class=\"string\">'str'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result0 = echo(str)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = echo(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = echo(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>&lt;<span class=\"title\">T</span>,<span class=\"title\">U</span>&gt;(<span class=\"params\">tuple:[T,U]</span>):[<span class=\"title\">U</span>,<span class=\"title\">T</span>]</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [tuple[<span class=\"number\">1</span>],tuple[<span class=\"number\">0</span>]]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result3 = swap([<span class=\"string\">'abc'</span>,<span class=\"number\">123</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 约束泛型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echoWithArr</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T[]</span>):<span class=\"title\">T</span>[]</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg.length)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = echoWithArr([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> IWithLength&#123;</span><br><span class=\"line\">  length:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echoWithLength</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">IWithLength</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg.length)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = echoWithLength(<span class=\"string\">'str'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = echoWithLength(&#123;length:<span class=\"number\">10</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = echoWithLength([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Queue&lt;T&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> data = []</span><br><span class=\"line\">  push(item:T)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pop():T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> Queue&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queue.pop().toFixed())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> KeyPair&lt;T,U&gt; &#123;</span><br><span class=\"line\">  key:T,</span><br><span class=\"line\">  value:U</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kp1:KeyPair&lt;<span class=\"built_in\">number</span>,<span class=\"built_in\">string</span>&gt; = &#123;key:<span class=\"number\">1</span>,value:<span class=\"string\">'str'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kp2:KeyPair&lt;<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>&gt; = &#123;key:<span class=\"string\">'str'</span>,value:<span class=\"number\">123</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"类型别名-字面量和交叉类型\"><a href=\"#类型别名-字面量和交叉类型\" class=\"headerlink\" title=\"类型别名,字面量和交叉类型\"></a>类型别名,字面量和交叉类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sum:<span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>)=&gt;</span><span class=\"built_in\">number</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> result = sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> PlusType = <span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>)=&gt;</span><span class=\"built_in\">number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum2:PlusType</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = sum2(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> StrOrNumber = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result3:StrOrNumber = <span class=\"string\">'123'</span></span><br><span class=\"line\">result3 = <span class=\"number\">123</span></span><br><span class=\"line\">result3 = <span class=\"literal\">true</span> <span class=\"comment\">//error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str:<span class=\"string\">'name'</span> = <span class=\"string\">'name'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str2:<span class=\"string\">'name'</span> = <span class=\"string\">'name1'</span>  <span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">number</span>:<span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Direction = <span class=\"string\">'Up'</span>|<span class=\"string\">'Down'</span>|<span class=\"string\">'Left'</span>|<span class=\"string\">'Right'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> toWards:Direction = <span class=\"string\">'Down'</span> <span class=\"comment\">// 只能四个里面的一个值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> IName &#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TPerson = IName &amp; &#123;age:<span class=\"built_in\">number</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person:TPerson = &#123;name:<span class=\"string\">'123'</span>,age:<span class=\"number\">123</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"声明文件\"><a href=\"#声明文件\" class=\"headerlink\" title=\"声明文件\"></a>声明文件</h1><p>一般是<code>.d.ts</code>结尾，只是实现了类型的定义并未实现真正代码功能</p>\n<h1 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">date.getTime()</span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/abc/</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//build-in object</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dom and Bom</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.body</span><br><span class=\"line\"><span class=\"keyword\">let</span> allLis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">allLis.keys()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Utility Types</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> IPerson &#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker:IPerson = &#123;name:<span class=\"string\">'Joker'</span>,age:<span class=\"number\">25</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TPartical = Partical&lt;IPerson&gt; <span class=\"comment\">//将所有参数变为可选</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker2:IPerson = &#123;name:<span class=\"string\">'Joker'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TOmit = Omit&lt;IPerson,<span class=\"string\">'name'</span>&gt; <span class=\"comment\">// 忽略一个选项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Joker3:IPerson = &#123;age:<span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"webpack基础","date":"2021-08-12T02:41:25.000Z","description":["本文基于webpack4.x"],"_content":"\n\n# webpack简介\n\n<!-- more -->\n\n\n`Webpack` 是⼀个现代 `JavaScript` 应⽤程序的静态模块打包器（`module bundler`），当 `webpack` 处理应⽤程序时，它会递归地构建⼀个依赖关系图(d`ependency graph`)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 `bundle`。\n\n`Webpack`是⼀个打包模块化`JavaScript`的⼯具，它会从⼊⼝模块出发，识别出源码中的模块化导⼊语句，递归地找出⼊⼝⽂件的所有依赖，将⼊⼝和其所有的依赖打包到⼀个单独的⽂件中是⼯程化、⾃动化思想在前端开发中的体现。\n\n\n# webpack安装\n\n环境准备\n  nodejs:：`https://nodejs.org/en/`\n  版本参考官⽹发布的最新版本，可以提升webpack的打包速度\n\n安装⽅式\n\n  局部安装（推荐）\n\n  ```shell\n  npm init -y # 初始化npm配置⽂件\n  npm install --save-dev webpack # 安装核⼼库\n  npm install --save-dev webpack-cli # 安装命令⾏⼯具\n  # 安装4.x稳定版本\n  npm i -D webpack@4.44.0\n  # 安装指定版本\n  npm i -D webpack@<version>\n  ```\n\n  全局安装（不推荐）\n  ```shell\n  # 安装webpack V4+版本时，需要额外安装webpack-cli\n  npm install webpack webpack-cli -g\n  # 检查版本\n  webpack -v\n  # 卸载\n  npm uninstall webpack webpack-cli -g\n  ```\n> 全局安装webpack，这会将你项⽬中的webpack锁定到指定版本，造成不同的项⽬中因为webpack依赖不同版本⽽导致冲突，构建失败\n\n\n# 启动webpack\n\n> 启动wekpack执行构建，默认`mode=production`(默认开启代码压缩)\n\n1. webpack默认配置\n\n  - webpack默认⽀持JS模块和JSON模块\n  - ⽀持CommonJS Es moudule AMD等模块类型\n  - webpack4⽀持零配置使⽤,但是很弱，稍微复杂些的场景都需要额外扩展\n\n2. 准备执⾏构建\n\n  - 新建`src`⽂件夹\n  - 新建`src/index.js`、`src/index.json`、`src/other.js`\n\n\n```js\n// index.js\nconst json = require(\"./index.json\");//commonJS\nimport { add } from \"./other.js\";//es module\nconsole.log(json, add(2, 3));\n// index.json\n{\n\"name\": \"JOSN\"\n}\n//other.js\nexport function add(n1, n2) {\n  return n1 + n2;\n}\n```\n\n3. 执⾏构建\n\n```shell\n# npx⽅式\nnpx webpack\n# npm script\nnpm run dev\n# 修改package.json\n\"scripts\": {\n  \"dev\": \"webpack\"\n},\n```\n> 原理就是通过shell脚本在`node_modules/.bin`⽬录下创建⼀个软链接。\n\n4. 我们会发现⽬录下多出⼀个`dist`⽬录，⾥⾯有个`main.js`，这个⽂件是⼀个可执⾏的`JavaScript`⽂件，⾥⾯包含`webpackBootstrap`启动函数。\n\n5. 默认配置\n\n```js\nconst path = require('path')\n// 默认配置\nmodule.exports = {\n  entry:'./src/index.js',\n  output:{\n    path:path.resolve(__dirname,'./dist'), // 输出的文件存放的目录\n    filename:'main.js' // 输出的文件名称\n  },\n  mode:'development',// 模式\n}\n```\n> `webpack`配置名默认为`webpack.config.js`,也可以用其他命名，其他命名需要修改`package.json`\n> \"scripts\": {\n  \"dev\": \"webpack --config ./youFileName.js\"\n}\n\n6. 多入口对应多出口\n\n```js\nmodule.exports = {\n  // entry支持：字符串 对象 数组\n  // 字符串数组对应单页面应用\n  // 对象可以单页面应用也可以多页面应用\n  entry:{\n    index:'./src/index.js',\n    a:'./src/a.js'\n  },\n  // entry:['./src/index.js','./src/a.js'],\n  output:{\n    path:path.resolve(__dirname,'./dist'), // 输出的文件存放的目录\n    filename:'[name].js'// 输出的文件名称 使用占位符 index打包成index.js a打包成a.js\n  },\n  mode:'development',// 构建模式  none development production\n}\n```\n\n# webpack配置核⼼概念\n\n- chunk：指代码块，⼀个`chunk`可能由多个模块组合⽽成，也⽤于代码合并与分割。\n- bundle：资源经过`Webpack`流程解析编译后最终结输出的成果⽂件。(输出到dist的文件)\n- entry：顾名思义，就是⼊⼝起点，⽤来告诉webpack⽤哪个⽂件作为构建依赖图的起点。`webpack`会根据`entry`递归的去寻找依赖，每个依赖都将被它处理，最后输出到打包成果中。\n- output：`output`配置描述了`webpack`打包的输出配置，包含输出⽂件的命名、位置等信息。\n- loader：默认情况下，`webpack`仅⽀持`.js` `.json` ⽂件，通过`loader`，可以让它解析其他类型的⽂件，充当翻译官的⻆⾊。理论上只要有相应的`loader`，就可以处理任何类型的⽂件。\n- plugin：`loader`主要的职责是让`webpack`认识更多的⽂件类型，⽽`plugin`的职责则是让其可以控制构建流程，从⽽执⾏⼀些特殊的任务。插件的功能⾮常强⼤，可以完成各种各样的任务。\n  + `webpack`的功能补充\n- mode：4.0开始，`webpack`⽀持零配置，旨在为开发⼈员减少上⼿难度，同时加⼊了`mode`的概念，⽤于指定打包的⽬标环境，以便在打包的过程中启⽤`webpack`针对不同的环境下内置的优化。\n\n\n```js\nconst path = require(\"path\");\nconst htmlwebpackplugin = require(\"html-webpack-plugin\");\n// 默认配置\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"./dist\"), // 输出的文件存放的目录\n    filename: \"main.js\", // 输出的文件名称\n  },\n  mode: \"development\",\n  module: {\n    rules: [\n      {\n        // webpack处理css内容\n        test: /\\.css$/,\n        // 多个loader情况下 执行顺序自后往前\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n  plugins: [\n    new htmlwebpackplugin({\n      template: \"./src/index.html\",\n      filename: \"index.html\",\n    })\n  ],\n};\n\n```\n\n> webpack 默认只支持.js .json类型的模板。loader需要通过npm 进行安装`npm install style-loader -D`,`npm install css-loader -D`\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/webpack基础.md","raw":"---\ntitle: webpack基础\ndate: 2021-08-12 10:41:25\ntags:\n - webpack\ncategories:\n - webpack\ndescription:\n - 本文基于webpack4.x\n---\n\n\n# webpack简介\n\n<!-- more -->\n\n\n`Webpack` 是⼀个现代 `JavaScript` 应⽤程序的静态模块打包器（`module bundler`），当 `webpack` 处理应⽤程序时，它会递归地构建⼀个依赖关系图(d`ependency graph`)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 `bundle`。\n\n`Webpack`是⼀个打包模块化`JavaScript`的⼯具，它会从⼊⼝模块出发，识别出源码中的模块化导⼊语句，递归地找出⼊⼝⽂件的所有依赖，将⼊⼝和其所有的依赖打包到⼀个单独的⽂件中是⼯程化、⾃动化思想在前端开发中的体现。\n\n\n# webpack安装\n\n环境准备\n  nodejs:：`https://nodejs.org/en/`\n  版本参考官⽹发布的最新版本，可以提升webpack的打包速度\n\n安装⽅式\n\n  局部安装（推荐）\n\n  ```shell\n  npm init -y # 初始化npm配置⽂件\n  npm install --save-dev webpack # 安装核⼼库\n  npm install --save-dev webpack-cli # 安装命令⾏⼯具\n  # 安装4.x稳定版本\n  npm i -D webpack@4.44.0\n  # 安装指定版本\n  npm i -D webpack@<version>\n  ```\n\n  全局安装（不推荐）\n  ```shell\n  # 安装webpack V4+版本时，需要额外安装webpack-cli\n  npm install webpack webpack-cli -g\n  # 检查版本\n  webpack -v\n  # 卸载\n  npm uninstall webpack webpack-cli -g\n  ```\n> 全局安装webpack，这会将你项⽬中的webpack锁定到指定版本，造成不同的项⽬中因为webpack依赖不同版本⽽导致冲突，构建失败\n\n\n# 启动webpack\n\n> 启动wekpack执行构建，默认`mode=production`(默认开启代码压缩)\n\n1. webpack默认配置\n\n  - webpack默认⽀持JS模块和JSON模块\n  - ⽀持CommonJS Es moudule AMD等模块类型\n  - webpack4⽀持零配置使⽤,但是很弱，稍微复杂些的场景都需要额外扩展\n\n2. 准备执⾏构建\n\n  - 新建`src`⽂件夹\n  - 新建`src/index.js`、`src/index.json`、`src/other.js`\n\n\n```js\n// index.js\nconst json = require(\"./index.json\");//commonJS\nimport { add } from \"./other.js\";//es module\nconsole.log(json, add(2, 3));\n// index.json\n{\n\"name\": \"JOSN\"\n}\n//other.js\nexport function add(n1, n2) {\n  return n1 + n2;\n}\n```\n\n3. 执⾏构建\n\n```shell\n# npx⽅式\nnpx webpack\n# npm script\nnpm run dev\n# 修改package.json\n\"scripts\": {\n  \"dev\": \"webpack\"\n},\n```\n> 原理就是通过shell脚本在`node_modules/.bin`⽬录下创建⼀个软链接。\n\n4. 我们会发现⽬录下多出⼀个`dist`⽬录，⾥⾯有个`main.js`，这个⽂件是⼀个可执⾏的`JavaScript`⽂件，⾥⾯包含`webpackBootstrap`启动函数。\n\n5. 默认配置\n\n```js\nconst path = require('path')\n// 默认配置\nmodule.exports = {\n  entry:'./src/index.js',\n  output:{\n    path:path.resolve(__dirname,'./dist'), // 输出的文件存放的目录\n    filename:'main.js' // 输出的文件名称\n  },\n  mode:'development',// 模式\n}\n```\n> `webpack`配置名默认为`webpack.config.js`,也可以用其他命名，其他命名需要修改`package.json`\n> \"scripts\": {\n  \"dev\": \"webpack --config ./youFileName.js\"\n}\n\n6. 多入口对应多出口\n\n```js\nmodule.exports = {\n  // entry支持：字符串 对象 数组\n  // 字符串数组对应单页面应用\n  // 对象可以单页面应用也可以多页面应用\n  entry:{\n    index:'./src/index.js',\n    a:'./src/a.js'\n  },\n  // entry:['./src/index.js','./src/a.js'],\n  output:{\n    path:path.resolve(__dirname,'./dist'), // 输出的文件存放的目录\n    filename:'[name].js'// 输出的文件名称 使用占位符 index打包成index.js a打包成a.js\n  },\n  mode:'development',// 构建模式  none development production\n}\n```\n\n# webpack配置核⼼概念\n\n- chunk：指代码块，⼀个`chunk`可能由多个模块组合⽽成，也⽤于代码合并与分割。\n- bundle：资源经过`Webpack`流程解析编译后最终结输出的成果⽂件。(输出到dist的文件)\n- entry：顾名思义，就是⼊⼝起点，⽤来告诉webpack⽤哪个⽂件作为构建依赖图的起点。`webpack`会根据`entry`递归的去寻找依赖，每个依赖都将被它处理，最后输出到打包成果中。\n- output：`output`配置描述了`webpack`打包的输出配置，包含输出⽂件的命名、位置等信息。\n- loader：默认情况下，`webpack`仅⽀持`.js` `.json` ⽂件，通过`loader`，可以让它解析其他类型的⽂件，充当翻译官的⻆⾊。理论上只要有相应的`loader`，就可以处理任何类型的⽂件。\n- plugin：`loader`主要的职责是让`webpack`认识更多的⽂件类型，⽽`plugin`的职责则是让其可以控制构建流程，从⽽执⾏⼀些特殊的任务。插件的功能⾮常强⼤，可以完成各种各样的任务。\n  + `webpack`的功能补充\n- mode：4.0开始，`webpack`⽀持零配置，旨在为开发⼈员减少上⼿难度，同时加⼊了`mode`的概念，⽤于指定打包的⽬标环境，以便在打包的过程中启⽤`webpack`针对不同的环境下内置的优化。\n\n\n```js\nconst path = require(\"path\");\nconst htmlwebpackplugin = require(\"html-webpack-plugin\");\n// 默认配置\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"./dist\"), // 输出的文件存放的目录\n    filename: \"main.js\", // 输出的文件名称\n  },\n  mode: \"development\",\n  module: {\n    rules: [\n      {\n        // webpack处理css内容\n        test: /\\.css$/,\n        // 多个loader情况下 执行顺序自后往前\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n  plugins: [\n    new htmlwebpackplugin({\n      template: \"./src/index.html\",\n      filename: \"index.html\",\n    })\n  ],\n};\n\n```\n\n> webpack 默认只支持.js .json类型的模板。loader需要通过npm 进行安装`npm install style-loader -D`,`npm install css-loader -D`\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/webpack基础","published":1,"updated":"2021-08-16T03:35:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj542004c1r0q4svkhp6q","content":"<h1 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h1><a id=\"more\"></a>\n\n\n<p><code>Webpack</code> 是⼀个现代 <code>JavaScript</code> 应⽤程序的静态模块打包器（<code>module bundler</code>），当 <code>webpack</code> 处理应⽤程序时，它会递归地构建⼀个依赖关系图(d<code>ependency graph</code>)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 <code>bundle</code>。</p>\n<p><code>Webpack</code>是⼀个打包模块化<code>JavaScript</code>的⼯具，它会从⼊⼝模块出发，识别出源码中的模块化导⼊语句，递归地找出⼊⼝⽂件的所有依赖，将⼊⼝和其所有的依赖打包到⼀个单独的⽂件中是⼯程化、⾃动化思想在前端开发中的体现。</p>\n<h1 id=\"webpack安装\"><a href=\"#webpack安装\" class=\"headerlink\" title=\"webpack安装\"></a>webpack安装</h1><p>环境准备<br>  nodejs:：<code>https://nodejs.org/en/</code><br>  版本参考官⽹发布的最新版本，可以提升webpack的打包速度</p>\n<p>安装⽅式</p>\n<p>  局部安装（推荐）</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y # 初始化npm配置⽂件</span><br><span class=\"line\">npm install --save-dev webpack # 安装核⼼库</span><br><span class=\"line\">npm install --save-dev webpack-cli # 安装命令⾏⼯具</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装4.x稳定版本</span></span><br><span class=\"line\">npm i -D webpack@4.44.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装指定版本</span></span><br><span class=\"line\">npm i -D webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p>  全局安装（不推荐）<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装webpack V4+版本时，需要额外安装webpack-cli</span></span><br><span class=\"line\">npm install webpack webpack-cli -g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查版本</span></span><br><span class=\"line\">webpack -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载</span></span><br><span class=\"line\">npm uninstall webpack webpack-cli -g</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>全局安装webpack，这会将你项⽬中的webpack锁定到指定版本，造成不同的项⽬中因为webpack依赖不同版本⽽导致冲突，构建失败</p>\n</blockquote>\n<h1 id=\"启动webpack\"><a href=\"#启动webpack\" class=\"headerlink\" title=\"启动webpack\"></a>启动webpack</h1><blockquote>\n<p>启动wekpack执行构建，默认<code>mode=production</code>(默认开启代码压缩)</p>\n</blockquote>\n<ol>\n<li><p>webpack默认配置</p>\n<ul>\n<li>webpack默认⽀持JS模块和JSON模块</li>\n<li>⽀持CommonJS Es moudule AMD等模块类型</li>\n<li>webpack4⽀持零配置使⽤,但是很弱，稍微复杂些的场景都需要额外扩展</li>\n</ul>\n</li>\n<li><p>准备执⾏构建</p>\n<ul>\n<li>新建<code>src</code>⽂件夹</li>\n<li>新建<code>src/index.js</code>、<code>src/index.json</code>、<code>src/other.js</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">\"./index.json\"</span>);<span class=\"comment\">//commonJS</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./other.js\"</span>;<span class=\"comment\">//es module</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(json, add(<span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">// index.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"JOSN\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//other.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n1, n2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n1 + n2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执⾏构建</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> npx⽅式</span></span><br><span class=\"line\">npx webpack</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> npm script</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改package.json</span></span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"dev\": \"webpack\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原理就是通过shell脚本在<code>node_modules/.bin</code>⽬录下创建⼀个软链接。</p>\n</blockquote>\n<ol start=\"4\">\n<li><p>我们会发现⽬录下多出⼀个<code>dist</code>⽬录，⾥⾯有个<code>main.js</code>，这个⽂件是⼀个可执⾏的<code>JavaScript</code>⽂件，⾥⾯包含<code>webpackBootstrap</code>启动函数。</p>\n</li>\n<li><p>默认配置</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 默认配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry:<span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'./dist'</span>), <span class=\"comment\">// 输出的文件存放的目录</span></span><br><span class=\"line\">    filename:<span class=\"string\">'main.js'</span> <span class=\"comment\">// 输出的文件名称</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,<span class=\"comment\">// 模式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>webpack</code>配置名默认为<code>webpack.config.js</code>,也可以用其他命名，其他命名需要修改<code>package.json</code><br>“scripts”: {<br>  “dev”: “webpack –config ./youFileName.js”<br>}</p>\n</blockquote>\n<ol start=\"6\">\n<li>多入口对应多出口</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// entry支持：字符串 对象 数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 字符串数组对应单页面应用</span></span><br><span class=\"line\">  <span class=\"comment\">// 对象可以单页面应用也可以多页面应用</span></span><br><span class=\"line\">  entry:&#123;</span><br><span class=\"line\">    index:<span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    a:<span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// entry:['./src/index.js','./src/a.js'],</span></span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'./dist'</span>), <span class=\"comment\">// 输出的文件存放的目录</span></span><br><span class=\"line\">    filename:<span class=\"string\">'[name].js'</span><span class=\"comment\">// 输出的文件名称 使用占位符 index打包成index.js a打包成a.js</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,<span class=\"comment\">// 构建模式  none development production</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"webpack配置核⼼概念\"><a href=\"#webpack配置核⼼概念\" class=\"headerlink\" title=\"webpack配置核⼼概念\"></a>webpack配置核⼼概念</h1><ul>\n<li>chunk：指代码块，⼀个<code>chunk</code>可能由多个模块组合⽽成，也⽤于代码合并与分割。</li>\n<li>bundle：资源经过<code>Webpack</code>流程解析编译后最终结输出的成果⽂件。(输出到dist的文件)</li>\n<li>entry：顾名思义，就是⼊⼝起点，⽤来告诉webpack⽤哪个⽂件作为构建依赖图的起点。<code>webpack</code>会根据<code>entry</code>递归的去寻找依赖，每个依赖都将被它处理，最后输出到打包成果中。</li>\n<li>output：<code>output</code>配置描述了<code>webpack</code>打包的输出配置，包含输出⽂件的命名、位置等信息。</li>\n<li>loader：默认情况下，<code>webpack</code>仅⽀持<code>.js</code> <code>.json</code> ⽂件，通过<code>loader</code>，可以让它解析其他类型的⽂件，充当翻译官的⻆⾊。理论上只要有相应的<code>loader</code>，就可以处理任何类型的⽂件。</li>\n<li>plugin：<code>loader</code>主要的职责是让<code>webpack</code>认识更多的⽂件类型，⽽<code>plugin</code>的职责则是让其可以控制构建流程，从⽽执⾏⼀些特殊的任务。插件的功能⾮常强⼤，可以完成各种各样的任务。<ul>\n<li><code>webpack</code>的功能补充</li>\n</ul>\n</li>\n<li>mode：4.0开始，<code>webpack</code>⽀持零配置，旨在为开发⼈员减少上⼿难度，同时加⼊了<code>mode</code>的概念，⽤于指定打包的⽬标环境，以便在打包的过程中启⽤<code>webpack</code>针对不同的环境下内置的优化。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlwebpackplugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 默认配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">\"./src/index.js\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"./dist\"</span>), <span class=\"comment\">// 输出的文件存放的目录</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"main.js\"</span>, <span class=\"comment\">// 输出的文件名称</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: <span class=\"string\">\"development\"</span>,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// webpack处理css内容</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 多个loader情况下 执行顺序自后往前</span></span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlwebpackplugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">\"./src/index.html\"</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>webpack 默认只支持.js .json类型的模板。loader需要通过npm 进行安装<code>npm install style-loader -D</code>,<code>npm install css-loader -D</code></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<h1 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h1>","more":"<p><code>Webpack</code> 是⼀个现代 <code>JavaScript</code> 应⽤程序的静态模块打包器（<code>module bundler</code>），当 <code>webpack</code> 处理应⽤程序时，它会递归地构建⼀个依赖关系图(d<code>ependency graph</code>)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 <code>bundle</code>。</p>\n<p><code>Webpack</code>是⼀个打包模块化<code>JavaScript</code>的⼯具，它会从⼊⼝模块出发，识别出源码中的模块化导⼊语句，递归地找出⼊⼝⽂件的所有依赖，将⼊⼝和其所有的依赖打包到⼀个单独的⽂件中是⼯程化、⾃动化思想在前端开发中的体现。</p>\n<h1 id=\"webpack安装\"><a href=\"#webpack安装\" class=\"headerlink\" title=\"webpack安装\"></a>webpack安装</h1><p>环境准备<br>  nodejs:：<code>https://nodejs.org/en/</code><br>  版本参考官⽹发布的最新版本，可以提升webpack的打包速度</p>\n<p>安装⽅式</p>\n<p>  局部安装（推荐）</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y # 初始化npm配置⽂件</span><br><span class=\"line\">npm install --save-dev webpack # 安装核⼼库</span><br><span class=\"line\">npm install --save-dev webpack-cli # 安装命令⾏⼯具</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装4.x稳定版本</span></span><br><span class=\"line\">npm i -D webpack@4.44.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装指定版本</span></span><br><span class=\"line\">npm i -D webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p>  全局安装（不推荐）<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装webpack V4+版本时，需要额外安装webpack-cli</span></span><br><span class=\"line\">npm install webpack webpack-cli -g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查版本</span></span><br><span class=\"line\">webpack -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载</span></span><br><span class=\"line\">npm uninstall webpack webpack-cli -g</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>全局安装webpack，这会将你项⽬中的webpack锁定到指定版本，造成不同的项⽬中因为webpack依赖不同版本⽽导致冲突，构建失败</p>\n</blockquote>\n<h1 id=\"启动webpack\"><a href=\"#启动webpack\" class=\"headerlink\" title=\"启动webpack\"></a>启动webpack</h1><blockquote>\n<p>启动wekpack执行构建，默认<code>mode=production</code>(默认开启代码压缩)</p>\n</blockquote>\n<ol>\n<li><p>webpack默认配置</p>\n<ul>\n<li>webpack默认⽀持JS模块和JSON模块</li>\n<li>⽀持CommonJS Es moudule AMD等模块类型</li>\n<li>webpack4⽀持零配置使⽤,但是很弱，稍微复杂些的场景都需要额外扩展</li>\n</ul>\n</li>\n<li><p>准备执⾏构建</p>\n<ul>\n<li>新建<code>src</code>⽂件夹</li>\n<li>新建<code>src/index.js</code>、<code>src/index.json</code>、<code>src/other.js</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">\"./index.json\"</span>);<span class=\"comment\">//commonJS</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./other.js\"</span>;<span class=\"comment\">//es module</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(json, add(<span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">// index.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"JOSN\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//other.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n1, n2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n1 + n2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执⾏构建</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> npx⽅式</span></span><br><span class=\"line\">npx webpack</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> npm script</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改package.json</span></span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"dev\": \"webpack\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原理就是通过shell脚本在<code>node_modules/.bin</code>⽬录下创建⼀个软链接。</p>\n</blockquote>\n<ol start=\"4\">\n<li><p>我们会发现⽬录下多出⼀个<code>dist</code>⽬录，⾥⾯有个<code>main.js</code>，这个⽂件是⼀个可执⾏的<code>JavaScript</code>⽂件，⾥⾯包含<code>webpackBootstrap</code>启动函数。</p>\n</li>\n<li><p>默认配置</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 默认配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry:<span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'./dist'</span>), <span class=\"comment\">// 输出的文件存放的目录</span></span><br><span class=\"line\">    filename:<span class=\"string\">'main.js'</span> <span class=\"comment\">// 输出的文件名称</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,<span class=\"comment\">// 模式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>webpack</code>配置名默认为<code>webpack.config.js</code>,也可以用其他命名，其他命名需要修改<code>package.json</code><br>“scripts”: {<br>  “dev”: “webpack –config ./youFileName.js”<br>}</p>\n</blockquote>\n<ol start=\"6\">\n<li>多入口对应多出口</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// entry支持：字符串 对象 数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 字符串数组对应单页面应用</span></span><br><span class=\"line\">  <span class=\"comment\">// 对象可以单页面应用也可以多页面应用</span></span><br><span class=\"line\">  entry:&#123;</span><br><span class=\"line\">    index:<span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    a:<span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// entry:['./src/index.js','./src/a.js'],</span></span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'./dist'</span>), <span class=\"comment\">// 输出的文件存放的目录</span></span><br><span class=\"line\">    filename:<span class=\"string\">'[name].js'</span><span class=\"comment\">// 输出的文件名称 使用占位符 index打包成index.js a打包成a.js</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,<span class=\"comment\">// 构建模式  none development production</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"webpack配置核⼼概念\"><a href=\"#webpack配置核⼼概念\" class=\"headerlink\" title=\"webpack配置核⼼概念\"></a>webpack配置核⼼概念</h1><ul>\n<li>chunk：指代码块，⼀个<code>chunk</code>可能由多个模块组合⽽成，也⽤于代码合并与分割。</li>\n<li>bundle：资源经过<code>Webpack</code>流程解析编译后最终结输出的成果⽂件。(输出到dist的文件)</li>\n<li>entry：顾名思义，就是⼊⼝起点，⽤来告诉webpack⽤哪个⽂件作为构建依赖图的起点。<code>webpack</code>会根据<code>entry</code>递归的去寻找依赖，每个依赖都将被它处理，最后输出到打包成果中。</li>\n<li>output：<code>output</code>配置描述了<code>webpack</code>打包的输出配置，包含输出⽂件的命名、位置等信息。</li>\n<li>loader：默认情况下，<code>webpack</code>仅⽀持<code>.js</code> <code>.json</code> ⽂件，通过<code>loader</code>，可以让它解析其他类型的⽂件，充当翻译官的⻆⾊。理论上只要有相应的<code>loader</code>，就可以处理任何类型的⽂件。</li>\n<li>plugin：<code>loader</code>主要的职责是让<code>webpack</code>认识更多的⽂件类型，⽽<code>plugin</code>的职责则是让其可以控制构建流程，从⽽执⾏⼀些特殊的任务。插件的功能⾮常强⼤，可以完成各种各样的任务。<ul>\n<li><code>webpack</code>的功能补充</li>\n</ul>\n</li>\n<li>mode：4.0开始，<code>webpack</code>⽀持零配置，旨在为开发⼈员减少上⼿难度，同时加⼊了<code>mode</code>的概念，⽤于指定打包的⽬标环境，以便在打包的过程中启⽤<code>webpack</code>针对不同的环境下内置的优化。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlwebpackplugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 默认配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">\"./src/index.js\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"./dist\"</span>), <span class=\"comment\">// 输出的文件存放的目录</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"main.js\"</span>, <span class=\"comment\">// 输出的文件名称</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: <span class=\"string\">\"development\"</span>,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// webpack处理css内容</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 多个loader情况下 执行顺序自后往前</span></span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlwebpackplugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">\"./src/index.html\"</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>webpack 默认只支持.js .json类型的模板。loader需要通过npm 进行安装<code>npm install style-loader -D</code>,<code>npm install css-loader -D</code></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"从零开始进阶全栈之数据库（一）","date":"2021-09-14T13:39:44.000Z","description":null,"_content":"\n# 数据库能做什么\n\n<!-- more -->\n\n- 存储大量数据，方便检索和访问\n\n- 保持数据信息的一致、完整\n\n- 共享和安全\n\n- 通过组合分析，产生新的有用的信息\n\n\n# 数据库的基本概念\n\n## 实体\n只要是在客观世界存在的，可以被描述出来的都是实体\n\n## 数据库（DB）\n数据库就是数据的仓库，可以存放结构化的数据\n\n## 数据库管理系统（DBMS）\n是一种系统软件，提供操作数据库的环境，可以通过数据库管理系统对数据进行插入，修改，删除和查询等操作\n\n## SQL\n结构化查询语言，专门用来和数据库进行交流的语言，几乎所有DBMS都支持SQL\n\n## SQL规范\n\n- SQL语句不区分大小写，建议SQL关键字大写，表名和列表小写\n- 命令用分号结尾\n- 命令可以缩进和换行，一种类型的关键字放在一行\n- 可以写单行和多行注释，#是单行注释 /***/是多行注释\n\n# 数据表\n\n- 表是数据库中包含所有数据的数据库对象，也是其他对象的基础\n- 表定义是一个列的集合，数据在表中是按行和列的格式组织的，用来存放数据\n- 行也称为记录，用于存放一个个实体，列称为字段，用来描述实体的某一个属性\n\n# MYSQL简介\n\n## MYSQL特点\n\n- 开源免费\n- 性能高\n- 安装使用简单\n\n# 数据完整性\n\n- 为了实现数据完整性，需要检验数据库表中的每行和每列数据是否符合要求\n- 在创建表的时候，应该保证以后的数据是正确的，错误的数据不允许输入\n\n## 列类型\n### 整数型\n\n- tinyint  (1字节)\n- smallint  （2自字节）\n- mediumint  (3字节)\n- int      (4字节)\n- bigint   （8字节）\n\n### 浮点型\n\n- float   \n- double\n\n### 定点\n\n- decimal  (字符串或数字型数值转换成大浮点数)\n\n### 日期时间型\n\n- year\n- timestamp   (时间戳)\n- time\n- date\n- datetime\n\n### 字符串类型\n\n- set   (集合)\n- enum  (枚举)\n- blob  (可以存二进制)\n- text\n- varchar\n- char\n\n## 默认值\n默认值是指如果用户没有指定的情况下会记录的此字段之前指定预设的值\n\n## 非空约束\n我们可以约定某个字段不能不输入，必须提供一个非空的值\n\n# 实例完整性\n\n## 主键约束\n\n### 主键\n表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合就称为表的主键，主键表的数据不能重复\n\n> 如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为组合键\n\n**主键选择标准**\n\n1. 最少性:尽量选择单个键作为主键\n2. 稳定性: 由于主键是用来在两个表之间建立连接的，所以不能经常更新，最好就不更新\n\n### 唯一约束\n\n唯一约束是指某个字段值是唯一的，在所有的记录中不能有重复的值\n\n### 标识列\n- 当表中没有合适的列作为主键时，可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条几率\n- 标识列的值是自动生成的，不能再该列上输入数据\n\n### 外键约束\n\n一个表的外键必须引用另一个表的主键\n\n- 主表没有记录，子表中不能添加对应的记录\n- 修改和删除主标记录不能让子表记录孤立，必须相应修改和删除\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/09/从零开始进阶全栈之数据库(一).md","raw":"---\ntitle: 从零开始进阶全栈之数据库（一）\ndate: 2021-09-14 21:39:44\ntags:\n   - 全栈之路\n   - 数据库\ncategories:\n   - 数据库\ndescription:\n---\n\n# 数据库能做什么\n\n<!-- more -->\n\n- 存储大量数据，方便检索和访问\n\n- 保持数据信息的一致、完整\n\n- 共享和安全\n\n- 通过组合分析，产生新的有用的信息\n\n\n# 数据库的基本概念\n\n## 实体\n只要是在客观世界存在的，可以被描述出来的都是实体\n\n## 数据库（DB）\n数据库就是数据的仓库，可以存放结构化的数据\n\n## 数据库管理系统（DBMS）\n是一种系统软件，提供操作数据库的环境，可以通过数据库管理系统对数据进行插入，修改，删除和查询等操作\n\n## SQL\n结构化查询语言，专门用来和数据库进行交流的语言，几乎所有DBMS都支持SQL\n\n## SQL规范\n\n- SQL语句不区分大小写，建议SQL关键字大写，表名和列表小写\n- 命令用分号结尾\n- 命令可以缩进和换行，一种类型的关键字放在一行\n- 可以写单行和多行注释，#是单行注释 /***/是多行注释\n\n# 数据表\n\n- 表是数据库中包含所有数据的数据库对象，也是其他对象的基础\n- 表定义是一个列的集合，数据在表中是按行和列的格式组织的，用来存放数据\n- 行也称为记录，用于存放一个个实体，列称为字段，用来描述实体的某一个属性\n\n# MYSQL简介\n\n## MYSQL特点\n\n- 开源免费\n- 性能高\n- 安装使用简单\n\n# 数据完整性\n\n- 为了实现数据完整性，需要检验数据库表中的每行和每列数据是否符合要求\n- 在创建表的时候，应该保证以后的数据是正确的，错误的数据不允许输入\n\n## 列类型\n### 整数型\n\n- tinyint  (1字节)\n- smallint  （2自字节）\n- mediumint  (3字节)\n- int      (4字节)\n- bigint   （8字节）\n\n### 浮点型\n\n- float   \n- double\n\n### 定点\n\n- decimal  (字符串或数字型数值转换成大浮点数)\n\n### 日期时间型\n\n- year\n- timestamp   (时间戳)\n- time\n- date\n- datetime\n\n### 字符串类型\n\n- set   (集合)\n- enum  (枚举)\n- blob  (可以存二进制)\n- text\n- varchar\n- char\n\n## 默认值\n默认值是指如果用户没有指定的情况下会记录的此字段之前指定预设的值\n\n## 非空约束\n我们可以约定某个字段不能不输入，必须提供一个非空的值\n\n# 实例完整性\n\n## 主键约束\n\n### 主键\n表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合就称为表的主键，主键表的数据不能重复\n\n> 如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为组合键\n\n**主键选择标准**\n\n1. 最少性:尽量选择单个键作为主键\n2. 稳定性: 由于主键是用来在两个表之间建立连接的，所以不能经常更新，最好就不更新\n\n### 唯一约束\n\n唯一约束是指某个字段值是唯一的，在所有的记录中不能有重复的值\n\n### 标识列\n- 当表中没有合适的列作为主键时，可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条几率\n- 标识列的值是自动生成的，不能再该列上输入数据\n\n### 外键约束\n\n一个表的外键必须引用另一个表的主键\n\n- 主表没有记录，子表中不能添加对应的记录\n- 修改和删除主标记录不能让子表记录孤立，必须相应修改和删除\n\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/09/从零开始进阶全栈之数据库(一)","published":1,"updated":"2021-09-18T13:57:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj543004h1r0q1o1acmsz","content":"<h1 id=\"数据库能做什么\"><a href=\"#数据库能做什么\" class=\"headerlink\" title=\"数据库能做什么\"></a>数据库能做什么</h1><a id=\"more\"></a>\n\n<ul>\n<li><p>存储大量数据，方便检索和访问</p>\n</li>\n<li><p>保持数据信息的一致、完整</p>\n</li>\n<li><p>共享和安全</p>\n</li>\n<li><p>通过组合分析，产生新的有用的信息</p>\n</li>\n</ul>\n<h1 id=\"数据库的基本概念\"><a href=\"#数据库的基本概念\" class=\"headerlink\" title=\"数据库的基本概念\"></a>数据库的基本概念</h1><h2 id=\"实体\"><a href=\"#实体\" class=\"headerlink\" title=\"实体\"></a>实体</h2><p>只要是在客观世界存在的，可以被描述出来的都是实体</p>\n<h2 id=\"数据库（DB）\"><a href=\"#数据库（DB）\" class=\"headerlink\" title=\"数据库（DB）\"></a>数据库（DB）</h2><p>数据库就是数据的仓库，可以存放结构化的数据</p>\n<h2 id=\"数据库管理系统（DBMS）\"><a href=\"#数据库管理系统（DBMS）\" class=\"headerlink\" title=\"数据库管理系统（DBMS）\"></a>数据库管理系统（DBMS）</h2><p>是一种系统软件，提供操作数据库的环境，可以通过数据库管理系统对数据进行插入，修改，删除和查询等操作</p>\n<h2 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h2><p>结构化查询语言，专门用来和数据库进行交流的语言，几乎所有DBMS都支持SQL</p>\n<h2 id=\"SQL规范\"><a href=\"#SQL规范\" class=\"headerlink\" title=\"SQL规范\"></a>SQL规范</h2><ul>\n<li>SQL语句不区分大小写，建议SQL关键字大写，表名和列表小写</li>\n<li>命令用分号结尾</li>\n<li>命令可以缩进和换行，一种类型的关键字放在一行</li>\n<li>可以写单行和多行注释，#是单行注释 /***/是多行注释</li>\n</ul>\n<h1 id=\"数据表\"><a href=\"#数据表\" class=\"headerlink\" title=\"数据表\"></a>数据表</h1><ul>\n<li>表是数据库中包含所有数据的数据库对象，也是其他对象的基础</li>\n<li>表定义是一个列的集合，数据在表中是按行和列的格式组织的，用来存放数据</li>\n<li>行也称为记录，用于存放一个个实体，列称为字段，用来描述实体的某一个属性</li>\n</ul>\n<h1 id=\"MYSQL简介\"><a href=\"#MYSQL简介\" class=\"headerlink\" title=\"MYSQL简介\"></a>MYSQL简介</h1><h2 id=\"MYSQL特点\"><a href=\"#MYSQL特点\" class=\"headerlink\" title=\"MYSQL特点\"></a>MYSQL特点</h2><ul>\n<li>开源免费</li>\n<li>性能高</li>\n<li>安装使用简单</li>\n</ul>\n<h1 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h1><ul>\n<li>为了实现数据完整性，需要检验数据库表中的每行和每列数据是否符合要求</li>\n<li>在创建表的时候，应该保证以后的数据是正确的，错误的数据不允许输入</li>\n</ul>\n<h2 id=\"列类型\"><a href=\"#列类型\" class=\"headerlink\" title=\"列类型\"></a>列类型</h2><h3 id=\"整数型\"><a href=\"#整数型\" class=\"headerlink\" title=\"整数型\"></a>整数型</h3><ul>\n<li>tinyint  (1字节)</li>\n<li>smallint  （2自字节）</li>\n<li>mediumint  (3字节)</li>\n<li>int      (4字节)</li>\n<li>bigint   （8字节）</li>\n</ul>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><ul>\n<li>float   </li>\n<li>double</li>\n</ul>\n<h3 id=\"定点\"><a href=\"#定点\" class=\"headerlink\" title=\"定点\"></a>定点</h3><ul>\n<li>decimal  (字符串或数字型数值转换成大浮点数)</li>\n</ul>\n<h3 id=\"日期时间型\"><a href=\"#日期时间型\" class=\"headerlink\" title=\"日期时间型\"></a>日期时间型</h3><ul>\n<li>year</li>\n<li>timestamp   (时间戳)</li>\n<li>time</li>\n<li>date</li>\n<li>datetime</li>\n</ul>\n<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><ul>\n<li>set   (集合)</li>\n<li>enum  (枚举)</li>\n<li>blob  (可以存二进制)</li>\n<li>text</li>\n<li>varchar</li>\n<li>char</li>\n</ul>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>默认值是指如果用户没有指定的情况下会记录的此字段之前指定预设的值</p>\n<h2 id=\"非空约束\"><a href=\"#非空约束\" class=\"headerlink\" title=\"非空约束\"></a>非空约束</h2><p>我们可以约定某个字段不能不输入，必须提供一个非空的值</p>\n<h1 id=\"实例完整性\"><a href=\"#实例完整性\" class=\"headerlink\" title=\"实例完整性\"></a>实例完整性</h1><h2 id=\"主键约束\"><a href=\"#主键约束\" class=\"headerlink\" title=\"主键约束\"></a>主键约束</h2><h3 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h3><p>表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合就称为表的主键，主键表的数据不能重复</p>\n<blockquote>\n<p>如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为组合键</p>\n</blockquote>\n<p><strong>主键选择标准</strong></p>\n<ol>\n<li>最少性:尽量选择单个键作为主键</li>\n<li>稳定性: 由于主键是用来在两个表之间建立连接的，所以不能经常更新，最好就不更新</li>\n</ol>\n<h3 id=\"唯一约束\"><a href=\"#唯一约束\" class=\"headerlink\" title=\"唯一约束\"></a>唯一约束</h3><p>唯一约束是指某个字段值是唯一的，在所有的记录中不能有重复的值</p>\n<h3 id=\"标识列\"><a href=\"#标识列\" class=\"headerlink\" title=\"标识列\"></a>标识列</h3><ul>\n<li>当表中没有合适的列作为主键时，可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条几率</li>\n<li>标识列的值是自动生成的，不能再该列上输入数据</li>\n</ul>\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p>一个表的外键必须引用另一个表的主键</p>\n<ul>\n<li>主表没有记录，子表中不能添加对应的记录</li>\n<li>修改和删除主标记录不能让子表记录孤立，必须相应修改和删除</li>\n</ul>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<h1 id=\"数据库能做什么\"><a href=\"#数据库能做什么\" class=\"headerlink\" title=\"数据库能做什么\"></a>数据库能做什么</h1>","more":"<ul>\n<li><p>存储大量数据，方便检索和访问</p>\n</li>\n<li><p>保持数据信息的一致、完整</p>\n</li>\n<li><p>共享和安全</p>\n</li>\n<li><p>通过组合分析，产生新的有用的信息</p>\n</li>\n</ul>\n<h1 id=\"数据库的基本概念\"><a href=\"#数据库的基本概念\" class=\"headerlink\" title=\"数据库的基本概念\"></a>数据库的基本概念</h1><h2 id=\"实体\"><a href=\"#实体\" class=\"headerlink\" title=\"实体\"></a>实体</h2><p>只要是在客观世界存在的，可以被描述出来的都是实体</p>\n<h2 id=\"数据库（DB）\"><a href=\"#数据库（DB）\" class=\"headerlink\" title=\"数据库（DB）\"></a>数据库（DB）</h2><p>数据库就是数据的仓库，可以存放结构化的数据</p>\n<h2 id=\"数据库管理系统（DBMS）\"><a href=\"#数据库管理系统（DBMS）\" class=\"headerlink\" title=\"数据库管理系统（DBMS）\"></a>数据库管理系统（DBMS）</h2><p>是一种系统软件，提供操作数据库的环境，可以通过数据库管理系统对数据进行插入，修改，删除和查询等操作</p>\n<h2 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h2><p>结构化查询语言，专门用来和数据库进行交流的语言，几乎所有DBMS都支持SQL</p>\n<h2 id=\"SQL规范\"><a href=\"#SQL规范\" class=\"headerlink\" title=\"SQL规范\"></a>SQL规范</h2><ul>\n<li>SQL语句不区分大小写，建议SQL关键字大写，表名和列表小写</li>\n<li>命令用分号结尾</li>\n<li>命令可以缩进和换行，一种类型的关键字放在一行</li>\n<li>可以写单行和多行注释，#是单行注释 /***/是多行注释</li>\n</ul>\n<h1 id=\"数据表\"><a href=\"#数据表\" class=\"headerlink\" title=\"数据表\"></a>数据表</h1><ul>\n<li>表是数据库中包含所有数据的数据库对象，也是其他对象的基础</li>\n<li>表定义是一个列的集合，数据在表中是按行和列的格式组织的，用来存放数据</li>\n<li>行也称为记录，用于存放一个个实体，列称为字段，用来描述实体的某一个属性</li>\n</ul>\n<h1 id=\"MYSQL简介\"><a href=\"#MYSQL简介\" class=\"headerlink\" title=\"MYSQL简介\"></a>MYSQL简介</h1><h2 id=\"MYSQL特点\"><a href=\"#MYSQL特点\" class=\"headerlink\" title=\"MYSQL特点\"></a>MYSQL特点</h2><ul>\n<li>开源免费</li>\n<li>性能高</li>\n<li>安装使用简单</li>\n</ul>\n<h1 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h1><ul>\n<li>为了实现数据完整性，需要检验数据库表中的每行和每列数据是否符合要求</li>\n<li>在创建表的时候，应该保证以后的数据是正确的，错误的数据不允许输入</li>\n</ul>\n<h2 id=\"列类型\"><a href=\"#列类型\" class=\"headerlink\" title=\"列类型\"></a>列类型</h2><h3 id=\"整数型\"><a href=\"#整数型\" class=\"headerlink\" title=\"整数型\"></a>整数型</h3><ul>\n<li>tinyint  (1字节)</li>\n<li>smallint  （2自字节）</li>\n<li>mediumint  (3字节)</li>\n<li>int      (4字节)</li>\n<li>bigint   （8字节）</li>\n</ul>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><ul>\n<li>float   </li>\n<li>double</li>\n</ul>\n<h3 id=\"定点\"><a href=\"#定点\" class=\"headerlink\" title=\"定点\"></a>定点</h3><ul>\n<li>decimal  (字符串或数字型数值转换成大浮点数)</li>\n</ul>\n<h3 id=\"日期时间型\"><a href=\"#日期时间型\" class=\"headerlink\" title=\"日期时间型\"></a>日期时间型</h3><ul>\n<li>year</li>\n<li>timestamp   (时间戳)</li>\n<li>time</li>\n<li>date</li>\n<li>datetime</li>\n</ul>\n<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><ul>\n<li>set   (集合)</li>\n<li>enum  (枚举)</li>\n<li>blob  (可以存二进制)</li>\n<li>text</li>\n<li>varchar</li>\n<li>char</li>\n</ul>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>默认值是指如果用户没有指定的情况下会记录的此字段之前指定预设的值</p>\n<h2 id=\"非空约束\"><a href=\"#非空约束\" class=\"headerlink\" title=\"非空约束\"></a>非空约束</h2><p>我们可以约定某个字段不能不输入，必须提供一个非空的值</p>\n<h1 id=\"实例完整性\"><a href=\"#实例完整性\" class=\"headerlink\" title=\"实例完整性\"></a>实例完整性</h1><h2 id=\"主键约束\"><a href=\"#主键约束\" class=\"headerlink\" title=\"主键约束\"></a>主键约束</h2><h3 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h3><p>表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合就称为表的主键，主键表的数据不能重复</p>\n<blockquote>\n<p>如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为组合键</p>\n</blockquote>\n<p><strong>主键选择标准</strong></p>\n<ol>\n<li>最少性:尽量选择单个键作为主键</li>\n<li>稳定性: 由于主键是用来在两个表之间建立连接的，所以不能经常更新，最好就不更新</li>\n</ol>\n<h3 id=\"唯一约束\"><a href=\"#唯一约束\" class=\"headerlink\" title=\"唯一约束\"></a>唯一约束</h3><p>唯一约束是指某个字段值是唯一的，在所有的记录中不能有重复的值</p>\n<h3 id=\"标识列\"><a href=\"#标识列\" class=\"headerlink\" title=\"标识列\"></a>标识列</h3><ul>\n<li>当表中没有合适的列作为主键时，可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条几率</li>\n<li>标识列的值是自动生成的，不能再该列上输入数据</li>\n</ul>\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p>一个表的外键必须引用另一个表的主键</p>\n<ul>\n<li>主表没有记录，子表中不能添加对应的记录</li>\n<li>修改和删除主标记录不能让子表记录孤立，必须相应修改和删除</li>\n</ul>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"webpack进行前端开发工程环境搭建","date":"2021-08-16T03:36:37.000Z","description":null,"_content":"\n在阅读这篇文章之前，请确认你已经了解了webpack的基本常识\n> [还不了解？点击查看《webpack基础》](https://qytayh.github.io/2021/08/webpack%E5%9F%BA%E7%A1%80/)\n\n<!-- more -->\n# 安装依赖\n\n多人协作时，可以在项目根目录下新建一个`.npmrc`文件用来指定npm源\n\n```shell\n# 统一团队的npm源\nregistry=https://registry.npm.taobao.org\n# 使用npm install的时候就会默认淘宝源\n```\n\n# 项目搭建\n\n## 样式 静态资源 (图片第三方字体) es6+ (vue react ts)\n\n### 样式：借助css-loader处理css语法，借助style-loader使用css\n\n```js\nmodule: {\n    rules: [\n      {\n        // webpack处理css内容\n        test: /\\.css$/,\n        // 多个loader情况下 执行顺序自后往前\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test:/\\.less$/,\n        // 先将less语法转成css语法\n        use: [\"style-loader\", \"css-loader\",\"less-loader\"]\n      },\n      {\n        test:/\\.scss$/,\n        use: [\"style-loader\", \"css-loader\",\"sass-loader\"]\n      },\n    ],\n  },\n```\n> [postcss官网](https://www.postcss.com.cn/)\n\n```js\n根目录下新增`postcss.config.js`\nmodule.exports = {\n  plugins:[\n    require(\"autoprefixer\"),// 浏览器兼容\n    require(\"cssnano\") // css 压缩\n  ]\n}\n```\n\n> `package.json`中`\"browserslist\":[\"last 2 versions\",\"> 1%\"]`用于配置`autoprefixer`自动兼容版本（兼容所有浏览器最近的两个大版本，全球市场占有率大于1%的浏览器）\n> 更多点击 --> [Browserslist](https://qytayh.github.io/2021/08/Browserslist/)\n\n安装`mini-css-extract-plugin`用来做样式提取，将css样式抽离成css文件\n```shell\nnpm install mini-css-extract-plugin -D\n```\n修改`webpack.config.js`中的配置\n```js\nconst minicssExtractPlugin = require('mini-css-extract-plugin')//先进行引用\n\nmodule.exports = {\n  ...\n   module: {\n    rules: [\n      ...\n      {\n        test:/\\.less$/,\n        // 将style-loader替换成minicssExtractPlugin自带的loader\n        use: [minicssExtractPlugin.loader, \"css-loader\", \"postcss-loader\",\"less-loader\"]\n      },\n      ...\n    ],\n  },\n  plugins: [\n    ...\n    new minicssExtractPlugin({ // 将样式抽离成独立的css文件\n      filename:\"[name].css\",\n    }),\n    ...\n  ],\n  ...\n}\n\n```\n\n### 图片/字体⽂件处理：\n\n- file-loader \n- url-loader\n\n`url-loader`和`file-loader`都可以⽤来处理本地的资源⽂件，如图⽚、字体、⾳视频等。功能也是类似的，不过`url-loader`可以指定在⽂件⼤⼩⼩于指定的限制时，返回`DataURL`，不会输出真实的⽂件，可以减少昂贵的⽹络请求。\n\n```shell\n#安装\nnpm install url-loader file-loader -D\n```\n\n```js\n// 使用\nimport pic from 'you pic url'\n\nconst img = new Image()\nimg.src = pic\n\nconst root = document.getElementById('app')\nroot.append(img)\n\n// webpack配置\n{\n  test:/\\.(png|jp?g|gif|webp)$/,\n  // use:\"file-loader\"\n  use:{\n    loader:'file-loader',\n    options:{\n      name:\"images/[name].[ext]\", // ext 为后缀占位符 使用原后缀输出\n      outputPath:'images',// 输出目录\n      publicPath:'../images' // 引用的目录自动带上publicPath路径\n    }\n  }\n\n  // use:\"url-loader\"  url-loader兼容file-loader的配置\n  use:{\n    loader:'url-loader',\n    options:{\n      name:\"images/[name].[ext]\", // ext 为后缀占位符 使用原后缀输出\n      outputPath:'images',// 输出目录\n      publicPath:'../images', // 引用的目录自动带上publicPath路径\n      limit: 1024*10   // 单位是字节 1024为一个kb  大于limit值为png格式 小于limit值 转base64\n    }\n  }\n}\n\n```\n> [file-loader更多相关](https://github.com/webpack-contrib/file-loader)\n> 如果需要使⽤图⽚压缩功能，可以使⽤`image-webpack-loader`。\n\n### 字体\n\n```\n//css\n@font-face {\n  font-family: \"webfont\";\n  font-display: swap;\n  src: url(\"webfont.woff2\") format(\"woff2\");\n}\n\nbody {\n  background: blue;\n  font-family: \"webfont\"!important;\n}\n\n//webpack.config.js\n{\n  test: /\\.(eot|ttf|woff|woff2|svg)$/,\n  use: \"file-loader\"\n}\n```\n\n### hash\n\n- `hash`策略\n\n  > 在输出的文件名后添加`[hash]`，可以用`[hash:8]`控制文件名中hash长度  \n  > 以项目为单位，项目内容改变，则会生产新的hash，内容不变hash不变\n\n- 使用`chunkhash`\n\n  > 以`chunk`为单位，当一个文件内容改变，则整个chunk组的模块hash都会改变  \n  > `[name]-[chunkhash:8].[ext]`\n\n- `contenthash`\n\n  > 以自身内容为单位\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/webpack进行前端开发工程环境搭建.md","raw":"---\ntitle: webpack进行前端开发工程环境搭建\ndate: 2021-08-16 11:36:37\ntags:\n - webpack\ncategories:\n - webpack\ndescription:\n---\n\n在阅读这篇文章之前，请确认你已经了解了webpack的基本常识\n> [还不了解？点击查看《webpack基础》](https://qytayh.github.io/2021/08/webpack%E5%9F%BA%E7%A1%80/)\n\n<!-- more -->\n# 安装依赖\n\n多人协作时，可以在项目根目录下新建一个`.npmrc`文件用来指定npm源\n\n```shell\n# 统一团队的npm源\nregistry=https://registry.npm.taobao.org\n# 使用npm install的时候就会默认淘宝源\n```\n\n# 项目搭建\n\n## 样式 静态资源 (图片第三方字体) es6+ (vue react ts)\n\n### 样式：借助css-loader处理css语法，借助style-loader使用css\n\n```js\nmodule: {\n    rules: [\n      {\n        // webpack处理css内容\n        test: /\\.css$/,\n        // 多个loader情况下 执行顺序自后往前\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test:/\\.less$/,\n        // 先将less语法转成css语法\n        use: [\"style-loader\", \"css-loader\",\"less-loader\"]\n      },\n      {\n        test:/\\.scss$/,\n        use: [\"style-loader\", \"css-loader\",\"sass-loader\"]\n      },\n    ],\n  },\n```\n> [postcss官网](https://www.postcss.com.cn/)\n\n```js\n根目录下新增`postcss.config.js`\nmodule.exports = {\n  plugins:[\n    require(\"autoprefixer\"),// 浏览器兼容\n    require(\"cssnano\") // css 压缩\n  ]\n}\n```\n\n> `package.json`中`\"browserslist\":[\"last 2 versions\",\"> 1%\"]`用于配置`autoprefixer`自动兼容版本（兼容所有浏览器最近的两个大版本，全球市场占有率大于1%的浏览器）\n> 更多点击 --> [Browserslist](https://qytayh.github.io/2021/08/Browserslist/)\n\n安装`mini-css-extract-plugin`用来做样式提取，将css样式抽离成css文件\n```shell\nnpm install mini-css-extract-plugin -D\n```\n修改`webpack.config.js`中的配置\n```js\nconst minicssExtractPlugin = require('mini-css-extract-plugin')//先进行引用\n\nmodule.exports = {\n  ...\n   module: {\n    rules: [\n      ...\n      {\n        test:/\\.less$/,\n        // 将style-loader替换成minicssExtractPlugin自带的loader\n        use: [minicssExtractPlugin.loader, \"css-loader\", \"postcss-loader\",\"less-loader\"]\n      },\n      ...\n    ],\n  },\n  plugins: [\n    ...\n    new minicssExtractPlugin({ // 将样式抽离成独立的css文件\n      filename:\"[name].css\",\n    }),\n    ...\n  ],\n  ...\n}\n\n```\n\n### 图片/字体⽂件处理：\n\n- file-loader \n- url-loader\n\n`url-loader`和`file-loader`都可以⽤来处理本地的资源⽂件，如图⽚、字体、⾳视频等。功能也是类似的，不过`url-loader`可以指定在⽂件⼤⼩⼩于指定的限制时，返回`DataURL`，不会输出真实的⽂件，可以减少昂贵的⽹络请求。\n\n```shell\n#安装\nnpm install url-loader file-loader -D\n```\n\n```js\n// 使用\nimport pic from 'you pic url'\n\nconst img = new Image()\nimg.src = pic\n\nconst root = document.getElementById('app')\nroot.append(img)\n\n// webpack配置\n{\n  test:/\\.(png|jp?g|gif|webp)$/,\n  // use:\"file-loader\"\n  use:{\n    loader:'file-loader',\n    options:{\n      name:\"images/[name].[ext]\", // ext 为后缀占位符 使用原后缀输出\n      outputPath:'images',// 输出目录\n      publicPath:'../images' // 引用的目录自动带上publicPath路径\n    }\n  }\n\n  // use:\"url-loader\"  url-loader兼容file-loader的配置\n  use:{\n    loader:'url-loader',\n    options:{\n      name:\"images/[name].[ext]\", // ext 为后缀占位符 使用原后缀输出\n      outputPath:'images',// 输出目录\n      publicPath:'../images', // 引用的目录自动带上publicPath路径\n      limit: 1024*10   // 单位是字节 1024为一个kb  大于limit值为png格式 小于limit值 转base64\n    }\n  }\n}\n\n```\n> [file-loader更多相关](https://github.com/webpack-contrib/file-loader)\n> 如果需要使⽤图⽚压缩功能，可以使⽤`image-webpack-loader`。\n\n### 字体\n\n```\n//css\n@font-face {\n  font-family: \"webfont\";\n  font-display: swap;\n  src: url(\"webfont.woff2\") format(\"woff2\");\n}\n\nbody {\n  background: blue;\n  font-family: \"webfont\"!important;\n}\n\n//webpack.config.js\n{\n  test: /\\.(eot|ttf|woff|woff2|svg)$/,\n  use: \"file-loader\"\n}\n```\n\n### hash\n\n- `hash`策略\n\n  > 在输出的文件名后添加`[hash]`，可以用`[hash:8]`控制文件名中hash长度  \n  > 以项目为单位，项目内容改变，则会生产新的hash，内容不变hash不变\n\n- 使用`chunkhash`\n\n  > 以`chunk`为单位，当一个文件内容改变，则整个chunk组的模块hash都会改变  \n  > `[name]-[chunkhash:8].[ext]`\n\n- `contenthash`\n\n  > 以自身内容为单位\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/webpack进行前端开发工程环境搭建","published":1,"updated":"2021-08-17T08:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj543004k1r0qh8834bld","content":"<p>在阅读这篇文章之前，请确认你已经了解了webpack的基本常识</p>\n<blockquote>\n<p><a href=\"https://qytayh.github.io/2021/08/webpack%E5%9F%BA%E7%A1%80/\">还不了解？点击查看《webpack基础》</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><p>多人协作时，可以在项目根目录下新建一个<code>.npmrc</code>文件用来指定npm源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 统一团队的npm源</span></span><br><span class=\"line\">registry=https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用npm install的时候就会默认淘宝源</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h1><h2 id=\"样式-静态资源-图片第三方字体-es6-vue-react-ts\"><a href=\"#样式-静态资源-图片第三方字体-es6-vue-react-ts\" class=\"headerlink\" title=\"样式 静态资源 (图片第三方字体) es6+ (vue react ts)\"></a>样式 静态资源 (图片第三方字体) es6+ (vue react ts)</h2><h3 id=\"样式：借助css-loader处理css语法，借助style-loader使用css\"><a href=\"#样式：借助css-loader处理css语法，借助style-loader使用css\" class=\"headerlink\" title=\"样式：借助css-loader处理css语法，借助style-loader使用css\"></a>样式：借助css-loader处理css语法，借助style-loader使用css</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// webpack处理css内容</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 多个loader情况下 执行顺序自后往前</span></span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 先将less语法转成css语法</span></span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"less-loader\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"sass-loader\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://www.postcss.com.cn/\" target=\"_blank\" rel=\"noopener\">postcss官网</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根目录下新增<span class=\"string\">`postcss.config.js`</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">\"autoprefixer\"</span>),<span class=\"comment\">// 浏览器兼容</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">\"cssnano\"</span>) <span class=\"comment\">// css 压缩</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>package.json</code>中<code>&quot;browserslist&quot;:[&quot;last 2 versions&quot;,&quot;&gt; 1%&quot;]</code>用于配置<code>autoprefixer</code>自动兼容版本（兼容所有浏览器最近的两个大版本，全球市场占有率大于1%的浏览器）<br>更多点击 –&gt; <a href=\"https://qytayh.github.io/2021/08/Browserslist/\">Browserslist</a></p>\n</blockquote>\n<p>安装<code>mini-css-extract-plugin</code>用来做样式提取，将css样式抽离成css文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n<p>修改<code>webpack.config.js</code>中的配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minicssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>)<span class=\"comment\">//先进行引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">   <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 将style-loader替换成minicssExtractPlugin自带的loader</span></span><br><span class=\"line\">        use: [minicssExtractPlugin.loader, <span class=\"string\">\"css-loader\"</span>, <span class=\"string\">\"postcss-loader\"</span>,<span class=\"string\">\"less-loader\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">new</span> minicssExtractPlugin(&#123; <span class=\"comment\">// 将样式抽离成独立的css文件</span></span><br><span class=\"line\">      filename:<span class=\"string\">\"[name].css\"</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片-字体⽂件处理：\"><a href=\"#图片-字体⽂件处理：\" class=\"headerlink\" title=\"图片/字体⽂件处理：\"></a>图片/字体⽂件处理：</h3><ul>\n<li>file-loader </li>\n<li>url-loader</li>\n</ul>\n<p><code>url-loader</code>和<code>file-loader</code>都可以⽤来处理本地的资源⽂件，如图⽚、字体、⾳视频等。功能也是类似的，不过<code>url-loader</code>可以指定在⽂件⼤⼩⼩于指定的限制时，返回<code>DataURL</code>，不会输出真实的⽂件，可以减少昂贵的⽹络请求。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装</span></span><br><span class=\"line\">npm install url-loader file-loader -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pic <span class=\"keyword\">from</span> <span class=\"string\">'you pic url'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">img.src = pic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">root.append(img)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.(png|jp?g|gif|webp)$/</span>,</span><br><span class=\"line\">  <span class=\"comment\">// use:\"file-loader\"</span></span><br><span class=\"line\">  use:&#123;</span><br><span class=\"line\">    loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">    options:&#123;</span><br><span class=\"line\">      name:<span class=\"string\">\"images/[name].[ext]\"</span>, <span class=\"comment\">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class=\"line\">      outputPath:<span class=\"string\">'images'</span>,<span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">      publicPath:<span class=\"string\">'../images'</span> <span class=\"comment\">// 引用的目录自动带上publicPath路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use:\"url-loader\"  url-loader兼容file-loader的配置</span></span><br><span class=\"line\">  use:&#123;</span><br><span class=\"line\">    loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">    options:&#123;</span><br><span class=\"line\">      name:<span class=\"string\">\"images/[name].[ext]\"</span>, <span class=\"comment\">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class=\"line\">      outputPath:<span class=\"string\">'images'</span>,<span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">      publicPath:<span class=\"string\">'../images'</span>, <span class=\"comment\">// 引用的目录自动带上publicPath路径</span></span><br><span class=\"line\">      limit: <span class=\"number\">1024</span>*<span class=\"number\">10</span>   <span class=\"comment\">// 单位是字节 1024为一个kb  大于limit值为png格式 小于limit值 转base64</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/webpack-contrib/file-loader\" target=\"_blank\" rel=\"noopener\">file-loader更多相关</a><br>如果需要使⽤图⽚压缩功能，可以使⽤<code>image-webpack-loader</code>。</p>\n</blockquote>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;css</span><br><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">  font-family: &quot;webfont&quot;;</span><br><span class=\"line\">  font-display: swap;</span><br><span class=\"line\">  src: url(&quot;webfont.woff2&quot;) format(&quot;woff2&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">  font-family: &quot;webfont&quot;!important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;webpack.config.js</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(eot|ttf|woff|woff2|svg)$&#x2F;,</span><br><span class=\"line\">  use: &quot;file-loader&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><ul>\n<li><p><code>hash</code>策略</p>\n<blockquote>\n<p>在输出的文件名后添加<code>[hash]</code>，可以用<code>[hash:8]</code>控制文件名中hash长度<br>以项目为单位，项目内容改变，则会生产新的hash，内容不变hash不变</p>\n</blockquote>\n</li>\n<li><p>使用<code>chunkhash</code></p>\n<blockquote>\n<p>以<code>chunk</code>为单位，当一个文件内容改变，则整个chunk组的模块hash都会改变<br><code>[name]-[chunkhash:8].[ext]</code></p>\n</blockquote>\n</li>\n<li><p><code>contenthash</code></p>\n<blockquote>\n<p>以自身内容为单位</p>\n</blockquote>\n</li>\n</ul>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>在阅读这篇文章之前，请确认你已经了解了webpack的基本常识</p>\n<blockquote>\n<p><a href=\"https://qytayh.github.io/2021/08/webpack%E5%9F%BA%E7%A1%80/\">还不了解？点击查看《webpack基础》</a></p>\n</blockquote>","more":"<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><p>多人协作时，可以在项目根目录下新建一个<code>.npmrc</code>文件用来指定npm源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 统一团队的npm源</span></span><br><span class=\"line\">registry=https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用npm install的时候就会默认淘宝源</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h1><h2 id=\"样式-静态资源-图片第三方字体-es6-vue-react-ts\"><a href=\"#样式-静态资源-图片第三方字体-es6-vue-react-ts\" class=\"headerlink\" title=\"样式 静态资源 (图片第三方字体) es6+ (vue react ts)\"></a>样式 静态资源 (图片第三方字体) es6+ (vue react ts)</h2><h3 id=\"样式：借助css-loader处理css语法，借助style-loader使用css\"><a href=\"#样式：借助css-loader处理css语法，借助style-loader使用css\" class=\"headerlink\" title=\"样式：借助css-loader处理css语法，借助style-loader使用css\"></a>样式：借助css-loader处理css语法，借助style-loader使用css</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// webpack处理css内容</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 多个loader情况下 执行顺序自后往前</span></span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 先将less语法转成css语法</span></span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"less-loader\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"sass-loader\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://www.postcss.com.cn/\" target=\"_blank\" rel=\"noopener\">postcss官网</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根目录下新增<span class=\"string\">`postcss.config.js`</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">\"autoprefixer\"</span>),<span class=\"comment\">// 浏览器兼容</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">\"cssnano\"</span>) <span class=\"comment\">// css 压缩</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>package.json</code>中<code>&quot;browserslist&quot;:[&quot;last 2 versions&quot;,&quot;&gt; 1%&quot;]</code>用于配置<code>autoprefixer</code>自动兼容版本（兼容所有浏览器最近的两个大版本，全球市场占有率大于1%的浏览器）<br>更多点击 –&gt; <a href=\"https://qytayh.github.io/2021/08/Browserslist/\">Browserslist</a></p>\n</blockquote>\n<p>安装<code>mini-css-extract-plugin</code>用来做样式提取，将css样式抽离成css文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n<p>修改<code>webpack.config.js</code>中的配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minicssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>)<span class=\"comment\">//先进行引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">   <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 将style-loader替换成minicssExtractPlugin自带的loader</span></span><br><span class=\"line\">        use: [minicssExtractPlugin.loader, <span class=\"string\">\"css-loader\"</span>, <span class=\"string\">\"postcss-loader\"</span>,<span class=\"string\">\"less-loader\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">new</span> minicssExtractPlugin(&#123; <span class=\"comment\">// 将样式抽离成独立的css文件</span></span><br><span class=\"line\">      filename:<span class=\"string\">\"[name].css\"</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片-字体⽂件处理：\"><a href=\"#图片-字体⽂件处理：\" class=\"headerlink\" title=\"图片/字体⽂件处理：\"></a>图片/字体⽂件处理：</h3><ul>\n<li>file-loader </li>\n<li>url-loader</li>\n</ul>\n<p><code>url-loader</code>和<code>file-loader</code>都可以⽤来处理本地的资源⽂件，如图⽚、字体、⾳视频等。功能也是类似的，不过<code>url-loader</code>可以指定在⽂件⼤⼩⼩于指定的限制时，返回<code>DataURL</code>，不会输出真实的⽂件，可以减少昂贵的⽹络请求。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装</span></span><br><span class=\"line\">npm install url-loader file-loader -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pic <span class=\"keyword\">from</span> <span class=\"string\">'you pic url'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">img.src = pic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">root.append(img)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.(png|jp?g|gif|webp)$/</span>,</span><br><span class=\"line\">  <span class=\"comment\">// use:\"file-loader\"</span></span><br><span class=\"line\">  use:&#123;</span><br><span class=\"line\">    loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">    options:&#123;</span><br><span class=\"line\">      name:<span class=\"string\">\"images/[name].[ext]\"</span>, <span class=\"comment\">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class=\"line\">      outputPath:<span class=\"string\">'images'</span>,<span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">      publicPath:<span class=\"string\">'../images'</span> <span class=\"comment\">// 引用的目录自动带上publicPath路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use:\"url-loader\"  url-loader兼容file-loader的配置</span></span><br><span class=\"line\">  use:&#123;</span><br><span class=\"line\">    loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">    options:&#123;</span><br><span class=\"line\">      name:<span class=\"string\">\"images/[name].[ext]\"</span>, <span class=\"comment\">// ext 为后缀占位符 使用原后缀输出</span></span><br><span class=\"line\">      outputPath:<span class=\"string\">'images'</span>,<span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">      publicPath:<span class=\"string\">'../images'</span>, <span class=\"comment\">// 引用的目录自动带上publicPath路径</span></span><br><span class=\"line\">      limit: <span class=\"number\">1024</span>*<span class=\"number\">10</span>   <span class=\"comment\">// 单位是字节 1024为一个kb  大于limit值为png格式 小于limit值 转base64</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/webpack-contrib/file-loader\" target=\"_blank\" rel=\"noopener\">file-loader更多相关</a><br>如果需要使⽤图⽚压缩功能，可以使⽤<code>image-webpack-loader</code>。</p>\n</blockquote>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;css</span><br><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">  font-family: &quot;webfont&quot;;</span><br><span class=\"line\">  font-display: swap;</span><br><span class=\"line\">  src: url(&quot;webfont.woff2&quot;) format(&quot;woff2&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">  font-family: &quot;webfont&quot;!important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;webpack.config.js</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(eot|ttf|woff|woff2|svg)$&#x2F;,</span><br><span class=\"line\">  use: &quot;file-loader&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><ul>\n<li><p><code>hash</code>策略</p>\n<blockquote>\n<p>在输出的文件名后添加<code>[hash]</code>，可以用<code>[hash:8]</code>控制文件名中hash长度<br>以项目为单位，项目内容改变，则会生产新的hash，内容不变hash不变</p>\n</blockquote>\n</li>\n<li><p>使用<code>chunkhash</code></p>\n<blockquote>\n<p>以<code>chunk</code>为单位，当一个文件内容改变，则整个chunk组的模块hash都会改变<br><code>[name]-[chunkhash:8].[ext]</code></p>\n</blockquote>\n</li>\n<li><p><code>contenthash</code></p>\n<blockquote>\n<p>以自身内容为单位</p>\n</blockquote>\n</li>\n</ul>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"websocket从入门到入土","date":"2021-08-18T07:17:03.000Z","description":null,"_content":"\n# 什么是`websocket`？\n\n`websocket`是一种网络传输协议，可在单个`tcp`连接上进行全双工通信，位于`OSI`模型的应用层。\n\n<!-- more -->\n\n特点：\n- `TCP`链接，与`HTTP`协议兼容\n- 双向通信，主动推送（服务端向客户端）\n- 无同源限制，协议标识符为ws（加密wss）\n\n# 应用场景\n\n- 聊天、消息、点赞\n- 直播评论（弹幕）\n- 游戏、协调编辑、基于位置的应用\n\n\n# 开始你的第一个websocket应用\n\n## websocket常用前端库\n\n- ws (实现原生协议，特点：通用、性能高，定制型强)\n- socket.io (向下兼容协议，特点：适配性强，性能一般)\n\n## 3分钟编写一个ws应用\n\n1. 新建`server`目录，通过`npm init -y`初始化`server`目录\n2. `npm install ws` 安装ws库\n3. 新建`index.js`作为入口文件\n```js\nconst WebSocket = require('ws')\nconst wss = new WebSocket.Server({port:3000})\n\nwss.on('connection',function connection(ws){\n  console.log('on client is connected')\n})\n```\n4. 根目录下新建一个`client`目录，并添加`index.html`文件\n```js\n var ws =  new WebSocket('ws://127.0.0.1:3000')\n```\n5. 通过`node index.js`启动服务端\n6. 访问客户端的`index.html`，我们可以看到服务端控制台输出有用户连接了\n\n> 客户端中使用ws方法与服务端类似\n\n# 常见API介绍\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\n\n# websocket常见状态\n```js\nws.onopen = function(){\n  console.log('open'+ws.readyState) // 1\n  ws.send('hello from client')\n}\nws.onmessage = function(msg){\n  console.log('message'+ws.readyState) // 1\n  console.log(msg)\n}\n// 连接主动断开时触发\nws.onclose = function(){\n  console.log('close'+ ws.readyState)  //  close: 服务端断开 3  客户端主动断开 3\n  console.log('yiguanbi')\n}\n// 当连接失败触发error事件\nws.onerror = function(){\n  console.log('error'+ ws.readyState)  //  erroe:3\n}\n```\n\n# 实现一个ws广播\n```js\n// server端\n\n...\nwss.clients.forEach((client)=>{\n  // 判断非自己的客户端 并且有连接的客户端\n  if(ws!==client&&client.readyState===WebSocket.OPEN){\n    client.send(msg.toString())\n  }\n})\n...\n\n```\n\n# 统计进入聊天室的人数\n```js\n// client\n// 改写sendMSg方法\nsendMsg(){\n  this.lists.push(this.name+\":\"+this.message)\n  this.ws.send(JSON.stringify({\n    event:'message',\n    message:this.message,\n    name:this.name // 传递用户名\n  }))\n  this.message=''\n},\n// 改写onMsessage\nonMessage(event){\n  if(this.isshow) return // 未进入聊天室则不接收消息\n  var obj = JSON.parse(event.data)\n  if(obj.event==='enter'){\n    this.lists.push('欢迎'+obj.message+'加入聊天室')\n  }else if(obj.event ==='out'){\n    this.lists.push(obj.name+'离开了聊天室')\n  }else {\n    if(obj.name!==this.name){\n      this.lists.push(obj.name+\":\"+obj.message)\n    }\n  }\n  this.num = obj.num\n},\n\n// server\n\n// 定义一个全局的变量num用于人数统计\nlet num = 0\n\nws.on(\"message\", function (msg) {\n  const msgObj = JSON.parse(msg);\n  if (msgObj.event === \"enter\") {\n    ws.name = msgObj.message;\n    num++;\n  }\n  // ws.send(msg)\n  // 广播消息\n  wss.clients.forEach((client) => {\n    if (client.readyState === WebSocket.OPEN) {\n      // 为了获取在线的聊天人数\n      msgObj.num = num;\n      client.send(JSON.stringify(msgObj));\n    }\n  });\n});\n\n// 当ws客户端断开\nws.on(\"close\", function () {\n  if(ws.name){\n    num--;\n  }\n  let msgObj = {}\n  // 广播消息\n  wss.clients.forEach((client) => {\n    if (client.readyState === WebSocket.OPEN) {\n      // 为了获取在线的聊天人数\n      msgObj.num = num;\n      msgObj.name = ws.name;\n      msgObj.event = 'out'\n      client.send(JSON.stringify(msgObj));\n    }\n  });\n});\n\n```\n\n# 实现多聊天室\n\n调整`client`代码，在`enter`的时候带上聊天室的`id`,广播的时候只对该聊天室进行广播\n```js\n// client\nenter(){\n  if(this.name.trim()==='')  {\n    alert('用户名不得为空')\n    return\n  }\n  this.isShow=false\n  this.ws.send(JSON.stringify({\n    event:'enter',\n    message:this.name,\n    roomid:this.roomid\n  }))\n}\n\n// server\n wss.clients.forEach((client) => {\n  if (client.readyState === WebSocket.OPEN&& client.roomid ===ws.roomid) {\n    msgObj.name = ws.name\n    client.send(JSON.stringify(msgObj));\n  }\n});\n```\n\n# websocket鉴权\n\n- 协议本身在握手阶段不提的\n- 浏览器侧：url传参、message主动消息，session/cookie\n- Nodejs侧：直接使用ws传Header\n\n# 心跳检测&断线重连\n\n```js\n// server 发送心跳检测\nconst timeInterval = 1000\nsetInterval(()=>{\n  wss.clients.forEach((ws)=>{\n    if(!ws.isAlive){\n      group[ws.roomid]--\n      return ws.terminate() //关闭ws链接\n    }\n    // 主动发送心跳检测请求\n    // 当客户端返回了消息后，主动设置flag为在线\n    ws.isAlive = false\n    ws.send(JSON.stringify({\n      event:'heartbeat',\n      message:'ping'\n    }))\n  })\n},timeInterval)\n\n// client 响应\nonMessage(event) {\n  if (this.isShow) return; //用户没进入聊天室 就不接收消息\n  console.log(\"message\" + this.ws.readyState); // 1\n  var obj = JSON.parse(event.data);\n  switch (obj.event) {\n    case \"noAuth\":\n      // 鉴权失败\n      // 重新获取token\n      break;\n    case \"enter\":\n      this.lists.push(\"欢迎\" + obj.message + \"加入聊天室\");\n      break;\n    case \"out\":\n      this.lists.push(obj.name + \"离开了聊天室\");\n      break;\n    case 'heartbeat':// 响应心跳检测\n      this.ws.send(JSON.stringify({\n        event:'heartbeat',\n        message:'pong'\n      }))\n      break;\n    default:\n      if (obj.name !== this.name) {\n        this.lists.push(obj.name + \":\" + obj.message);\n      }\n  }\n  this.num = obj.num;\n}\n```\n\n```js\n// client 断线重连\n// 新增定时器方法\ncheckServer(){\n  clearTimeout(this.handle)\n  this.handle = setTimeout(() => {\n    this.onClose()\n    this.initWS()\n  }, 1000+500);\n}\n\n// 改写onError\n onError() {\n  console.log(\"error\" + ws.readyState); //  erroe:3\n  // 连接失败后1s 尝试断线重连\n  setTimeout(() => {\n    this.initWS()\n  }, 1000);\n},\n```\n\n\n> 相关代码请移步github -----> [websocketBase](https://github.com/qytayh/websocketBase)\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/websocket从入门到入土.md","raw":"---\ntitle: websocket从入门到入土\ndate: 2021-08-18 15:17:03\ntags:\n  - websocket\ncategories:\n  - websocket\ndescription:\n---\n\n# 什么是`websocket`？\n\n`websocket`是一种网络传输协议，可在单个`tcp`连接上进行全双工通信，位于`OSI`模型的应用层。\n\n<!-- more -->\n\n特点：\n- `TCP`链接，与`HTTP`协议兼容\n- 双向通信，主动推送（服务端向客户端）\n- 无同源限制，协议标识符为ws（加密wss）\n\n# 应用场景\n\n- 聊天、消息、点赞\n- 直播评论（弹幕）\n- 游戏、协调编辑、基于位置的应用\n\n\n# 开始你的第一个websocket应用\n\n## websocket常用前端库\n\n- ws (实现原生协议，特点：通用、性能高，定制型强)\n- socket.io (向下兼容协议，特点：适配性强，性能一般)\n\n## 3分钟编写一个ws应用\n\n1. 新建`server`目录，通过`npm init -y`初始化`server`目录\n2. `npm install ws` 安装ws库\n3. 新建`index.js`作为入口文件\n```js\nconst WebSocket = require('ws')\nconst wss = new WebSocket.Server({port:3000})\n\nwss.on('connection',function connection(ws){\n  console.log('on client is connected')\n})\n```\n4. 根目录下新建一个`client`目录，并添加`index.html`文件\n```js\n var ws =  new WebSocket('ws://127.0.0.1:3000')\n```\n5. 通过`node index.js`启动服务端\n6. 访问客户端的`index.html`，我们可以看到服务端控制台输出有用户连接了\n\n> 客户端中使用ws方法与服务端类似\n\n# 常见API介绍\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\n\n# websocket常见状态\n```js\nws.onopen = function(){\n  console.log('open'+ws.readyState) // 1\n  ws.send('hello from client')\n}\nws.onmessage = function(msg){\n  console.log('message'+ws.readyState) // 1\n  console.log(msg)\n}\n// 连接主动断开时触发\nws.onclose = function(){\n  console.log('close'+ ws.readyState)  //  close: 服务端断开 3  客户端主动断开 3\n  console.log('yiguanbi')\n}\n// 当连接失败触发error事件\nws.onerror = function(){\n  console.log('error'+ ws.readyState)  //  erroe:3\n}\n```\n\n# 实现一个ws广播\n```js\n// server端\n\n...\nwss.clients.forEach((client)=>{\n  // 判断非自己的客户端 并且有连接的客户端\n  if(ws!==client&&client.readyState===WebSocket.OPEN){\n    client.send(msg.toString())\n  }\n})\n...\n\n```\n\n# 统计进入聊天室的人数\n```js\n// client\n// 改写sendMSg方法\nsendMsg(){\n  this.lists.push(this.name+\":\"+this.message)\n  this.ws.send(JSON.stringify({\n    event:'message',\n    message:this.message,\n    name:this.name // 传递用户名\n  }))\n  this.message=''\n},\n// 改写onMsessage\nonMessage(event){\n  if(this.isshow) return // 未进入聊天室则不接收消息\n  var obj = JSON.parse(event.data)\n  if(obj.event==='enter'){\n    this.lists.push('欢迎'+obj.message+'加入聊天室')\n  }else if(obj.event ==='out'){\n    this.lists.push(obj.name+'离开了聊天室')\n  }else {\n    if(obj.name!==this.name){\n      this.lists.push(obj.name+\":\"+obj.message)\n    }\n  }\n  this.num = obj.num\n},\n\n// server\n\n// 定义一个全局的变量num用于人数统计\nlet num = 0\n\nws.on(\"message\", function (msg) {\n  const msgObj = JSON.parse(msg);\n  if (msgObj.event === \"enter\") {\n    ws.name = msgObj.message;\n    num++;\n  }\n  // ws.send(msg)\n  // 广播消息\n  wss.clients.forEach((client) => {\n    if (client.readyState === WebSocket.OPEN) {\n      // 为了获取在线的聊天人数\n      msgObj.num = num;\n      client.send(JSON.stringify(msgObj));\n    }\n  });\n});\n\n// 当ws客户端断开\nws.on(\"close\", function () {\n  if(ws.name){\n    num--;\n  }\n  let msgObj = {}\n  // 广播消息\n  wss.clients.forEach((client) => {\n    if (client.readyState === WebSocket.OPEN) {\n      // 为了获取在线的聊天人数\n      msgObj.num = num;\n      msgObj.name = ws.name;\n      msgObj.event = 'out'\n      client.send(JSON.stringify(msgObj));\n    }\n  });\n});\n\n```\n\n# 实现多聊天室\n\n调整`client`代码，在`enter`的时候带上聊天室的`id`,广播的时候只对该聊天室进行广播\n```js\n// client\nenter(){\n  if(this.name.trim()==='')  {\n    alert('用户名不得为空')\n    return\n  }\n  this.isShow=false\n  this.ws.send(JSON.stringify({\n    event:'enter',\n    message:this.name,\n    roomid:this.roomid\n  }))\n}\n\n// server\n wss.clients.forEach((client) => {\n  if (client.readyState === WebSocket.OPEN&& client.roomid ===ws.roomid) {\n    msgObj.name = ws.name\n    client.send(JSON.stringify(msgObj));\n  }\n});\n```\n\n# websocket鉴权\n\n- 协议本身在握手阶段不提的\n- 浏览器侧：url传参、message主动消息，session/cookie\n- Nodejs侧：直接使用ws传Header\n\n# 心跳检测&断线重连\n\n```js\n// server 发送心跳检测\nconst timeInterval = 1000\nsetInterval(()=>{\n  wss.clients.forEach((ws)=>{\n    if(!ws.isAlive){\n      group[ws.roomid]--\n      return ws.terminate() //关闭ws链接\n    }\n    // 主动发送心跳检测请求\n    // 当客户端返回了消息后，主动设置flag为在线\n    ws.isAlive = false\n    ws.send(JSON.stringify({\n      event:'heartbeat',\n      message:'ping'\n    }))\n  })\n},timeInterval)\n\n// client 响应\nonMessage(event) {\n  if (this.isShow) return; //用户没进入聊天室 就不接收消息\n  console.log(\"message\" + this.ws.readyState); // 1\n  var obj = JSON.parse(event.data);\n  switch (obj.event) {\n    case \"noAuth\":\n      // 鉴权失败\n      // 重新获取token\n      break;\n    case \"enter\":\n      this.lists.push(\"欢迎\" + obj.message + \"加入聊天室\");\n      break;\n    case \"out\":\n      this.lists.push(obj.name + \"离开了聊天室\");\n      break;\n    case 'heartbeat':// 响应心跳检测\n      this.ws.send(JSON.stringify({\n        event:'heartbeat',\n        message:'pong'\n      }))\n      break;\n    default:\n      if (obj.name !== this.name) {\n        this.lists.push(obj.name + \":\" + obj.message);\n      }\n  }\n  this.num = obj.num;\n}\n```\n\n```js\n// client 断线重连\n// 新增定时器方法\ncheckServer(){\n  clearTimeout(this.handle)\n  this.handle = setTimeout(() => {\n    this.onClose()\n    this.initWS()\n  }, 1000+500);\n}\n\n// 改写onError\n onError() {\n  console.log(\"error\" + ws.readyState); //  erroe:3\n  // 连接失败后1s 尝试断线重连\n  setTimeout(() => {\n    this.initWS()\n  }, 1000);\n},\n```\n\n\n> 相关代码请移步github -----> [websocketBase](https://github.com/qytayh/websocketBase)\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/websocket从入门到入土","published":1,"updated":"2021-08-19T09:34:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj544004o1r0qbs6jfhhz","content":"<h1 id=\"什么是websocket？\"><a href=\"#什么是websocket？\" class=\"headerlink\" title=\"什么是websocket？\"></a>什么是<code>websocket</code>？</h1><p><code>websocket</code>是一种网络传输协议，可在单个<code>tcp</code>连接上进行全双工通信，位于<code>OSI</code>模型的应用层。</p>\n<a id=\"more\"></a>\n\n<p>特点：</p>\n<ul>\n<li><code>TCP</code>链接，与<code>HTTP</code>协议兼容</li>\n<li>双向通信，主动推送（服务端向客户端）</li>\n<li>无同源限制，协议标识符为ws（加密wss）</li>\n</ul>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><ul>\n<li>聊天、消息、点赞</li>\n<li>直播评论（弹幕）</li>\n<li>游戏、协调编辑、基于位置的应用</li>\n</ul>\n<h1 id=\"开始你的第一个websocket应用\"><a href=\"#开始你的第一个websocket应用\" class=\"headerlink\" title=\"开始你的第一个websocket应用\"></a>开始你的第一个websocket应用</h1><h2 id=\"websocket常用前端库\"><a href=\"#websocket常用前端库\" class=\"headerlink\" title=\"websocket常用前端库\"></a>websocket常用前端库</h2><ul>\n<li>ws (实现原生协议，特点：通用、性能高，定制型强)</li>\n<li>socket.io (向下兼容协议，特点：适配性强，性能一般)</li>\n</ul>\n<h2 id=\"3分钟编写一个ws应用\"><a href=\"#3分钟编写一个ws应用\" class=\"headerlink\" title=\"3分钟编写一个ws应用\"></a>3分钟编写一个ws应用</h2><ol>\n<li>新建<code>server</code>目录，通过<code>npm init -y</code>初始化<code>server</code>目录</li>\n<li><code>npm install ws</code> 安装ws库</li>\n<li>新建<code>index.js</code>作为入口文件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> WebSocket = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> wss = <span class=\"keyword\">new</span> WebSocket.Server(&#123;<span class=\"attr\">port</span>:<span class=\"number\">3000</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">wss.on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connection</span>(<span class=\"params\">ws</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'on client is connected'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>根目录下新建一个<code>client</code>目录，并添加<code>index.html</code>文件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws =  <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:3000'</span>)</span><br></pre></td></tr></table></figure></li>\n<li>通过<code>node index.js</code>启动服务端</li>\n<li>访问客户端的<code>index.html</code>，我们可以看到服务端控制台输出有用户连接了</li>\n</ol>\n<blockquote>\n<p>客户端中使用ws方法与服务端类似</p>\n</blockquote>\n<h1 id=\"常见API介绍\"><a href=\"#常见API介绍\" class=\"headerlink\" title=\"常见API介绍\"></a>常见API介绍</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>\n<h1 id=\"websocket常见状态\"><a href=\"#websocket常见状态\" class=\"headerlink\" title=\"websocket常见状态\"></a>websocket常见状态</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'open'</span>+ws.readyState) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  ws.send(<span class=\"string\">'hello from client'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'message'</span>+ws.readyState) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 连接主动断开时触发</span></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'close'</span>+ ws.readyState)  <span class=\"comment\">//  close: 服务端断开 3  客户端主动断开 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'yiguanbi'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 当连接失败触发error事件</span></span><br><span class=\"line\">ws.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>+ ws.readyState)  <span class=\"comment\">//  erroe:3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现一个ws广播\"><a href=\"#实现一个ws广播\" class=\"headerlink\" title=\"实现一个ws广播\"></a>实现一个ws广播</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server端</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断非自己的客户端 并且有连接的客户端</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ws!==client&amp;&amp;client.readyState===WebSocket.OPEN)&#123;</span><br><span class=\"line\">    client.send(msg.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"统计进入聊天室的人数\"><a href=\"#统计进入聊天室的人数\" class=\"headerlink\" title=\"统计进入聊天室的人数\"></a>统计进入聊天室的人数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client</span></span><br><span class=\"line\"><span class=\"comment\">// 改写sendMSg方法</span></span><br><span class=\"line\">sendMsg()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lists.push(<span class=\"keyword\">this</span>.name+<span class=\"string\">\":\"</span>+<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">    event:<span class=\"string\">'message'</span>,</span><br><span class=\"line\">    message:<span class=\"keyword\">this</span>.message,</span><br><span class=\"line\">    name:<span class=\"keyword\">this</span>.name <span class=\"comment\">// 传递用户名</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.message=<span class=\"string\">''</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 改写onMsessage</span></span><br><span class=\"line\">onMessage(event)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isshow) <span class=\"keyword\">return</span> <span class=\"comment\">// 未进入聊天室则不接收消息</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(event.data)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj.event===<span class=\"string\">'enter'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lists.push(<span class=\"string\">'欢迎'</span>+obj.message+<span class=\"string\">'加入聊天室'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj.event ===<span class=\"string\">'out'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lists.push(obj.name+<span class=\"string\">'离开了聊天室'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.name!==<span class=\"keyword\">this</span>.name)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lists.push(obj.name+<span class=\"string\">\":\"</span>+obj.message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.num = obj.num</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个全局的变量num用于人数统计</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">ws.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> msgObj = <span class=\"built_in\">JSON</span>.parse(msg);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (msgObj.event === <span class=\"string\">\"enter\"</span>) &#123;</span><br><span class=\"line\">    ws.name = msgObj.message;</span><br><span class=\"line\">    num++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ws.send(msg)</span></span><br><span class=\"line\">  <span class=\"comment\">// 广播消息</span></span><br><span class=\"line\">  wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 为了获取在线的聊天人数</span></span><br><span class=\"line\">      msgObj.num = num;</span><br><span class=\"line\">      client.send(<span class=\"built_in\">JSON</span>.stringify(msgObj));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当ws客户端断开</span></span><br><span class=\"line\">ws.on(<span class=\"string\">\"close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ws.name)&#123;</span><br><span class=\"line\">    num--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> msgObj = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 广播消息</span></span><br><span class=\"line\">  wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 为了获取在线的聊天人数</span></span><br><span class=\"line\">      msgObj.num = num;</span><br><span class=\"line\">      msgObj.name = ws.name;</span><br><span class=\"line\">      msgObj.event = <span class=\"string\">'out'</span></span><br><span class=\"line\">      client.send(<span class=\"built_in\">JSON</span>.stringify(msgObj));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现多聊天室\"><a href=\"#实现多聊天室\" class=\"headerlink\" title=\"实现多聊天室\"></a>实现多聊天室</h1><p>调整<code>client</code>代码，在<code>enter</code>的时候带上聊天室的<code>id</code>,广播的时候只对该聊天室进行广播</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client</span></span><br><span class=\"line\">enter()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name.trim()===<span class=\"string\">''</span>)  &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'用户名不得为空'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isShow=<span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">    event:<span class=\"string\">'enter'</span>,</span><br><span class=\"line\">    message:<span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">    roomid:<span class=\"keyword\">this</span>.roomid</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server</span></span><br><span class=\"line\"> wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (client.readyState === WebSocket.OPEN&amp;&amp; client.roomid ===ws.roomid) &#123;</span><br><span class=\"line\">    msgObj.name = ws.name</span><br><span class=\"line\">    client.send(<span class=\"built_in\">JSON</span>.stringify(msgObj));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"websocket鉴权\"><a href=\"#websocket鉴权\" class=\"headerlink\" title=\"websocket鉴权\"></a>websocket鉴权</h1><ul>\n<li>协议本身在握手阶段不提的</li>\n<li>浏览器侧：url传参、message主动消息，session/cookie</li>\n<li>Nodejs侧：直接使用ws传Header</li>\n</ul>\n<h1 id=\"心跳检测-amp-断线重连\"><a href=\"#心跳检测-amp-断线重连\" class=\"headerlink\" title=\"心跳检测&amp;断线重连\"></a>心跳检测&amp;断线重连</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server 发送心跳检测</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeInterval = <span class=\"number\">1000</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  wss.clients.forEach(<span class=\"function\">(<span class=\"params\">ws</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ws.isAlive)&#123;</span><br><span class=\"line\">      group[ws.roomid]--</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ws.terminate() <span class=\"comment\">//关闭ws链接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 主动发送心跳检测请求</span></span><br><span class=\"line\">    <span class=\"comment\">// 当客户端返回了消息后，主动设置flag为在线</span></span><br><span class=\"line\">    ws.isAlive = <span class=\"literal\">false</span></span><br><span class=\"line\">    ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      event:<span class=\"string\">'heartbeat'</span>,</span><br><span class=\"line\">      message:<span class=\"string\">'ping'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,timeInterval)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// client 响应</span></span><br><span class=\"line\">onMessage(event) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isShow) <span class=\"keyword\">return</span>; <span class=\"comment\">//用户没进入聊天室 就不接收消息</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"message\"</span> + <span class=\"keyword\">this</span>.ws.readyState); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(event.data);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (obj.event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"noAuth\"</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 鉴权失败</span></span><br><span class=\"line\">      <span class=\"comment\">// 重新获取token</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"enter\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lists.push(<span class=\"string\">\"欢迎\"</span> + obj.message + <span class=\"string\">\"加入聊天室\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"out\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lists.push(obj.name + <span class=\"string\">\"离开了聊天室\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'heartbeat'</span>:<span class=\"comment\">// 响应心跳检测</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">        event:<span class=\"string\">'heartbeat'</span>,</span><br><span class=\"line\">        message:<span class=\"string\">'pong'</span></span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.name !== <span class=\"keyword\">this</span>.name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lists.push(obj.name + <span class=\"string\">\":\"</span> + obj.message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.num = obj.num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client 断线重连</span></span><br><span class=\"line\"><span class=\"comment\">// 新增定时器方法</span></span><br><span class=\"line\">checkServer()&#123;</span><br><span class=\"line\">  clearTimeout(<span class=\"keyword\">this</span>.handle)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handle = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onClose()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initWS()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>+<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改写onError</span></span><br><span class=\"line\"> onError() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span> + ws.readyState); <span class=\"comment\">//  erroe:3</span></span><br><span class=\"line\">  <span class=\"comment\">// 连接失败后1s 尝试断线重连</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initWS()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>相关代码请移步github —–&gt; <a href=\"https://github.com/qytayh/websocketBase\" target=\"_blank\" rel=\"noopener\">websocketBase</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<h1 id=\"什么是websocket？\"><a href=\"#什么是websocket？\" class=\"headerlink\" title=\"什么是websocket？\"></a>什么是<code>websocket</code>？</h1><p><code>websocket</code>是一种网络传输协议，可在单个<code>tcp</code>连接上进行全双工通信，位于<code>OSI</code>模型的应用层。</p>","more":"<p>特点：</p>\n<ul>\n<li><code>TCP</code>链接，与<code>HTTP</code>协议兼容</li>\n<li>双向通信，主动推送（服务端向客户端）</li>\n<li>无同源限制，协议标识符为ws（加密wss）</li>\n</ul>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><ul>\n<li>聊天、消息、点赞</li>\n<li>直播评论（弹幕）</li>\n<li>游戏、协调编辑、基于位置的应用</li>\n</ul>\n<h1 id=\"开始你的第一个websocket应用\"><a href=\"#开始你的第一个websocket应用\" class=\"headerlink\" title=\"开始你的第一个websocket应用\"></a>开始你的第一个websocket应用</h1><h2 id=\"websocket常用前端库\"><a href=\"#websocket常用前端库\" class=\"headerlink\" title=\"websocket常用前端库\"></a>websocket常用前端库</h2><ul>\n<li>ws (实现原生协议，特点：通用、性能高，定制型强)</li>\n<li>socket.io (向下兼容协议，特点：适配性强，性能一般)</li>\n</ul>\n<h2 id=\"3分钟编写一个ws应用\"><a href=\"#3分钟编写一个ws应用\" class=\"headerlink\" title=\"3分钟编写一个ws应用\"></a>3分钟编写一个ws应用</h2><ol>\n<li>新建<code>server</code>目录，通过<code>npm init -y</code>初始化<code>server</code>目录</li>\n<li><code>npm install ws</code> 安装ws库</li>\n<li>新建<code>index.js</code>作为入口文件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> WebSocket = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> wss = <span class=\"keyword\">new</span> WebSocket.Server(&#123;<span class=\"attr\">port</span>:<span class=\"number\">3000</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">wss.on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connection</span>(<span class=\"params\">ws</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'on client is connected'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>根目录下新建一个<code>client</code>目录，并添加<code>index.html</code>文件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws =  <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:3000'</span>)</span><br></pre></td></tr></table></figure></li>\n<li>通过<code>node index.js</code>启动服务端</li>\n<li>访问客户端的<code>index.html</code>，我们可以看到服务端控制台输出有用户连接了</li>\n</ol>\n<blockquote>\n<p>客户端中使用ws方法与服务端类似</p>\n</blockquote>\n<h1 id=\"常见API介绍\"><a href=\"#常见API介绍\" class=\"headerlink\" title=\"常见API介绍\"></a>常见API介绍</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>\n<h1 id=\"websocket常见状态\"><a href=\"#websocket常见状态\" class=\"headerlink\" title=\"websocket常见状态\"></a>websocket常见状态</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'open'</span>+ws.readyState) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  ws.send(<span class=\"string\">'hello from client'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'message'</span>+ws.readyState) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 连接主动断开时触发</span></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'close'</span>+ ws.readyState)  <span class=\"comment\">//  close: 服务端断开 3  客户端主动断开 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'yiguanbi'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 当连接失败触发error事件</span></span><br><span class=\"line\">ws.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>+ ws.readyState)  <span class=\"comment\">//  erroe:3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现一个ws广播\"><a href=\"#实现一个ws广播\" class=\"headerlink\" title=\"实现一个ws广播\"></a>实现一个ws广播</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server端</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断非自己的客户端 并且有连接的客户端</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ws!==client&amp;&amp;client.readyState===WebSocket.OPEN)&#123;</span><br><span class=\"line\">    client.send(msg.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"统计进入聊天室的人数\"><a href=\"#统计进入聊天室的人数\" class=\"headerlink\" title=\"统计进入聊天室的人数\"></a>统计进入聊天室的人数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client</span></span><br><span class=\"line\"><span class=\"comment\">// 改写sendMSg方法</span></span><br><span class=\"line\">sendMsg()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lists.push(<span class=\"keyword\">this</span>.name+<span class=\"string\">\":\"</span>+<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">    event:<span class=\"string\">'message'</span>,</span><br><span class=\"line\">    message:<span class=\"keyword\">this</span>.message,</span><br><span class=\"line\">    name:<span class=\"keyword\">this</span>.name <span class=\"comment\">// 传递用户名</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.message=<span class=\"string\">''</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 改写onMsessage</span></span><br><span class=\"line\">onMessage(event)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isshow) <span class=\"keyword\">return</span> <span class=\"comment\">// 未进入聊天室则不接收消息</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(event.data)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj.event===<span class=\"string\">'enter'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lists.push(<span class=\"string\">'欢迎'</span>+obj.message+<span class=\"string\">'加入聊天室'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj.event ===<span class=\"string\">'out'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lists.push(obj.name+<span class=\"string\">'离开了聊天室'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.name!==<span class=\"keyword\">this</span>.name)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lists.push(obj.name+<span class=\"string\">\":\"</span>+obj.message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.num = obj.num</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个全局的变量num用于人数统计</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">ws.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> msgObj = <span class=\"built_in\">JSON</span>.parse(msg);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (msgObj.event === <span class=\"string\">\"enter\"</span>) &#123;</span><br><span class=\"line\">    ws.name = msgObj.message;</span><br><span class=\"line\">    num++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ws.send(msg)</span></span><br><span class=\"line\">  <span class=\"comment\">// 广播消息</span></span><br><span class=\"line\">  wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 为了获取在线的聊天人数</span></span><br><span class=\"line\">      msgObj.num = num;</span><br><span class=\"line\">      client.send(<span class=\"built_in\">JSON</span>.stringify(msgObj));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当ws客户端断开</span></span><br><span class=\"line\">ws.on(<span class=\"string\">\"close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ws.name)&#123;</span><br><span class=\"line\">    num--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> msgObj = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 广播消息</span></span><br><span class=\"line\">  wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 为了获取在线的聊天人数</span></span><br><span class=\"line\">      msgObj.num = num;</span><br><span class=\"line\">      msgObj.name = ws.name;</span><br><span class=\"line\">      msgObj.event = <span class=\"string\">'out'</span></span><br><span class=\"line\">      client.send(<span class=\"built_in\">JSON</span>.stringify(msgObj));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现多聊天室\"><a href=\"#实现多聊天室\" class=\"headerlink\" title=\"实现多聊天室\"></a>实现多聊天室</h1><p>调整<code>client</code>代码，在<code>enter</code>的时候带上聊天室的<code>id</code>,广播的时候只对该聊天室进行广播</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client</span></span><br><span class=\"line\">enter()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name.trim()===<span class=\"string\">''</span>)  &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'用户名不得为空'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isShow=<span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">    event:<span class=\"string\">'enter'</span>,</span><br><span class=\"line\">    message:<span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">    roomid:<span class=\"keyword\">this</span>.roomid</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server</span></span><br><span class=\"line\"> wss.clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (client.readyState === WebSocket.OPEN&amp;&amp; client.roomid ===ws.roomid) &#123;</span><br><span class=\"line\">    msgObj.name = ws.name</span><br><span class=\"line\">    client.send(<span class=\"built_in\">JSON</span>.stringify(msgObj));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"websocket鉴权\"><a href=\"#websocket鉴权\" class=\"headerlink\" title=\"websocket鉴权\"></a>websocket鉴权</h1><ul>\n<li>协议本身在握手阶段不提的</li>\n<li>浏览器侧：url传参、message主动消息，session/cookie</li>\n<li>Nodejs侧：直接使用ws传Header</li>\n</ul>\n<h1 id=\"心跳检测-amp-断线重连\"><a href=\"#心跳检测-amp-断线重连\" class=\"headerlink\" title=\"心跳检测&amp;断线重连\"></a>心跳检测&amp;断线重连</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server 发送心跳检测</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeInterval = <span class=\"number\">1000</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  wss.clients.forEach(<span class=\"function\">(<span class=\"params\">ws</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ws.isAlive)&#123;</span><br><span class=\"line\">      group[ws.roomid]--</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ws.terminate() <span class=\"comment\">//关闭ws链接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 主动发送心跳检测请求</span></span><br><span class=\"line\">    <span class=\"comment\">// 当客户端返回了消息后，主动设置flag为在线</span></span><br><span class=\"line\">    ws.isAlive = <span class=\"literal\">false</span></span><br><span class=\"line\">    ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      event:<span class=\"string\">'heartbeat'</span>,</span><br><span class=\"line\">      message:<span class=\"string\">'ping'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,timeInterval)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// client 响应</span></span><br><span class=\"line\">onMessage(event) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isShow) <span class=\"keyword\">return</span>; <span class=\"comment\">//用户没进入聊天室 就不接收消息</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"message\"</span> + <span class=\"keyword\">this</span>.ws.readyState); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(event.data);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (obj.event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"noAuth\"</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 鉴权失败</span></span><br><span class=\"line\">      <span class=\"comment\">// 重新获取token</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"enter\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lists.push(<span class=\"string\">\"欢迎\"</span> + obj.message + <span class=\"string\">\"加入聊天室\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"out\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lists.push(obj.name + <span class=\"string\">\"离开了聊天室\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'heartbeat'</span>:<span class=\"comment\">// 响应心跳检测</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.ws.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">        event:<span class=\"string\">'heartbeat'</span>,</span><br><span class=\"line\">        message:<span class=\"string\">'pong'</span></span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.name !== <span class=\"keyword\">this</span>.name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lists.push(obj.name + <span class=\"string\">\":\"</span> + obj.message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.num = obj.num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client 断线重连</span></span><br><span class=\"line\"><span class=\"comment\">// 新增定时器方法</span></span><br><span class=\"line\">checkServer()&#123;</span><br><span class=\"line\">  clearTimeout(<span class=\"keyword\">this</span>.handle)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handle = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onClose()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initWS()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>+<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改写onError</span></span><br><span class=\"line\"> onError() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span> + ws.readyState); <span class=\"comment\">//  erroe:3</span></span><br><span class=\"line\">  <span class=\"comment\">// 连接失败后1s 尝试断线重连</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initWS()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>相关代码请移步github —–&gt; <a href=\"https://github.com/qytayh/websocketBase\" target=\"_blank\" rel=\"noopener\">websocketBase</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"支付宝小程序父子组件相互调用","date":"2021-08-25T03:45:56.000Z","description":null,"_content":"\n组件调用方式与vue类似，但是还是有一些区别，记录一下。\n\n<!-- more -->\n\n# 父组件传值给子组件\n\n```js\n// 父组件\n<child-name title=\"title\"/>\n\n//子组件\nprops:{\n  title:''\n}\n<view>{{title}}</view>\n\n```\n\n# 子组件调用父组件方法\n\n```js\n// 子组件\nprops:{\n  onYourMethod:()=>({})\n}\nmethods:{\n  onTapSubmit(){\n    this.props.onYourMethod('from child')\n  }\n}\n// 父组件\n<child-name onTapSubmit=\"fatherMethod\" />\n\nfatherMethod(e){\n  console.log(e)  // from child\n}\n```\n\n# 父组件调用子组件方法\n\n```js\n// 父组件\n<child-name ref='childRefName' />\n\nchildRefName(ref){\n  this.ref=ref\n}\nyouFun(){\n  this.ref.childMethod('from father')\n}\n\n// 子组件\nmethods:{\n  childMethod(e){\n    console.log(e) //from father\n  }\n}\n```\n\n> **使用ref时需要开启component2 不然ref不会生效**\n\n# 兄弟组件相互调用\n\n大致思路是这样的：组件A -> 父组件 -> 组件B\n\n```js\n// 子组件A\nprops:{\n  onEmitToBrother:()=>({})\n}\nmethods:{\n  onTapAButton(){\n    this.props.onEmitToBrother('refB','comBFun','from A')\n  },\n  comAFun(e){\n    console.log(e)  // from B\n  }\n}\n\n// 子组件B\n// 子组件A\nprops:{\n  onEmitToBrother:()=>({})\n}\nmethods:{\n  onTapBButton(){\n    this.props.onEmitToBrother('refA','comAFun','from B')\n  },\n  comBFun(e){\n    console.log(e) // from A\n  }\n}\n\n// 父组件\n<A-name onEmitToBrother=\"onEmitToBrother\" ref=\"refA\" />\n<B-name onEmitToBrother=\"onEmitToBrother\" ref=\"refB\" />\n\n\nrefA(ref){\n  this.refA=ref\n}\nrefB(ref){\n  this.refB=ref\n}\nonEmitToBrother(refName,funName,args){\n  this[refName][funName](args)\n}\n\n```\n\n> 如果有其他更好的方案 欢迎补充\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/支付宝小程序父子组件相互调用.md","raw":"---\ntitle: 支付宝小程序父子组件相互调用\ndate: 2021-08-25 11:45:56\ntags:\n  - 支付宝小程序\ncategories:\n  - 支付宝小程序\ndescription:\n---\n\n组件调用方式与vue类似，但是还是有一些区别，记录一下。\n\n<!-- more -->\n\n# 父组件传值给子组件\n\n```js\n// 父组件\n<child-name title=\"title\"/>\n\n//子组件\nprops:{\n  title:''\n}\n<view>{{title}}</view>\n\n```\n\n# 子组件调用父组件方法\n\n```js\n// 子组件\nprops:{\n  onYourMethod:()=>({})\n}\nmethods:{\n  onTapSubmit(){\n    this.props.onYourMethod('from child')\n  }\n}\n// 父组件\n<child-name onTapSubmit=\"fatherMethod\" />\n\nfatherMethod(e){\n  console.log(e)  // from child\n}\n```\n\n# 父组件调用子组件方法\n\n```js\n// 父组件\n<child-name ref='childRefName' />\n\nchildRefName(ref){\n  this.ref=ref\n}\nyouFun(){\n  this.ref.childMethod('from father')\n}\n\n// 子组件\nmethods:{\n  childMethod(e){\n    console.log(e) //from father\n  }\n}\n```\n\n> **使用ref时需要开启component2 不然ref不会生效**\n\n# 兄弟组件相互调用\n\n大致思路是这样的：组件A -> 父组件 -> 组件B\n\n```js\n// 子组件A\nprops:{\n  onEmitToBrother:()=>({})\n}\nmethods:{\n  onTapAButton(){\n    this.props.onEmitToBrother('refB','comBFun','from A')\n  },\n  comAFun(e){\n    console.log(e)  // from B\n  }\n}\n\n// 子组件B\n// 子组件A\nprops:{\n  onEmitToBrother:()=>({})\n}\nmethods:{\n  onTapBButton(){\n    this.props.onEmitToBrother('refA','comAFun','from B')\n  },\n  comBFun(e){\n    console.log(e) // from A\n  }\n}\n\n// 父组件\n<A-name onEmitToBrother=\"onEmitToBrother\" ref=\"refA\" />\n<B-name onEmitToBrother=\"onEmitToBrother\" ref=\"refB\" />\n\n\nrefA(ref){\n  this.refA=ref\n}\nrefB(ref){\n  this.refB=ref\n}\nonEmitToBrother(refName,funName,args){\n  this[refName][funName](args)\n}\n\n```\n\n> 如果有其他更好的方案 欢迎补充\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/支付宝小程序父子组件相互调用","published":1,"updated":"2021-08-27T03:39:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj546004q1r0qb7n51yli","content":"<p>组件调用方式与vue类似，但是还是有一些区别，记录一下。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"父组件传值给子组件\"><a href=\"#父组件传值给子组件\" class=\"headerlink\" title=\"父组件传值给子组件\"></a>父组件传值给子组件</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;child-name title=<span class=\"string\">\"title\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  title:<span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;title&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"子组件调用父组件方法\"><a href=\"#子组件调用父组件方法\" class=\"headerlink\" title=\"子组件调用父组件方法\"></a>子组件调用父组件方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  onYourMethod:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  onTapSubmit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onYourMethod(<span class=\"string\">'from child'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;child-name onTapSubmit=<span class=\"string\">\"fatherMethod\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">fatherMethod(e)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)  <span class=\"comment\">// from child</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"父组件调用子组件方法\"><a href=\"#父组件调用子组件方法\" class=\"headerlink\" title=\"父组件调用子组件方法\"></a>父组件调用子组件方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;child-name ref=<span class=\"string\">'childRefName'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">childRefName(ref)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ref=ref</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">youFun()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ref.childMethod(<span class=\"string\">'from father'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  childMethod(e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e) <span class=\"comment\">//from father</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>使用ref时需要开启component2 不然ref不会生效</strong></p>\n</blockquote>\n<h1 id=\"兄弟组件相互调用\"><a href=\"#兄弟组件相互调用\" class=\"headerlink\" title=\"兄弟组件相互调用\"></a>兄弟组件相互调用</h1><p>大致思路是这样的：组件A -&gt; 父组件 -&gt; 组件B</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件A</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  onEmitToBrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  onTapAButton()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onEmitToBrother(<span class=\"string\">'refB'</span>,<span class=\"string\">'comBFun'</span>,<span class=\"string\">'from A'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  comAFun(e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)  <span class=\"comment\">// from B</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件B</span></span><br><span class=\"line\"><span class=\"comment\">// 子组件A</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  onEmitToBrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  onTapBButton()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onEmitToBrother(<span class=\"string\">'refA'</span>,<span class=\"string\">'comAFun'</span>,<span class=\"string\">'from B'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  comBFun(e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e) <span class=\"comment\">// from A</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;A-name onEmitToBrother=<span class=\"string\">\"onEmitToBrother\"</span> ref=<span class=\"string\">\"refA\"</span> /&gt;</span><br><span class=\"line\">&lt;B-name onEmitToBrother=<span class=\"string\">\"onEmitToBrother\"</span> ref=<span class=\"string\">\"refB\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">refA(ref)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.refA=ref</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">refB(ref)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.refB=ref</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onEmitToBrother(refName,funName,args)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[refName][funName](args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果有其他更好的方案 欢迎补充</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>组件调用方式与vue类似，但是还是有一些区别，记录一下。</p>","more":"<h1 id=\"父组件传值给子组件\"><a href=\"#父组件传值给子组件\" class=\"headerlink\" title=\"父组件传值给子组件\"></a>父组件传值给子组件</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;child-name title=<span class=\"string\">\"title\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  title:<span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;title&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"子组件调用父组件方法\"><a href=\"#子组件调用父组件方法\" class=\"headerlink\" title=\"子组件调用父组件方法\"></a>子组件调用父组件方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  onYourMethod:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  onTapSubmit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onYourMethod(<span class=\"string\">'from child'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;child-name onTapSubmit=<span class=\"string\">\"fatherMethod\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">fatherMethod(e)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)  <span class=\"comment\">// from child</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"父组件调用子组件方法\"><a href=\"#父组件调用子组件方法\" class=\"headerlink\" title=\"父组件调用子组件方法\"></a>父组件调用子组件方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;child-name ref=<span class=\"string\">'childRefName'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">childRefName(ref)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ref=ref</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">youFun()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ref.childMethod(<span class=\"string\">'from father'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  childMethod(e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e) <span class=\"comment\">//from father</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>使用ref时需要开启component2 不然ref不会生效</strong></p>\n</blockquote>\n<h1 id=\"兄弟组件相互调用\"><a href=\"#兄弟组件相互调用\" class=\"headerlink\" title=\"兄弟组件相互调用\"></a>兄弟组件相互调用</h1><p>大致思路是这样的：组件A -&gt; 父组件 -&gt; 组件B</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件A</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  onEmitToBrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  onTapAButton()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onEmitToBrother(<span class=\"string\">'refB'</span>,<span class=\"string\">'comBFun'</span>,<span class=\"string\">'from A'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  comAFun(e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)  <span class=\"comment\">// from B</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件B</span></span><br><span class=\"line\"><span class=\"comment\">// 子组件A</span></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  onEmitToBrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  onTapBButton()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onEmitToBrother(<span class=\"string\">'refA'</span>,<span class=\"string\">'comAFun'</span>,<span class=\"string\">'from B'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  comBFun(e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e) <span class=\"comment\">// from A</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;A-name onEmitToBrother=<span class=\"string\">\"onEmitToBrother\"</span> ref=<span class=\"string\">\"refA\"</span> /&gt;</span><br><span class=\"line\">&lt;B-name onEmitToBrother=<span class=\"string\">\"onEmitToBrother\"</span> ref=<span class=\"string\">\"refB\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">refA(ref)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.refA=ref</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">refB(ref)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.refB=ref</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onEmitToBrother(refName,funName,args)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[refName][funName](args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果有其他更好的方案 欢迎补充</p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"支付宝小程序前端授权","date":"2021-08-06T01:35:27.000Z","description":null,"_content":"\n支付宝小程序授权中，前端的详细流程。\n\n<!-- more -->\n\n\n<!-- ![授权流程](./支付宝小程序前端授权/authFlow.png) -->\n{% asset_img authFlow.png [授权流程] %}\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/支付宝小程序前端授权.md","raw":"---\ntitle: 支付宝小程序前端授权\ndate: 2021-08-06 09:35:27\ntags:\n  - 支付宝小程序\ncategories:\n  - 支付宝小程序\ndescription:\n---\n\n支付宝小程序授权中，前端的详细流程。\n\n<!-- more -->\n\n\n<!-- ![授权流程](./支付宝小程序前端授权/authFlow.png) -->\n{% asset_img authFlow.png [授权流程] %}\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/支付宝小程序前端授权","published":1,"updated":"2021-08-13T02:05:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj548004u1r0qaxc7cdyj","content":"<p>支付宝小程序授权中，前端的详细流程。</p>\n<a id=\"more\"></a>\n\n\n<!-- ![授权流程](./支付宝小程序前端授权/authFlow.png) -->\n<img src=\"/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E6%8E%88%E6%9D%83/authFlow.png\" class=\"\" title=\"[授权流程]\">\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>支付宝小程序授权中，前端的详细流程。</p>","more":"<!-- ![授权流程](./支付宝小程序前端授权/authFlow.png) -->\n<img src=\"/2021/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E6%8E%88%E6%9D%83/authFlow.png\" class=\"\" title=\"[授权流程]\">\n\n\n\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"2021年度总结","date":"2021-12-02T00:59:19.000Z","description":null,"_content":"\n盛年不重来，一日难再晨，及时当勉励，岁月不待人\n\n\n<!-- more -->\n\n![1.jpeg](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bc73b90fea84812bca810544a723a69~tplv-k3u1fbpfcp-watermark.image?)\n\n放下手机，盖好被子，闭上眼睛，慢慢回味这一年的过往，做一个甜甜的梦来勉励2021年奋斗的自己。\n\n\n2021年可以说是我毕业以来极具有丰富色彩的一年。\n\n这一年，我换了工作，在收入上提前完成了我的三年目标。\n\n这一年，我开始逐渐的从一名求学者慢慢转变为阐述者。\n\n这一年，女儿一岁半了。\n\n这一年，我有了第一次pr。\n\n………………\n\n\n## 工作上\n\n工作由纯前端开发转变为全栈开发，一开始多少会有些不适应(同时开着前后端的项目加上界面navicat等多个程序间互相切换眼睛有点看不过来，开发的时候要开始考虑一些逻辑是放在客户端处理还是服务端处理，以及后端代码规范与前端规范的一些区别)，加之工作上要处理的业务逻辑很多都与行业强相关，刚接触这个行业的我举步维艰。\n\n虽然凭借之前大学里有了一部分的后端知识储备再加上针对性的学习我很快上手了后端部分的开发，但是业务上的逻辑还好有老陈、赵兄以及诸多同事们的慷慨解答，多亏了大家没有因为我一开始的不了解而放弃我，我才能在较短的时间内适应了这份工作。但是还是要继续保持谦虚好学的态度，多向大家学习。\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b99a1228884f9f9a08a9f64d902a77~tplv-k3u1fbpfcp-watermark.image?)\n\n感谢同事和领导们在工作上的支持，希望新的一年我能在业务上能提出更加成熟的方案，为公司的产品提供稳定高效可靠的代码。\n\n\n## 学习上\n\n开始将学到的东西记录下来 (在自己github搭建的博客平台上输出了`20`篇)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e276d35efbd14c32af9dcc2d92e2bd7e~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67f0b7e4eecb483492750275cf53c82d~tplv-k3u1fbpfcp-watermark.image?)\n\n经不住似水流年，逃不过此间少年。工作了两年，虽然代码写了不少，但也没有什么大的成就。草木一生，人生一世，作为一名开发者，总得给这个世界留下点什么吧。\n\n直到一次偶然的机会参与了开源项目 [varlet](https://github.com/haoziqaq/varlet) ，在此项目中提了人生的第一个pr，从此遍打开了我新世界的大门。\n\n积极拥抱vue3，正在筹备基于`vue3+varlet`的移动端模板的开源项目:[varlet-ui-pro](https://github.com/qytayh/varlet-ui-pro)\n\n新的一年里，我讲继续秉持勤奋好学的态度，不断学习前沿知识，并及时补充自己的知识短板，比如:\n- 看看`vite`\n- 了解一下`vue3`新的语法糖\n- 对前端流行框架的源码实现加强研究\n\n\n## 生活上\n\n很幸运在大学还没毕业的时候就与老婆修成正果，今年女儿已经一岁半了。小朋友的脾气很大，经常半夜哭醒，还好有我贤惠的老婆贴心照顾，所以特别感谢老婆辛苦的付出以及对我工作上的支持。\n\n如果有条件的话，大家在桌子上摆点绿植吧，同为开发的大家要记得爱护好自己的眼睛👁，毕竟这是除了手以外我们依赖的用来吃饭的家伙。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc9540bad9154a5e8b1225b98acaa45e~tplv-k3u1fbpfcp-watermark.image?)\n\n今年遇到了一帮不错的朋友，可以一起交流技术，一起搓jio(虽然不是生活的全部，但是真的很放松)，一起做喜欢的事情。\n\n\n## 物质上\n\n提前一年完成了之前定下的收入水平三年要达成目标。\n\n把陪伴了我一个大学的笔记本电脑还有台式机处理掉了(基本告别游戏了呜呜呜~)。\n\n人生的第一台`macbook`也光荣下岗卖给了二手贩子\n\n`iphone13`出来了啊，`12`降价不少啊，那就跟老婆一人一个`12mini`吧，真香~\n\n双十一买了好多东西啊，感觉花了不少钱呢，到货后发现没有几件自己的东西，基本都是孩子的奶粉尿布玩具\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62124bacf7d4ac08c00b86ddd691fa0~tplv-k3u1fbpfcp-watermark.image?)\n\n## 2022年新展望\n\n![2.jpeg](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95baf0f76ab24782b1f3c882d48c3e40~tplv-k3u1fbpfcp-watermark.image?)\n2021年是充实的一年，遇到了一些有趣的人，可以跟他们一起很快乐得学习进步。在新的一年里，我想延续今年学习中满满的干劲，在此指定2022年的计划:\n- 刷完力扣150道算法题\n- 专业能力达到P6\n- 拥抱vue3，投入一部分时间到开源项目中\n- 冲击本地大厂\n  \n并将在 [掘金](https://juejin.cn/user/1609340752780712) 以及 [个人博客](https://qytayh.github.io/) 中同步更新学习进度，欢迎小伙伴们点赞关注一起学习进步~\n\n\n## 最后\n\n别忘了答应自己要做的事，别忘了答应自己要去的地方。\n\n别让那些琐碎的蠢事，破坏了你的好心情。别害怕梦想和现实的距离。只有想不到，没有做不到。2021再见，2022你好。\n\n只管努力就好了，答案在2022年\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> \n","source":"_posts/2021/12/2021年度总结.md","raw":"---\ntitle: 2021年度总结\ndate: 2021-12-02 08:59:19\ntags:\n    - 年度总结\ncategories:\n    - 年度总结\ndescription:\n---\n\n盛年不重来，一日难再晨，及时当勉励，岁月不待人\n\n\n<!-- more -->\n\n![1.jpeg](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bc73b90fea84812bca810544a723a69~tplv-k3u1fbpfcp-watermark.image?)\n\n放下手机，盖好被子，闭上眼睛，慢慢回味这一年的过往，做一个甜甜的梦来勉励2021年奋斗的自己。\n\n\n2021年可以说是我毕业以来极具有丰富色彩的一年。\n\n这一年，我换了工作，在收入上提前完成了我的三年目标。\n\n这一年，我开始逐渐的从一名求学者慢慢转变为阐述者。\n\n这一年，女儿一岁半了。\n\n这一年，我有了第一次pr。\n\n………………\n\n\n## 工作上\n\n工作由纯前端开发转变为全栈开发，一开始多少会有些不适应(同时开着前后端的项目加上界面navicat等多个程序间互相切换眼睛有点看不过来，开发的时候要开始考虑一些逻辑是放在客户端处理还是服务端处理，以及后端代码规范与前端规范的一些区别)，加之工作上要处理的业务逻辑很多都与行业强相关，刚接触这个行业的我举步维艰。\n\n虽然凭借之前大学里有了一部分的后端知识储备再加上针对性的学习我很快上手了后端部分的开发，但是业务上的逻辑还好有老陈、赵兄以及诸多同事们的慷慨解答，多亏了大家没有因为我一开始的不了解而放弃我，我才能在较短的时间内适应了这份工作。但是还是要继续保持谦虚好学的态度，多向大家学习。\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b99a1228884f9f9a08a9f64d902a77~tplv-k3u1fbpfcp-watermark.image?)\n\n感谢同事和领导们在工作上的支持，希望新的一年我能在业务上能提出更加成熟的方案，为公司的产品提供稳定高效可靠的代码。\n\n\n## 学习上\n\n开始将学到的东西记录下来 (在自己github搭建的博客平台上输出了`20`篇)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e276d35efbd14c32af9dcc2d92e2bd7e~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67f0b7e4eecb483492750275cf53c82d~tplv-k3u1fbpfcp-watermark.image?)\n\n经不住似水流年，逃不过此间少年。工作了两年，虽然代码写了不少，但也没有什么大的成就。草木一生，人生一世，作为一名开发者，总得给这个世界留下点什么吧。\n\n直到一次偶然的机会参与了开源项目 [varlet](https://github.com/haoziqaq/varlet) ，在此项目中提了人生的第一个pr，从此遍打开了我新世界的大门。\n\n积极拥抱vue3，正在筹备基于`vue3+varlet`的移动端模板的开源项目:[varlet-ui-pro](https://github.com/qytayh/varlet-ui-pro)\n\n新的一年里，我讲继续秉持勤奋好学的态度，不断学习前沿知识，并及时补充自己的知识短板，比如:\n- 看看`vite`\n- 了解一下`vue3`新的语法糖\n- 对前端流行框架的源码实现加强研究\n\n\n## 生活上\n\n很幸运在大学还没毕业的时候就与老婆修成正果，今年女儿已经一岁半了。小朋友的脾气很大，经常半夜哭醒，还好有我贤惠的老婆贴心照顾，所以特别感谢老婆辛苦的付出以及对我工作上的支持。\n\n如果有条件的话，大家在桌子上摆点绿植吧，同为开发的大家要记得爱护好自己的眼睛👁，毕竟这是除了手以外我们依赖的用来吃饭的家伙。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc9540bad9154a5e8b1225b98acaa45e~tplv-k3u1fbpfcp-watermark.image?)\n\n今年遇到了一帮不错的朋友，可以一起交流技术，一起搓jio(虽然不是生活的全部，但是真的很放松)，一起做喜欢的事情。\n\n\n## 物质上\n\n提前一年完成了之前定下的收入水平三年要达成目标。\n\n把陪伴了我一个大学的笔记本电脑还有台式机处理掉了(基本告别游戏了呜呜呜~)。\n\n人生的第一台`macbook`也光荣下岗卖给了二手贩子\n\n`iphone13`出来了啊，`12`降价不少啊，那就跟老婆一人一个`12mini`吧，真香~\n\n双十一买了好多东西啊，感觉花了不少钱呢，到货后发现没有几件自己的东西，基本都是孩子的奶粉尿布玩具\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62124bacf7d4ac08c00b86ddd691fa0~tplv-k3u1fbpfcp-watermark.image?)\n\n## 2022年新展望\n\n![2.jpeg](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95baf0f76ab24782b1f3c882d48c3e40~tplv-k3u1fbpfcp-watermark.image?)\n2021年是充实的一年，遇到了一些有趣的人，可以跟他们一起很快乐得学习进步。在新的一年里，我想延续今年学习中满满的干劲，在此指定2022年的计划:\n- 刷完力扣150道算法题\n- 专业能力达到P6\n- 拥抱vue3，投入一部分时间到开源项目中\n- 冲击本地大厂\n  \n并将在 [掘金](https://juejin.cn/user/1609340752780712) 以及 [个人博客](https://qytayh.github.io/) 中同步更新学习进度，欢迎小伙伴们点赞关注一起学习进步~\n\n\n## 最后\n\n别忘了答应自己要做的事，别忘了答应自己要去的地方。\n\n别让那些琐碎的蠢事，破坏了你的好心情。别害怕梦想和现实的距离。只有想不到，没有做不到。2021再见，2022你好。\n\n只管努力就好了，答案在2022年\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> \n","slug":"2021/12/2021年度总结","published":1,"updated":"2021-12-02T01:05:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj549004w1r0qd4e97is2","content":"<p>盛年不重来，一日难再晨，及时当勉励，岁月不待人</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bc73b90fea84812bca810544a723a69~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1.jpeg\"></p>\n<p>放下手机，盖好被子，闭上眼睛，慢慢回味这一年的过往，做一个甜甜的梦来勉励2021年奋斗的自己。</p>\n<p>2021年可以说是我毕业以来极具有丰富色彩的一年。</p>\n<p>这一年，我换了工作，在收入上提前完成了我的三年目标。</p>\n<p>这一年，我开始逐渐的从一名求学者慢慢转变为阐述者。</p>\n<p>这一年，女儿一岁半了。</p>\n<p>这一年，我有了第一次pr。</p>\n<p>………………</p>\n<h2 id=\"工作上\"><a href=\"#工作上\" class=\"headerlink\" title=\"工作上\"></a>工作上</h2><p>工作由纯前端开发转变为全栈开发，一开始多少会有些不适应(同时开着前后端的项目加上界面navicat等多个程序间互相切换眼睛有点看不过来，开发的时候要开始考虑一些逻辑是放在客户端处理还是服务端处理，以及后端代码规范与前端规范的一些区别)，加之工作上要处理的业务逻辑很多都与行业强相关，刚接触这个行业的我举步维艰。</p>\n<p>虽然凭借之前大学里有了一部分的后端知识储备再加上针对性的学习我很快上手了后端部分的开发，但是业务上的逻辑还好有老陈、赵兄以及诸多同事们的慷慨解答，多亏了大家没有因为我一开始的不了解而放弃我，我才能在较短的时间内适应了这份工作。但是还是要继续保持谦虚好学的态度，多向大家学习。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b99a1228884f9f9a08a9f64d902a77~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>感谢同事和领导们在工作上的支持，希望新的一年我能在业务上能提出更加成熟的方案，为公司的产品提供稳定高效可靠的代码。</p>\n<h2 id=\"学习上\"><a href=\"#学习上\" class=\"headerlink\" title=\"学习上\"></a>学习上</h2><p>开始将学到的东西记录下来 (在自己github搭建的博客平台上输出了<code>20</code>篇)</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e276d35efbd14c32af9dcc2d92e2bd7e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67f0b7e4eecb483492750275cf53c82d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>经不住似水流年，逃不过此间少年。工作了两年，虽然代码写了不少，但也没有什么大的成就。草木一生，人生一世，作为一名开发者，总得给这个世界留下点什么吧。</p>\n<p>直到一次偶然的机会参与了开源项目 <a href=\"https://github.com/haoziqaq/varlet\" target=\"_blank\" rel=\"noopener\">varlet</a> ，在此项目中提了人生的第一个pr，从此遍打开了我新世界的大门。</p>\n<p>积极拥抱vue3，正在筹备基于<code>vue3+varlet</code>的移动端模板的开源项目:<a href=\"https://github.com/qytayh/varlet-ui-pro\" target=\"_blank\" rel=\"noopener\">varlet-ui-pro</a></p>\n<p>新的一年里，我讲继续秉持勤奋好学的态度，不断学习前沿知识，并及时补充自己的知识短板，比如:</p>\n<ul>\n<li>看看<code>vite</code></li>\n<li>了解一下<code>vue3</code>新的语法糖</li>\n<li>对前端流行框架的源码实现加强研究</li>\n</ul>\n<h2 id=\"生活上\"><a href=\"#生活上\" class=\"headerlink\" title=\"生活上\"></a>生活上</h2><p>很幸运在大学还没毕业的时候就与老婆修成正果，今年女儿已经一岁半了。小朋友的脾气很大，经常半夜哭醒，还好有我贤惠的老婆贴心照顾，所以特别感谢老婆辛苦的付出以及对我工作上的支持。</p>\n<p>如果有条件的话，大家在桌子上摆点绿植吧，同为开发的大家要记得爱护好自己的眼睛👁，毕竟这是除了手以外我们依赖的用来吃饭的家伙。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc9540bad9154a5e8b1225b98acaa45e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>今年遇到了一帮不错的朋友，可以一起交流技术，一起搓jio(虽然不是生活的全部，但是真的很放松)，一起做喜欢的事情。</p>\n<h2 id=\"物质上\"><a href=\"#物质上\" class=\"headerlink\" title=\"物质上\"></a>物质上</h2><p>提前一年完成了之前定下的收入水平三年要达成目标。</p>\n<p>把陪伴了我一个大学的笔记本电脑还有台式机处理掉了(基本告别游戏了呜呜呜~)。</p>\n<p>人生的第一台<code>macbook</code>也光荣下岗卖给了二手贩子</p>\n<p><code>iphone13</code>出来了啊，<code>12</code>降价不少啊，那就跟老婆一人一个<code>12mini</code>吧，真香~</p>\n<p>双十一买了好多东西啊，感觉花了不少钱呢，到货后发现没有几件自己的东西，基本都是孩子的奶粉尿布玩具</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62124bacf7d4ac08c00b86ddd691fa0~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h2 id=\"2022年新展望\"><a href=\"#2022年新展望\" class=\"headerlink\" title=\"2022年新展望\"></a>2022年新展望</h2><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95baf0f76ab24782b1f3c882d48c3e40~tplv-k3u1fbpfcp-watermark.image?\" alt=\"2.jpeg\"><br>2021年是充实的一年，遇到了一些有趣的人，可以跟他们一起很快乐得学习进步。在新的一年里，我想延续今年学习中满满的干劲，在此指定2022年的计划:</p>\n<ul>\n<li>刷完力扣150道算法题</li>\n<li>专业能力达到P6</li>\n<li>拥抱vue3，投入一部分时间到开源项目中</li>\n<li>冲击本地大厂</li>\n</ul>\n<p>并将在 <a href=\"https://juejin.cn/user/1609340752780712\" target=\"_blank\" rel=\"noopener\">掘金</a> 以及 <a href=\"https://qytayh.github.io/\">个人博客</a> 中同步更新学习进度，欢迎小伙伴们点赞关注一起学习进步~</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>别忘了答应自己要做的事，别忘了答应自己要去的地方。</p>\n<p>别让那些琐碎的蠢事，破坏了你的好心情。别害怕梦想和现实的距离。只有想不到，没有做不到。2021再见，2022你好。</p>\n<p>只管努力就好了，答案在2022年</p>\n<!-- markdownlint-disable MD041 MD002--> \n","site":{"data":{}},"excerpt":"<p>盛年不重来，一日难再晨，及时当勉励，岁月不待人</p>","more":"<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bc73b90fea84812bca810544a723a69~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1.jpeg\"></p>\n<p>放下手机，盖好被子，闭上眼睛，慢慢回味这一年的过往，做一个甜甜的梦来勉励2021年奋斗的自己。</p>\n<p>2021年可以说是我毕业以来极具有丰富色彩的一年。</p>\n<p>这一年，我换了工作，在收入上提前完成了我的三年目标。</p>\n<p>这一年，我开始逐渐的从一名求学者慢慢转变为阐述者。</p>\n<p>这一年，女儿一岁半了。</p>\n<p>这一年，我有了第一次pr。</p>\n<p>………………</p>\n<h2 id=\"工作上\"><a href=\"#工作上\" class=\"headerlink\" title=\"工作上\"></a>工作上</h2><p>工作由纯前端开发转变为全栈开发，一开始多少会有些不适应(同时开着前后端的项目加上界面navicat等多个程序间互相切换眼睛有点看不过来，开发的时候要开始考虑一些逻辑是放在客户端处理还是服务端处理，以及后端代码规范与前端规范的一些区别)，加之工作上要处理的业务逻辑很多都与行业强相关，刚接触这个行业的我举步维艰。</p>\n<p>虽然凭借之前大学里有了一部分的后端知识储备再加上针对性的学习我很快上手了后端部分的开发，但是业务上的逻辑还好有老陈、赵兄以及诸多同事们的慷慨解答，多亏了大家没有因为我一开始的不了解而放弃我，我才能在较短的时间内适应了这份工作。但是还是要继续保持谦虚好学的态度，多向大家学习。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b99a1228884f9f9a08a9f64d902a77~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>感谢同事和领导们在工作上的支持，希望新的一年我能在业务上能提出更加成熟的方案，为公司的产品提供稳定高效可靠的代码。</p>\n<h2 id=\"学习上\"><a href=\"#学习上\" class=\"headerlink\" title=\"学习上\"></a>学习上</h2><p>开始将学到的东西记录下来 (在自己github搭建的博客平台上输出了<code>20</code>篇)</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e276d35efbd14c32af9dcc2d92e2bd7e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67f0b7e4eecb483492750275cf53c82d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>经不住似水流年，逃不过此间少年。工作了两年，虽然代码写了不少，但也没有什么大的成就。草木一生，人生一世，作为一名开发者，总得给这个世界留下点什么吧。</p>\n<p>直到一次偶然的机会参与了开源项目 <a href=\"https://github.com/haoziqaq/varlet\" target=\"_blank\" rel=\"noopener\">varlet</a> ，在此项目中提了人生的第一个pr，从此遍打开了我新世界的大门。</p>\n<p>积极拥抱vue3，正在筹备基于<code>vue3+varlet</code>的移动端模板的开源项目:<a href=\"https://github.com/qytayh/varlet-ui-pro\" target=\"_blank\" rel=\"noopener\">varlet-ui-pro</a></p>\n<p>新的一年里，我讲继续秉持勤奋好学的态度，不断学习前沿知识，并及时补充自己的知识短板，比如:</p>\n<ul>\n<li>看看<code>vite</code></li>\n<li>了解一下<code>vue3</code>新的语法糖</li>\n<li>对前端流行框架的源码实现加强研究</li>\n</ul>\n<h2 id=\"生活上\"><a href=\"#生活上\" class=\"headerlink\" title=\"生活上\"></a>生活上</h2><p>很幸运在大学还没毕业的时候就与老婆修成正果，今年女儿已经一岁半了。小朋友的脾气很大，经常半夜哭醒，还好有我贤惠的老婆贴心照顾，所以特别感谢老婆辛苦的付出以及对我工作上的支持。</p>\n<p>如果有条件的话，大家在桌子上摆点绿植吧，同为开发的大家要记得爱护好自己的眼睛👁，毕竟这是除了手以外我们依赖的用来吃饭的家伙。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc9540bad9154a5e8b1225b98acaa45e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>今年遇到了一帮不错的朋友，可以一起交流技术，一起搓jio(虽然不是生活的全部，但是真的很放松)，一起做喜欢的事情。</p>\n<h2 id=\"物质上\"><a href=\"#物质上\" class=\"headerlink\" title=\"物质上\"></a>物质上</h2><p>提前一年完成了之前定下的收入水平三年要达成目标。</p>\n<p>把陪伴了我一个大学的笔记本电脑还有台式机处理掉了(基本告别游戏了呜呜呜~)。</p>\n<p>人生的第一台<code>macbook</code>也光荣下岗卖给了二手贩子</p>\n<p><code>iphone13</code>出来了啊，<code>12</code>降价不少啊，那就跟老婆一人一个<code>12mini</code>吧，真香~</p>\n<p>双十一买了好多东西啊，感觉花了不少钱呢，到货后发现没有几件自己的东西，基本都是孩子的奶粉尿布玩具</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62124bacf7d4ac08c00b86ddd691fa0~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h2 id=\"2022年新展望\"><a href=\"#2022年新展望\" class=\"headerlink\" title=\"2022年新展望\"></a>2022年新展望</h2><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95baf0f76ab24782b1f3c882d48c3e40~tplv-k3u1fbpfcp-watermark.image?\" alt=\"2.jpeg\"><br>2021年是充实的一年，遇到了一些有趣的人，可以跟他们一起很快乐得学习进步。在新的一年里，我想延续今年学习中满满的干劲，在此指定2022年的计划:</p>\n<ul>\n<li>刷完力扣150道算法题</li>\n<li>专业能力达到P6</li>\n<li>拥抱vue3，投入一部分时间到开源项目中</li>\n<li>冲击本地大厂</li>\n</ul>\n<p>并将在 <a href=\"https://juejin.cn/user/1609340752780712\" target=\"_blank\" rel=\"noopener\">掘金</a> 以及 <a href=\"https://qytayh.github.io/\">个人博客</a> 中同步更新学习进度，欢迎小伙伴们点赞关注一起学习进步~</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>别忘了答应自己要做的事，别忘了答应自己要去的地方。</p>\n<p>别让那些琐碎的蠢事，破坏了你的好心情。别害怕梦想和现实的距离。只有想不到，没有做不到。2021再见，2022你好。</p>\n<p>只管努力就好了，答案在2022年</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode_202-快乐数","date":"2021-12-06T01:35:04.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n\n[题目地址](https://leetcode-cn.com/problems/happy-number/)\n\n<!-- more -->\n\n## 题目\n编写一个算法来判断一个数 n 是不是快乐数。\n\n快乐数」定义为：\n\n对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。\n然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。\n如果 可以变为  1，那么这个数就是快乐数。\n如果 n 是快乐数就返回 true ；不是，则返回 false 。\n\n## 示例\n\n```\n示例一\n输入： n = 19\n输出： true\n解释： 12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n```\n\n ```\n示例二\n输入： n = 2\n输出： false\n```\n\n> 提示： `1 <= n <= 231 - 1`\n\n## 解题思路\n\n从题目中我们可以得出：\n\n- 给定范围内的数一定是或者不是快乐数\n- 快乐数最终会等于1\n- 不快乐则会无限循环(爱滴魔力转圈圈~~~)\n\n所以我们的解法思路大概为：`通过循环看看这个数是会变为1还是进入死循环，变为1则快乐，死循环则不快乐`\n\n## 解题代码\n\n```js\nvar isHappy = function(n) {\n    let nArr = [] // 建立一个用于存放数字的平方和的数组\n    while(!nArr.includes(n)){ // 如果数组中出现过了算出的平方和 则说明进入循环 跳出\n        const sum = getSum(n)\n        nArr.push(n)\n        n = sum\n    }\n   return n ==1\n};\nvar getSum = function (n){\n    let sum = 0\n    while(n){\n        sum += (n%10)*(n%10)\n        n = Math.floor(n/10)\n    }\n    return sum\n}\n```\n\n## 通过换下链表的方式解题\n\n```js\nvar isHappy = function(n) {\n    if(!n) return false\n    let slow = n\n    let fast = next(n)\n    while(slow!=fast){\n        slow = next(slow)\n        fast = next(next(fast))\n    }\n    return fast==1\n};\nvar next = function (n){\n    let sum = 0\n    while(n){\n        sum += (n%10)*(n%10)\n        n = Math.floor(n/10)\n    }\n    return sum\n}\n```\n\n如有任何问题或建议，欢迎留言讨论！\n\n<!-- markdownlint-disable MD041 MD002--> \n","source":"_posts/2021/12/LeetCode-202-快乐数.md","raw":"---\ntitle: 'LeetCode_202-快乐数'\ndate: 2021-12-06 09:35:04\ntags:\n    - 算法\n    - LeetCode\ncategories:\n    - 算法\n    - LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n\n[题目地址](https://leetcode-cn.com/problems/happy-number/)\n\n<!-- more -->\n\n## 题目\n编写一个算法来判断一个数 n 是不是快乐数。\n\n快乐数」定义为：\n\n对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。\n然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。\n如果 可以变为  1，那么这个数就是快乐数。\n如果 n 是快乐数就返回 true ；不是，则返回 false 。\n\n## 示例\n\n```\n示例一\n输入： n = 19\n输出： true\n解释： 12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n```\n\n ```\n示例二\n输入： n = 2\n输出： false\n```\n\n> 提示： `1 <= n <= 231 - 1`\n\n## 解题思路\n\n从题目中我们可以得出：\n\n- 给定范围内的数一定是或者不是快乐数\n- 快乐数最终会等于1\n- 不快乐则会无限循环(爱滴魔力转圈圈~~~)\n\n所以我们的解法思路大概为：`通过循环看看这个数是会变为1还是进入死循环，变为1则快乐，死循环则不快乐`\n\n## 解题代码\n\n```js\nvar isHappy = function(n) {\n    let nArr = [] // 建立一个用于存放数字的平方和的数组\n    while(!nArr.includes(n)){ // 如果数组中出现过了算出的平方和 则说明进入循环 跳出\n        const sum = getSum(n)\n        nArr.push(n)\n        n = sum\n    }\n   return n ==1\n};\nvar getSum = function (n){\n    let sum = 0\n    while(n){\n        sum += (n%10)*(n%10)\n        n = Math.floor(n/10)\n    }\n    return sum\n}\n```\n\n## 通过换下链表的方式解题\n\n```js\nvar isHappy = function(n) {\n    if(!n) return false\n    let slow = n\n    let fast = next(n)\n    while(slow!=fast){\n        slow = next(slow)\n        fast = next(next(fast))\n    }\n    return fast==1\n};\nvar next = function (n){\n    let sum = 0\n    while(n){\n        sum += (n%10)*(n%10)\n        n = Math.floor(n/10)\n    }\n    return sum\n}\n```\n\n如有任何问题或建议，欢迎留言讨论！\n\n<!-- markdownlint-disable MD041 MD002--> \n","slug":"2021/12/LeetCode-202-快乐数","published":1,"updated":"2021-12-15T15:47:17.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj549004z1r0qas4n6dvg","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p><a href=\"https://leetcode-cn.com/problems/happy-number/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p>\n<p>快乐数」定义为：</p>\n<p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果 可以变为  1，那么这个数就是快乐数。<br>如果 n 是快乐数就返回 true ；不是，则返回 false 。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例一</span><br><span class=\"line\">输入： n &#x3D; 19</span><br><span class=\"line\">输出： true</span><br><span class=\"line\">解释： 12 + 92 &#x3D; 82</span><br><span class=\"line\">82 + 22 &#x3D; 68</span><br><span class=\"line\">62 + 82 &#x3D; 100</span><br><span class=\"line\">12 + 02 + 02 &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例二</span><br><span class=\"line\">输入： n &#x3D; 2</span><br><span class=\"line\">输出： false</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示： <code>1 &lt;= n &lt;= 231 - 1</code></p>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>从题目中我们可以得出：</p>\n<ul>\n<li>给定范围内的数一定是或者不是快乐数</li>\n<li>快乐数最终会等于1</li>\n<li>不快乐则会无限循环(爱滴魔力转圈圈<del>~</del>)</li>\n</ul>\n<p>所以我们的解法思路大概为：<code>通过循环看看这个数是会变为1还是进入死循环，变为1则快乐，死循环则不快乐</code></p>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nArr = [] <span class=\"comment\">// 建立一个用于存放数字的平方和的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!nArr.includes(n))&#123; <span class=\"comment\">// 如果数组中出现过了算出的平方和 则说明进入循环 跳出</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> sum = getSum(n)</span><br><span class=\"line\">        nArr.push(n)</span><br><span class=\"line\">        n = sum</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> n ==<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        sum += (n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>)</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过换下链表的方式解题\"><a href=\"#通过换下链表的方式解题\" class=\"headerlink\" title=\"通过换下链表的方式解题\"></a>通过换下链表的方式解题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!n) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = n</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = next(n)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(slow!=fast)&#123;</span><br><span class=\"line\">        slow = next(slow)</span><br><span class=\"line\">        fast = next(next(fast))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fast==<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> next = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        sum += (n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>)</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如有任何问题或建议，欢迎留言讨论！</p>\n<!-- markdownlint-disable MD041 MD002--> \n","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p><a href=\"https://leetcode-cn.com/problems/happy-number/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p>\n<p>快乐数」定义为：</p>\n<p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果 可以变为  1，那么这个数就是快乐数。<br>如果 n 是快乐数就返回 true ；不是，则返回 false 。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例一</span><br><span class=\"line\">输入： n &#x3D; 19</span><br><span class=\"line\">输出： true</span><br><span class=\"line\">解释： 12 + 92 &#x3D; 82</span><br><span class=\"line\">82 + 22 &#x3D; 68</span><br><span class=\"line\">62 + 82 &#x3D; 100</span><br><span class=\"line\">12 + 02 + 02 &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例二</span><br><span class=\"line\">输入： n &#x3D; 2</span><br><span class=\"line\">输出： false</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示： <code>1 &lt;= n &lt;= 231 - 1</code></p>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>从题目中我们可以得出：</p>\n<ul>\n<li>给定范围内的数一定是或者不是快乐数</li>\n<li>快乐数最终会等于1</li>\n<li>不快乐则会无限循环(爱滴魔力转圈圈<del>~</del>)</li>\n</ul>\n<p>所以我们的解法思路大概为：<code>通过循环看看这个数是会变为1还是进入死循环，变为1则快乐，死循环则不快乐</code></p>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nArr = [] <span class=\"comment\">// 建立一个用于存放数字的平方和的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!nArr.includes(n))&#123; <span class=\"comment\">// 如果数组中出现过了算出的平方和 则说明进入循环 跳出</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> sum = getSum(n)</span><br><span class=\"line\">        nArr.push(n)</span><br><span class=\"line\">        n = sum</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> n ==<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        sum += (n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>)</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过换下链表的方式解题\"><a href=\"#通过换下链表的方式解题\" class=\"headerlink\" title=\"通过换下链表的方式解题\"></a>通过换下链表的方式解题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!n) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = n</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = next(n)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(slow!=fast)&#123;</span><br><span class=\"line\">        slow = next(slow)</span><br><span class=\"line\">        fast = next(next(fast))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fast==<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> next = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        sum += (n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>)</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如有任何问题或建议，欢迎留言讨论！</p>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-141-环形链表","date":"2021-12-02T15:30:23.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起!\n\n\n[题目地址](https://leetcode-cn.com/problems/linked-list-cycle/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表的头节点`head`，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数`pos`来表示链表尾连接到链表中的位置（索引从`0`开始）。如果`pos`是 -1，则在该链表中没有环。注意`pos`不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n如果链表中存在环，则返回`true`。 否则，返回`false`。\n\n**示例 1：**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59a8bc5551b4bac8f9ad1fd88ee9cce~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [3,2,0,-4], pos = 1\n输出： true\n解释： 链表中有一个环，其尾部连接到第二个节点。\n```\n\n**示例 2：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eae6cbfc4ed14d138c63f740d0e72508~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2], pos = 0\n输出： true\n解释： 链表中有一个环，其尾部连接到第一个节点。\n```\n\n**示例 3：**\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c78ba43a94674a44b2cc6072568822a5~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1], pos = -1\n输出： false\n解释： 链表中没有环。\n```\n\n> 提示\n> -   链表中节点的数目范围是 `[0, 104]`\n> -   `-105 <= Node.val <= 105`\n> -   `pos` 为 `-1` 或者链表中的一个**有效索引** 。\n\n\n## 解题思路\n\n\n![1.gif](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad1b8658f5424ff3804e813fc98f6ccf~tplv-k3u1fbpfcp-watermark.image?)\n\n定义两个指针：慢指针每次走一个节点，快指针每次走两个节点，最终相遇。\n\n## 解题代码\n\n```js\nvar hasCycle = function(head) {\n    if(!head||!head.next) return false\n    let slow = head\n    let fast = head\n    while(fast&&fast.next){\n        slow=slow.next\n        fast = fast.next.next\n        if(fast==slow) return true\n    }\n    return false\n};\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-141-环形链表.md","raw":"---\ntitle: LeetCode-141-环形链表\ndate: 2021-12-02 23:30:23\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起!\n\n\n[题目地址](https://leetcode-cn.com/problems/linked-list-cycle/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表的头节点`head`，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数`pos`来表示链表尾连接到链表中的位置（索引从`0`开始）。如果`pos`是 -1，则在该链表中没有环。注意`pos`不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n如果链表中存在环，则返回`true`。 否则，返回`false`。\n\n**示例 1：**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59a8bc5551b4bac8f9ad1fd88ee9cce~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [3,2,0,-4], pos = 1\n输出： true\n解释： 链表中有一个环，其尾部连接到第二个节点。\n```\n\n**示例 2：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eae6cbfc4ed14d138c63f740d0e72508~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2], pos = 0\n输出： true\n解释： 链表中有一个环，其尾部连接到第一个节点。\n```\n\n**示例 3：**\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c78ba43a94674a44b2cc6072568822a5~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1], pos = -1\n输出： false\n解释： 链表中没有环。\n```\n\n> 提示\n> -   链表中节点的数目范围是 `[0, 104]`\n> -   `-105 <= Node.val <= 105`\n> -   `pos` 为 `-1` 或者链表中的一个**有效索引** 。\n\n\n## 解题思路\n\n\n![1.gif](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad1b8658f5424ff3804e813fc98f6ccf~tplv-k3u1fbpfcp-watermark.image?)\n\n定义两个指针：慢指针每次走一个节点，快指针每次走两个节点，最终相遇。\n\n## 解题代码\n\n```js\nvar hasCycle = function(head) {\n    if(!head||!head.next) return false\n    let slow = head\n    let fast = head\n    while(fast&&fast.next){\n        slow=slow.next\n        fast = fast.next.next\n        if(fast==slow) return true\n    }\n    return false\n};\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-141-环形链表","published":1,"updated":"2021-12-15T15:37:16.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54a00511r0qdl4c8vsc","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起!</p>\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表的头节点<code>head</code>，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是 -1，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环，则返回<code>true</code>。 否则，返回<code>false</code>。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59a8bc5551b4bac8f9ad1fd88ee9cce~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class=\"line\">输出： true</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eae6cbfc4ed14d138c63f740d0e72508~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class=\"line\">输出： true</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c78ba43a94674a44b2cc6072568822a5~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class=\"line\">输出： false</span><br><span class=\"line\">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示</p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 104]</code></li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个<strong>有效索引</strong> 。</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad1b8658f5424ff3804e813fc98f6ccf~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1.gif\"></p>\n<p>定义两个指针：慢指针每次走一个节点，快指针每次走两个节点，最终相遇。</p>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.next) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast&amp;&amp;fast.next)&#123;</span><br><span class=\"line\">        slow=slow.next</span><br><span class=\"line\">        fast = fast.next.next</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast==slow) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起!</p>\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表的头节点<code>head</code>，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是 -1，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环，则返回<code>true</code>。 否则，返回<code>false</code>。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59a8bc5551b4bac8f9ad1fd88ee9cce~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class=\"line\">输出： true</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eae6cbfc4ed14d138c63f740d0e72508~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class=\"line\">输出： true</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c78ba43a94674a44b2cc6072568822a5~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class=\"line\">输出： false</span><br><span class=\"line\">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示</p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 104]</code></li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个<strong>有效索引</strong> 。</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad1b8658f5424ff3804e813fc98f6ccf~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1.gif\"></p>\n<p>定义两个指针：慢指针每次走一个节点，快指针每次走两个节点，最终相遇。</p>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.next) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast&amp;&amp;fast.next)&#123;</span><br><span class=\"line\">        slow=slow.next</span><br><span class=\"line\">        fast = fast.next.next</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast==slow) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"从零开始进阶全栈之手撕promise","date":"2021-10-13T04:29:31.000Z","description":null,"_content":"\n从0开始用ts实现promise\n\n<!-- more -->\n\n# 准备工作\n\n- `npm init -y` 初始化npm\n- `npm i @rollup/plugin-node-resolve rollup rollup-plugin-typescript2 typescript -D` 安装必要依赖\n-  创建`rollup.config.js`，并进行配置\n- `npx tsc --init` 初始化ts开发\n\n# 知识储备\n\n## 高阶函数\n\n1. 如果你的函数的参数是一个函数,那么你的函数可以称为高阶函数\n```js\nfunction fn(callback){...}\n```\n\n2. 如果一个函数里面返回了一个函数，那么也是高阶函数\n```js\nfunction fn(){\n    return function(){\n        ...\n    }\n}\n```\n\n3. 柯里化函数\n```js\nlet utils = {}\nfunction isType(type){\n    return function(val){\n        return Object.prototype.toString.call(val) ==`[object ${type}]`\n    }\n}\n['String','Number','Boolean'].forEach(type=>{\n    utils[`is`+type] = isType(type)\n})\nconsole.log(utils.isString('hello'))\nconsole.log(utils.isNumber(111))\n```\n> 柯里化的功能可以让函数功能更具体\n\n\n# Promise\n\n## 为什么？\n- promise可以解决多个异步并行执行，最终得到所有的结果\n- 异步嵌套问题\n\n## 怎么用\n```js\n// 1.每个promise都有三个状态   pending 等待态   resolve 标识变成成功态fulfilled    reject 标识变成失败态 REJECTED\n// 2.每个promise需要有一个then方法，传入两个参数，一个是成功的回调  另一个是失败的回调\n// 3.new promise 会立即执行\n// 4.当promise抛出异常后 也会走失败态\n// 5.状态不可逆 一旦成功就不能失败 一旦失败就不能成功\nlet promise = new Promise((resovle,reject)=>{\n    resovle('ok') // success\n    // reject('not ok') // fail\n})\npromise.then((data)=>{\n    console.log('success', data) // resolve进这里\n},(err)=>{\n    console.log('fail', err)  // reject 几这里\n})\n\n\n// 无论成功还是失败 都可以返回结果(1.出错了了走错误  2.返回一个普通值(不是promise的值)，就会作为下一次then的成功结果 3.是promise的情况(会采用返回的promise的状态)用promise解析后的结果传递给下一个then)\n\n// 普通值  调用 then方法会返回一个全新的promise(不能返回this)\n\nlet promise2 = new Promise((resovle,reject)=>{\n    resovle('ok') // success\n}).then(data => {\n    return new Promise((resovle,reject)=>{\n        // reject(100) // fail\n        setTimeOut(()=>{\n            resolve(100)\n        },1000)\n    })\n}, err=>{\n    console.log(err)\n    return 101\n})\npromise2.then(data => {\n    console.log(data,'==')\n},err=>{\n    console.log(err,'---')\n})\n```\n> [promise规范](https://promisesaplus.com/)\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/10/从零开始进阶全栈之手撕promise.md","raw":"---\ntitle: 从零开始进阶全栈之手撕promise\ndate: 2021-10-13 12:29:31\ntags:\n    - 全栈之路\n    - promise\ncategories:\n    - 全栈之路\n    - promise\ndescription:\n---\n\n从0开始用ts实现promise\n\n<!-- more -->\n\n# 准备工作\n\n- `npm init -y` 初始化npm\n- `npm i @rollup/plugin-node-resolve rollup rollup-plugin-typescript2 typescript -D` 安装必要依赖\n-  创建`rollup.config.js`，并进行配置\n- `npx tsc --init` 初始化ts开发\n\n# 知识储备\n\n## 高阶函数\n\n1. 如果你的函数的参数是一个函数,那么你的函数可以称为高阶函数\n```js\nfunction fn(callback){...}\n```\n\n2. 如果一个函数里面返回了一个函数，那么也是高阶函数\n```js\nfunction fn(){\n    return function(){\n        ...\n    }\n}\n```\n\n3. 柯里化函数\n```js\nlet utils = {}\nfunction isType(type){\n    return function(val){\n        return Object.prototype.toString.call(val) ==`[object ${type}]`\n    }\n}\n['String','Number','Boolean'].forEach(type=>{\n    utils[`is`+type] = isType(type)\n})\nconsole.log(utils.isString('hello'))\nconsole.log(utils.isNumber(111))\n```\n> 柯里化的功能可以让函数功能更具体\n\n\n# Promise\n\n## 为什么？\n- promise可以解决多个异步并行执行，最终得到所有的结果\n- 异步嵌套问题\n\n## 怎么用\n```js\n// 1.每个promise都有三个状态   pending 等待态   resolve 标识变成成功态fulfilled    reject 标识变成失败态 REJECTED\n// 2.每个promise需要有一个then方法，传入两个参数，一个是成功的回调  另一个是失败的回调\n// 3.new promise 会立即执行\n// 4.当promise抛出异常后 也会走失败态\n// 5.状态不可逆 一旦成功就不能失败 一旦失败就不能成功\nlet promise = new Promise((resovle,reject)=>{\n    resovle('ok') // success\n    // reject('not ok') // fail\n})\npromise.then((data)=>{\n    console.log('success', data) // resolve进这里\n},(err)=>{\n    console.log('fail', err)  // reject 几这里\n})\n\n\n// 无论成功还是失败 都可以返回结果(1.出错了了走错误  2.返回一个普通值(不是promise的值)，就会作为下一次then的成功结果 3.是promise的情况(会采用返回的promise的状态)用promise解析后的结果传递给下一个then)\n\n// 普通值  调用 then方法会返回一个全新的promise(不能返回this)\n\nlet promise2 = new Promise((resovle,reject)=>{\n    resovle('ok') // success\n}).then(data => {\n    return new Promise((resovle,reject)=>{\n        // reject(100) // fail\n        setTimeOut(()=>{\n            resolve(100)\n        },1000)\n    })\n}, err=>{\n    console.log(err)\n    return 101\n})\npromise2.then(data => {\n    console.log(data,'==')\n},err=>{\n    console.log(err,'---')\n})\n```\n> [promise规范](https://promisesaplus.com/)\n\n\n\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/10/从零开始进阶全栈之手撕promise","published":1,"updated":"2021-10-14T07:51:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54a00551r0qdhp3d3n3","content":"<p>从0开始用ts实现promise</p>\n<a id=\"more\"></a>\n\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li><code>npm init -y</code> 初始化npm</li>\n<li><code>npm i @rollup/plugin-node-resolve rollup rollup-plugin-typescript2 typescript -D</code> 安装必要依赖</li>\n<li>创建<code>rollup.config.js</code>，并进行配置</li>\n<li><code>npx tsc --init</code> 初始化ts开发</li>\n</ul>\n<h1 id=\"知识储备\"><a href=\"#知识储备\" class=\"headerlink\" title=\"知识储备\"></a>知识储备</h1><h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><ol>\n<li><p>如果你的函数的参数是一个函数,那么你的函数可以称为高阶函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">callback</span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果一个函数里面返回了一个函数，那么也是高阶函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>柯里化函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> utils = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isType</span>(<span class=\"params\">type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(val) ==<span class=\"string\">`[object <span class=\"subst\">$&#123;type&#125;</span>]`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"string\">'String'</span>,<span class=\"string\">'Number'</span>,<span class=\"string\">'Boolean'</span>].forEach(<span class=\"function\"><span class=\"params\">type</span>=&gt;</span>&#123;</span><br><span class=\"line\">    utils[<span class=\"string\">`is`</span>+type] = isType(type)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(utils.isString(<span class=\"string\">'hello'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(utils.isNumber(<span class=\"number\">111</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>柯里化的功能可以让函数功能更具体</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>promise可以解决多个异步并行执行，最终得到所有的结果</li>\n<li>异步嵌套问题</li>\n</ul>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.每个promise都有三个状态   pending 等待态   resolve 标识变成成功态fulfilled    reject 标识变成失败态 REJECTED</span></span><br><span class=\"line\"><span class=\"comment\">// 2.每个promise需要有一个then方法，传入两个参数，一个是成功的回调  另一个是失败的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 3.new promise 会立即执行</span></span><br><span class=\"line\"><span class=\"comment\">// 4.当promise抛出异常后 也会走失败态</span></span><br><span class=\"line\"><span class=\"comment\">// 5.状态不可逆 一旦成功就不能失败 一旦失败就不能成功</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resovle(<span class=\"string\">'ok'</span>) <span class=\"comment\">// success</span></span><br><span class=\"line\">    <span class=\"comment\">// reject('not ok') // fail</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, data) <span class=\"comment\">// resolve进这里</span></span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>, err)  <span class=\"comment\">// reject 几这里</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无论成功还是失败 都可以返回结果(1.出错了了走错误  2.返回一个普通值(不是promise的值)，就会作为下一次then的成功结果 3.是promise的情况(会采用返回的promise的状态)用promise解析后的结果传递给下一个then)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通值  调用 then方法会返回一个全新的promise(不能返回this)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resovle(<span class=\"string\">'ok'</span>) <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// reject(100) // fail</span></span><br><span class=\"line\">        setTimeOut(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;, err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">101</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise2.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data,<span class=\"string\">'=='</span>)</span><br><span class=\"line\">&#125;,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err,<span class=\"string\">'---'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">promise规范</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>从0开始用ts实现promise</p>","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li><code>npm init -y</code> 初始化npm</li>\n<li><code>npm i @rollup/plugin-node-resolve rollup rollup-plugin-typescript2 typescript -D</code> 安装必要依赖</li>\n<li>创建<code>rollup.config.js</code>，并进行配置</li>\n<li><code>npx tsc --init</code> 初始化ts开发</li>\n</ul>\n<h1 id=\"知识储备\"><a href=\"#知识储备\" class=\"headerlink\" title=\"知识储备\"></a>知识储备</h1><h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><ol>\n<li><p>如果你的函数的参数是一个函数,那么你的函数可以称为高阶函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">callback</span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果一个函数里面返回了一个函数，那么也是高阶函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>柯里化函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> utils = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isType</span>(<span class=\"params\">type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(val) ==<span class=\"string\">`[object <span class=\"subst\">$&#123;type&#125;</span>]`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"string\">'String'</span>,<span class=\"string\">'Number'</span>,<span class=\"string\">'Boolean'</span>].forEach(<span class=\"function\"><span class=\"params\">type</span>=&gt;</span>&#123;</span><br><span class=\"line\">    utils[<span class=\"string\">`is`</span>+type] = isType(type)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(utils.isString(<span class=\"string\">'hello'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(utils.isNumber(<span class=\"number\">111</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>柯里化的功能可以让函数功能更具体</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>promise可以解决多个异步并行执行，最终得到所有的结果</li>\n<li>异步嵌套问题</li>\n</ul>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.每个promise都有三个状态   pending 等待态   resolve 标识变成成功态fulfilled    reject 标识变成失败态 REJECTED</span></span><br><span class=\"line\"><span class=\"comment\">// 2.每个promise需要有一个then方法，传入两个参数，一个是成功的回调  另一个是失败的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 3.new promise 会立即执行</span></span><br><span class=\"line\"><span class=\"comment\">// 4.当promise抛出异常后 也会走失败态</span></span><br><span class=\"line\"><span class=\"comment\">// 5.状态不可逆 一旦成功就不能失败 一旦失败就不能成功</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resovle(<span class=\"string\">'ok'</span>) <span class=\"comment\">// success</span></span><br><span class=\"line\">    <span class=\"comment\">// reject('not ok') // fail</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, data) <span class=\"comment\">// resolve进这里</span></span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>, err)  <span class=\"comment\">// reject 几这里</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无论成功还是失败 都可以返回结果(1.出错了了走错误  2.返回一个普通值(不是promise的值)，就会作为下一次then的成功结果 3.是promise的情况(会采用返回的promise的状态)用promise解析后的结果传递给下一个then)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通值  调用 then方法会返回一个全新的promise(不能返回this)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resovle(<span class=\"string\">'ok'</span>) <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// reject(100) // fail</span></span><br><span class=\"line\">        setTimeOut(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;, err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">101</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise2.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data,<span class=\"string\">'=='</span>)</span><br><span class=\"line\">&#125;,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err,<span class=\"string\">'---'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">promise规范</a></p>\n</blockquote>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-19-删除链表中的倒数第N个结点","date":"2021-12-15T15:43:27.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/submissions/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表，删除链表的倒数第`n`个结点，并且返回链表的头结点。\n\n**示例 1：**\n\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b39515d5d003460aa1c82fedf4e66992~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5], n = 2\n输出： [1,2,3,5]\n```\n\n**示例 2：**\n\n```\n输入： head = [1], n = 1\n输出： []\n```\n\n**示例 3：**\n\n```\n输入： head = [1,2], n = 1\n输出： [1]\n```\n\n> 提示：\n> - 链表中结点的数目为 `sz`\n> - `1 <= sz <= 30`\n> - `0 <= Node.val <= 100`\n> - `1 <= n <= sz`\n\n## 解题思路\n\n- 定义两个指针，快指针比慢指针快`n`\n- 当快指针到达尾结点时，慢指针刚好到达要删除的结点\n- 将慢指针的下个节点指向要删除节点的后置节点便可完成删除\n\n## 解题代码\n\n```js\nvar removeNthFromEnd = function(head, n) {\n    let vnode = new ListNode(-1,head)\n    let slow = vnode\n    let fast = vnode\n    while(n--) fast =fast.next\n    if(!fast) return vnode.next\n    while(fast.next){\n        fast=fast.next\n        slow= slow.next\n    }\n    slow.next = slow.next.next\n    return vnode.next\n};\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-19-删除链表中的倒数第N个结点.md","raw":"---\ntitle: LeetCode-19-删除链表中的倒数第N个结点\ndate: 2021-12-15 23:43:27\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/submissions/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表，删除链表的倒数第`n`个结点，并且返回链表的头结点。\n\n**示例 1：**\n\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b39515d5d003460aa1c82fedf4e66992~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5], n = 2\n输出： [1,2,3,5]\n```\n\n**示例 2：**\n\n```\n输入： head = [1], n = 1\n输出： []\n```\n\n**示例 3：**\n\n```\n输入： head = [1,2], n = 1\n输出： [1]\n```\n\n> 提示：\n> - 链表中结点的数目为 `sz`\n> - `1 <= sz <= 30`\n> - `0 <= Node.val <= 100`\n> - `1 <= n <= sz`\n\n## 解题思路\n\n- 定义两个指针，快指针比慢指针快`n`\n- 当快指针到达尾结点时，慢指针刚好到达要删除的结点\n- 将慢指针的下个节点指向要删除节点的后置节点便可完成删除\n\n## 解题代码\n\n```js\nvar removeNthFromEnd = function(head, n) {\n    let vnode = new ListNode(-1,head)\n    let slow = vnode\n    let fast = vnode\n    while(n--) fast =fast.next\n    if(!fast) return vnode.next\n    while(fast.next){\n        fast=fast.next\n        slow= slow.next\n    }\n    slow.next = slow.next.next\n    return vnode.next\n};\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-19-删除链表中的倒数第N个结点","published":1,"updated":"2021-12-15T15:45:03.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54b00571r0q7w3z63dv","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/submissions/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表，删除链表的倒数第<code>n</code>个结点，并且返回链表的头结点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b39515d5d003460aa1c82fedf4e66992~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5], n &#x3D; 2</span><br><span class=\"line\">输出： [1,2,3,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1], n &#x3D; 1</span><br><span class=\"line\">输出： []</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2], n &#x3D; 1</span><br><span class=\"line\">输出： [1]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中结点的数目为 <code>sz</code></li>\n<li><code>1 &lt;= sz &lt;= 30</code></li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>定义两个指针，快指针比慢指针快<code>n</code></li>\n<li>当快指针到达尾结点时，慢指针刚好到达要删除的结点</li>\n<li>将慢指针的下个节点指向要删除节点的后置节点便可完成删除</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeNthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>,head)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = vnode</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = vnode</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) fast =fast.next</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fast) <span class=\"keyword\">return</span> vnode.next</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast.next)&#123;</span><br><span class=\"line\">        fast=fast.next</span><br><span class=\"line\">        slow= slow.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow.next = slow.next.next</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/submissions/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表，删除链表的倒数第<code>n</code>个结点，并且返回链表的头结点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b39515d5d003460aa1c82fedf4e66992~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5], n &#x3D; 2</span><br><span class=\"line\">输出： [1,2,3,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1], n &#x3D; 1</span><br><span class=\"line\">输出： []</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2], n &#x3D; 1</span><br><span class=\"line\">输出： [1]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中结点的数目为 <code>sz</code></li>\n<li><code>1 &lt;= sz &lt;= 30</code></li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>定义两个指针，快指针比慢指针快<code>n</code></li>\n<li>当快指针到达尾结点时，慢指针刚好到达要删除的结点</li>\n<li>将慢指针的下个节点指向要删除节点的后置节点便可完成删除</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeNthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>,head)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = vnode</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = vnode</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) fast =fast.next</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fast) <span class=\"keyword\">return</span> vnode.next</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast.next)&#123;</span><br><span class=\"line\">        fast=fast.next</span><br><span class=\"line\">        slow= slow.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow.next = slow.next.next</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-142-环形链表II","date":"2021-12-15T15:32:50.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/linked-list-cycle-ii/)\n\n<!-- more -->\n\n## 题目\n\n给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回`null`。\n\n如果链表中有某个节点，可以通过连续跟踪`next`指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数`pos`来表示链表尾连接到链表中的位置（索引从`0`开始）。如果`pos`是`-1`，则在该链表中没有环。注意`pos`不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n> 不允许修改链表。\n\n**示例 1：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d17014971ee6406993710bca9ed811c2~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [3,2,0,-4], pos = 1\n输出： 返回索引为 1 的链表节点\n解释： 链表中有一个环，其尾部连接到第二个节点。\n```\n\n**示例 2：**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/301fb8f91b554b87b62fb76a0f9ea3b3~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2], pos = 0\n输出： 返回索引为 0 的链表节点\n解释： 链表中有一个环，其尾部连接到第一个节点。\n```\n\n**示例 3：**\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/340038c2494145918acf742dfc99f69d~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1], pos = -1\n输出： 返回 null\n解释： 链表中没有环。\n```\n\n> 提示：\n> -   链表中节点的数目范围在范围 `[0, 104]` 内\n> -   `-105 <= Node.val <= 105`\n> -   `pos` 的值为 `-1` 或者链表中的一个有效索引\n\n## 解题思路\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71f0be3117b448caa09bfcd06b7dde18~tplv-k3u1fbpfcp-watermark.image?)\n\n从上图中，我们不难得出，两指针相遇时\n- 快指针走过的节点为 `A+N(B+C)+B`\n- 慢指针走过的节点为 `A+B`\n- 因为有快指针速度是慢指针的`2`倍\n- 所以 `A+N(B+C)+B=2(A+B)`\n  简化等式得到 `A =(N-1)(B+C)+C`\n> `B+C`为一个环，我们可以忽略，因此可以得到`A=C`,只要在快慢指针相遇时从头结点开始有个指针向下走，跟慢指针相遇的节点就是我们要输出的`pos`节点\n\n\n## 解题代码\n\n```js\nvar detectCycle = function(head) { \n    if(!head) return null \n    let fast = head \n    let slow = head\n    let pos = head \n    while (fast&&fast.next){ \n        slow = slow.next \n        fast = fast.next.next \n        if(slow==fast) {\n            while (slow){ \n                if(slow==pos)  return pos \n                slow = slow.next\n                pos = pos.next \n            } \n            return null\n        }\n    }\n    return null \n};\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-142-环形链表II.md","raw":"---\ntitle: LeetCode-142-环形链表II\ndate: 2021-12-15 23:32:50\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/linked-list-cycle-ii/)\n\n<!-- more -->\n\n## 题目\n\n给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回`null`。\n\n如果链表中有某个节点，可以通过连续跟踪`next`指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数`pos`来表示链表尾连接到链表中的位置（索引从`0`开始）。如果`pos`是`-1`，则在该链表中没有环。注意`pos`不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n> 不允许修改链表。\n\n**示例 1：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d17014971ee6406993710bca9ed811c2~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [3,2,0,-4], pos = 1\n输出： 返回索引为 1 的链表节点\n解释： 链表中有一个环，其尾部连接到第二个节点。\n```\n\n**示例 2：**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/301fb8f91b554b87b62fb76a0f9ea3b3~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2], pos = 0\n输出： 返回索引为 0 的链表节点\n解释： 链表中有一个环，其尾部连接到第一个节点。\n```\n\n**示例 3：**\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/340038c2494145918acf742dfc99f69d~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1], pos = -1\n输出： 返回 null\n解释： 链表中没有环。\n```\n\n> 提示：\n> -   链表中节点的数目范围在范围 `[0, 104]` 内\n> -   `-105 <= Node.val <= 105`\n> -   `pos` 的值为 `-1` 或者链表中的一个有效索引\n\n## 解题思路\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71f0be3117b448caa09bfcd06b7dde18~tplv-k3u1fbpfcp-watermark.image?)\n\n从上图中，我们不难得出，两指针相遇时\n- 快指针走过的节点为 `A+N(B+C)+B`\n- 慢指针走过的节点为 `A+B`\n- 因为有快指针速度是慢指针的`2`倍\n- 所以 `A+N(B+C)+B=2(A+B)`\n  简化等式得到 `A =(N-1)(B+C)+C`\n> `B+C`为一个环，我们可以忽略，因此可以得到`A=C`,只要在快慢指针相遇时从头结点开始有个指针向下走，跟慢指针相遇的节点就是我们要输出的`pos`节点\n\n\n## 解题代码\n\n```js\nvar detectCycle = function(head) { \n    if(!head) return null \n    let fast = head \n    let slow = head\n    let pos = head \n    while (fast&&fast.next){ \n        slow = slow.next \n        fast = fast.next.next \n        if(slow==fast) {\n            while (slow){ \n                if(slow==pos)  return pos \n                slow = slow.next\n                pos = pos.next \n            } \n            return null\n        }\n    }\n    return null \n};\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-142-环形链表II","published":1,"updated":"2021-12-15T15:34:32.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54c005b1r0qfdsuccyw","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回<code>null</code>。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是<code>-1</code>，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>\n<blockquote>\n<p>不允许修改链表。</p>\n</blockquote>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d17014971ee6406993710bca9ed811c2~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class=\"line\">输出： 返回索引为 1 的链表节点</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/301fb8f91b554b87b62fb76a0f9ea3b3~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class=\"line\">输出： 返回索引为 0 的链表节点</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/340038c2494145918acf742dfc99f69d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class=\"line\">输出： 返回 null</span><br><span class=\"line\">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71f0be3117b448caa09bfcd06b7dde18~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>从上图中，我们不难得出，两指针相遇时</p>\n<ul>\n<li>快指针走过的节点为 <code>A+N(B+C)+B</code></li>\n<li>慢指针走过的节点为 <code>A+B</code></li>\n<li>因为有快指针速度是慢指针的<code>2</code>倍</li>\n<li>所以 <code>A+N(B+C)+B=2(A+B)</code><br>简化等式得到 <code>A =(N-1)(B+C)+C</code><blockquote>\n<p><code>B+C</code>为一个环，我们可以忽略，因此可以得到<code>A=C</code>,只要在快慢指针相遇时从头结点开始有个指针向下走，跟慢指针相遇的节点就是我们要输出的<code>pos</code>节点</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> detectCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head </span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pos = head </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast&amp;&amp;fast.next)&#123; </span><br><span class=\"line\">        slow = slow.next </span><br><span class=\"line\">        fast = fast.next.next </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(slow==fast) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (slow)&#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(slow==pos)  <span class=\"keyword\">return</span> pos </span><br><span class=\"line\">                slow = slow.next</span><br><span class=\"line\">                pos = pos.next </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回<code>null</code>。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是<code>-1</code>，则在该链表中没有环。注意<code>pos</code>不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>\n<blockquote>\n<p>不允许修改链表。</p>\n</blockquote>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d17014971ee6406993710bca9ed811c2~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class=\"line\">输出： 返回索引为 1 的链表节点</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/301fb8f91b554b87b62fb76a0f9ea3b3~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2], pos &#x3D; 0</span><br><span class=\"line\">输出： 返回索引为 0 的链表节点</span><br><span class=\"line\">解释： 链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/340038c2494145918acf742dfc99f69d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1], pos &#x3D; -1</span><br><span class=\"line\">输出： 返回 null</span><br><span class=\"line\">解释： 链表中没有环。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71f0be3117b448caa09bfcd06b7dde18~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>从上图中，我们不难得出，两指针相遇时</p>\n<ul>\n<li>快指针走过的节点为 <code>A+N(B+C)+B</code></li>\n<li>慢指针走过的节点为 <code>A+B</code></li>\n<li>因为有快指针速度是慢指针的<code>2</code>倍</li>\n<li>所以 <code>A+N(B+C)+B=2(A+B)</code><br>简化等式得到 <code>A =(N-1)(B+C)+C</code><blockquote>\n<p><code>B+C</code>为一个环，我们可以忽略，因此可以得到<code>A=C</code>,只要在快慢指针相遇时从头结点开始有个指针向下走，跟慢指针相遇的节点就是我们要输出的<code>pos</code>节点</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> detectCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head </span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pos = head </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast&amp;&amp;fast.next)&#123; </span><br><span class=\"line\">        slow = slow.next </span><br><span class=\"line\">        fast = fast.next.next </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(slow==fast) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (slow)&#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(slow==pos)  <span class=\"keyword\">return</span> pos </span><br><span class=\"line\">                slow = slow.next</span><br><span class=\"line\">                pos = pos.next </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-25-K个一组翻转链表","date":"2021-12-08T15:38:47.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/reverse-nodes-in-k-group/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表，每`k`个节点一组进行翻转，请你返回翻转后的链表。\n\n`k`是一个正整数，它的值小于或等于链表的长度。\n\n如果节点总数不是`k`的整数倍，那么请将最后剩余的节点保持原有顺序。\n\n**示例 1：**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/977d2e02162c40dcae481e239ff46c3a~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5], k = 2\n输出： [2,1,4,3,5]\n```\n\n**示例 2：**\n\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/410927d8dbb641cebefe9cbac317a9d8~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入：head = [1,2,3,4,5], k = 3\n输出：[3,2,1,4,5]\n```\n\n**示例 3：**\n\n```\n输入：head = [1,2,3,4,5], k = 1\n输出：[1,2,3,4,5]\n```\n\n**示例 4：**\n\n```\n输入：head = [1], k = 1\n输出：[1]\n```\n\n> 提示：\n> - 列表中节点的数量在范围 `sz` 内\n> - `1 <= sz <= 5000`\n> - `0 <= Node.val <= 1000`\n> - `1 <= k <= sz`\n\n## 解题思路\n\n> 在解此题前，期待你已经解出了[`206_反转链表`](https://juejin.cn/post/7038607426685239310)和[`92_ 反转链表II`](https://juejin.cn/post/7039725859254566942)\n\n- 此题在92题的基础上加上了多次翻转\n- 第一步，从head开始向后反转`k`个节点\n- 反转结束后head节点指向第`k+1`个节点\n- 重复上面步骤\n- 若节点个数不足`k`个，则不翻转\n\n## 解题代码\n\n```js\nvar reverseKGroup = function (head, k) {\n  if (!head) return head;\n  let vnode = new ListNode(-1, head);\n  let pre = vnode;\n  do {\n    pre.next = reverse(pre.next, k);\n    for (let i = 0; (i < k) && pre; i++) {\n      pre = pre.next;\n    }\n    if (!pre) break;\n  } while (1);\n  return vnode.next;\n};\nvar reverse = function (head, n) {\n  let pre = head;\n  let con = n;\n  let cur = head;\n  while (--n&&pre) {\n    pre = pre.next;\n  }\n  if (!pre) return head;\n  pre = null;\n  while (con--) {\n    [cur.next, pre, cur] = [pre, cur, cur.next];\n  }\n  head.next = cur;\n  return pre;\n};\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-25-K个一组翻转链表.md","raw":"---\ntitle: LeetCode-25-K个一组翻转链表\ndate: 2021-12-08 23:38:47\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/reverse-nodes-in-k-group/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表，每`k`个节点一组进行翻转，请你返回翻转后的链表。\n\n`k`是一个正整数，它的值小于或等于链表的长度。\n\n如果节点总数不是`k`的整数倍，那么请将最后剩余的节点保持原有顺序。\n\n**示例 1：**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/977d2e02162c40dcae481e239ff46c3a~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5], k = 2\n输出： [2,1,4,3,5]\n```\n\n**示例 2：**\n\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/410927d8dbb641cebefe9cbac317a9d8~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入：head = [1,2,3,4,5], k = 3\n输出：[3,2,1,4,5]\n```\n\n**示例 3：**\n\n```\n输入：head = [1,2,3,4,5], k = 1\n输出：[1,2,3,4,5]\n```\n\n**示例 4：**\n\n```\n输入：head = [1], k = 1\n输出：[1]\n```\n\n> 提示：\n> - 列表中节点的数量在范围 `sz` 内\n> - `1 <= sz <= 5000`\n> - `0 <= Node.val <= 1000`\n> - `1 <= k <= sz`\n\n## 解题思路\n\n> 在解此题前，期待你已经解出了[`206_反转链表`](https://juejin.cn/post/7038607426685239310)和[`92_ 反转链表II`](https://juejin.cn/post/7039725859254566942)\n\n- 此题在92题的基础上加上了多次翻转\n- 第一步，从head开始向后反转`k`个节点\n- 反转结束后head节点指向第`k+1`个节点\n- 重复上面步骤\n- 若节点个数不足`k`个，则不翻转\n\n## 解题代码\n\n```js\nvar reverseKGroup = function (head, k) {\n  if (!head) return head;\n  let vnode = new ListNode(-1, head);\n  let pre = vnode;\n  do {\n    pre.next = reverse(pre.next, k);\n    for (let i = 0; (i < k) && pre; i++) {\n      pre = pre.next;\n    }\n    if (!pre) break;\n  } while (1);\n  return vnode.next;\n};\nvar reverse = function (head, n) {\n  let pre = head;\n  let con = n;\n  let cur = head;\n  while (--n&&pre) {\n    pre = pre.next;\n  }\n  if (!pre) return head;\n  pre = null;\n  while (con--) {\n    [cur.next, pre, cur] = [pre, cur, cur.next];\n  }\n  head.next = cur;\n  return pre;\n};\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-25-K个一组翻转链表","published":1,"updated":"2021-12-15T15:44:23.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54c005e1r0qc26e6uwl","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表，每<code>k</code>个节点一组进行翻转，请你返回翻转后的链表。</p>\n<p><code>k</code>是一个正整数，它的值小于或等于链表的长度。</p>\n<p>如果节点总数不是<code>k</code>的整数倍，那么请将最后剩余的节点保持原有顺序。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/977d2e02162c40dcae481e239ff46c3a~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class=\"line\">输出： [2,1,4,3,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/410927d8dbb641cebefe9cbac317a9d8~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 3</span><br><span class=\"line\">输出：[3,2,1,4,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 1</span><br><span class=\"line\">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1], k &#x3D; 1</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>列表中节点的数量在范围 <code>sz</code> 内</li>\n<li><code>1 &lt;= sz &lt;= 5000</code></li>\n<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n<li><code>1 &lt;= k &lt;= sz</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><blockquote>\n<p>在解此题前，期待你已经解出了<a href=\"https://juejin.cn/post/7038607426685239310\" target=\"_blank\" rel=\"noopener\"><code>206_反转链表</code></a>和<a href=\"https://juejin.cn/post/7039725859254566942\" target=\"_blank\" rel=\"noopener\"><code>92_ 反转链表II</code></a></p>\n</blockquote>\n<ul>\n<li>此题在92题的基础上加上了多次翻转</li>\n<li>第一步，从head开始向后反转<code>k</code>个节点</li>\n<li>反转结束后head节点指向第<code>k+1</code>个节点</li>\n<li>重复上面步骤</li>\n<li>若节点个数不足<code>k</code>个，则不翻转</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseKGroup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>, head);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = vnode;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    pre.next = reverse(pre.next, k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; (i &lt; k) &amp;&amp; pre; i++) &#123;</span><br><span class=\"line\">      pre = pre.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pre) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode.next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> con = n;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--n&amp;&amp;pre) &#123;</span><br><span class=\"line\">    pre = pre.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pre) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (con--) &#123;</span><br><span class=\"line\">    [cur.next, pre, cur] = [pre, cur, cur.next];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  head.next = cur;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表，每<code>k</code>个节点一组进行翻转，请你返回翻转后的链表。</p>\n<p><code>k</code>是一个正整数，它的值小于或等于链表的长度。</p>\n<p>如果节点总数不是<code>k</code>的整数倍，那么请将最后剩余的节点保持原有顺序。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/977d2e02162c40dcae481e239ff46c3a~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class=\"line\">输出： [2,1,4,3,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/410927d8dbb641cebefe9cbac317a9d8~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 3</span><br><span class=\"line\">输出：[3,2,1,4,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 1</span><br><span class=\"line\">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1], k &#x3D; 1</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>列表中节点的数量在范围 <code>sz</code> 内</li>\n<li><code>1 &lt;= sz &lt;= 5000</code></li>\n<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n<li><code>1 &lt;= k &lt;= sz</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><blockquote>\n<p>在解此题前，期待你已经解出了<a href=\"https://juejin.cn/post/7038607426685239310\" target=\"_blank\" rel=\"noopener\"><code>206_反转链表</code></a>和<a href=\"https://juejin.cn/post/7039725859254566942\" target=\"_blank\" rel=\"noopener\"><code>92_ 反转链表II</code></a></p>\n</blockquote>\n<ul>\n<li>此题在92题的基础上加上了多次翻转</li>\n<li>第一步，从head开始向后反转<code>k</code>个节点</li>\n<li>反转结束后head节点指向第<code>k+1</code>个节点</li>\n<li>重复上面步骤</li>\n<li>若节点个数不足<code>k</code>个，则不翻转</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseKGroup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>, head);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = vnode;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    pre.next = reverse(pre.next, k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; (i &lt; k) &amp;&amp; pre; i++) &#123;</span><br><span class=\"line\">      pre = pre.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pre) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode.next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> con = n;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--n&amp;&amp;pre) &#123;</span><br><span class=\"line\">    pre = pre.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pre) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (con--) &#123;</span><br><span class=\"line\">    [cur.next, pre, cur] = [pre, cur, cur.next];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  head.next = cur;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-24-两两交换链表中的节点","date":"2021-12-15T15:42:01.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/swap-nodes-in-pairs/)\n\n<!-- more -->\n## 题目\n\n给你一个链表，两两交换其中相邻的结点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。\n\n**示例 1：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b99322cdfdeb42768ecde9689ec74238~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4]\n输出： [2,1,4,3]\n```\n**示例 2：**\n\n```\n输入： head = []\n输出： []\n```\n\n**示例 3：**\n\n```\n输入： head = [1]\n输出： [1]\n```\n\n\n> 提示：\n> - 链表中节点的数目在范围 `[0, 100]` 内\n> - `0 <= Node.val <= 100`\n\n## 解题思路\n\n- 先理解题目要求：\n    - 将链表分为n个长度为2的小链表\n    - 每个小链表进行翻转\n\n- 理解了题目要要求那就好办了，我们可以先定义一个虚拟头结点，从虚拟头结点向后找两个节点并记录第二个节点的后置节点\n- 将第一个节点指向后置节点，第二个节点指向第一个节点，并将第一个节点当做下一次交换的虚拟头节点的位置\n- 循环上面操作\n\n## 解题代码\n\n```js\nvar swapPairs = function (head) {\n  let vnode = new ListNode(-1, head), pre = vnode;\n  while (pre.next && pre.next.next) {\n   let cur = pre.next\n   let last = pre.next.next\n   cur.next = last.next\n   last.next= cur\n   pre.next = last\n   pre = cur\n  }\n  return vnode.next;\n};\n```\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-24-两两交换链表中的节点.md","raw":"---\ntitle: LeetCode-24-两两交换链表中的节点\ndate: 2021-12-15 23:42:01\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/swap-nodes-in-pairs/)\n\n<!-- more -->\n## 题目\n\n给你一个链表，两两交换其中相邻的结点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。\n\n**示例 1：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b99322cdfdeb42768ecde9689ec74238~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4]\n输出： [2,1,4,3]\n```\n**示例 2：**\n\n```\n输入： head = []\n输出： []\n```\n\n**示例 3：**\n\n```\n输入： head = [1]\n输出： [1]\n```\n\n\n> 提示：\n> - 链表中节点的数目在范围 `[0, 100]` 内\n> - `0 <= Node.val <= 100`\n\n## 解题思路\n\n- 先理解题目要求：\n    - 将链表分为n个长度为2的小链表\n    - 每个小链表进行翻转\n\n- 理解了题目要要求那就好办了，我们可以先定义一个虚拟头结点，从虚拟头结点向后找两个节点并记录第二个节点的后置节点\n- 将第一个节点指向后置节点，第二个节点指向第一个节点，并将第一个节点当做下一次交换的虚拟头节点的位置\n- 循环上面操作\n\n## 解题代码\n\n```js\nvar swapPairs = function (head) {\n  let vnode = new ListNode(-1, head), pre = vnode;\n  while (pre.next && pre.next.next) {\n   let cur = pre.next\n   let last = pre.next.next\n   cur.next = last.next\n   last.next= cur\n   pre.next = last\n   pre = cur\n  }\n  return vnode.next;\n};\n```\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-24-两两交换链表中的节点","published":1,"updated":"2021-12-15T15:44:28.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54d005f1r0qfw12cn4q","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/swap-nodes-in-pairs/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表，两两交换其中相邻的结点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b99322cdfdeb42768ecde9689ec74238~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4]</span><br><span class=\"line\">输出： [2,1,4,3]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; []</span><br><span class=\"line\">输出： []</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1]</span><br><span class=\"line\">输出： [1]</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li><p>先理解题目要求：</p>\n<ul>\n<li>将链表分为n个长度为2的小链表</li>\n<li>每个小链表进行翻转</li>\n</ul>\n</li>\n<li><p>理解了题目要要求那就好办了，我们可以先定义一个虚拟头结点，从虚拟头结点向后找两个节点并记录第二个节点的后置节点</p>\n</li>\n<li><p>将第一个节点指向后置节点，第二个节点指向第一个节点，并将第一个节点当做下一次交换的虚拟头节点的位置</p>\n</li>\n<li><p>循环上面操作</p>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> swapPairs = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>, head), pre = vnode;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pre.next &amp;&amp; pre.next.next) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> cur = pre.next</span><br><span class=\"line\">   <span class=\"keyword\">let</span> last = pre.next.next</span><br><span class=\"line\">   cur.next = last.next</span><br><span class=\"line\">   last.next= cur</span><br><span class=\"line\">   pre.next = last</span><br><span class=\"line\">   pre = cur</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/swap-nodes-in-pairs/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表，两两交换其中相邻的结点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b99322cdfdeb42768ecde9689ec74238~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4]</span><br><span class=\"line\">输出： [2,1,4,3]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; []</span><br><span class=\"line\">输出： []</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1]</span><br><span class=\"line\">输出： [1]</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li><p>先理解题目要求：</p>\n<ul>\n<li>将链表分为n个长度为2的小链表</li>\n<li>每个小链表进行翻转</li>\n</ul>\n</li>\n<li><p>理解了题目要要求那就好办了，我们可以先定义一个虚拟头结点，从虚拟头结点向后找两个节点并记录第二个节点的后置节点</p>\n</li>\n<li><p>将第一个节点指向后置节点，第二个节点指向第一个节点，并将第一个节点当做下一次交换的虚拟头节点的位置</p>\n</li>\n<li><p>循环上面操作</p>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> swapPairs = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>, head), pre = vnode;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pre.next &amp;&amp; pre.next.next) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> cur = pre.next</span><br><span class=\"line\">   <span class=\"keyword\">let</span> last = pre.next.next</span><br><span class=\"line\">   cur.next = last.next</span><br><span class=\"line\">   last.next= cur</span><br><span class=\"line\">   pre.next = last</span><br><span class=\"line\">   pre = cur</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-83-删除排序链表中的重复元素","date":"2021-12-15T15:45:43.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起!\n\n[题目地址](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/)\n\n<!-- more -->\n\n## 题目\n\n存在一个按升序排列的链表，给你这个链表的头节点`head`，请你删除所有重复的元素，使每个元素只出现一次。\n\n返回同样按升序排列的结果链表。\n\n**示例 1：**\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/001afd9c8c514668ac04fe37f9e9a8e4~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,1,2]\n输出： [1,2]\n```\n\n**示例 2：**\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c68c58a1c33f41c28d54a7df37ebc326~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入：head = [1,1,2,3,3]\n输出：[1,2,3]\n```\n\n> 提示：\n> - 链表中节点数目在范围`[0, 300]`内\n> - `-100 <= Node.val <= 100`\n> - 题目数据保证链表已经按升序排列\n\n## 解题思路\n\n- 因为链表是有序的，所以重复的元素一定是相连的\n- 我们只需要比较相邻的两个节点的值是否相等\n- 如果相等，则左节点指向右节点的后置节点完成删除\n\n## 解题代码\n\n```js\nvar deleteDuplicates = function(head) {\n    if(!head) return head\n    let cur = head\n    while(cur.next){\n        if(cur.val == cur.next.val){\n            cur.next = cur.next.next\n        }else{\n            cur = cur.next\n        }\n    }\n    return head\n};\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-83-删除排序链表中的重复元素.md","raw":"---\ntitle: LeetCode-83-删除排序链表中的重复元素\ndate: 2021-12-15 23:45:43\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起!\n\n[题目地址](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/)\n\n<!-- more -->\n\n## 题目\n\n存在一个按升序排列的链表，给你这个链表的头节点`head`，请你删除所有重复的元素，使每个元素只出现一次。\n\n返回同样按升序排列的结果链表。\n\n**示例 1：**\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/001afd9c8c514668ac04fe37f9e9a8e4~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,1,2]\n输出： [1,2]\n```\n\n**示例 2：**\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c68c58a1c33f41c28d54a7df37ebc326~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入：head = [1,1,2,3,3]\n输出：[1,2,3]\n```\n\n> 提示：\n> - 链表中节点数目在范围`[0, 300]`内\n> - `-100 <= Node.val <= 100`\n> - 题目数据保证链表已经按升序排列\n\n## 解题思路\n\n- 因为链表是有序的，所以重复的元素一定是相连的\n- 我们只需要比较相邻的两个节点的值是否相等\n- 如果相等，则左节点指向右节点的后置节点完成删除\n\n## 解题代码\n\n```js\nvar deleteDuplicates = function(head) {\n    if(!head) return head\n    let cur = head\n    while(cur.next){\n        if(cur.val == cur.next.val){\n            cur.next = cur.next.next\n        }else{\n            cur = cur.next\n        }\n    }\n    return head\n};\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-83-删除排序链表中的重复元素","published":1,"updated":"2021-12-15T15:46:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54e005j1r0q3df75bed","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起!</p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>存在一个按升序排列的链表，给你这个链表的头节点<code>head</code>，请你删除所有重复的元素，使每个元素只出现一次。</p>\n<p>返回同样按升序排列的结果链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/001afd9c8c514668ac04fe37f9e9a8e4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,1,2]</span><br><span class=\"line\">输出： [1,2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c68c58a1c33f41c28d54a7df37ebc326~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,1,2,3,3]</span><br><span class=\"line\">输出：[1,2,3]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点数目在范围<code>[0, 300]</code>内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n<li>题目数据保证链表已经按升序排列</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>因为链表是有序的，所以重复的元素一定是相连的</li>\n<li>我们只需要比较相邻的两个节点的值是否相等</li>\n<li>如果相等，则左节点指向右节点的后置节点完成删除</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> deleteDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur.next)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val == cur.next.val)&#123;</span><br><span class=\"line\">            cur.next = cur.next.next</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur = cur.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起!</p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>存在一个按升序排列的链表，给你这个链表的头节点<code>head</code>，请你删除所有重复的元素，使每个元素只出现一次。</p>\n<p>返回同样按升序排列的结果链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/001afd9c8c514668ac04fe37f9e9a8e4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,1,2]</span><br><span class=\"line\">输出： [1,2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c68c58a1c33f41c28d54a7df37ebc326~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,1,2,3,3]</span><br><span class=\"line\">输出：[1,2,3]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点数目在范围<code>[0, 300]</code>内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n<li>题目数据保证链表已经按升序排列</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>因为链表是有序的，所以重复的元素一定是相连的</li>\n<li>我们只需要比较相邻的两个节点的值是否相等</li>\n<li>如果相等，则左节点指向右节点的后置节点完成删除</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> deleteDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur.next)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val == cur.next.val)&#123;</span><br><span class=\"line\">            cur.next = cur.next.next</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur = cur.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-61-旋转链表","date":"2021-12-07T15:40:10.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/rotate-list/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表的头节点`head`，旋转链表，将链表每个节点向右移动`k`个位置。\n\n**示例 1：**\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac0fa47051d241488dc2d67fa1e8aa0f~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5], k = 2\n输出： [4,5,1,2,3]\n```\n\n**示例 2：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbacc2c873a841d2a208020f5ceabb7f~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [0,1,2], k = 4\n输出： [2,0,1]\n```\n\n> 提示：\n> -  链表中节点的数目在范围 `[0, 500]` 内\n> -  `-100 <= Node.val <= 100`\n> -  `0 <= k <= 2 * 109`\n\n\n## 解题思路\n\n- 将尾结点指向`head`\n- 将尾结点的前置节点指向`null`\n- 重复`k`次上面的动作\n\n\n## 解题代码\n```js\nvar rotateRight = function(head, k) {\n    if(!head) return head\n    let list = head\n    while(k--){\n        list = doRotate(list)\n    }\n    return list\n};\n\nvar doRotate = function(head){\n    let cur = head\n    while(cur.next&&cur.next.next){\n        cur = cur.next\n    }\n    if(!cur.next) return cur\n    cur.next.next = head\n    let z = cur.next\n    cur.next = null\n    return z\n}\n```\n\n## 遇到了一些问题\n\n使用如上的解法，看着没有毛病，但是在`k`的值特别大时，会超时\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/866d9284080b44b49a1a37b5fc7df295~tplv-k3u1fbpfcp-watermark.image?)\n\n## 优化方案\n\n- 我们先获取到链表的长度`i`\n- 用`k`对`i`取余得到我们要旋转的最小次数`con`\n- 进行`con`次旋转\n\n\n## 最终解题代码\n```js\nvar rotateRight = function(head, k) {\n    if(!head) return head\n    let i = 1\n    let cur = head\n    while (cur.next){\n        cur = cur.next\n        i++\n    }\n    let con = k%i\n    let list = head\n    while(con--){\n        list = doRotate(list)\n    }\n    return list\n};\n\nvar doRotate = function(head){\n    let cur = head\n    while(cur.next&&cur.next.next){\n        cur = cur.next\n    }\n    if(!cur.next) return cur\n    cur.next.next = head\n    let z = cur.next\n    cur.next = null\n    return z\n}\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-61-旋转链表.md","raw":"---\ntitle: LeetCode-61-旋转链表\ndate: 2021-12-07 23:40:10\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n\n[题目地址](https://leetcode-cn.com/problems/rotate-list/)\n\n<!-- more -->\n\n## 题目\n\n给你一个链表的头节点`head`，旋转链表，将链表每个节点向右移动`k`个位置。\n\n**示例 1：**\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac0fa47051d241488dc2d67fa1e8aa0f~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5], k = 2\n输出： [4,5,1,2,3]\n```\n\n**示例 2：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbacc2c873a841d2a208020f5ceabb7f~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [0,1,2], k = 4\n输出： [2,0,1]\n```\n\n> 提示：\n> -  链表中节点的数目在范围 `[0, 500]` 内\n> -  `-100 <= Node.val <= 100`\n> -  `0 <= k <= 2 * 109`\n\n\n## 解题思路\n\n- 将尾结点指向`head`\n- 将尾结点的前置节点指向`null`\n- 重复`k`次上面的动作\n\n\n## 解题代码\n```js\nvar rotateRight = function(head, k) {\n    if(!head) return head\n    let list = head\n    while(k--){\n        list = doRotate(list)\n    }\n    return list\n};\n\nvar doRotate = function(head){\n    let cur = head\n    while(cur.next&&cur.next.next){\n        cur = cur.next\n    }\n    if(!cur.next) return cur\n    cur.next.next = head\n    let z = cur.next\n    cur.next = null\n    return z\n}\n```\n\n## 遇到了一些问题\n\n使用如上的解法，看着没有毛病，但是在`k`的值特别大时，会超时\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/866d9284080b44b49a1a37b5fc7df295~tplv-k3u1fbpfcp-watermark.image?)\n\n## 优化方案\n\n- 我们先获取到链表的长度`i`\n- 用`k`对`i`取余得到我们要旋转的最小次数`con`\n- 进行`con`次旋转\n\n\n## 最终解题代码\n```js\nvar rotateRight = function(head, k) {\n    if(!head) return head\n    let i = 1\n    let cur = head\n    while (cur.next){\n        cur = cur.next\n        i++\n    }\n    let con = k%i\n    let list = head\n    while(con--){\n        list = doRotate(list)\n    }\n    return list\n};\n\nvar doRotate = function(head){\n    let cur = head\n    while(cur.next&&cur.next.next){\n        cur = cur.next\n    }\n    if(!cur.next) return cur\n    cur.next.next = head\n    let z = cur.next\n    cur.next = null\n    return z\n}\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-61-旋转链表","published":1,"updated":"2021-12-15T15:44:18.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54f005l1r0q8bfv78q6","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/rotate-list/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表的头节点<code>head</code>，旋转链表，将链表每个节点向右移动<code>k</code>个位置。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac0fa47051d241488dc2d67fa1e8aa0f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class=\"line\">输出： [4,5,1,2,3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbacc2c873a841d2a208020f5ceabb7f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [0,1,2], k &#x3D; 4</span><br><span class=\"line\">输出： [2,0,1]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目在范围 <code>[0, 500]</code> 内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n<li><code>0 &lt;= k &lt;= 2 * 109</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>将尾结点指向<code>head</code></li>\n<li>将尾结点的前置节点指向<code>null</code></li>\n<li>重复<code>k</code>次上面的动作</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rotateRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k--)&#123;</span><br><span class=\"line\">        list = doRotate(list)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doRotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur.next&amp;&amp;cur.next.next)&#123;</span><br><span class=\"line\">        cur = cur.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!cur.next) <span class=\"keyword\">return</span> cur</span><br><span class=\"line\">    cur.next.next = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> z = cur.next</span><br><span class=\"line\">    cur.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到了一些问题\"><a href=\"#遇到了一些问题\" class=\"headerlink\" title=\"遇到了一些问题\"></a>遇到了一些问题</h2><p>使用如上的解法，看着没有毛病，但是在<code>k</code>的值特别大时，会超时</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/866d9284080b44b49a1a37b5fc7df295~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><ul>\n<li>我们先获取到链表的长度<code>i</code></li>\n<li>用<code>k</code>对<code>i</code>取余得到我们要旋转的最小次数<code>con</code></li>\n<li>进行<code>con</code>次旋转</li>\n</ul>\n<h2 id=\"最终解题代码\"><a href=\"#最终解题代码\" class=\"headerlink\" title=\"最终解题代码\"></a>最终解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rotateRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur.next)&#123;</span><br><span class=\"line\">        cur = cur.next</span><br><span class=\"line\">        i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> con = k%i</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(con--)&#123;</span><br><span class=\"line\">        list = doRotate(list)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doRotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur.next&amp;&amp;cur.next.next)&#123;</span><br><span class=\"line\">        cur = cur.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!cur.next) <span class=\"keyword\">return</span> cur</span><br><span class=\"line\">    cur.next.next = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> z = cur.next</span><br><span class=\"line\">    cur.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/rotate-list/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表的头节点<code>head</code>，旋转链表，将链表每个节点向右移动<code>k</code>个位置。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac0fa47051d241488dc2d67fa1e8aa0f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class=\"line\">输出： [4,5,1,2,3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbacc2c873a841d2a208020f5ceabb7f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [0,1,2], k &#x3D; 4</span><br><span class=\"line\">输出： [2,0,1]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目在范围 <code>[0, 500]</code> 内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n<li><code>0 &lt;= k &lt;= 2 * 109</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>将尾结点指向<code>head</code></li>\n<li>将尾结点的前置节点指向<code>null</code></li>\n<li>重复<code>k</code>次上面的动作</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rotateRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k--)&#123;</span><br><span class=\"line\">        list = doRotate(list)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doRotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur.next&amp;&amp;cur.next.next)&#123;</span><br><span class=\"line\">        cur = cur.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!cur.next) <span class=\"keyword\">return</span> cur</span><br><span class=\"line\">    cur.next.next = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> z = cur.next</span><br><span class=\"line\">    cur.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到了一些问题\"><a href=\"#遇到了一些问题\" class=\"headerlink\" title=\"遇到了一些问题\"></a>遇到了一些问题</h2><p>使用如上的解法，看着没有毛病，但是在<code>k</code>的值特别大时，会超时</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/866d9284080b44b49a1a37b5fc7df295~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><ul>\n<li>我们先获取到链表的长度<code>i</code></li>\n<li>用<code>k</code>对<code>i</code>取余得到我们要旋转的最小次数<code>con</code></li>\n<li>进行<code>con</code>次旋转</li>\n</ul>\n<h2 id=\"最终解题代码\"><a href=\"#最终解题代码\" class=\"headerlink\" title=\"最终解题代码\"></a>最终解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rotateRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur.next)&#123;</span><br><span class=\"line\">        cur = cur.next</span><br><span class=\"line\">        i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> con = k%i</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(con--)&#123;</span><br><span class=\"line\">        list = doRotate(list)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doRotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur.next&amp;&amp;cur.next.next)&#123;</span><br><span class=\"line\">        cur = cur.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!cur.next) <span class=\"keyword\">return</span> cur</span><br><span class=\"line\">    cur.next.next = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> z = cur.next</span><br><span class=\"line\">    cur.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-206-反转链表","date":"2021-12-01T15:28:00.000Z","description":null,"_content":"\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起!\n\n\n[题目地址](https://leetcode-cn.com/problems/reverse-linked-list/)\n\n<!-- more -->\n\n## 题目\n\n给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。\n\n**示例一:**\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8205a093a8854a81b24bc36a571b8b3e~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5]\n输出： [5,4,3,2,1]\n```\n\n**示例二:**\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/591a722d12574a97924a45f206a5e876~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2]\n输出： [2,1]\n```\n\n**示例三:**\n\n```\n输入： head = []\n输出： []\n```\n\n> 提示\n> -  链表中节点的数目范围是 `[0, 5000]`\n> -  `-5000 <= Node.val <= 5000`\n\n\n## 解题思路\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d13536358394445c9fa6ebaefa7a6bca~tplv-k3u1fbpfcp-watermark.image?)\n- 最后一项的`next`一定是`null`，因为当前的第一项为结果的最后一项，因此有`head.next=null`\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71795b5ce939484ba50aa2869992b47f~tplv-k3u1fbpfcp-watermark.image?)\n- 我们接下来通过修改next的指向来解题(第二项的`next`原本指向`3`,我们将其指向`2`)\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f65d82ec6b4b4920bf62ee89a6ba7e91~tplv-k3u1fbpfcp-watermark.image?)\n\n- 后面的逻辑就跟第二步一样了\n\n\n## 解题代码\n\n```js\nvar reverseList = function(head) {\n    if(!head||!head.next) return head\n    let current = head.next\n    head.next = null\n    while (current){\n        let b = current.next\n        current.next = head\n        head = current\n        current = b\n    }\n    return head\n};\n```\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-206-反转链表.md","raw":"---\ntitle: LeetCode-206-反转链表\ndate: 2021-12-01 23:28:00\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起!\n\n\n[题目地址](https://leetcode-cn.com/problems/reverse-linked-list/)\n\n<!-- more -->\n\n## 题目\n\n给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。\n\n**示例一:**\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8205a093a8854a81b24bc36a571b8b3e~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2,3,4,5]\n输出： [5,4,3,2,1]\n```\n\n**示例二:**\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/591a722d12574a97924a45f206a5e876~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入： head = [1,2]\n输出： [2,1]\n```\n\n**示例三:**\n\n```\n输入： head = []\n输出： []\n```\n\n> 提示\n> -  链表中节点的数目范围是 `[0, 5000]`\n> -  `-5000 <= Node.val <= 5000`\n\n\n## 解题思路\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d13536358394445c9fa6ebaefa7a6bca~tplv-k3u1fbpfcp-watermark.image?)\n- 最后一项的`next`一定是`null`，因为当前的第一项为结果的最后一项，因此有`head.next=null`\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71795b5ce939484ba50aa2869992b47f~tplv-k3u1fbpfcp-watermark.image?)\n- 我们接下来通过修改next的指向来解题(第二项的`next`原本指向`3`,我们将其指向`2`)\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f65d82ec6b4b4920bf62ee89a6ba7e91~tplv-k3u1fbpfcp-watermark.image?)\n\n- 后面的逻辑就跟第二步一样了\n\n\n## 解题代码\n\n```js\nvar reverseList = function(head) {\n    if(!head||!head.next) return head\n    let current = head.next\n    head.next = null\n    while (current){\n        let b = current.next\n        current.next = head\n        head = current\n        current = b\n    }\n    return head\n};\n```\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-206-反转链表","published":1,"updated":"2021-12-15T15:37:16.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54g005o1r0q5hcpchak","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起!</p>\n<p><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例一:</strong></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8205a093a8854a81b24bc36a571b8b3e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5]</span><br><span class=\"line\">输出： [5,4,3,2,1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例二:</strong></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/591a722d12574a97924a45f206a5e876~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2]</span><br><span class=\"line\">输出： [2,1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例三:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; []</span><br><span class=\"line\">输出： []</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示</p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>\n<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d13536358394445c9fa6ebaefa7a6bca~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<ul>\n<li>最后一项的<code>next</code>一定是<code>null</code>，因为当前的第一项为结果的最后一项，因此有<code>head.next=null</code></li>\n</ul>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71795b5ce939484ba50aa2869992b47f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<ul>\n<li>我们接下来通过修改next的指向来解题(第二项的<code>next</code>原本指向<code>3</code>,我们将其指向<code>2</code>)</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f65d82ec6b4b4920bf62ee89a6ba7e91~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<ul>\n<li>后面的逻辑就跟第二步一样了</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.next) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head.next</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = current.next</span><br><span class=\"line\">        current.next = head</span><br><span class=\"line\">        head = current</span><br><span class=\"line\">        current = b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起!</p>\n<p><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例一:</strong></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8205a093a8854a81b24bc36a571b8b3e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2,3,4,5]</span><br><span class=\"line\">输出： [5,4,3,2,1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例二:</strong></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/591a722d12574a97924a45f206a5e876~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; [1,2]</span><br><span class=\"line\">输出： [2,1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例三:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： head &#x3D; []</span><br><span class=\"line\">输出： []</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示</p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>\n<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d13536358394445c9fa6ebaefa7a6bca~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<ul>\n<li>最后一项的<code>next</code>一定是<code>null</code>，因为当前的第一项为结果的最后一项，因此有<code>head.next=null</code></li>\n</ul>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71795b5ce939484ba50aa2869992b47f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<ul>\n<li>我们接下来通过修改next的指向来解题(第二项的<code>next</code>原本指向<code>3</code>,我们将其指向<code>2</code>)</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f65d82ec6b4b4920bf62ee89a6ba7e91~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<ul>\n<li>后面的逻辑就跟第二步一样了</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.next) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head.next</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = current.next</span><br><span class=\"line\">        current.next = head</span><br><span class=\"line\">        head = current</span><br><span class=\"line\">        current = b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"LeetCode-92-反转链表II","date":"2021-12-04T15:35:15.000Z","description":null,"_content":"\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n[题目地址](https://leetcode-cn.com/problems/reverse-linked-list-ii/)\n\n<!-- more -->\n\n## 题目\n\n给你单链表的头指针`head`和两个整数`left`和`right`，其中`left<=right`。请你反转从位置`left`到位置`right`的链表节点，返回反转后的链表。\n\n**示例 1：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e44a8a40c8e4042920b8869546542b0~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入：head = [1,2,3,4,5], left = 2, right = 4\n输出：[1,4,3,2,5]\n```\n\n**示例 2：**\n\n```\n输入：head = [5], left = 1, right = 1\n输出：[5]\n```\n\n> 提示:\n> -   链表中节点数目为 `n`\n> -   `1 <= n <= 500`\n> -   `-500 <= Node.val <= 500`\n> -   `1 <= left <= right <= n`\n\n\n## 解题思路\n\n![2.gif](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e3e732f53f4f9a8c2a70516d2b450d~tplv-k3u1fbpfcp-watermark.image?)\n\n- 找到开始反转的节点`left`,记录下反转的前驱节点`con`以及反转开始的节点(也是反转部分的尾结点)`tail`\n- 开始反转操作\n- 反转到`right`，此时反转的链表最后的一个节点(也是反转部分的头结点)为`pre`，后置节点`cur`\n- 将我们一开始记录的前驱节点`con`指向`pre`，反转部分的尾结点`tail`指向`cur`便可完成解题\n\n\n\n## 解题代码\n\n```js\nvar reverseBetween = function(head, left, right) {\n    if(!head||left == right) return head\n    let count = right - left +1\n    let vnode = new ListNode(-1,head)\n    let pre = vnode\n    let cur = pre.next\n    while (--left){\n        pre = pre.next\n    }\n    pre.next = reverseList(pre.next,count)\n    return vnode.next\n}\n\nvar reverseList = function(head,n) {\n   let pre =null\n    let cur = head\n    while (n--){\n       [cur.next,pre,cur] = [pre,cur,cur.next]\n    }\n    head.next = cur\n    return pre\n};\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/12/LeetCode-92-反转链表II.md","raw":"---\ntitle: LeetCode-92-反转链表II\ndate: 2021-12-04 23:35:15\ntags:\n- 算法\n- LeetCode\ncategories:\n- 算法\n- LeetCode\ndescription:\n---\n\n看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~\n\n谁能九层台，不用累土起。\n\n[题目地址](https://leetcode-cn.com/problems/reverse-linked-list-ii/)\n\n<!-- more -->\n\n## 题目\n\n给你单链表的头指针`head`和两个整数`left`和`right`，其中`left<=right`。请你反转从位置`left`到位置`right`的链表节点，返回反转后的链表。\n\n**示例 1：**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e44a8a40c8e4042920b8869546542b0~tplv-k3u1fbpfcp-watermark.image?)\n\n```\n输入：head = [1,2,3,4,5], left = 2, right = 4\n输出：[1,4,3,2,5]\n```\n\n**示例 2：**\n\n```\n输入：head = [5], left = 1, right = 1\n输出：[5]\n```\n\n> 提示:\n> -   链表中节点数目为 `n`\n> -   `1 <= n <= 500`\n> -   `-500 <= Node.val <= 500`\n> -   `1 <= left <= right <= n`\n\n\n## 解题思路\n\n![2.gif](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e3e732f53f4f9a8c2a70516d2b450d~tplv-k3u1fbpfcp-watermark.image?)\n\n- 找到开始反转的节点`left`,记录下反转的前驱节点`con`以及反转开始的节点(也是反转部分的尾结点)`tail`\n- 开始反转操作\n- 反转到`right`，此时反转的链表最后的一个节点(也是反转部分的头结点)为`pre`，后置节点`cur`\n- 将我们一开始记录的前驱节点`con`指向`pre`，反转部分的尾结点`tail`指向`cur`便可完成解题\n\n\n\n## 解题代码\n\n```js\nvar reverseBetween = function(head, left, right) {\n    if(!head||left == right) return head\n    let count = right - left +1\n    let vnode = new ListNode(-1,head)\n    let pre = vnode\n    let cur = pre.next\n    while (--left){\n        pre = pre.next\n    }\n    pre.next = reverseList(pre.next,count)\n    return vnode.next\n}\n\nvar reverseList = function(head,n) {\n   let pre =null\n    let cur = head\n    while (n--){\n       [cur.next,pre,cur] = [pre,cur,cur.next]\n    }\n    head.next = cur\n    return pre\n};\n```\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/12/LeetCode-92-反转链表II","published":1,"updated":"2021-12-15T15:37:16.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54g005q1r0qhc0j227s","content":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你单链表的头指针<code>head</code>和两个整数<code>left</code>和<code>right</code>，其中<code>left&lt;=right</code>。请你反转从位置<code>left</code>到位置<code>right</code>的链表节点，返回反转后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e44a8a40c8e4042920b8869546542b0~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,2,3,4,5], left &#x3D; 2, right &#x3D; 4</span><br><span class=\"line\">输出：[1,4,3,2,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [5], left &#x3D; 1, right &#x3D; 1</span><br><span class=\"line\">输出：[5]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示:</p>\n<ul>\n<li>链表中节点数目为 <code>n</code></li>\n<li><code>1 &lt;= n &lt;= 500</code></li>\n<li><code>-500 &lt;= Node.val &lt;= 500</code></li>\n<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e3e732f53f4f9a8c2a70516d2b450d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"2.gif\"></p>\n<ul>\n<li>找到开始反转的节点<code>left</code>,记录下反转的前驱节点<code>con</code>以及反转开始的节点(也是反转部分的尾结点)<code>tail</code></li>\n<li>开始反转操作</li>\n<li>反转到<code>right</code>，此时反转的链表最后的一个节点(也是反转部分的头结点)为<code>pre</code>，后置节点<code>cur</code></li>\n<li>将我们一开始记录的前驱节点<code>con</code>指向<code>pre</code>，反转部分的尾结点<code>tail</code>指向<code>cur</code>便可完成解题</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseBetween = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||left == right) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = right - left +<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>,head)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = vnode</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = pre.next</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (--left)&#123;</span><br><span class=\"line\">        pre = pre.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre.next = reverseList(pre.next,count)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head,n</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> pre =<span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)&#123;</span><br><span class=\"line\">       [cur.next,pre,cur] = [pre,cur,cur.next]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head.next = cur</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>看一百遍美女，美女也不一定是你的。但你刷一百遍算法，知识就是你的了~~</p>\n<p>谁能九层台，不用累土起。</p>\n<p><a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">题目地址</a></p>","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你单链表的头指针<code>head</code>和两个整数<code>left</code>和<code>right</code>，其中<code>left&lt;=right</code>。请你反转从位置<code>left</code>到位置<code>right</code>的链表节点，返回反转后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e44a8a40c8e4042920b8869546542b0~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [1,2,3,4,5], left &#x3D; 2, right &#x3D; 4</span><br><span class=\"line\">输出：[1,4,3,2,5]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [5], left &#x3D; 1, right &#x3D; 1</span><br><span class=\"line\">输出：[5]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示:</p>\n<ul>\n<li>链表中节点数目为 <code>n</code></li>\n<li><code>1 &lt;= n &lt;= 500</code></li>\n<li><code>-500 &lt;= Node.val &lt;= 500</code></li>\n<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e3e732f53f4f9a8c2a70516d2b450d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"2.gif\"></p>\n<ul>\n<li>找到开始反转的节点<code>left</code>,记录下反转的前驱节点<code>con</code>以及反转开始的节点(也是反转部分的尾结点)<code>tail</code></li>\n<li>开始反转操作</li>\n<li>反转到<code>right</code>，此时反转的链表最后的一个节点(也是反转部分的头结点)为<code>pre</code>，后置节点<code>cur</code></li>\n<li>将我们一开始记录的前驱节点<code>con</code>指向<code>pre</code>，反转部分的尾结点<code>tail</code>指向<code>cur</code>便可完成解题</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseBetween = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||left == right) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = right - left +<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> vnode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>,head)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = vnode</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = pre.next</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (--left)&#123;</span><br><span class=\"line\">        pre = pre.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre.next = reverseList(pre.next,count)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head,n</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> pre =<span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)&#123;</span><br><span class=\"line\">       [cur.next,pre,cur] = [pre,cur,cur.next]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head.next = cur</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<!-- markdownlint-disable MD041 MD002-->"},{"title":"基于高德地图jsapi的二次封装","date":"2021-08-24T08:54:13.000Z","description":null,"_content":"\n针对vue、uni等项目的一些常用地图api的二次封装\n\n<!-- more -->\n\n# 申请key\n\n第一步我们要做地图肯定要有这地图对应的key，还不知道怎么生成的话可以点这个查看----->[如何生成高德地图的key](http://baidu.physton.com/?q=%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E7%9A%84key)\n\n# 使用AMapLoader加载高德地图的js\n\n```shell\ncnpm i @amap/amap-jsapi-loader\n```\n> 是的，你没有看错，就用cnpm！npm安装会有各种报错\n\n# 修改map.js\n\n在`map.js`中，我们修改`key`为自己的`key`，并按自己需要去修改插件数组\n\n```js\nimport AMapLoader from '@amap/amap-jsapi-loader';\n\n// 配置地图所需要的插件\nconst mapPlugin = [\n  // 'AMap.ToolBar',\n  // 'AMap.Scale',\n  // 'AMap.AdvancedInfoWindow',\n  // 'AMap.Geolocation',\n  // 'AMap.Transfer',\n  // 'AMap.StationSearch',\n];\n// 地图key\nconst key = 'your key';\n\n// 主题id\nconst styleId = 'your styleId'\n\n// 默认城市号\nconst defaultCityCode = '城市号'  \n\nexport default class Map {\n constructor(opt) {\n    this.map = null;\n    this.initMap(opt);\n  }\n  // 销毁地图\n  destroy() {\n    this.map.destroy();\n  }\n  // 初始化地图\n  initMap({ domId, geolocation }) {\n    return new Promise((resolve, reject) => {\n      AMapLoader.load({\n        key: key, // 申请好的Web端开发者Key，首次调用 load 时必填\n        plugins: mapPlugin, // 需要使用的的插件列表，如比例尺'AMap.Scale'等\n        AMapUI: {\n          // 是否加载 AMapUI，缺省不加载\n          plugins: [], // 需要加载的 AMapUI ui插件\n        },\n      })\n        .then(AMap => {\n          this.map = new AMap.Map(domId, {\n            mapStyle: `amap://styles/${styleId}`,\n          });\n          if (geolocation) {\n            // 初始化定位\n            this.initGetLocation();\n          }\n          if (mapPlugin.length > 0) { // 加载插件\n            this.initMapPlugin(mapPlugin);\n          }\n          resolve();\n        })\n        .catch(e => {\n          console.log(e);\n          reject();\n        });\n    });\n  }\n  // 获取当前定位\n  getLocation() {\n    this.geolocation.getCurrentPosition();\n  }\n  // 初始化定位组件\n  initGetLocation() {\n    this.map.plugin('AMap.Geolocation', () => {\n      this.geolocation = new AMap.Geolocation({\n        enableHighAccuracy: false, //是否使用高精度定位，默认:true\n        timeout: 1000, //超过10秒后停止定位，默认：无穷大\n        maximumAge: 0, //定位结果缓存0毫秒，默认：0\n        convert: true, //自动偏移坐标，偏移后的坐标为高德坐标，默认：true\n        showButton: false, //显示定位按钮，默认：true\n        showMarker: true, //定位成功后在定位到的位置显示点标记，默认：true\n        showCircle: true, //定位成功后用圆圈表示定位精度范围，默认：true\n        panToLocation: true, //定位成功后将定位到的位置作为地图中心点，默认：true\n        zoomToAccuracy: false, //定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false\n      });\n      this.map.addControl(this.geolocation);\n      this.getLocation();// 初始化完成默认调用一次获取定位\n      AMap.event.addListener(this.geolocation, 'complete', onComplete => {\n        console.log(onComplete, '定位成功');\n        this.currentLocation = onComplete; //  存储当前定位\n      }); //返回定位信息\n\n      AMap.event.addListener(geolocation, 'error', onError => {\n        console.log(onError, '定位失败');\n      }); //返回 定位失败\n    });\n  }\n  // 加载插件\n  initMapPlugin(l) {\n    l.forEach(v => {\n      const f = v.split('.')[1];\n      this.map.addControl(new AMap[f]());\n    });\n  }\n  // 画线\n  pathLine(pointList, pathOption) {\n    /**\n     * pointList 为线所要经过的点 格式为\n     * [\n          {\n            name: \"轨迹名\",\n            path: [\n              [100.340417, 27.376994],\n              [108.426354, 37.827452],\n              [113.392174, 31.208439],\n              [124.905846, 42.232876],\n            ],\n          },\n        ],\n     * pathOption 为线条参数\n     * \n     * **/\n    const that = this;\n    let pathLineStyle = {\n      strokeStyle: 'red',\n      lineWidth: 6,\n      dirArrowStyle: true,\n    };\n    Object.assign(pathLineStyle, pathOption);\n    AMapUI.load(['ui/misc/PathSimplifier'], function(PathSimplifier) {\n      var pathSimplifierIns = new PathSimplifier({\n        zIndex: 100,\n        map: that.map, //所属的地图实例\n        getPath: function(pathData, pathIndex) {\n          //返回轨迹数据中的节点坐标信息，[AMap.LngLat, AMap.LngLat...] 或者 [[lng|number,lat|number],...]\n          return pathData.path;\n        },\n        // getHoverTitle: function(pathData, pathIndex, pointIndex) {\n        //   //返回鼠标悬停时显示的信息\n        //   if (pointIndex >= 0) {\n        //     //鼠标悬停在某个轨迹节点上\n        //     return (\n        //       pathData.name + '，点:' + pointIndex + '/' + pathData.path.length\n        //     );\n        //   }\n        //   //鼠标悬停在节点之间的连线上\n        //   return pathData.name + '，点数量' + pathData.path.length;\n        // },\n        renderOptions: {\n          //轨迹线的样式\n          pathLineStyle,\n        },\n      });\n      pathSimplifierIns.setData(pointList);\n    });\n  }\n  // 自定义兴趣点\n  drawMarker(marker) {\n    // marker可传单个点 可传点数组\n    this.map.add(marker);\n  }\n  // 获取自定义内容标记\n  getMarker(position, opt, extData, fn) {\n    /**\n     * position 为位置信息 必传\n     * opt 为用户自定义覆盖物 可传\n     * icon: '//vdata.amap.com/icons/b18/1/2.png', // 添加 Icon 图标 URL\n     * size: new AMap.Size(40, 50),    // 图标尺寸\n     * image: '//webapi.amap.com/theme/v1.3/images/newpc/way_btn2.png',  // Icon的图像\n     * imageOffset: new AMap.Pixel(0, -60),  // 图像相对展示区域的偏移量，适于雪碧图等\n     * imageSize: new AMap.Size(40, 50)   // 根据所设置的大小拉伸或压缩图片\n     * zoom: 13\n     * content:'<div class=\"marker-route marker-marker-bus-from\"></div>'\n     * 更多配置 https://lbs.amap.com/api/javascript-api/reference/overlay#marker\n     * **/\n    let option = {\n      position, // 基点位置\n      offset: new AMap.Pixel(-17, -42), // 相对于基点的\n      clickable: true,\n      extData: extData,\n    };\n    if (opt) {\n      option = { ...option, ...opt };\n    }\n    const marker = new AMap.Marker(option);\n    marker.on('click', e => {\n      // 注册marker的点击事件\n      // console.log(e.target.getExtData());\n      this.map.setZoomAndCenter(10, e.target.getPosition()); // 点击marker点后以 marker点为中心\n      // marker点 点击\n      if (this.lastSelectedMarker) {\n        // 如果存在上个点击点 将上个点击点的icon恢复默认大小\n        const { image } = this.lastSelectedMarker.w.icon.Ce;\n        const icon = this.getMarkerIcon({ image });\n        this.lastSelectedMarker.setIcon(icon);\n      }\n      const { image } = e.target.w.icon.Ce;\n      const newIcon = this.getMarkerIcon({\n        image,\n        setOffset: new AMap.Pixel(-18, -50),\n        size: new AMap.Size(52, 52), // 图标尺寸\n        imageSize: new AMap.Size(48, 48),\n      });\n\n      e.target.setIcon(newIcon);\n      fn(extData);\n      this.lastSelectedMarker = e.target;\n    });\n    return marker;\n  }\n  // 生成marker的图片icon\n  getMarkerIcon(opt) {\n    // opt 必须包含image属性\n    let option = {\n      size: new AMap.Size(40, 40), // 图标尺寸\n      imageSize: new AMap.Size(36, 36),\n    };\n    return new AMap.Icon({ ...option, ...opt });\n  }\n  // 初始化 拖拽选址\n  initPositionPicker([fnSuc, fnFail], position) {\n    // [fnSuc, fnFail], position\n    /***\n     * 入参说明\n     * fn数组 为拖拽事件处理 必传\n     * position 为start的中线点 可不传\n     * **/\n    AMapUI.loadUI(['misc/PositionPicker'], PositionPicker => {\n      this.positionPicker = new PositionPicker({\n        mode: 'dragMap', //设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'\n        map: this.map, //依赖地图对象\n      });\n      //TODO:事件绑定、结果处理等\n      this.positionPicker.on('success', positionResult => {\n        console.log(positionResult, '拖拽 success');\n        // fnSuc(positionResult)\n      });\n      this.positionPicker.on('fail', positionResult => {\n        // 海上或海外无法获得地址信息\n        console.log(positionResult, '拖拽err');\n        // fnFail()\n      });\n      this.positionPicker.start(\n        position ? position : this.currentLocation.position\n      ); // 开启定位  默认以当前点为中心点  有传入 就以传入的为中心点\n    });\n  }\n\n  // 添加搜索框输入提示\n  initAutoComplete() {\n    AMap.plugin('AMap.Autocomplete', ()=> {\n      const {citycode} = this.currentLocation.addressComponent  // 获取当前定位的城市的城市号\n      this.autoComplete = new AMap.Autocomplete({\n        city:citycode?citycode:defaultCityCode\n      });\n    });\n  }\n```\n\n# 使用\n\n在我们需要使用地图的地方\n```js\n// 引入Map\nimport Map from \"@/common/script/map\";\n\n// 初始化\nthis.map = new Map({domId:\"dom的id\",geolocation:true});\n\n// 获取定位 (可以放在你点击获取当前定位的按钮上)\nthis.map.getLocation()\n\n// 输入提示 \nthis.map.initAutoComplete()  // 注册输入提示\n  // 在需要触发的方法里面  this.place为 需要进行模糊匹配的内容\n  this.map.autoComplete.search(this.place,(status,res)=>{\n      console.log(status,res)\n  })\n\n\n\n// 画自定义点 content \ndrawMarker() {\n  const content ='<div>1</div>'\n  const marker = this.map.getMarker([116.39, 39.9],{content});\n  this.map.drawMarker(marker);\n}\n\n// 画自定义点 icon\ndrawMarker(){\n  const icon = this.map.getMarkerIcon({ image: 'you image url' });\n  const marker = this.map.getMarker(\n      [120.3, 31.3],\n      { icon },\n      extData,\n      callback // 传递给marker点 点击触发的回调方法\n    );\n  this.map.drawMarker(marker);\n  \n}\n\n// 画自定义线\ndrawPath() {\n  this.map.pathLine(\n    [\n      {\n        name: \"轨迹0\",\n        path: [\n          [100.340417, 27.376994],\n          [108.426354, 37.827452],\n        ],\n      },\n    ],\n    {\n      strokeStyle: \"green\",\n    }\n  );\n  this.map.pathLine([\n    {\n      name: \"轨迹0\",\n      path: [\n        [108.426354, 37.827452],\n        [113.392174, 31.208439],\n      ],\n    },\n  ]);\n  this.map.pathLine(\n    [\n      {\n        name: \"轨迹0\",\n        path: [\n          [113.392174, 31.208439],\n          [124.905846, 42.232876],\n        ],\n      },\n    ],\n    {\n      strokeStyle: \"pink\",\n    }\n  );\n}\n\n// 拖拽定位 初始化 第一次初始化会默认开启拖拽\nthis.map.initPositionPicker([sucCallBack,failCallBack])\n\n// 结束拖拽\nthis.map.positionPicker.stop();\n\n\n\n\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","source":"_posts/2021/08/基于高德地图jsapi的二次封装.md","raw":"---\ntitle: 基于高德地图jsapi的二次封装\ndate: 2021-08-24 16:54:13\ntags:\n - 地图\n - jsapi\ncategories:\n - 地图\n - jsapi\ndescription:\n---\n\n针对vue、uni等项目的一些常用地图api的二次封装\n\n<!-- more -->\n\n# 申请key\n\n第一步我们要做地图肯定要有这地图对应的key，还不知道怎么生成的话可以点这个查看----->[如何生成高德地图的key](http://baidu.physton.com/?q=%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E7%9A%84key)\n\n# 使用AMapLoader加载高德地图的js\n\n```shell\ncnpm i @amap/amap-jsapi-loader\n```\n> 是的，你没有看错，就用cnpm！npm安装会有各种报错\n\n# 修改map.js\n\n在`map.js`中，我们修改`key`为自己的`key`，并按自己需要去修改插件数组\n\n```js\nimport AMapLoader from '@amap/amap-jsapi-loader';\n\n// 配置地图所需要的插件\nconst mapPlugin = [\n  // 'AMap.ToolBar',\n  // 'AMap.Scale',\n  // 'AMap.AdvancedInfoWindow',\n  // 'AMap.Geolocation',\n  // 'AMap.Transfer',\n  // 'AMap.StationSearch',\n];\n// 地图key\nconst key = 'your key';\n\n// 主题id\nconst styleId = 'your styleId'\n\n// 默认城市号\nconst defaultCityCode = '城市号'  \n\nexport default class Map {\n constructor(opt) {\n    this.map = null;\n    this.initMap(opt);\n  }\n  // 销毁地图\n  destroy() {\n    this.map.destroy();\n  }\n  // 初始化地图\n  initMap({ domId, geolocation }) {\n    return new Promise((resolve, reject) => {\n      AMapLoader.load({\n        key: key, // 申请好的Web端开发者Key，首次调用 load 时必填\n        plugins: mapPlugin, // 需要使用的的插件列表，如比例尺'AMap.Scale'等\n        AMapUI: {\n          // 是否加载 AMapUI，缺省不加载\n          plugins: [], // 需要加载的 AMapUI ui插件\n        },\n      })\n        .then(AMap => {\n          this.map = new AMap.Map(domId, {\n            mapStyle: `amap://styles/${styleId}`,\n          });\n          if (geolocation) {\n            // 初始化定位\n            this.initGetLocation();\n          }\n          if (mapPlugin.length > 0) { // 加载插件\n            this.initMapPlugin(mapPlugin);\n          }\n          resolve();\n        })\n        .catch(e => {\n          console.log(e);\n          reject();\n        });\n    });\n  }\n  // 获取当前定位\n  getLocation() {\n    this.geolocation.getCurrentPosition();\n  }\n  // 初始化定位组件\n  initGetLocation() {\n    this.map.plugin('AMap.Geolocation', () => {\n      this.geolocation = new AMap.Geolocation({\n        enableHighAccuracy: false, //是否使用高精度定位，默认:true\n        timeout: 1000, //超过10秒后停止定位，默认：无穷大\n        maximumAge: 0, //定位结果缓存0毫秒，默认：0\n        convert: true, //自动偏移坐标，偏移后的坐标为高德坐标，默认：true\n        showButton: false, //显示定位按钮，默认：true\n        showMarker: true, //定位成功后在定位到的位置显示点标记，默认：true\n        showCircle: true, //定位成功后用圆圈表示定位精度范围，默认：true\n        panToLocation: true, //定位成功后将定位到的位置作为地图中心点，默认：true\n        zoomToAccuracy: false, //定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false\n      });\n      this.map.addControl(this.geolocation);\n      this.getLocation();// 初始化完成默认调用一次获取定位\n      AMap.event.addListener(this.geolocation, 'complete', onComplete => {\n        console.log(onComplete, '定位成功');\n        this.currentLocation = onComplete; //  存储当前定位\n      }); //返回定位信息\n\n      AMap.event.addListener(geolocation, 'error', onError => {\n        console.log(onError, '定位失败');\n      }); //返回 定位失败\n    });\n  }\n  // 加载插件\n  initMapPlugin(l) {\n    l.forEach(v => {\n      const f = v.split('.')[1];\n      this.map.addControl(new AMap[f]());\n    });\n  }\n  // 画线\n  pathLine(pointList, pathOption) {\n    /**\n     * pointList 为线所要经过的点 格式为\n     * [\n          {\n            name: \"轨迹名\",\n            path: [\n              [100.340417, 27.376994],\n              [108.426354, 37.827452],\n              [113.392174, 31.208439],\n              [124.905846, 42.232876],\n            ],\n          },\n        ],\n     * pathOption 为线条参数\n     * \n     * **/\n    const that = this;\n    let pathLineStyle = {\n      strokeStyle: 'red',\n      lineWidth: 6,\n      dirArrowStyle: true,\n    };\n    Object.assign(pathLineStyle, pathOption);\n    AMapUI.load(['ui/misc/PathSimplifier'], function(PathSimplifier) {\n      var pathSimplifierIns = new PathSimplifier({\n        zIndex: 100,\n        map: that.map, //所属的地图实例\n        getPath: function(pathData, pathIndex) {\n          //返回轨迹数据中的节点坐标信息，[AMap.LngLat, AMap.LngLat...] 或者 [[lng|number,lat|number],...]\n          return pathData.path;\n        },\n        // getHoverTitle: function(pathData, pathIndex, pointIndex) {\n        //   //返回鼠标悬停时显示的信息\n        //   if (pointIndex >= 0) {\n        //     //鼠标悬停在某个轨迹节点上\n        //     return (\n        //       pathData.name + '，点:' + pointIndex + '/' + pathData.path.length\n        //     );\n        //   }\n        //   //鼠标悬停在节点之间的连线上\n        //   return pathData.name + '，点数量' + pathData.path.length;\n        // },\n        renderOptions: {\n          //轨迹线的样式\n          pathLineStyle,\n        },\n      });\n      pathSimplifierIns.setData(pointList);\n    });\n  }\n  // 自定义兴趣点\n  drawMarker(marker) {\n    // marker可传单个点 可传点数组\n    this.map.add(marker);\n  }\n  // 获取自定义内容标记\n  getMarker(position, opt, extData, fn) {\n    /**\n     * position 为位置信息 必传\n     * opt 为用户自定义覆盖物 可传\n     * icon: '//vdata.amap.com/icons/b18/1/2.png', // 添加 Icon 图标 URL\n     * size: new AMap.Size(40, 50),    // 图标尺寸\n     * image: '//webapi.amap.com/theme/v1.3/images/newpc/way_btn2.png',  // Icon的图像\n     * imageOffset: new AMap.Pixel(0, -60),  // 图像相对展示区域的偏移量，适于雪碧图等\n     * imageSize: new AMap.Size(40, 50)   // 根据所设置的大小拉伸或压缩图片\n     * zoom: 13\n     * content:'<div class=\"marker-route marker-marker-bus-from\"></div>'\n     * 更多配置 https://lbs.amap.com/api/javascript-api/reference/overlay#marker\n     * **/\n    let option = {\n      position, // 基点位置\n      offset: new AMap.Pixel(-17, -42), // 相对于基点的\n      clickable: true,\n      extData: extData,\n    };\n    if (opt) {\n      option = { ...option, ...opt };\n    }\n    const marker = new AMap.Marker(option);\n    marker.on('click', e => {\n      // 注册marker的点击事件\n      // console.log(e.target.getExtData());\n      this.map.setZoomAndCenter(10, e.target.getPosition()); // 点击marker点后以 marker点为中心\n      // marker点 点击\n      if (this.lastSelectedMarker) {\n        // 如果存在上个点击点 将上个点击点的icon恢复默认大小\n        const { image } = this.lastSelectedMarker.w.icon.Ce;\n        const icon = this.getMarkerIcon({ image });\n        this.lastSelectedMarker.setIcon(icon);\n      }\n      const { image } = e.target.w.icon.Ce;\n      const newIcon = this.getMarkerIcon({\n        image,\n        setOffset: new AMap.Pixel(-18, -50),\n        size: new AMap.Size(52, 52), // 图标尺寸\n        imageSize: new AMap.Size(48, 48),\n      });\n\n      e.target.setIcon(newIcon);\n      fn(extData);\n      this.lastSelectedMarker = e.target;\n    });\n    return marker;\n  }\n  // 生成marker的图片icon\n  getMarkerIcon(opt) {\n    // opt 必须包含image属性\n    let option = {\n      size: new AMap.Size(40, 40), // 图标尺寸\n      imageSize: new AMap.Size(36, 36),\n    };\n    return new AMap.Icon({ ...option, ...opt });\n  }\n  // 初始化 拖拽选址\n  initPositionPicker([fnSuc, fnFail], position) {\n    // [fnSuc, fnFail], position\n    /***\n     * 入参说明\n     * fn数组 为拖拽事件处理 必传\n     * position 为start的中线点 可不传\n     * **/\n    AMapUI.loadUI(['misc/PositionPicker'], PositionPicker => {\n      this.positionPicker = new PositionPicker({\n        mode: 'dragMap', //设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'\n        map: this.map, //依赖地图对象\n      });\n      //TODO:事件绑定、结果处理等\n      this.positionPicker.on('success', positionResult => {\n        console.log(positionResult, '拖拽 success');\n        // fnSuc(positionResult)\n      });\n      this.positionPicker.on('fail', positionResult => {\n        // 海上或海外无法获得地址信息\n        console.log(positionResult, '拖拽err');\n        // fnFail()\n      });\n      this.positionPicker.start(\n        position ? position : this.currentLocation.position\n      ); // 开启定位  默认以当前点为中心点  有传入 就以传入的为中心点\n    });\n  }\n\n  // 添加搜索框输入提示\n  initAutoComplete() {\n    AMap.plugin('AMap.Autocomplete', ()=> {\n      const {citycode} = this.currentLocation.addressComponent  // 获取当前定位的城市的城市号\n      this.autoComplete = new AMap.Autocomplete({\n        city:citycode?citycode:defaultCityCode\n      });\n    });\n  }\n```\n\n# 使用\n\n在我们需要使用地图的地方\n```js\n// 引入Map\nimport Map from \"@/common/script/map\";\n\n// 初始化\nthis.map = new Map({domId:\"dom的id\",geolocation:true});\n\n// 获取定位 (可以放在你点击获取当前定位的按钮上)\nthis.map.getLocation()\n\n// 输入提示 \nthis.map.initAutoComplete()  // 注册输入提示\n  // 在需要触发的方法里面  this.place为 需要进行模糊匹配的内容\n  this.map.autoComplete.search(this.place,(status,res)=>{\n      console.log(status,res)\n  })\n\n\n\n// 画自定义点 content \ndrawMarker() {\n  const content ='<div>1</div>'\n  const marker = this.map.getMarker([116.39, 39.9],{content});\n  this.map.drawMarker(marker);\n}\n\n// 画自定义点 icon\ndrawMarker(){\n  const icon = this.map.getMarkerIcon({ image: 'you image url' });\n  const marker = this.map.getMarker(\n      [120.3, 31.3],\n      { icon },\n      extData,\n      callback // 传递给marker点 点击触发的回调方法\n    );\n  this.map.drawMarker(marker);\n  \n}\n\n// 画自定义线\ndrawPath() {\n  this.map.pathLine(\n    [\n      {\n        name: \"轨迹0\",\n        path: [\n          [100.340417, 27.376994],\n          [108.426354, 37.827452],\n        ],\n      },\n    ],\n    {\n      strokeStyle: \"green\",\n    }\n  );\n  this.map.pathLine([\n    {\n      name: \"轨迹0\",\n      path: [\n        [108.426354, 37.827452],\n        [113.392174, 31.208439],\n      ],\n    },\n  ]);\n  this.map.pathLine(\n    [\n      {\n        name: \"轨迹0\",\n        path: [\n          [113.392174, 31.208439],\n          [124.905846, 42.232876],\n        ],\n      },\n    ],\n    {\n      strokeStyle: \"pink\",\n    }\n  );\n}\n\n// 拖拽定位 初始化 第一次初始化会默认开启拖拽\nthis.map.initPositionPicker([sucCallBack,failCallBack])\n\n// 结束拖拽\nthis.map.positionPicker.stop();\n\n\n\n\n```\n\n\n<!-- markdownlint-disable MD041 MD002--> ","slug":"2021/08/基于高德地图jsapi的二次封装","published":1,"updated":"2021-09-07T03:51:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pj54h005v1r0q7j95g3tc","content":"<p>针对vue、uni等项目的一些常用地图api的二次封装</p>\n<a id=\"more\"></a>\n\n<h1 id=\"申请key\"><a href=\"#申请key\" class=\"headerlink\" title=\"申请key\"></a>申请key</h1><p>第一步我们要做地图肯定要有这地图对应的key，还不知道怎么生成的话可以点这个查看—–&gt;<a href=\"http://baidu.physton.com/?q=%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E7%9A%84key\" target=\"_blank\" rel=\"noopener\">如何生成高德地图的key</a></p>\n<h1 id=\"使用AMapLoader加载高德地图的js\"><a href=\"#使用AMapLoader加载高德地图的js\" class=\"headerlink\" title=\"使用AMapLoader加载高德地图的js\"></a>使用AMapLoader加载高德地图的js</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i @amap/amap-jsapi-loader</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>是的，你没有看错，就用cnpm！npm安装会有各种报错</p>\n</blockquote>\n<h1 id=\"修改map-js\"><a href=\"#修改map-js\" class=\"headerlink\" title=\"修改map.js\"></a>修改map.js</h1><p>在<code>map.js</code>中，我们修改<code>key</code>为自己的<code>key</code>，并按自己需要去修改插件数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AMapLoader <span class=\"keyword\">from</span> <span class=\"string\">'@amap/amap-jsapi-loader'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置地图所需要的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapPlugin = [</span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.ToolBar',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.Scale',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.AdvancedInfoWindow',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.Geolocation',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.Transfer',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.StationSearch',</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 地图key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">'your key'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主题id</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> styleId = <span class=\"string\">'your styleId'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认城市号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultCityCode = <span class=\"string\">'城市号'</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">constructor</span>(opt) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initMap(opt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 销毁地图</span></span><br><span class=\"line\">  destroy() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map.destroy();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化地图</span></span><br><span class=\"line\">  initMap(&#123; domId, geolocation &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      AMapLoader.load(&#123;</span><br><span class=\"line\">        key: key, <span class=\"comment\">// 申请好的Web端开发者Key，首次调用 load 时必填</span></span><br><span class=\"line\">        plugins: mapPlugin, <span class=\"comment\">// 需要使用的的插件列表，如比例尺'AMap.Scale'等</span></span><br><span class=\"line\">        AMapUI: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 是否加载 AMapUI，缺省不加载</span></span><br><span class=\"line\">          plugins: [], <span class=\"comment\">// 需要加载的 AMapUI ui插件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">AMap</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.map = <span class=\"keyword\">new</span> AMap.Map(domId, &#123;</span><br><span class=\"line\">            mapStyle: <span class=\"string\">`amap://styles/<span class=\"subst\">$&#123;styleId&#125;</span>`</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (geolocation) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化定位</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.initGetLocation();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (mapPlugin.length &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 加载插件</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.initMapPlugin(mapPlugin);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">          reject();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前定位</span></span><br><span class=\"line\">  getLocation() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.geolocation.getCurrentPosition();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化定位组件</span></span><br><span class=\"line\">  initGetLocation() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map.plugin(<span class=\"string\">'AMap.Geolocation'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.geolocation = <span class=\"keyword\">new</span> AMap.Geolocation(&#123;</span><br><span class=\"line\">        enableHighAccuracy: <span class=\"literal\">false</span>, <span class=\"comment\">//是否使用高精度定位，默认:true</span></span><br><span class=\"line\">        timeout: <span class=\"number\">1000</span>, <span class=\"comment\">//超过10秒后停止定位，默认：无穷大</span></span><br><span class=\"line\">        maximumAge: <span class=\"number\">0</span>, <span class=\"comment\">//定位结果缓存0毫秒，默认：0</span></span><br><span class=\"line\">        convert: <span class=\"literal\">true</span>, <span class=\"comment\">//自动偏移坐标，偏移后的坐标为高德坐标，默认：true</span></span><br><span class=\"line\">        showButton: <span class=\"literal\">false</span>, <span class=\"comment\">//显示定位按钮，默认：true</span></span><br><span class=\"line\">        showMarker: <span class=\"literal\">true</span>, <span class=\"comment\">//定位成功后在定位到的位置显示点标记，默认：true</span></span><br><span class=\"line\">        showCircle: <span class=\"literal\">true</span>, <span class=\"comment\">//定位成功后用圆圈表示定位精度范围，默认：true</span></span><br><span class=\"line\">        panToLocation: <span class=\"literal\">true</span>, <span class=\"comment\">//定位成功后将定位到的位置作为地图中心点，默认：true</span></span><br><span class=\"line\">        zoomToAccuracy: <span class=\"literal\">false</span>, <span class=\"comment\">//定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.addControl(<span class=\"keyword\">this</span>.geolocation);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getLocation();<span class=\"comment\">// 初始化完成默认调用一次获取定位</span></span><br><span class=\"line\">      AMap.event.addListener(<span class=\"keyword\">this</span>.geolocation, <span class=\"string\">'complete'</span>, onComplete =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(onComplete, <span class=\"string\">'定位成功'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentLocation = onComplete; <span class=\"comment\">//  存储当前定位</span></span><br><span class=\"line\">      &#125;); <span class=\"comment\">//返回定位信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">      AMap.event.addListener(geolocation, <span class=\"string\">'error'</span>, onError =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(onError, <span class=\"string\">'定位失败'</span>);</span><br><span class=\"line\">      &#125;); <span class=\"comment\">//返回 定位失败</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 加载插件</span></span><br><span class=\"line\">  initMapPlugin(l) &#123;</span><br><span class=\"line\">    l.forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> f = v.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.addControl(<span class=\"keyword\">new</span> AMap[f]());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 画线</span></span><br><span class=\"line\">  pathLine(pointList, pathOption) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * pointList 为线所要经过的点 格式为</span></span><br><span class=\"line\"><span class=\"comment\">     * [</span></span><br><span class=\"line\"><span class=\"comment\">          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: \"轨迹名\",</span></span><br><span class=\"line\"><span class=\"comment\">            path: [</span></span><br><span class=\"line\"><span class=\"comment\">              [100.340417, 27.376994],</span></span><br><span class=\"line\"><span class=\"comment\">              [108.426354, 37.827452],</span></span><br><span class=\"line\"><span class=\"comment\">              [113.392174, 31.208439],</span></span><br><span class=\"line\"><span class=\"comment\">              [124.905846, 42.232876],</span></span><br><span class=\"line\"><span class=\"comment\">            ],</span></span><br><span class=\"line\"><span class=\"comment\">          &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        ],</span></span><br><span class=\"line\"><span class=\"comment\">     * pathOption 为线条参数</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathLineStyle = &#123;</span><br><span class=\"line\">      strokeStyle: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">      lineWidth: <span class=\"number\">6</span>,</span><br><span class=\"line\">      dirArrowStyle: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(pathLineStyle, pathOption);</span><br><span class=\"line\">    AMapUI.load([<span class=\"string\">'ui/misc/PathSimplifier'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">PathSimplifier</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> pathSimplifierIns = <span class=\"keyword\">new</span> PathSimplifier(&#123;</span><br><span class=\"line\">        zIndex: <span class=\"number\">100</span>,</span><br><span class=\"line\">        map: that.map, <span class=\"comment\">//所属的地图实例</span></span><br><span class=\"line\">        getPath: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathData, pathIndex</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//返回轨迹数据中的节点坐标信息，[AMap.LngLat, AMap.LngLat...] 或者 [[lng|number,lat|number],...]</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> pathData.path;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// getHoverTitle: function(pathData, pathIndex, pointIndex) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   //返回鼠标悬停时显示的信息</span></span><br><span class=\"line\">        <span class=\"comment\">//   if (pointIndex &gt;= 0) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     //鼠标悬停在某个轨迹节点上</span></span><br><span class=\"line\">        <span class=\"comment\">//     return (</span></span><br><span class=\"line\">        <span class=\"comment\">//       pathData.name + '，点:' + pointIndex + '/' + pathData.path.length</span></span><br><span class=\"line\">        <span class=\"comment\">//     );</span></span><br><span class=\"line\">        <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//   //鼠标悬停在节点之间的连线上</span></span><br><span class=\"line\">        <span class=\"comment\">//   return pathData.name + '，点数量' + pathData.path.length;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">        renderOptions: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//轨迹线的样式</span></span><br><span class=\"line\">          pathLineStyle,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      pathSimplifierIns.setData(pointList);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义兴趣点</span></span><br><span class=\"line\">  drawMarker(marker) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// marker可传单个点 可传点数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map.add(marker);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取自定义内容标记</span></span><br><span class=\"line\">  getMarker(position, opt, extData, fn) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * position 为位置信息 必传</span></span><br><span class=\"line\"><span class=\"comment\">     * opt 为用户自定义覆盖物 可传</span></span><br><span class=\"line\"><span class=\"comment\">     * icon: '//vdata.amap.com/icons/b18/1/2.png', // 添加 Icon 图标 URL</span></span><br><span class=\"line\"><span class=\"comment\">     * size: new AMap.Size(40, 50),    // 图标尺寸</span></span><br><span class=\"line\"><span class=\"comment\">     * image: '//webapi.amap.com/theme/v1.3/images/newpc/way_btn2.png',  // Icon的图像</span></span><br><span class=\"line\"><span class=\"comment\">     * imageOffset: new AMap.Pixel(0, -60),  // 图像相对展示区域的偏移量，适于雪碧图等</span></span><br><span class=\"line\"><span class=\"comment\">     * imageSize: new AMap.Size(40, 50)   // 根据所设置的大小拉伸或压缩图片</span></span><br><span class=\"line\"><span class=\"comment\">     * zoom: 13</span></span><br><span class=\"line\"><span class=\"comment\">     * content:'&lt;div class=\"marker-route marker-marker-bus-from\"&gt;&lt;/div&gt;'</span></span><br><span class=\"line\"><span class=\"comment\">     * 更多配置 https://lbs.amap.com/api/javascript-api/reference/overlay#marker</span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">      position, <span class=\"comment\">// 基点位置</span></span><br><span class=\"line\">      offset: <span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-17</span>, <span class=\"number\">-42</span>), <span class=\"comment\">// 相对于基点的</span></span><br><span class=\"line\">      clickable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      extData: extData,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opt) &#123;</span><br><span class=\"line\">      option = &#123; ...option, ...opt &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> marker = <span class=\"keyword\">new</span> AMap.Marker(option);</span><br><span class=\"line\">    marker.on(<span class=\"string\">'click'</span>, e =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册marker的点击事件</span></span><br><span class=\"line\">      <span class=\"comment\">// console.log(e.target.getExtData());</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.setZoomAndCenter(<span class=\"number\">10</span>, e.target.getPosition()); <span class=\"comment\">// 点击marker点后以 marker点为中心</span></span><br><span class=\"line\">      <span class=\"comment\">// marker点 点击</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lastSelectedMarker) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在上个点击点 将上个点击点的icon恢复默认大小</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; image &#125; = <span class=\"keyword\">this</span>.lastSelectedMarker.w.icon.Ce;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> icon = <span class=\"keyword\">this</span>.getMarkerIcon(&#123; image &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastSelectedMarker.setIcon(icon);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; image &#125; = e.target.w.icon.Ce;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newIcon = <span class=\"keyword\">this</span>.getMarkerIcon(&#123;</span><br><span class=\"line\">        image,</span><br><span class=\"line\">        setOffset: <span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-18</span>, <span class=\"number\">-50</span>),</span><br><span class=\"line\">        size: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">52</span>, <span class=\"number\">52</span>), <span class=\"comment\">// 图标尺寸</span></span><br><span class=\"line\">        imageSize: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">48</span>, <span class=\"number\">48</span>),</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      e.target.setIcon(newIcon);</span><br><span class=\"line\">      fn(extData);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastSelectedMarker = e.target;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> marker;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 生成marker的图片icon</span></span><br><span class=\"line\">  getMarkerIcon(opt) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// opt 必须包含image属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">      size: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">40</span>, <span class=\"number\">40</span>), <span class=\"comment\">// 图标尺寸</span></span><br><span class=\"line\">      imageSize: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">36</span>, <span class=\"number\">36</span>),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AMap.Icon(&#123; ...option, ...opt &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 拖拽选址</span></span><br><span class=\"line\">  initPositionPicker([fnSuc, fnFail], position) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [fnSuc, fnFail], position</span></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 入参说明</span></span><br><span class=\"line\"><span class=\"comment\">     * fn数组 为拖拽事件处理 必传</span></span><br><span class=\"line\"><span class=\"comment\">     * position 为start的中线点 可不传</span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    AMapUI.loadUI([<span class=\"string\">'misc/PositionPicker'</span>], PositionPicker =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker = <span class=\"keyword\">new</span> PositionPicker(&#123;</span><br><span class=\"line\">        mode: <span class=\"string\">'dragMap'</span>, <span class=\"comment\">//设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'</span></span><br><span class=\"line\">        map: <span class=\"keyword\">this</span>.map, <span class=\"comment\">//依赖地图对象</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//<span class=\"doctag\">TODO:</span>事件绑定、结果处理等</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker.on(<span class=\"string\">'success'</span>, positionResult =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(positionResult, <span class=\"string\">'拖拽 success'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// fnSuc(positionResult)</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker.on(<span class=\"string\">'fail'</span>, positionResult =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 海上或海外无法获得地址信息</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(positionResult, <span class=\"string\">'拖拽err'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// fnFail()</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker.start(</span><br><span class=\"line\">        position ? position : <span class=\"keyword\">this</span>.currentLocation.position</span><br><span class=\"line\">      ); <span class=\"comment\">// 开启定位  默认以当前点为中心点  有传入 就以传入的为中心点</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 添加搜索框输入提示</span></span><br><span class=\"line\">  initAutoComplete() &#123;</span><br><span class=\"line\">    AMap.plugin(<span class=\"string\">'AMap.Autocomplete'</span>, ()=&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;citycode&#125; = <span class=\"keyword\">this</span>.currentLocation.addressComponent  <span class=\"comment\">// 获取当前定位的城市的城市号</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.autoComplete = <span class=\"keyword\">new</span> AMap.Autocomplete(&#123;</span><br><span class=\"line\">        city:citycode?citycode:defaultCityCode</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>在我们需要使用地图的地方</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入Map</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"built_in\">Map</span> <span class=\"keyword\">from</span> <span class=\"string\">\"@/common/script/map\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(&#123;<span class=\"attr\">domId</span>:<span class=\"string\">\"dom的id\"</span>,<span class=\"attr\">geolocation</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取定位 (可以放在你点击获取当前定位的按钮上)</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.getLocation()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入提示 </span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.initAutoComplete()  <span class=\"comment\">// 注册输入提示</span></span><br><span class=\"line\">  <span class=\"comment\">// 在需要触发的方法里面  this.place为 需要进行模糊匹配的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.autoComplete.search(<span class=\"keyword\">this</span>.place,(status,res)=&gt;&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(status,res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画自定义点 content </span></span><br><span class=\"line\">drawMarker() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content =<span class=\"string\">'&lt;div&gt;1&lt;/div&gt;'</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> marker = <span class=\"keyword\">this</span>.map.getMarker([<span class=\"number\">116.39</span>, <span class=\"number\">39.9</span>],&#123;content&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.drawMarker(marker);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画自定义点 icon</span></span><br><span class=\"line\">drawMarker()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> icon = <span class=\"keyword\">this</span>.map.getMarkerIcon(&#123; <span class=\"attr\">image</span>: <span class=\"string\">'you image url'</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> marker = <span class=\"keyword\">this</span>.map.getMarker(</span><br><span class=\"line\">      [<span class=\"number\">120.3</span>, <span class=\"number\">31.3</span>],</span><br><span class=\"line\">      &#123; icon &#125;,</span><br><span class=\"line\">      extData,</span><br><span class=\"line\">      callback <span class=\"comment\">// 传递给marker点 点击触发的回调方法</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.drawMarker(marker);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画自定义线</span></span><br><span class=\"line\">drawPath() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.pathLine(</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"轨迹0\"</span>,</span><br><span class=\"line\">        path: [</span><br><span class=\"line\">          [<span class=\"number\">100.340417</span>, <span class=\"number\">27.376994</span>],</span><br><span class=\"line\">          [<span class=\"number\">108.426354</span>, <span class=\"number\">37.827452</span>],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      strokeStyle: <span class=\"string\">\"green\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.pathLine([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"轨迹0\"</span>,</span><br><span class=\"line\">      path: [</span><br><span class=\"line\">        [<span class=\"number\">108.426354</span>, <span class=\"number\">37.827452</span>],</span><br><span class=\"line\">        [<span class=\"number\">113.392174</span>, <span class=\"number\">31.208439</span>],</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.pathLine(</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"轨迹0\"</span>,</span><br><span class=\"line\">        path: [</span><br><span class=\"line\">          [<span class=\"number\">113.392174</span>, <span class=\"number\">31.208439</span>],</span><br><span class=\"line\">          [<span class=\"number\">124.905846</span>, <span class=\"number\">42.232876</span>],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      strokeStyle: <span class=\"string\">\"pink\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拖拽定位 初始化 第一次初始化会默认开启拖拽</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.initPositionPicker([sucCallBack,failCallBack])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结束拖拽</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.positionPicker.stop();</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002--> ","site":{"data":{}},"excerpt":"<p>针对vue、uni等项目的一些常用地图api的二次封装</p>","more":"<h1 id=\"申请key\"><a href=\"#申请key\" class=\"headerlink\" title=\"申请key\"></a>申请key</h1><p>第一步我们要做地图肯定要有这地图对应的key，还不知道怎么生成的话可以点这个查看—–&gt;<a href=\"http://baidu.physton.com/?q=%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E7%9A%84key\" target=\"_blank\" rel=\"noopener\">如何生成高德地图的key</a></p>\n<h1 id=\"使用AMapLoader加载高德地图的js\"><a href=\"#使用AMapLoader加载高德地图的js\" class=\"headerlink\" title=\"使用AMapLoader加载高德地图的js\"></a>使用AMapLoader加载高德地图的js</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i @amap/amap-jsapi-loader</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>是的，你没有看错，就用cnpm！npm安装会有各种报错</p>\n</blockquote>\n<h1 id=\"修改map-js\"><a href=\"#修改map-js\" class=\"headerlink\" title=\"修改map.js\"></a>修改map.js</h1><p>在<code>map.js</code>中，我们修改<code>key</code>为自己的<code>key</code>，并按自己需要去修改插件数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AMapLoader <span class=\"keyword\">from</span> <span class=\"string\">'@amap/amap-jsapi-loader'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置地图所需要的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapPlugin = [</span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.ToolBar',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.Scale',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.AdvancedInfoWindow',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.Geolocation',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.Transfer',</span></span><br><span class=\"line\">  <span class=\"comment\">// 'AMap.StationSearch',</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 地图key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">'your key'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主题id</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> styleId = <span class=\"string\">'your styleId'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认城市号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultCityCode = <span class=\"string\">'城市号'</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">constructor</span>(opt) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initMap(opt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 销毁地图</span></span><br><span class=\"line\">  destroy() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map.destroy();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化地图</span></span><br><span class=\"line\">  initMap(&#123; domId, geolocation &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      AMapLoader.load(&#123;</span><br><span class=\"line\">        key: key, <span class=\"comment\">// 申请好的Web端开发者Key，首次调用 load 时必填</span></span><br><span class=\"line\">        plugins: mapPlugin, <span class=\"comment\">// 需要使用的的插件列表，如比例尺'AMap.Scale'等</span></span><br><span class=\"line\">        AMapUI: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 是否加载 AMapUI，缺省不加载</span></span><br><span class=\"line\">          plugins: [], <span class=\"comment\">// 需要加载的 AMapUI ui插件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">AMap</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.map = <span class=\"keyword\">new</span> AMap.Map(domId, &#123;</span><br><span class=\"line\">            mapStyle: <span class=\"string\">`amap://styles/<span class=\"subst\">$&#123;styleId&#125;</span>`</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (geolocation) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化定位</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.initGetLocation();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (mapPlugin.length &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 加载插件</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.initMapPlugin(mapPlugin);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">          reject();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前定位</span></span><br><span class=\"line\">  getLocation() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.geolocation.getCurrentPosition();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化定位组件</span></span><br><span class=\"line\">  initGetLocation() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map.plugin(<span class=\"string\">'AMap.Geolocation'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.geolocation = <span class=\"keyword\">new</span> AMap.Geolocation(&#123;</span><br><span class=\"line\">        enableHighAccuracy: <span class=\"literal\">false</span>, <span class=\"comment\">//是否使用高精度定位，默认:true</span></span><br><span class=\"line\">        timeout: <span class=\"number\">1000</span>, <span class=\"comment\">//超过10秒后停止定位，默认：无穷大</span></span><br><span class=\"line\">        maximumAge: <span class=\"number\">0</span>, <span class=\"comment\">//定位结果缓存0毫秒，默认：0</span></span><br><span class=\"line\">        convert: <span class=\"literal\">true</span>, <span class=\"comment\">//自动偏移坐标，偏移后的坐标为高德坐标，默认：true</span></span><br><span class=\"line\">        showButton: <span class=\"literal\">false</span>, <span class=\"comment\">//显示定位按钮，默认：true</span></span><br><span class=\"line\">        showMarker: <span class=\"literal\">true</span>, <span class=\"comment\">//定位成功后在定位到的位置显示点标记，默认：true</span></span><br><span class=\"line\">        showCircle: <span class=\"literal\">true</span>, <span class=\"comment\">//定位成功后用圆圈表示定位精度范围，默认：true</span></span><br><span class=\"line\">        panToLocation: <span class=\"literal\">true</span>, <span class=\"comment\">//定位成功后将定位到的位置作为地图中心点，默认：true</span></span><br><span class=\"line\">        zoomToAccuracy: <span class=\"literal\">false</span>, <span class=\"comment\">//定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.addControl(<span class=\"keyword\">this</span>.geolocation);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getLocation();<span class=\"comment\">// 初始化完成默认调用一次获取定位</span></span><br><span class=\"line\">      AMap.event.addListener(<span class=\"keyword\">this</span>.geolocation, <span class=\"string\">'complete'</span>, onComplete =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(onComplete, <span class=\"string\">'定位成功'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentLocation = onComplete; <span class=\"comment\">//  存储当前定位</span></span><br><span class=\"line\">      &#125;); <span class=\"comment\">//返回定位信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">      AMap.event.addListener(geolocation, <span class=\"string\">'error'</span>, onError =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(onError, <span class=\"string\">'定位失败'</span>);</span><br><span class=\"line\">      &#125;); <span class=\"comment\">//返回 定位失败</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 加载插件</span></span><br><span class=\"line\">  initMapPlugin(l) &#123;</span><br><span class=\"line\">    l.forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> f = v.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.addControl(<span class=\"keyword\">new</span> AMap[f]());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 画线</span></span><br><span class=\"line\">  pathLine(pointList, pathOption) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * pointList 为线所要经过的点 格式为</span></span><br><span class=\"line\"><span class=\"comment\">     * [</span></span><br><span class=\"line\"><span class=\"comment\">          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: \"轨迹名\",</span></span><br><span class=\"line\"><span class=\"comment\">            path: [</span></span><br><span class=\"line\"><span class=\"comment\">              [100.340417, 27.376994],</span></span><br><span class=\"line\"><span class=\"comment\">              [108.426354, 37.827452],</span></span><br><span class=\"line\"><span class=\"comment\">              [113.392174, 31.208439],</span></span><br><span class=\"line\"><span class=\"comment\">              [124.905846, 42.232876],</span></span><br><span class=\"line\"><span class=\"comment\">            ],</span></span><br><span class=\"line\"><span class=\"comment\">          &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        ],</span></span><br><span class=\"line\"><span class=\"comment\">     * pathOption 为线条参数</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathLineStyle = &#123;</span><br><span class=\"line\">      strokeStyle: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">      lineWidth: <span class=\"number\">6</span>,</span><br><span class=\"line\">      dirArrowStyle: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(pathLineStyle, pathOption);</span><br><span class=\"line\">    AMapUI.load([<span class=\"string\">'ui/misc/PathSimplifier'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">PathSimplifier</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> pathSimplifierIns = <span class=\"keyword\">new</span> PathSimplifier(&#123;</span><br><span class=\"line\">        zIndex: <span class=\"number\">100</span>,</span><br><span class=\"line\">        map: that.map, <span class=\"comment\">//所属的地图实例</span></span><br><span class=\"line\">        getPath: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathData, pathIndex</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//返回轨迹数据中的节点坐标信息，[AMap.LngLat, AMap.LngLat...] 或者 [[lng|number,lat|number],...]</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> pathData.path;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// getHoverTitle: function(pathData, pathIndex, pointIndex) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   //返回鼠标悬停时显示的信息</span></span><br><span class=\"line\">        <span class=\"comment\">//   if (pointIndex &gt;= 0) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     //鼠标悬停在某个轨迹节点上</span></span><br><span class=\"line\">        <span class=\"comment\">//     return (</span></span><br><span class=\"line\">        <span class=\"comment\">//       pathData.name + '，点:' + pointIndex + '/' + pathData.path.length</span></span><br><span class=\"line\">        <span class=\"comment\">//     );</span></span><br><span class=\"line\">        <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//   //鼠标悬停在节点之间的连线上</span></span><br><span class=\"line\">        <span class=\"comment\">//   return pathData.name + '，点数量' + pathData.path.length;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">        renderOptions: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//轨迹线的样式</span></span><br><span class=\"line\">          pathLineStyle,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      pathSimplifierIns.setData(pointList);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义兴趣点</span></span><br><span class=\"line\">  drawMarker(marker) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// marker可传单个点 可传点数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map.add(marker);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取自定义内容标记</span></span><br><span class=\"line\">  getMarker(position, opt, extData, fn) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * position 为位置信息 必传</span></span><br><span class=\"line\"><span class=\"comment\">     * opt 为用户自定义覆盖物 可传</span></span><br><span class=\"line\"><span class=\"comment\">     * icon: '//vdata.amap.com/icons/b18/1/2.png', // 添加 Icon 图标 URL</span></span><br><span class=\"line\"><span class=\"comment\">     * size: new AMap.Size(40, 50),    // 图标尺寸</span></span><br><span class=\"line\"><span class=\"comment\">     * image: '//webapi.amap.com/theme/v1.3/images/newpc/way_btn2.png',  // Icon的图像</span></span><br><span class=\"line\"><span class=\"comment\">     * imageOffset: new AMap.Pixel(0, -60),  // 图像相对展示区域的偏移量，适于雪碧图等</span></span><br><span class=\"line\"><span class=\"comment\">     * imageSize: new AMap.Size(40, 50)   // 根据所设置的大小拉伸或压缩图片</span></span><br><span class=\"line\"><span class=\"comment\">     * zoom: 13</span></span><br><span class=\"line\"><span class=\"comment\">     * content:'&lt;div class=\"marker-route marker-marker-bus-from\"&gt;&lt;/div&gt;'</span></span><br><span class=\"line\"><span class=\"comment\">     * 更多配置 https://lbs.amap.com/api/javascript-api/reference/overlay#marker</span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">      position, <span class=\"comment\">// 基点位置</span></span><br><span class=\"line\">      offset: <span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-17</span>, <span class=\"number\">-42</span>), <span class=\"comment\">// 相对于基点的</span></span><br><span class=\"line\">      clickable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      extData: extData,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opt) &#123;</span><br><span class=\"line\">      option = &#123; ...option, ...opt &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> marker = <span class=\"keyword\">new</span> AMap.Marker(option);</span><br><span class=\"line\">    marker.on(<span class=\"string\">'click'</span>, e =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册marker的点击事件</span></span><br><span class=\"line\">      <span class=\"comment\">// console.log(e.target.getExtData());</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.setZoomAndCenter(<span class=\"number\">10</span>, e.target.getPosition()); <span class=\"comment\">// 点击marker点后以 marker点为中心</span></span><br><span class=\"line\">      <span class=\"comment\">// marker点 点击</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lastSelectedMarker) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在上个点击点 将上个点击点的icon恢复默认大小</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; image &#125; = <span class=\"keyword\">this</span>.lastSelectedMarker.w.icon.Ce;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> icon = <span class=\"keyword\">this</span>.getMarkerIcon(&#123; image &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastSelectedMarker.setIcon(icon);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; image &#125; = e.target.w.icon.Ce;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newIcon = <span class=\"keyword\">this</span>.getMarkerIcon(&#123;</span><br><span class=\"line\">        image,</span><br><span class=\"line\">        setOffset: <span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-18</span>, <span class=\"number\">-50</span>),</span><br><span class=\"line\">        size: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">52</span>, <span class=\"number\">52</span>), <span class=\"comment\">// 图标尺寸</span></span><br><span class=\"line\">        imageSize: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">48</span>, <span class=\"number\">48</span>),</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      e.target.setIcon(newIcon);</span><br><span class=\"line\">      fn(extData);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastSelectedMarker = e.target;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> marker;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 生成marker的图片icon</span></span><br><span class=\"line\">  getMarkerIcon(opt) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// opt 必须包含image属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">      size: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">40</span>, <span class=\"number\">40</span>), <span class=\"comment\">// 图标尺寸</span></span><br><span class=\"line\">      imageSize: <span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">36</span>, <span class=\"number\">36</span>),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AMap.Icon(&#123; ...option, ...opt &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 拖拽选址</span></span><br><span class=\"line\">  initPositionPicker([fnSuc, fnFail], position) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [fnSuc, fnFail], position</span></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 入参说明</span></span><br><span class=\"line\"><span class=\"comment\">     * fn数组 为拖拽事件处理 必传</span></span><br><span class=\"line\"><span class=\"comment\">     * position 为start的中线点 可不传</span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    AMapUI.loadUI([<span class=\"string\">'misc/PositionPicker'</span>], PositionPicker =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker = <span class=\"keyword\">new</span> PositionPicker(&#123;</span><br><span class=\"line\">        mode: <span class=\"string\">'dragMap'</span>, <span class=\"comment\">//设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'</span></span><br><span class=\"line\">        map: <span class=\"keyword\">this</span>.map, <span class=\"comment\">//依赖地图对象</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//<span class=\"doctag\">TODO:</span>事件绑定、结果处理等</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker.on(<span class=\"string\">'success'</span>, positionResult =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(positionResult, <span class=\"string\">'拖拽 success'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// fnSuc(positionResult)</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker.on(<span class=\"string\">'fail'</span>, positionResult =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 海上或海外无法获得地址信息</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(positionResult, <span class=\"string\">'拖拽err'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// fnFail()</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positionPicker.start(</span><br><span class=\"line\">        position ? position : <span class=\"keyword\">this</span>.currentLocation.position</span><br><span class=\"line\">      ); <span class=\"comment\">// 开启定位  默认以当前点为中心点  有传入 就以传入的为中心点</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 添加搜索框输入提示</span></span><br><span class=\"line\">  initAutoComplete() &#123;</span><br><span class=\"line\">    AMap.plugin(<span class=\"string\">'AMap.Autocomplete'</span>, ()=&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;citycode&#125; = <span class=\"keyword\">this</span>.currentLocation.addressComponent  <span class=\"comment\">// 获取当前定位的城市的城市号</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.autoComplete = <span class=\"keyword\">new</span> AMap.Autocomplete(&#123;</span><br><span class=\"line\">        city:citycode?citycode:defaultCityCode</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>在我们需要使用地图的地方</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入Map</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"built_in\">Map</span> <span class=\"keyword\">from</span> <span class=\"string\">\"@/common/script/map\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(&#123;<span class=\"attr\">domId</span>:<span class=\"string\">\"dom的id\"</span>,<span class=\"attr\">geolocation</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取定位 (可以放在你点击获取当前定位的按钮上)</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.getLocation()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入提示 </span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.initAutoComplete()  <span class=\"comment\">// 注册输入提示</span></span><br><span class=\"line\">  <span class=\"comment\">// 在需要触发的方法里面  this.place为 需要进行模糊匹配的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.autoComplete.search(<span class=\"keyword\">this</span>.place,(status,res)=&gt;&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(status,res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画自定义点 content </span></span><br><span class=\"line\">drawMarker() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content =<span class=\"string\">'&lt;div&gt;1&lt;/div&gt;'</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> marker = <span class=\"keyword\">this</span>.map.getMarker([<span class=\"number\">116.39</span>, <span class=\"number\">39.9</span>],&#123;content&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.drawMarker(marker);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画自定义点 icon</span></span><br><span class=\"line\">drawMarker()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> icon = <span class=\"keyword\">this</span>.map.getMarkerIcon(&#123; <span class=\"attr\">image</span>: <span class=\"string\">'you image url'</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> marker = <span class=\"keyword\">this</span>.map.getMarker(</span><br><span class=\"line\">      [<span class=\"number\">120.3</span>, <span class=\"number\">31.3</span>],</span><br><span class=\"line\">      &#123; icon &#125;,</span><br><span class=\"line\">      extData,</span><br><span class=\"line\">      callback <span class=\"comment\">// 传递给marker点 点击触发的回调方法</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.drawMarker(marker);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画自定义线</span></span><br><span class=\"line\">drawPath() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.pathLine(</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"轨迹0\"</span>,</span><br><span class=\"line\">        path: [</span><br><span class=\"line\">          [<span class=\"number\">100.340417</span>, <span class=\"number\">27.376994</span>],</span><br><span class=\"line\">          [<span class=\"number\">108.426354</span>, <span class=\"number\">37.827452</span>],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      strokeStyle: <span class=\"string\">\"green\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.pathLine([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"轨迹0\"</span>,</span><br><span class=\"line\">      path: [</span><br><span class=\"line\">        [<span class=\"number\">108.426354</span>, <span class=\"number\">37.827452</span>],</span><br><span class=\"line\">        [<span class=\"number\">113.392174</span>, <span class=\"number\">31.208439</span>],</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map.pathLine(</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"轨迹0\"</span>,</span><br><span class=\"line\">        path: [</span><br><span class=\"line\">          [<span class=\"number\">113.392174</span>, <span class=\"number\">31.208439</span>],</span><br><span class=\"line\">          [<span class=\"number\">124.905846</span>, <span class=\"number\">42.232876</span>],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      strokeStyle: <span class=\"string\">\"pink\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拖拽定位 初始化 第一次初始化会默认开启拖拽</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.initPositionPicker([sucCallBack,failCallBack])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结束拖拽</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.map.positionPicker.stop();</span><br></pre></td></tr></table></figure>\n\n\n<!-- markdownlint-disable MD041 MD002-->"}],"PostAsset":[{"_id":"source/_posts/2020/07/实现一个简易Vuex/1.png","slug":"1.png","post":"ckx7pj52y00181r0qhynrboqi","modified":1,"renderable":0},{"_id":"source/_posts/2021/08/支付宝小程序前端授权/authFlow.png","slug":"authFlow.png","post":"ckx7pj548004u1r0qaxc7cdyj","modified":1,"renderable":0},{"_id":"source/_posts/2020/05/hexo简单使用说明/result@2.png","post":"ckx7pj51300051r0q0vy40mrj","slug":"result@2.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/05/在vue中使用graphql/1.png","slug":"1.png","post":"ckx7pj51m000e1r0qaikzef4b","modified":1,"renderable":0},{"_id":"source/_posts/2020/05/不好好工作会怎么样呢/1.jpg","post":"ckx7pj51900081r0qdm7hfyez","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/05/不好好工作会怎么样呢/1.mp4","slug":"1.mp4","post":"ckx7pj51900081r0qdm7hfyez","modified":1,"renderable":0},{"_id":"source/_posts/2020/05/从零开始手撸vue源码/2-1.png","post":"ckx7pj51c00091r0q6yuv1mkq","slug":"2-1.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/05/从零开始手撸vue源码/3-1.png","post":"ckx7pj51c00091r0q6yuv1mkq","slug":"3-1.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/实现一个简易Vuex/2.png","post":"ckx7pj52y00181r0qhynrboqi","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/12/BFC布局/1.png","post":"ckx7pj532001j1r0qdu98ftxq","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/12/BFC布局/2.png","post":"ckx7pj532001j1r0qdu98ftxq","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/12/BFC布局/3.png","post":"ckx7pj532001j1r0qdu98ftxq","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/1.png","slug":"1.png","post":"ckx7pj524000p1r0q1ldf3l9v","modified":1,"renderable":0},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/2.png","post":"ckx7pj524000p1r0q1ldf3l9v","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/3.png","slug":"3.png","post":"ckx7pj524000p1r0q1ldf3l9v","modified":1,"renderable":0},{"_id":"source/_posts/2020/07/Vue中key的作用和工作原理/4.png","post":"ckx7pj524000p1r0q1ldf3l9v","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/1.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/2.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/3.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/4.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/5.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/6.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/7.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020/07/苹果手机自定义siri回答/8.jpg","post":"ckx7pj537001m1r0q050oaalf","slug":"8.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckx7pj50y00041r0qh69mfd2m","category_id":"ckx7pj51600061r0q4a9kgcdg","_id":"ckx7pj51u000g1r0q39vj9fa6"},{"post_id":"ckx7pj51300051r0q0vy40mrj","category_id":"ckx7pj51j000b1r0qbfqlcge6","_id":"ckx7pj523000m1r0q4qmyb8rq"},{"post_id":"ckx7pj51900081r0qdm7hfyez","category_id":"ckx7pj51v000h1r0qbca69716","_id":"ckx7pj52c000s1r0q81xe725k"},{"post_id":"ckx7pj51g000a1r0q1ckc3p4v","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj52r00101r0qf274dpnw"},{"post_id":"ckx7pj526000r1r0q0s2yau67","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj52s00141r0q12pn1hti"},{"post_id":"ckx7pj52r00121r0qaohqetau","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj532001c1r0q6cwy5gy0"},{"post_id":"ckx7pj52s00151r0q4z8p4j82","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj532001f1r0qadzl96by"},{"post_id":"ckx7pj52y00181r0qhynrboqi","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj533001k1r0qcnk65ngm"},{"post_id":"ckx7pj532001e1r0qg99i7946","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53g001r1r0q8ytk5lj6"},{"post_id":"ckx7pj537001m1r0q050oaalf","category_id":"ckx7pj51v000h1r0qbca69716","_id":"ckx7pj53k001x1r0q38adbnw0"},{"post_id":"ckx7pj524000p1r0q1ldf3l9v","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53l00201r0qbegobow8"},{"post_id":"ckx7pj524000p1r0q1ldf3l9v","category_id":"ckx7pj532001h1r0q024b8qql","_id":"ckx7pj53l00241r0q4k8wh89i"},{"post_id":"ckx7pj52c000v1r0qe4k1eio4","category_id":"ckx7pj53d001o1r0q6rbqef8d","_id":"ckx7pj53m00281r0q0al3cmer"},{"post_id":"ckx7pj53h001t1r0q026q86y2","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53n002b1r0q5ik03xn5"},{"post_id":"ckx7pj53j001w1r0q0eev99yz","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53n002g1r0qfnpeb9io"},{"post_id":"ckx7pj53k001z1r0q419222on","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53n002j1r0qhcea6n44"},{"post_id":"ckx7pj51m000e1r0qaikzef4b","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53o002o1r0qbrlgd23f"},{"post_id":"ckx7pj51m000e1r0qaikzef4b","category_id":"ckx7pj53h001v1r0q2z8y3t64","_id":"ckx7pj53p002r1r0q48klfwj1"},{"post_id":"ckx7pj53l00231r0q7fgq3yw7","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53q002w1r0qe22f6glq"},{"post_id":"ckx7pj53m00271r0qbqax996q","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53q002z1r0qbhmt5jjw"},{"post_id":"ckx7pj52l000x1r0qe8o8eqsl","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53s00341r0qfika9v1z"},{"post_id":"ckx7pj52l000x1r0qe8o8eqsl","category_id":"ckx7pj532001h1r0q024b8qql","_id":"ckx7pj53s00371r0qbc3kfyeb"},{"post_id":"ckx7pj51q000f1r0q6ka302xt","category_id":"ckx7pj52r000z1r0q4g3tei7r","_id":"ckx7pj53t003c1r0qck544dmg"},{"post_id":"ckx7pj51q000f1r0q6ka302xt","category_id":"ckx7pj53n002c1r0q6oa8fxla","_id":"ckx7pj53u003f1r0qelhkcbio"},{"post_id":"ckx7pj51z000l1r0q3rd56kjf","category_id":"ckx7pj53100191r0qdfgk8dvp","_id":"ckx7pj53v003k1r0q87nq7a2b"},{"post_id":"ckx7pj51z000l1r0q3rd56kjf","category_id":"ckx7pj53n002k1r0q8khjdjlg","_id":"ckx7pj53w003n1r0qdfoe1gh4"},{"post_id":"ckx7pj53q002y1r0qeo9a2dho","category_id":"ckx7pj53d001o1r0q6rbqef8d","_id":"ckx7pj53x003r1r0qgcob1whz"},{"post_id":"ckx7pj531001b1r0q22fv0upe","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj53z003v1r0qc6ef1szc"},{"post_id":"ckx7pj531001b1r0q22fv0upe","category_id":"ckx7pj532001h1r0q024b8qql","_id":"ckx7pj53z003y1r0qancv0gqj"},{"post_id":"ckx7pj532001j1r0qdu98ftxq","category_id":"ckx7pj53q00311r0q8r576zhb","_id":"ckx7pj54100431r0q23jncj6l"},{"post_id":"ckx7pj53f001q1r0q2v2z75gx","category_id":"ckx7pj53q00311r0q8r576zhb","_id":"ckx7pj54100461r0q0l6r4qoc"},{"post_id":"ckx7pj53n002f1r0qhgmp2tz5","category_id":"ckx7pj53x003s1r0q2znz8fex","_id":"ckx7pj542004a1r0q92l7cqz2"},{"post_id":"ckx7pj54000421r0qhiuqeqxn","category_id":"ckx7pj53x003s1r0q2znz8fex","_id":"ckx7pj543004d1r0qc2jchasg"},{"post_id":"ckx7pj53n002i1r0qbzjm9fnu","category_id":"ckx7pj54000401r0q8ghg2pl0","_id":"ckx7pj543004i1r0qd4ou4yos"},{"post_id":"ckx7pj53o002q1r0qd7j3es85","category_id":"ckx7pj54000401r0q8ghg2pl0","_id":"ckx7pj544004m1r0qaz4g8456"},{"post_id":"ckx7pj53p002v1r0qh3khehtw","category_id":"ckx7pj53x003s1r0q2znz8fex","_id":"ckx7pj548004s1r0q9o8i2v9b"},{"post_id":"ckx7pj53s00361r0q4rna2x87","category_id":"ckx7pj53x003s1r0q2znz8fex","_id":"ckx7pj54a00521r0q6irehfb9"},{"post_id":"ckx7pj53s003b1r0q7iuhf9j5","category_id":"ckx7pj549004x1r0qdgm4dp05","_id":"ckx7pj54c00591r0q2t70637p"},{"post_id":"ckx7pj53t003e1r0q5yfia6xm","category_id":"ckx7pj523000n1r0q25ug5izo","_id":"ckx7pj54d005g1r0qh1na6n2v"},{"post_id":"ckx7pj53t003e1r0q5yfia6xm","category_id":"ckx7pj54a00531r0q3fo9czqo","_id":"ckx7pj54f005k1r0q2bcqbyc7"},{"post_id":"ckx7pj53v003m1r0qdr5uhoce","category_id":"ckx7pj54d005i1r0q1zo1blev","_id":"ckx7pj54h005t1r0qb27o2b9w"},{"post_id":"ckx7pj53m002a1r0q4s4ca5be","category_id":"ckx7pj53u003h1r0qa0ymbrti","_id":"ckx7pj54m005y1r0q0dzi37su"},{"post_id":"ckx7pj53m002a1r0q4s4ca5be","category_id":"ckx7pj54f005n1r0q25ec3xs6","_id":"ckx7pj54m00601r0q2ck53ycv"},{"post_id":"ckx7pj53x003q1r0q66k15vlo","category_id":"ckx7pj549004x1r0qdgm4dp05","_id":"ckx7pj54m00631r0q03ypbjua"},{"post_id":"ckx7pj53y003u1r0qh9kmhoq8","category_id":"ckx7pj54m005x1r0q8hdwclje","_id":"ckx7pj54o00671r0q96st8hsu"},{"post_id":"ckx7pj53z003x1r0q5r6k5w3z","category_id":"ckx7pj54m00641r0q08ko39v4","_id":"ckx7pj54p006c1r0q5o26c322"},{"post_id":"ckx7pj54100451r0qca78f0bn","category_id":"ckx7pj54m00641r0q08ko39v4","_id":"ckx7pj54q006f1r0q4ocufwxz"},{"post_id":"ckx7pj54200491r0q0gyga1kr","category_id":"ckx7pj54m00641r0q08ko39v4","_id":"ckx7pj54q006k1r0q785pb32l"},{"post_id":"ckx7pj542004c1r0q4svkhp6q","category_id":"ckx7pj54d005i1r0q1zo1blev","_id":"ckx7pj54r006o1r0qdten0ge5"},{"post_id":"ckx7pj543004h1r0q1o1acmsz","category_id":"ckx7pj54m005x1r0q8hdwclje","_id":"ckx7pj54v006s1r0q077x3fne"},{"post_id":"ckx7pj543004k1r0qh8834bld","category_id":"ckx7pj54d005i1r0q1zo1blev","_id":"ckx7pj54v006v1r0qegybdzjx"},{"post_id":"ckx7pj544004o1r0qbs6jfhhz","category_id":"ckx7pj54u006r1r0qezn69ou5","_id":"ckx7pj54v006z1r0q6mlz1urx"},{"post_id":"ckx7pj53r00331r0q60mg3238","category_id":"ckx7pj54000401r0q8ghg2pl0","_id":"ckx7pj54w00731r0qe0z3cj4e"},{"post_id":"ckx7pj53r00331r0q60mg3238","category_id":"ckx7pj54v006w1r0q5jrs7yrl","_id":"ckx7pj54w00751r0q7hw5e0e3"},{"post_id":"ckx7pj546004q1r0qb7n51yli","category_id":"ckx7pj54v00701r0q2jbbdnva","_id":"ckx7pj54w00791r0q5e4e24br"},{"post_id":"ckx7pj548004u1r0qaxc7cdyj","category_id":"ckx7pj54v00701r0q2jbbdnva","_id":"ckx7pj54w007d1r0q4vd18h54"},{"post_id":"ckx7pj549004w1r0qd4e97is2","category_id":"ckx7pj54w00781r0qb2wxaa1y","_id":"ckx7pj54w007h1r0q1hwn5tpl"},{"post_id":"ckx7pj53u003j1r0qcr9xcxs0","category_id":"ckx7pj54c005c1r0qbqgo595n","_id":"ckx7pj54y00821r0q0281bm8b"},{"post_id":"ckx7pj53u003j1r0qcr9xcxs0","category_id":"ckx7pj54x007v1r0qc7mi42wk","_id":"ckx7pj54y00841r0q9gwfhhll"},{"post_id":"ckx7pj549004z1r0qas4n6dvg","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj553008q1r0q96yb1eyw"},{"post_id":"ckx7pj549004z1r0qas4n6dvg","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj553008r1r0qbcyqgg46"},{"post_id":"ckx7pj54a00511r0qdl4c8vsc","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj553008t1r0qcun5ab3y"},{"post_id":"ckx7pj54a00511r0qdl4c8vsc","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj553008w1r0qgieu6rki"},{"post_id":"ckx7pj54a00551r0qdhp3d3n3","category_id":"ckx7pj54c005c1r0qbqgo595n","_id":"ckx7pj55400901r0qew2e3j2o"},{"post_id":"ckx7pj54a00551r0qdhp3d3n3","category_id":"ckx7pj553008p1r0qachn0vem","_id":"ckx7pj55400911r0q39zzdno5"},{"post_id":"ckx7pj54b00571r0q7w3z63dv","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj55400951r0qcx2b36n9"},{"post_id":"ckx7pj54b00571r0q7w3z63dv","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj55400971r0qgs9chdwz"},{"post_id":"ckx7pj54c005b1r0qfdsuccyw","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj554009a1r0qbtg630h8"},{"post_id":"ckx7pj54c005b1r0qfdsuccyw","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj554009b1r0q5mus2300"},{"post_id":"ckx7pj54c005e1r0qc26e6uwl","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj554009f1r0qg9mwdby7"},{"post_id":"ckx7pj54c005e1r0qc26e6uwl","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj555009h1r0qf0cg8u7q"},{"post_id":"ckx7pj54d005f1r0qfw12cn4q","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj555009k1r0q3lrb8wlu"},{"post_id":"ckx7pj54d005f1r0qfw12cn4q","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj555009l1r0qdvu1d6u6"},{"post_id":"ckx7pj54e005j1r0q3df75bed","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj555009p1r0q1gp9hgw8"},{"post_id":"ckx7pj54e005j1r0q3df75bed","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj555009r1r0qd0rqck54"},{"post_id":"ckx7pj54f005l1r0q8bfv78q6","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj555009u1r0qdksq9zpc"},{"post_id":"ckx7pj54f005l1r0q8bfv78q6","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj556009v1r0q7tzo14bs"},{"post_id":"ckx7pj54g005o1r0q5hcpchak","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj556009z1r0q36z80cvt"},{"post_id":"ckx7pj54g005o1r0q5hcpchak","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj55600a11r0qafb1d6bd"},{"post_id":"ckx7pj54g005q1r0qhc0j227s","category_id":"ckx7pj54w007e1r0q0gceb22d","_id":"ckx7pj55600a31r0q0tr5hl6x"},{"post_id":"ckx7pj54g005q1r0qhc0j227s","category_id":"ckx7pj551008j1r0q0616158j","_id":"ckx7pj55600a41r0qe3918niv"},{"post_id":"ckx7pj54h005v1r0q7j95g3tc","category_id":"ckx7pj54z008f1r0qhq21dqw8","_id":"ckx7pj55600a71r0q3rrm9z73"},{"post_id":"ckx7pj54h005v1r0q7j95g3tc","category_id":"ckx7pj556009y1r0q5xhchb4x","_id":"ckx7pj55600a91r0q5xo69nn5"}],"PostTag":[{"post_id":"ckx7pj50y00041r0qh69mfd2m","tag_id":"ckx7pj51800071r0q99ig6ail","_id":"ckx7pj51m000d1r0q0ml92cff"},{"post_id":"ckx7pj51300051r0q0vy40mrj","tag_id":"ckx7pj51l000c1r0q2pvq4h2b","_id":"ckx7pj51y000k1r0q33frej8o"},{"post_id":"ckx7pj51900081r0qdm7hfyez","tag_id":"ckx7pj51w000i1r0qddg97wmt","_id":"ckx7pj526000q1r0q4t55ervn"},{"post_id":"ckx7pj51c00091r0q6yuv1mkq","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj52i000w1r0q78nb0nrm"},{"post_id":"ckx7pj526000r1r0q0s2yau67","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj52r000y1r0qd5r0gkce"},{"post_id":"ckx7pj51g000a1r0q1ckc3p4v","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj52s00131r0q9hz6dvuv"},{"post_id":"ckx7pj52r00121r0qaohqetau","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj52w00161r0q68f0becx"},{"post_id":"ckx7pj52s00151r0q4z8p4j82","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj531001a1r0q9yyqh8fc"},{"post_id":"ckx7pj52y00181r0qhynrboqi","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj532001d1r0qeonccttd"},{"post_id":"ckx7pj51m000e1r0qaikzef4b","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj532001i1r0q9bux5x4q"},{"post_id":"ckx7pj51m000e1r0qaikzef4b","tag_id":"ckx7pj52w00171r0q370e55by","_id":"ckx7pj536001l1r0q6s6s8swp"},{"post_id":"ckx7pj532001e1r0qg99i7946","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53e001p1r0q72nhgjp0"},{"post_id":"ckx7pj537001m1r0q050oaalf","tag_id":"ckx7pj51w000i1r0qddg97wmt","_id":"ckx7pj53h001s1r0q2x48eazp"},{"post_id":"ckx7pj51q000f1r0q6ka302xt","tag_id":"ckx7pj532001g1r0q12ta1x0u","_id":"ckx7pj53k001y1r0qgl0m5i82"},{"post_id":"ckx7pj51q000f1r0q6ka302xt","tag_id":"ckx7pj53b001n1r0qc1g0ezp8","_id":"ckx7pj53l00211r0qdgoj4rei"},{"post_id":"ckx7pj53h001t1r0q026q86y2","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53m00261r0q7l8v2a2x"},{"post_id":"ckx7pj53j001w1r0q0eev99yz","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53m00291r0q14iafh30"},{"post_id":"ckx7pj53k001z1r0q419222on","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53n002e1r0q4cvme4sp"},{"post_id":"ckx7pj53l00231r0q7fgq3yw7","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53n002h1r0q3k9k45qq"},{"post_id":"ckx7pj53m00271r0qbqax996q","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53o002m1r0qdbf87fxu"},{"post_id":"ckx7pj51z000l1r0q3rd56kjf","tag_id":"ckx7pj53h001u1r0qc7in4l81","_id":"ckx7pj53o002p1r0qeon4a924"},{"post_id":"ckx7pj51z000l1r0q3rd56kjf","tag_id":"ckx7pj53l00221r0q1cki9i7o","_id":"ckx7pj53p002s1r0qfb9cfkzb"},{"post_id":"ckx7pj524000p1r0q1ldf3l9v","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53q002x1r0qg5nncmo3"},{"post_id":"ckx7pj524000p1r0q1ldf3l9v","tag_id":"ckx7pj53n002d1r0qd6ez7auh","_id":"ckx7pj53q00301r0qhaftgijo"},{"post_id":"ckx7pj52c000v1r0qe4k1eio4","tag_id":"ckx7pj53o002l1r0q415hbouk","_id":"ckx7pj53s00351r0q4xlhdwaw"},{"post_id":"ckx7pj52l000x1r0qe8o8eqsl","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53s00381r0q6y6w5buu"},{"post_id":"ckx7pj52l000x1r0qe8o8eqsl","tag_id":"ckx7pj53n002d1r0qd6ez7auh","_id":"ckx7pj53t003d1r0q191te6rx"},{"post_id":"ckx7pj53q002y1r0qeo9a2dho","tag_id":"ckx7pj53o002l1r0q415hbouk","_id":"ckx7pj53u003g1r0qhjih42es"},{"post_id":"ckx7pj531001b1r0q22fv0upe","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53v003l1r0qc15o00yt"},{"post_id":"ckx7pj531001b1r0q22fv0upe","tag_id":"ckx7pj53n002d1r0qd6ez7auh","_id":"ckx7pj53x003o1r0qhq2pajdf"},{"post_id":"ckx7pj532001j1r0qdu98ftxq","tag_id":"ckx7pj53s00391r0qe06jb5ss","_id":"ckx7pj53y003t1r0q4fci5cbx"},{"post_id":"ckx7pj53t003e1r0q5yfia6xm","tag_id":"ckx7pj523000o1r0qgu6v6vaf","_id":"ckx7pj53z003w1r0qb1rv7vwj"},{"post_id":"ckx7pj53t003e1r0q5yfia6xm","tag_id":"ckx7pj53l00221r0q1cki9i7o","_id":"ckx7pj54000411r0qdrk98nse"},{"post_id":"ckx7pj53f001q1r0q2v2z75gx","tag_id":"ckx7pj53s00391r0qe06jb5ss","_id":"ckx7pj54100441r0qdaj73fc7"},{"post_id":"ckx7pj53m002a1r0q4s4ca5be","tag_id":"ckx7pj53x003p1r0qebjgc9xw","_id":"ckx7pj542004b1r0qcxovf3ov"},{"post_id":"ckx7pj53m002a1r0q4s4ca5be","tag_id":"ckx7pj53z003z1r0q1gsk9xu5","_id":"ckx7pj543004e1r0q9tstapd6"},{"post_id":"ckx7pj53n002f1r0qhgmp2tz5","tag_id":"ckx7pj54100471r0q2n3zen17","_id":"ckx7pj543004j1r0qexr8csql"},{"post_id":"ckx7pj53n002i1r0qbzjm9fnu","tag_id":"ckx7pj543004g1r0q17g2hlqo","_id":"ckx7pj546004p1r0q75j82ydf"},{"post_id":"ckx7pj53o002q1r0qd7j3es85","tag_id":"ckx7pj543004g1r0q17g2hlqo","_id":"ckx7pj549004v1r0qd3o5cyxi"},{"post_id":"ckx7pj53p002v1r0qh3khehtw","tag_id":"ckx7pj54100471r0q2n3zen17","_id":"ckx7pj54900501r0q8tc97fif"},{"post_id":"ckx7pj53r00331r0q60mg3238","tag_id":"ckx7pj543004g1r0q17g2hlqo","_id":"ckx7pj54b00561r0qc2w92mwx"},{"post_id":"ckx7pj53r00331r0q60mg3238","tag_id":"ckx7pj53l00221r0q1cki9i7o","_id":"ckx7pj54c00581r0q01wn029m"},{"post_id":"ckx7pj53s00361r0q4rna2x87","tag_id":"ckx7pj54100471r0q2n3zen17","_id":"ckx7pj54c005d1r0qf8flgaxk"},{"post_id":"ckx7pj53s003b1r0q7iuhf9j5","tag_id":"ckx7pj54c005a1r0q5rxjg5ed","_id":"ckx7pj54g005p1r0q3zlz1z6t"},{"post_id":"ckx7pj53s003b1r0q7iuhf9j5","tag_id":"ckx7pj54d005h1r0q33qw9h36","_id":"ckx7pj54g005r1r0q0fcuap7j"},{"post_id":"ckx7pj53u003j1r0qcr9xcxs0","tag_id":"ckx7pj54c005a1r0q5rxjg5ed","_id":"ckx7pj54m005z1r0qg3tu4b13"},{"post_id":"ckx7pj53u003j1r0qcr9xcxs0","tag_id":"ckx7pj54d005h1r0q33qw9h36","_id":"ckx7pj54m00611r0qcpgih7ai"},{"post_id":"ckx7pj53v003m1r0qdr5uhoce","tag_id":"ckx7pj54l005w1r0q7cbw01oy","_id":"ckx7pj54m00651r0qgxrw95zv"},{"post_id":"ckx7pj53x003q1r0q66k15vlo","tag_id":"ckx7pj54d005h1r0q33qw9h36","_id":"ckx7pj54o00691r0qbnbye9yc"},{"post_id":"ckx7pj53y003u1r0qh9kmhoq8","tag_id":"ckx7pj54c005a1r0q5rxjg5ed","_id":"ckx7pj54q006g1r0q9m1h10h1"},{"post_id":"ckx7pj53y003u1r0qh9kmhoq8","tag_id":"ckx7pj54o006a1r0qcbv32lla","_id":"ckx7pj54q006h1r0q509g3i3y"},{"post_id":"ckx7pj53z003x1r0q5r6k5w3z","tag_id":"ckx7pj54p006d1r0q5zlc3nkc","_id":"ckx7pj54q006l1r0q7bszf72g"},{"post_id":"ckx7pj54000421r0qhiuqeqxn","tag_id":"ckx7pj54100471r0q2n3zen17","_id":"ckx7pj54u006p1r0qdvv63yhe"},{"post_id":"ckx7pj54100451r0qca78f0bn","tag_id":"ckx7pj54p006d1r0q5zlc3nkc","_id":"ckx7pj54v006t1r0qcsycctg1"},{"post_id":"ckx7pj54200491r0q0gyga1kr","tag_id":"ckx7pj54p006d1r0q5zlc3nkc","_id":"ckx7pj54v006x1r0q7jqa9esy"},{"post_id":"ckx7pj542004c1r0q4svkhp6q","tag_id":"ckx7pj54l005w1r0q7cbw01oy","_id":"ckx7pj54v00711r0q87rb1dnq"},{"post_id":"ckx7pj543004h1r0q1o1acmsz","tag_id":"ckx7pj54c005a1r0q5rxjg5ed","_id":"ckx7pj54w00771r0q3luj62o0"},{"post_id":"ckx7pj543004h1r0q1o1acmsz","tag_id":"ckx7pj54o006a1r0qcbv32lla","_id":"ckx7pj54w007a1r0q5j5nc281"},{"post_id":"ckx7pj543004k1r0qh8834bld","tag_id":"ckx7pj54l005w1r0q7cbw01oy","_id":"ckx7pj54w007c1r0q4ibrg3n6"},{"post_id":"ckx7pj544004o1r0qbs6jfhhz","tag_id":"ckx7pj54w007b1r0q6ulba3wo","_id":"ckx7pj54w007g1r0q1rjz0x9i"},{"post_id":"ckx7pj546004q1r0qb7n51yli","tag_id":"ckx7pj54w007f1r0q9pz2434i","_id":"ckx7pj54x007k1r0qac3gd6e1"},{"post_id":"ckx7pj548004u1r0qaxc7cdyj","tag_id":"ckx7pj54w007f1r0q9pz2434i","_id":"ckx7pj54x007n1r0q6ll52wla"},{"post_id":"ckx7pj549004w1r0qd4e97is2","tag_id":"ckx7pj54x007m1r0q1l9j4sua","_id":"ckx7pj54x007r1r0qgrzz3zj5"},{"post_id":"ckx7pj549004z1r0qas4n6dvg","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj54y007w1r0qh39vc382"},{"post_id":"ckx7pj549004z1r0qas4n6dvg","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj54y007x1r0qdw5i5z1k"},{"post_id":"ckx7pj54a00511r0qdl4c8vsc","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj54y00831r0qgj0la746"},{"post_id":"ckx7pj54a00511r0qdl4c8vsc","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj54y00851r0q6epbckbg"},{"post_id":"ckx7pj54a00551r0qdhp3d3n3","tag_id":"ckx7pj54c005a1r0q5rxjg5ed","_id":"ckx7pj54z008a1r0q24clfkx2"},{"post_id":"ckx7pj54a00551r0qdhp3d3n3","tag_id":"ckx7pj54y00861r0q1eyghoy7","_id":"ckx7pj54z008b1r0q4wb1apdv"},{"post_id":"ckx7pj54b00571r0q7w3z63dv","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj54z008g1r0qbgoqhrj3"},{"post_id":"ckx7pj54b00571r0q7w3z63dv","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj54z008h1r0q870xd925"},{"post_id":"ckx7pj54c005b1r0qfdsuccyw","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj553008m1r0q3nppfui3"},{"post_id":"ckx7pj54c005b1r0qfdsuccyw","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj553008n1r0qc2njb570"},{"post_id":"ckx7pj54c005e1r0qc26e6uwl","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj553008u1r0qd0p5fz99"},{"post_id":"ckx7pj54c005e1r0qc26e6uwl","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj553008x1r0q6ykw57le"},{"post_id":"ckx7pj54d005f1r0qfw12cn4q","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj55400931r0q4oji7itx"},{"post_id":"ckx7pj54d005f1r0qfw12cn4q","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj55400961r0q3hf25zx7"},{"post_id":"ckx7pj54e005j1r0q3df75bed","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj554009d1r0q9stjbwft"},{"post_id":"ckx7pj54e005j1r0q3df75bed","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj555009g1r0q5e8a4y9f"},{"post_id":"ckx7pj54f005l1r0q8bfv78q6","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj555009n1r0qc2u848zc"},{"post_id":"ckx7pj54f005l1r0q8bfv78q6","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj555009q1r0qds0reigx"},{"post_id":"ckx7pj54g005o1r0q5hcpchak","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj556009x1r0q4tc91ev0"},{"post_id":"ckx7pj54g005o1r0q5hcpchak","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj55600a01r0qe7cchf3r"},{"post_id":"ckx7pj54g005q1r0qhc0j227s","tag_id":"ckx7pj54x007p1r0q7kxp3vff","_id":"ckx7pj55600a61r0q4apqbdc6"},{"post_id":"ckx7pj54g005q1r0qhc0j227s","tag_id":"ckx7pj54x007s1r0qcrz4bi3l","_id":"ckx7pj55600a81r0qbymp2ibk"},{"post_id":"ckx7pj54h005v1r0q7j95g3tc","tag_id":"ckx7pj55600a51r0q6rdh5og6","_id":"ckx7pj55600ab1r0qblfybxwm"},{"post_id":"ckx7pj54h005v1r0q7j95g3tc","tag_id":"ckx7pj55600aa1r0q6jaecd1f","_id":"ckx7pj55600ac1r0qbh5v3fp1"}],"Tag":[{"name":"git","_id":"ckx7pj51800071r0q99ig6ail"},{"name":"hexo","_id":"ckx7pj51l000c1r0q2pvq4h2b"},{"name":"闲谈","_id":"ckx7pj51w000i1r0qddg97wmt"},{"name":"vue","_id":"ckx7pj523000o1r0qgu6v6vaf"},{"name":"graphql","_id":"ckx7pj52w00171r0q370e55by"},{"name":"python","_id":"ckx7pj532001g1r0q12ta1x0u"},{"name":"爬虫","_id":"ckx7pj53b001n1r0qc1g0ezp8"},{"name":"uni-app","_id":"ckx7pj53h001u1r0qc7in4l81"},{"name":"网络请求","_id":"ckx7pj53l00221r0q1cki9i7o"},{"name":"前端面试","_id":"ckx7pj53n002d1r0qd6ez7auh"},{"name":"面试题","_id":"ckx7pj53o002l1r0q415hbouk"},{"name":"css","_id":"ckx7pj53s00391r0qe06jb5ss"},{"name":"前端","_id":"ckx7pj53x003p1r0qebjgc9xw"},{"name":"ie","_id":"ckx7pj53z003z1r0q1gsk9xu5"},{"name":"JavaScript","_id":"ckx7pj54100471r0q2n3zen17"},{"name":"flutter","_id":"ckx7pj543004g1r0q17g2hlqo"},{"name":"全栈之路","_id":"ckx7pj54c005a1r0q5rxjg5ed"},{"name":"node","_id":"ckx7pj54d005h1r0q33qw9h36"},{"name":"webpack","_id":"ckx7pj54l005w1r0q7cbw01oy"},{"name":"数据库","_id":"ckx7pj54o006a1r0qcbv32lla"},{"name":"TypeScript","_id":"ckx7pj54p006d1r0q5zlc3nkc"},{"name":"websocket","_id":"ckx7pj54w007b1r0q6ulba3wo"},{"name":"支付宝小程序","_id":"ckx7pj54w007f1r0q9pz2434i"},{"name":"年度总结","_id":"ckx7pj54x007m1r0q1l9j4sua"},{"name":"算法","_id":"ckx7pj54x007p1r0q7kxp3vff"},{"name":"LeetCode","_id":"ckx7pj54x007s1r0qcrz4bi3l"},{"name":"promise","_id":"ckx7pj54y00861r0q1eyghoy7"},{"name":"地图","_id":"ckx7pj55600a51r0q6rdh5og6"},{"name":"jsapi","_id":"ckx7pj55600aa1r0q6jaecd1f"}]}}